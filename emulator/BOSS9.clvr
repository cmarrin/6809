/*-------------------------------------------------------------------------
    This source file is a part of the MC6809 Simulator
    For the latest info, see http:www.marrin.org/
    Copyright (c) 2018-2024, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/
//
//  BOSS9.clvr
//  Basic Operating System Services for the 6809
//
//  Created by Chris Marrin on 5/4/24.
//

// This Clover program contains the BOSS9 monitor.
struct BOSS9
{
const uint8_t* MainPromptString = "BOSS9> ";
const uint8_t* LoadingPromptString = "Loading> ";
const uint16_t CmdBufSize = 100;

bool _needPrompt = false;
bool _needInstPrint = false;

uint8_t _cmdBuf[CmdBufSize];
uint16_t _cursor = 0;

uint16_t _startAddr = 0;

RunState _runState = RunState::Cmd;

uint16_t _startTime = 0;

enum RunState {
    Loading,
    Cmd,
    Running,
    Continuing,
    StepIn,
    StepOut,
    StepOver,
};

// These must match BOSS9.inc
enum Func {
    putc        = 0xFC00,   // output char in A to console
    puts        = 0xFC02,   // output string pointed to by X (null terminated)
    putsn       = 0xFC04,   // Output string pointed to by X for length in Y
    getc        = 0xFC06,   // Get char from console, return it in A
    peekc       = 0xFC08,   // Return in A a 1 if a char is available and 0 otherwise
    getsn       = 0xFC0A,   // Get a line terminated by \n, place in buffer
                            // pointed to by X, with max length in Y
    peeksn      = 0xFC0C,   // Return in A a 1 if a line is available and 0 otherwise.
                            // If available return length of line in Y
    exit        = 0xFC0E,   // Exit program. A contains exit code
    mon         = 0xFC10,   // Enter monitor
    ldStart     = 0xFC12,   // Start loading s-records
    ldLine      = 0xFC14,   // Load an s-record line
    ldEnd       = 0xFC16,   // End loading s-records

    printf      = 0xFC20,   // Formatted print: TOS=fmt, (varargs)
    format      = 0xFC22,   // Format string
    memset      = 0xFC24,   // Set memory: TOS=
    irand       = 0xFC26,   //
    imin        = 0xFC28,   //
    imax        = 0xFC2a,   //
    initargs    = 0xFC2c,   //
    argint8     = 0xFC2e,   //
    argint16    = 0xFC30,   //

    switch1     = 0xFC40,   // TOS -> N, Table, Value
    switch2     = 0xFC42,   // Table is a list of N value/addr pairs
                            //Binary search table looking for value
                            //when found return addr in X. if not
                            //found return Table + N * (<1/2> + 2)
    idiv8       = 0xFC44,
    idiv16      = 0xFC46,
    udiv8       = 0xFC48,
    udiv16      = 0xFC4a,
};

function uint8_t tolower(uint8_t c)
{
    return (c >= 'A' && c <= 'Z') ? (c + 0x20) ? c;
}

function bool casestrncmp(uint8_t* a, uint8_t* b, uint16_t n)
{
    while (*a && *b) {
        if (tolower(*a++) != tolower(*b++)) {
            return false;
        }
    }
    return *a == '\0' && *b == '\0';
}

function int16_t stringToNum(uint8_t* s, uint16_t size)
{
    bool ishex = false;
    uint16_t i = 0;
    if (s[0] == '$') {
        ishex = true;
        i = 1;
    }
    
    uint16_t num = 0;
    
    while (i < size) {
        uint8_t n = s[i++];
        if (n >= '0' && n <= '9') {
            n -= '0';
        } else if (ishex) {
            n = tolower(n);
            if (n >= 'a' && n <= 'f') {
                n -= 'a' - 10;
            }
        } else {
            return -1;
        }
        
        num = num * (ishex ? 16 : 10) + n;
    }
    return num;
}

function enterMonitor()
{
    _runState = RunState::Cmd;
    _needPrompt = true;
    _needInstPrint = true;
}

function bool checkEscape(uint8_t c)
{
    if (c == 0x1b) {
        // Escape - go back  to command mode
        _runState = RunState::Cmd;
        enterMonitor();
        core.printf("...ABORT...\n");
        return true;
    }
    return false;
}

function bool call(uint16_t ea)
{
    switch (Func(ea)) {
        case Func::putc:
            putc(engine->getA());
            return true;
        case Func::puts: {
            const char* s = reinterpret_cast<const char*>(engine->getAddr(engine->getX()));
            puts(s);
            return true;
        }
        case Func::getc: {
            engine->setA(getc());
            break;
        }
        case Func::exit:
            printf("Program exited with code %d\n", int32_t(engine->getA()));
            enterMonitor();
            _emu.setPC(_startAddr);
            return false;
        default: return false;
    }
    return false;
}

function getCommand()
{
    bool haveCmd = false;
    promptIfNeeded();

    while (true) {
        uint8_t c = core.getc();
        if (c <= 0) {
            break;
        }
        if (_cursor >= CmdBufSize - 1) {
            core.printf("*** cmdbuf ovfl\n");
            _cursor = 0;
            haveCmd = true;
            break;
        }

        if (c == '\n' || c == '\r') {
            haveCmd = true;
            _cmdBuf[_cursor] = '\0';
            break;
        }
        
        if (checkEscape(c)) {
            break;
        }
        
        if (c == 0x08 || c == 0x7f) {
            // backspace
            if (_echoBS) {
                putc(' ');
                putc(0x08);
            }
            if (_cursor != 0) {
                _cursor -= 1;
            }
            continue;
        }
        
        if (c < 0x20 || c > 0x7f) {
            // Some other control character, for now error
            core.printf("*** bad chr '0x%02x'\n", c);
            _cursor = 0;
            haveCmd = true;
            break;
        }
        
        _cmdBuf[_cursor++] = char(c);
    }
        
    if (haveCmd) {
        _needPrompt = true;
        if (_cursor > 0) {
            processCommand();
        }
    }
}

// Parse cmd buffer, splitting words by space. Space before first non-space char is ignored.
// Place index and length of up to 3 elements in elements array and return the number of 
// elements. If more than 3 words, return 0.
function uint8_t parseCmd(uint16_t* elements)
{
    uint16_t elementIndex = 0;
    uint16_t i = 0;
    uint16_t wordStart = 0;
    
    
    while (_cmdbuf[i] != '\0') {
        // Get past spaces
        while (true) {
            if (_cmdbuf[i] != ' ') {
                break;
            }
            i += 1;
        }
        
        // Get the next word
        wordStart = i;
        elements[elementIndex++] = wordStart;
        
        while (true) {
            char c = _cmdbuf[i];
            
            if (c == '\0') {
                break;
            }
            
            if (c == ' ') {
                // Finished a word
                elements[elementIndex++] = i - wordStart;
                if (elementIndex > 2) {
                    return 0;
                }
                break;
            }
            i += 1;
        }
    }
    
    return elementIndex / 2;
}

function processCommand()
{
    if (_runState == RunState::Cmd) {
        // Parse Command
        uint16_t elements[6];
        if (parseCmd(elements)) {
            executeCommand(elements);
        }
        return;
    }
        
    if (_runState == RunState::Loading) {
        bool finished;
        if (!loadLine(_cmdBuf, finished)) {
            _runState = RunState::Cmd;
            core.printf("load err\n");
        }
        if (finished) {
            _startAddr = loadEnd();
            _runState = RunState::Cmd;
            core.printf("Load cmpl, addr=0x%04x\n", _startAddr);
        }
    }
    _cursor = 0;
}

function showBreakpoint(uint8_t i) const
{
    BreakpointEntry entry;
    if (_emu.breakpoint(i, entry)) {
        core.printf("    Breakpoint[%d] -> $%04x (%sabled)\n", i, entry.addr, (entry.status == BPStatus::Enabled) ? "en" : "dis");
    }
}

function bool executeCommand(uint16_t* elements)
{
    uint8_t* cmd = _cmdBuf[elements[0]];
    uint16_t cmdSize = elements[1];
    
    if (casestrncmp(cmd, "help", size) || casestrncmp(cmd, "h", size) || casestrncmp(cmd, "?", size)) {
        if (elements[3] == 0) {
            core.printf("BOSS9 Monitor Commands:\n");
            core.printf("\n");
            core.printf("    ld          - Load SRecords\n");
            core.printf("    r           - run at cur addr\n");
            core.printf("    r (<a>)     - run at <a>\n");
            core.printf("    c (<a>)     - continue\n");
            core.printf("    b           - show brpts\n");
            core.printf("    b <a>       - set bkpt at <a>\n");
            core.printf("    bc          - clear all bkpts\n");
            core.printf("    bc <n>      - clear bkpt <n>\n");
            core.printf("    be          - enable all bkpts\n");
            core.printf("    be <n>      - enable bkpt <n>\n");
            core.printf("    bd          - disable all bkpts\n");
            core.printf("    bd <n>      - disable bkpt <n>\n");
            core.printf("    n           - step over\n");
            core.printf("    s           - step into\n");
            core.printf("    o           - step out\n");
            core.printf("    l           - list 5 insts\n");
            core.printf("    l <n>       - list <n> insts\n");
            core.printf("    la <a>      - list 5 insts at <a>\n");
            core.printf("    la <a> <n>  - list <n> insts at <a>\n");
            core.printf("    a           - show cur inst\n");
            core.printf("    a <a>       - set cur addr to <a>\n");
            core.printf("    regs        - show all regs\n");
            core.printf("    reg <r>     - show reg <r>\n");
            core.printf("    reg <r> <v> - set reg <r> to <v>\n");

            return true;
        }
        printf("Individual command help not yet available\n");
        return false;
    }
    
    // Load file
    if (casestrncmp(cmd, "ld", size)) {
        if (elements[3] != 0 || elements[5] != 0) {
            return false;
        }
        
        // Load s19 file
        core.printf("Ready to start loading. ESC to abort\n");
        _runState = RunState::Loading;
        loadStart();
        return true;
    }

    // Run at <addr> or at current addr
    if (casestrncmp(cmd, "r", size)) {
        if (!cmdElements[2].empty()) {
            return false;
        }
        
        if (!cmdElements[1].empty()) {
            uint32_t num;
            if (!toNum(cmdElements[1], num)) {
                return false;
            }
            _startAddr = num;
        }
        
        // run
        leaveMonitor();
        printf("Running at address $%04x\n", _startAddr);
        _emu.setPC(_startAddr);
        return true;
    }
    
    // Continue running at PC
    if (casestrncmp(cmd, "c", size)) {
        if (!cmdElements[1].empty() || !cmdElements[2].empty()) {
            return false;
        }
        
        // run from current PC
        leaveMonitor();
        _runState = RunState::Continuing;
        printf("Continuing at address $%04x\n", _emu.getPC());
        return true;
    }
    
    // Show or set breakpoint
    if (casestrncmp(cmd, "b", size)) {
        if (!cmdElements[2].empty()) {
            return false;
        }

        if (cmdElements[1].empty()) {
            // Show breakpoints
            bool haveBreakpoints = false;
        
            for (auto i = 0; i < NumBreakpoints; ++i) {
                BreakpointEntry entry;
                if (_emu.breakpoint(i, entry)) {
                    showBreakpoint(i);
                    haveBreakpoints = true;
                }
            }
            if (!haveBreakpoints) {
                printf("    No breakpoints\n");
            }
            return true;
        }
        
        // Set breakpoint
        uint32_t num;
        if (!toNum(cmdElements[1], num)) {
            return false;
        }
        
        uint8_t breakpointNum;
        if (!_emu.setBreakpoint(num, breakpointNum)) {
            printf("too many breakpoints\n");
            return false;
        }
        
        showBreakpoint(breakpointNum);
        return true;
    }
    
    // Clear all or one breakpoint
    if(casestrncmp(cmd, "bc", size)) {
        if (!cmdElements[2].empty()) {
            return false;
        }

        if (cmdElements[1].empty()) {
            _emu.clearAllBreakpoints();
            return true;
        }
        
        uint32_t num;
        if (!toNum(cmdElements[1], num)) {
            return false;
        }

        if (!_emu.clearBreakpoint(num)) {
            printf("invalid breakpoint index\n");
            return false;
        }
        return true;
    }

    // Enable all or one breakpoint
    if(casestrncmp(cmd, "be", size)) {
        if (!cmdElements[2].empty()) {
            return false;
        }

        if (cmdElements[1].empty()) {
            _emu.enableAllBreakpoints();
            return true;
        }
        
        uint32_t num;
        if (!toNum(cmdElements[1], num)) {
            return false;
        }

        if (!_emu.enableBreakpoint(num)) {
            printf("invalid breakpoint index\n");
            return false;
        }
        return true;
    }

    // Disable all or one breakpoint
    if(casestrncmp(cmd, "bd", size)) {
        if (!cmdElements[2].empty()) {
            return false;
        }

        if (cmdElements[1].empty()) {
            _emu.disableAllBreakpoints();
            return true;
        }
        
        uint32_t num;
        if (!toNum(cmdElements[1], num)) {
            return false;
        }

        if (!_emu.disableBreakpoint(num)) {
            printf("invalid breakpoint index\n");
            return false;
        }
        return true;
    }

    // Step
    if (casestrncmp(cmd, "s", size)) {
        _runState = RunState::StepIn;
    } else if (casestrncmp(cmd, "n", size)) {
        _runState = RunState::StepOver;
    } else if (casestrncmp(cmd, "o", size)) {
        _runState = RunState::StepOut;
    }
    
    // list next 5 or <n> instructions from current addr
    if(casestrncmp(cmd, "l", size)) {
        if (!cmdElements[2].empty()) {
            return false;
        }

        uint32_t num = 5;
        if (!cmdElements[1].empty()) {
            if (!toNum(cmdElements[1], num)) {
                return false;
            }
        }
        _emu.printInstructions(_emu.getPC(), num);
        return true;
    }

    // list next 5 or <n> instructions at <addr>
    if(casestrncmp(cmd, "la", size)) {
        if (cmdElements[1].empty()) {
            return false;
        }

        uint32_t addr;
        if (!toNum(cmdElements[1], addr)) {
            return false;
        }
        
        if (addr > 65535) {
            return false;
        }

        uint32_t num = 5;
        if (!cmdElements[2].empty()) {        
            if (!toNum(cmdElements[1], num)) {
                return false;
            }
        }
        _emu.printInstructions(addr, num);
        return true;
    }

    // show current addr or set it to <addr>
    if(casestrncmp(cmd, "a", size)) {
        if (cmdElements[1].empty()) {
            _emu.printInstructions(_emu.getPC(), 1);
            return true;
        }

        uint32_t addr;
        if (!toNum(cmdElements[1], addr)) {
            return false;
        }
        
        if (addr > 65535) {
            return false;
        }
        _emu.setPC(addr);
        _emu.printInstructions(_emu.getPC(), 1);
        return true;
    }

    // show all regs
    if(casestrncmp(cmd, "regs", size)) {
        if (!cmdElements[1].empty()) {
            return true;
        }
        
        printf("    A:%02x B:%02x D:%04x X:%04x Y:%04x\n",
            _emu.getA(), _emu.getB(), _emu.getD(), _emu.getX(), _emu.getY());
        printf("    U:%04x S:%04x PC:%04x CC:%02x DP:%02x\n",
            _emu.getU(), _emu.getS(), _emu.getPC(), _emu.getCC(), _emu.getDP());
        return true;
    }

    // show or set reg
    if(casestrncmp(cmd, "reg", size)) {
        if (cmdElements[1].empty()) {
            return false;
        }
        
        const m8r::string& reg = cmdElements[1].tolower();
        
        bool setReg = false;
        uint32_t v = 0;
        if (!cmdElements[2].empty()) {
           if (!toNum(cmdElements[2], v)) {
                return false;
            }
            return false;
        }
        
        if (reg == "a") {
            if (setReg) {
                _emu.setA(v);
            }
            printf("    A:%02x\n", _emu.getA());
        }
        if (reg == "b") {
            if (setReg) {
                _emu.setB(v);
            }
            printf("    B:%02x\n", _emu.getB());
        }
        if (reg == "d") {
            if (setReg) {
                _emu.setD(v);
            }
            printf("    D:%02x\n", _emu.getD());
        }
        if (reg == "x") {
            if (setReg) {
                _emu.setX(v);
            }
            printf("    X:%02x\n", _emu.getX());
        }
        if (reg == "y") {
            if (setReg) {
                _emu.setY(v);
            }
            printf("    Y:%02x\n", _emu.getY());
        }
        if (reg == "u") {
            if (setReg) {
                _emu.setU(v);
            }
            printf("    U:%02x\n", _emu.getU());
        }
        if (reg == "s") {
            if (setReg) {
                _emu.setS(v);
            }
            printf("    S:%02x\n", _emu.getS());
        }
        if (reg == "cc") {
            if (setReg) {
                _emu.setCC(v);
            }
            printf("    CC:%02x\n", _emu.getCC());
        }
        if (reg == "pc") {
            if (setReg) {
                _emu.setPC(v);
            }
            printf("    PC:%02x\n", _emu.getPC());
        }
        if (reg == "dp") {
            if (setReg) {
                _emu.setDP(v);
            }
            printf("    DP:%02x\n", _emu.getDP());
        }
        return true;
    }

    if (_runState != RunState::Cmd) {
        return cmdElements[1].empty() && cmdElements[2].empty();
    }
    
    core.printf("Invalid command\n");
    return false;
}

function bool startExecution(uint16_t addr, bool startInMonitor)
{
    if (startInMonitor) {
        enterMonitor();
    } else {
        leaveMonitor();
    }
    _emu.setPC(addr);
    _startAddr = addr;
    
    promptIfNeeded();
    return true;
}

function bool continueExecution()
{
    if (_runState == RunState::Cmd || _runState == RunState::Loading) {
        getCommand();
        return true;
    }
    
    // See if we got an ESC
    int c = getc();
    if (checkEscape(c)) {
        printf("*** Stopped at $%04x\n", _emu.getPC());
        return true;
    }
    
    // At this point the RunState is anything but Cmd. if its Running
    // it either means we executed the Run command from the monitor
    // or we're looping from main. If it's Continuing it means we
    // just executed the Continue command from the monitor and we
    // need to avoid taking a breakpoint at the current PC (or we'd
    // never execute any instructions). If this is the case we need
    // to change the state to Running after execute() so we run normally
    // the next time through. The other states are for stepping through
    // the code which execute() will deal with.
    bool retval = _emu.execute(_runState);
    if (_runState == RunState::Continuing) {
        _runState = RunState::Running;
    }
    return retval;
}

};
