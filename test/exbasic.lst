                      (      exbasic.asm):00001             include BOSS9.inc
                      (        BOSS9.inc):00001         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00002         *    This source file is a part of the MC6809 Simulator
                      (        BOSS9.inc):00003         *    For the latest info, see http:www.marrin.org/
                      (        BOSS9.inc):00004         *    Copyright (c) 2018-2024, Chris Marrin
                      (        BOSS9.inc):00005         *    All rights reserved.
                      (        BOSS9.inc):00006         *    Use of this source code is governed by the MIT license that can be
                      (        BOSS9.inc):00007         *    found in the LICENSE file.
                      (        BOSS9.inc):00008         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00009         *
                      (        BOSS9.inc):00010         *  BOSS9.inc
                      (        BOSS9.inc):00011         *  Assembly language function and address includes for BOSS9
                      (        BOSS9.inc):00012         *
                      (        BOSS9.inc):00013         *  Created by Chris Marrin on 5/4/24.
                      (        BOSS9.inc):00014         *
                      (        BOSS9.inc):00015         
                      (        BOSS9.inc):00016         *
                      (        BOSS9.inc):00017         * Console functions
                      (        BOSS9.inc):00018         *
     FC00             (        BOSS9.inc):00019         putc    equ     $FC00   ; output char in A to console
     FC02             (        BOSS9.inc):00020         puts    equ     $FC02   ; output string pointed to by X (null terminated)
     FC04             (        BOSS9.inc):00021         putsn   equ     $FC04   ; Output string pointed to by X for length in Y
     FC06             (        BOSS9.inc):00022         getc    equ     $FC06   ; Get char from console, return it in A
     FC08             (        BOSS9.inc):00023         peekc   equ     $FC08   ; Return in A a 1 if a char is available and 0 otherwise
     FC0A             (        BOSS9.inc):00024         getsn   equ     $FC0A   ; Get a line terminated by \n, place in buffer
                      (        BOSS9.inc):00025                                 ; pointed to by X, with max length in Y
     FC0C             (        BOSS9.inc):00026         peeks   equ     $FC0C   ; Return in A a 1 if a line is available and 0 otherwise.
                      (        BOSS9.inc):00027                                 ; If available return length of line in Y
                      (        BOSS9.inc):00028         
     FC0E             (        BOSS9.inc):00029         exit    equ     $FC0E   ; Exit program. A ccontains exit code
     FC10             (        BOSS9.inc):00030         mon     equ     $FC10   ; Enter monitor
     FC12             (        BOSS9.inc):00031         ldStart equ     $FC12   ; Start loading s-records
     FC14             (        BOSS9.inc):00032         ldLine  equ     $FC14   ; Load an s-record line
     FC16             (        BOSS9.inc):00033         ldEnd   equ     $FC16   ; End loading s-records
                      (        BOSS9.inc):00034         
                      (        BOSS9.inc):00035         *
                      (        BOSS9.inc):00036         * Core functions
                      (        BOSS9.inc):00037         *
     FC20             (        BOSS9.inc):00038         printf   equ    $FC20   ; Formatted print: TOS=fmt, (varargs)
     FC22             (        BOSS9.inc):00039         format   equ    $FC22   ; Format string
     FC24             (        BOSS9.inc):00040         memset   equ    $FC24   ; Set memory: TOS=
     FC26             (        BOSS9.inc):00041         irand    equ    $FC26   ;
     FC28             (        BOSS9.inc):00042         imin     equ    $FC28   ;
     FC2A             (        BOSS9.inc):00043         imax     equ    $FC2A   ;
     FC2C             (        BOSS9.inc):00044         initargs equ    $FC2C   ;
     FC2E             (        BOSS9.inc):00045         argint8  equ    $FC2E   ;
     FC30             (        BOSS9.inc):00046         argint16 equ    $FC30   ;
                      (        BOSS9.inc):00047         
                      (        BOSS9.inc):00048         *
                      (        BOSS9.inc):00049         * Helper functions
                      (        BOSS9.inc):00050         *
     FC40             (        BOSS9.inc):00051         switch1  equ    $FC40   ; TOS -> N, Table, Value
     FC42             (        BOSS9.inc):00052         switch2  equ    $FC42   ; Table is a list of N value/addr pairs
                      (        BOSS9.inc):00053                                 ; Binary search table looking for value
                      (        BOSS9.inc):00054                                 ; when found return addr in X. if not
                      (        BOSS9.inc):00055                                 ; found return Table + N * (<1/2> + 2)
     FC44             (        BOSS9.inc):00056         idiv8   equ     $FC44
     FC46             (        BOSS9.inc):00057         idiv16  equ     $FC46
     FC48             (        BOSS9.inc):00058         udiv8   equ     $FC48
     FC4A             (        BOSS9.inc):00059         udiv16  equ     $FC4a
                      (        BOSS9.inc):00060         
                      (        BOSS9.inc):00061         * Misc equates
                      (        BOSS9.inc):00062         
     000A             (        BOSS9.inc):00063         newline equ     $0a
                      (        BOSS9.inc):00064                                 
                      (        BOSS9.inc):00065         
                      (      exbasic.asm):00002         
                      (      exbasic.asm):00003         
     A000             (      exbasic.asm):00004         UART      EQU  $A000
     A001             (      exbasic.asm):00005         RECEV     EQU  UART+1
     A001             (      exbasic.asm):00006         TRANS     EQU  UART+1
     A000             (      exbasic.asm):00007         USTAT     EQU  UART
     A000             (      exbasic.asm):00008         UCTRL     EQU  UART
                      (      exbasic.asm):00009         
     0008             (      exbasic.asm):00010         BS        EQU  8              ; BACKSPACE
     000D             (      exbasic.asm):00011         CR        EQU  $D             ; ENTER KEY
     001B             (      exbasic.asm):00012         ESC       EQU  $1B            ; ESCAPE CODE
     0020             (      exbasic.asm):00013         SPACE     EQU  $20            ; SPACE (BLANK)
     003A             (      exbasic.asm):00014         STKBUF    EQU  58             ; STACK BUFFER ROOM
     00FA             (      exbasic.asm):00015         LBUFMX    EQU  250            ; MAX NUMBER OF CHARS IN A BASIC LINE
     00FA             (      exbasic.asm):00016         MAXLIN    EQU  $FA            ; MAXIMUM MS BYTE OF LINE NUMBER
                      (      exbasic.asm):00017         * PSEUDO OPS
     0021             (      exbasic.asm):00018         SKP1      EQU  $21            ; OP CODE OF BRN - SKIP ONE BYTE
     008C             (      exbasic.asm):00019         SKP2      EQU  $8C            ; OP CODE OF CMPX # - SKIP TWO BYTES
     0086             (      exbasic.asm):00020         SKP1LD    EQU  $86            ; OP CODE OF LDA # - SKIP THE NEXT BYTE
                      (      exbasic.asm):00021         *                             ; AND LOAD THE VALUE OF THAT BYTE INTO ACCA - THIS
                      (      exbasic.asm):00022         *                             ; IS USUALLY USED TO LOAD ACCA WITH A NON ZERO VALUE
     0015             (      exbasic.asm):00023         RTS_LOW   EQU  $15            ; 6850 ACIA CONTROL REGISTER: RX INT DISABLED, RTS LOW, TX INT DISABLED, 8N1, CLK/16
                      (      exbasic.asm):00024                   ORG  0
0000                  (      exbasic.asm):00025         ENDFLG    RMB  1              ; STOP/END FLAG: POSITIVE=STOP, NEG=END
0001                  (      exbasic.asm):00026         CHARAC    RMB  1              ; TERMINATOR FLAG 1
0002                  (      exbasic.asm):00027         ENDCHR    RMB  1              ; TERMINATOR FLAG 2
0003                  (      exbasic.asm):00028         TMPLOC    RMB  1              ; SCRATCH VARIABLE
0004                  (      exbasic.asm):00029         IFCTR     RMB  1              ; IF COUNTER - HOW MANY IF STATEMENTS IN A LINE
0005                  (      exbasic.asm):00030         DIMFLG    RMB  1              ; *DV* ARRAY FLAG 0=EVALUATE, 1=DIMENSIONING
0006                  (      exbasic.asm):00031         VALTYP    RMB  1              ; *DV* *PV TYPE FLAG: 0=NUMERIC, $FF=STRING
0007                  (      exbasic.asm):00032         GARBFL    RMB  1              ; *TV STRING SPACE HOUSEKEEPING FLAG
0008                  (      exbasic.asm):00033         ARYDIS    RMB  1              ; DISABLE ARRAY SEARCH: 00=ALLOW SEARCH
0009                  (      exbasic.asm):00034         INPFLG    RMB  1              ; *TV INPUT FLAG: READ=0, INPUT<>0
000A                  (      exbasic.asm):00035         RELFLG    RMB  1              ; *TV RELATIONAL OPERATOR FLAG
000B                  (      exbasic.asm):00036         TEMPPT    RMB  2              ; *PV TEMPORARY STRING STACK POINTER
000D                  (      exbasic.asm):00037         LASTPT    RMB  2              ; *PV ADDR OF LAST USED STRING STACK ADDRESS
000F                  (      exbasic.asm):00038         TEMPTR    RMB  2              ; TEMPORARY POINTER
0011                  (      exbasic.asm):00039         TMPTR1    RMB  2              ; TEMPORARY DESCRIPTOR STORAGE (STACK SEARCH)
0013                  (      exbasic.asm):00040         FPA2      RMB  4              ; FLOATING POINT ACCUMULATOR #2 MANTISSA
0017                  (      exbasic.asm):00041         BOTSTK    RMB  2              ; BOTTOM OF STACK AT LAST CHECK
0019                  (      exbasic.asm):00042         TXTTAB    RMB  2              ; *PV BEGINNING OF BASIC PROGRAM
001B                  (      exbasic.asm):00043         VARTAB    RMB  2              ; *PV START OF VARIABLES
001D                  (      exbasic.asm):00044         ARYTAB    RMB  2              ; *PV START OF ARRAYS
001F                  (      exbasic.asm):00045         ARYEND    RMB  2              ; *PV END OF ARRAYS (+1)
0021                  (      exbasic.asm):00046         FRETOP    RMB  2              ; *PV START OF STRING STORAGE (TOP OF FREE RAM)
0023                  (      exbasic.asm):00047         STRTAB    RMB  2              ; *PV START OF STRING VARIABLES
0025                  (      exbasic.asm):00048         FRESPC    RMB  2              ; UTILITY STRING POINTER
0027                  (      exbasic.asm):00049         MEMSIZ    RMB  2              ; *PV TOP OF STRING SPACE
0029                  (      exbasic.asm):00050         OLDTXT    RMB  2              ; SAVED LINE NUMBER DURING A "STOP"
002B                  (      exbasic.asm):00051         BINVAL    RMB  2              ; BINARY VALUE OF A CONVERTED LINE NUMBER
002D                  (      exbasic.asm):00052         OLDPTR    RMB  2              ; SAVED INPUT PTR DURING A "STOP"
002F                  (      exbasic.asm):00053         TINPTR    RMB  2              ; TEMPORARY INPUT POINTER STORAGE
0031                  (      exbasic.asm):00054         DATTXT    RMB  2              ; *PV 'DATA' STATEMENT LINE NUMBER POINTER
0033                  (      exbasic.asm):00055         DATPTR    RMB  2              ; *PV 'DATA' STATEMENT ADDRESS POINTER
0035                  (      exbasic.asm):00056         DATTMP    RMB  2              ; DATA POINTER FOR 'INPUT' & 'READ'
0037                  (      exbasic.asm):00057         VARNAM    RMB  2              ; *TV TEMP STORAGE FOR A VARIABLE NAME
0039                  (      exbasic.asm):00058         VARPTR    RMB  2              ; *TV POINTER TO A VARIABLE DESCRIPTOR
003B                  (      exbasic.asm):00059         VARDES    RMB  2              ; TEMP POINTER TO A VARIABLE DESCRIPTOR
003D                  (      exbasic.asm):00060         RELPTR    RMB  2              ; POINTER TO RELATIONAL OPERATOR PROCESSING ROUTINE
003F                  (      exbasic.asm):00061         TRELFL    RMB  1              ; TEMPORARY RELATIONAL OPERATOR FLAG BYTE
                      (      exbasic.asm):00062         * FLOATING POINT ACCUMULATORS #3,4 & 5 ARE MOSTLY
                      (      exbasic.asm):00063         * USED AS SCRATCH PAD VARIABLES.
                      (      exbasic.asm):00064         ** FLOATING POINT ACCUMULATOR #3 :PACKED: ($40-$44)
0040                  (      exbasic.asm):00065         V40       RMB  1
0041                  (      exbasic.asm):00066         V41       RMB  1
0042                  (      exbasic.asm):00067         V42       RMB  1
0043                  (      exbasic.asm):00068         V43       RMB  1
0044                  (      exbasic.asm):00069         V44       RMB  1
                      (      exbasic.asm):00070         ** FLOATING POINT ACCUMULATOR #4 :PACKED: ($45-$49)
0045                  (      exbasic.asm):00071         V45       RMB  1
0046                  (      exbasic.asm):00072         V46       RMB  1
0047                  (      exbasic.asm):00073         V47       RMB  1
0048                  (      exbasic.asm):00074         V48       RMB  2
                      (      exbasic.asm):00075         ** FLOATING POINT ACCUMULATOR #5 :PACKED: ($4A-$4E)
004A                  (      exbasic.asm):00076         V4A       RMB  1
004B                  (      exbasic.asm):00077         V4B       RMB  2
004D                  (      exbasic.asm):00078         V4D       RMB  2
                      (      exbasic.asm):00079         ** FLOATING POINT ACCUMULATOR #0
004F                  (      exbasic.asm):00080         FP0EXP    RMB  1              ; *PV FLOATING POINT ACCUMULATOR #0 EXPONENT
0050                  (      exbasic.asm):00081         FPA0      RMB  4              ; *PV FLOATING POINT ACCUMULATOR #0 MANTISSA
0054                  (      exbasic.asm):00082         FP0SGN    RMB  1              ; *PV FLOATING POINT ACCUMULATOR #0 SIGN
0055                  (      exbasic.asm):00083         COEFCT    RMB  1              ; POLYNOMIAL COEFFICIENT COUNTER
0056                  (      exbasic.asm):00084         STRDES    RMB  5              ; TEMPORARY STRING DESCRIPTOR
005B                  (      exbasic.asm):00085         FPCARY    RMB  1              ; FLOATING POINT CARRY BYTE
                      (      exbasic.asm):00086         ** FLOATING POINT ACCUMULATOR #1
005C                  (      exbasic.asm):00087         FP1EXP    RMB  1              ; *PV FLOATING POINT ACCUMULATOR #1 EXPONENT
005D                  (      exbasic.asm):00088         FPA1      RMB  4              ; *PV FLOATING POINT ACCUMULATOR #1 MANTISSA
0061                  (      exbasic.asm):00089         FP1SGN    RMB  1              ; *PV FLOATING POINT ACCUMULATOR #1 SIGN
0062                  (      exbasic.asm):00090         RESSGN    RMB  1              ; SIGN OF RESULT OF FLOATING POINT OPERATION
0063                  (      exbasic.asm):00091         FPSBYT    RMB  1              ; FLOATING POINT SUB BYTE (FIFTH BYTE)
0064                  (      exbasic.asm):00092         COEFPT    RMB  2              ; POLYNOMIAL COEFFICIENT POINTER
0066                  (      exbasic.asm):00093         LSTTXT    RMB  2              ; CURRENT LINE POINTER DURING LIST
0068                  (      exbasic.asm):00094         CURLIN    RMB  2              ; *PV CURRENT LINE # OF BASIC PROGRAM, $FFFF = DIRECT
006A                  (      exbasic.asm):00095         DEVCFW    RMB  1              ; *TV TAB FIELD WIDTH
006B                  (      exbasic.asm):00096         DEVLCF    RMB  1              ; *TV TAB ZONE
006C                  (      exbasic.asm):00097         DEVPOS    RMB  1              ; *TV PRINT POSITION
006D                  (      exbasic.asm):00098         DEVWID    RMB  1              ; *TV PRINT WIDTH
006E                  (      exbasic.asm):00099         RSTFLG    RMB  1              ; *PV WARM START FLAG: $55=WARM, OTHER=COLD
006F                  (      exbasic.asm):00100         RSTVEC    RMB  2              ; *PV WARM START VECTOR - JUMP ADDRESS FOR WARM START
0071                  (      exbasic.asm):00101         TOPRAM    RMB  2              ; *PV TOP OF RAM
0073                  (      exbasic.asm):00102         IKEYIM    RMB  1              ; *TV INKEY$ RAM IMAGE
0074                  (      exbasic.asm):00103         ZERO      RMB  2              ; *PV DUMMY - THESE TWO BYTES ARE ALWAYS ZERO
                      (      exbasic.asm):00104         * THE FOLLOWING BYTES ARE MOVED DOWN FROM ROM
0076                  (      exbasic.asm):00105         LPTCFW    RMB  1              ; 16
0077                  (      exbasic.asm):00106         LPTLCF    RMB  1              ; 112
0078                  (      exbasic.asm):00107         LPTWID    RMB  1              ; 132
0079                  (      exbasic.asm):00108         LPTPOS    RMB  1              ; 0
007A                  (      exbasic.asm):00109         EXECJP    RMB  2              ; LB4AA
                      (      exbasic.asm):00110         
                      (      exbasic.asm):00111         * THIS ROUTINE PICKS UP THE NEXT INPUT CHARACTER FROM
                      (      exbasic.asm):00112         * BASIC. THE ADDRESS OF THE NEXT BASIC BYTE TO BE
                      (      exbasic.asm):00113         * INTERPRETED IS STORED AT CHARAD.
007C 0C84             (      exbasic.asm):00114         GETNCH    INC  <CHARAD+1      ; *PV INCREMENT LS BYTE OF INPUT POINTER
007E 2602             (      exbasic.asm):00115                   BNE  GETCCH         ; *PV BRANCH IF NOT ZERO (NO CARRY)
0080 0C83             (      exbasic.asm):00116                   INC  <CHARAD        ; *PV INCREMENT MS BYTE OF INPUT POINTER
0082 B6               (      exbasic.asm):00117         GETCCH    FCB  $B6            ; *PV OP CODE OF LDA EXTENDED
0083                  (      exbasic.asm):00118         CHARAD    RMB  2              ; *PV THESE 2 BYTES CONTAIN ADDRESS OF THE CURRENT
                      (      exbasic.asm):00119         *         *    CHARACTER WHICH THE BASIC INTERPRETER IS
                      (      exbasic.asm):00120         *         *    PROCESSING
0085 7EDCA8           (      exbasic.asm):00121                   JMP  BROMHK         ; JUMP BACK INTO THE BASIC RUM
                      (      exbasic.asm):00122         
0088                  (      exbasic.asm):00123         VAB       RMB  1              ; = LOW ORDER FOUR BYTES OF THE PRODUCT
0089                  (      exbasic.asm):00124         VAC       RMB  1              ; = OF A FLOATING POINT MULTIPLICATION
008A                  (      exbasic.asm):00125         VAD       RMB  1              ; = THESE BYTES ARE USE AS RANDOM DATA
008B                  (      exbasic.asm):00126         VAE       RMB  1              ; = BY THE RND STATEMENT
                      (      exbasic.asm):00127         
                      (      exbasic.asm):00128         * EXTENDED BASIC VARIABLES
008C                  (      exbasic.asm):00129         TRCFLG    RMB  1              ; *PV TRACE FLAG 0=OFF ELSE=ON
008D                  (      exbasic.asm):00130         USRADR    RMB  2              ; *PV ADDRESS OF THE START OF USR VECTORS
                      (      exbasic.asm):00131         
                      (      exbasic.asm):00132         * EXTENDED BASIC SCRATCH PAD VARIABLES
008F                  (      exbasic.asm):00133         VCF       RMB  2
0091                  (      exbasic.asm):00134         VD1       RMB  2
0093                  (      exbasic.asm):00135         VD3       RMB  2
0095                  (      exbasic.asm):00136         VD5       RMB  2
0097                  (      exbasic.asm):00137         VD7       RMB  1
0098                  (      exbasic.asm):00138         VD8       RMB  1
0099                  (      exbasic.asm):00139         VD9       RMB  1
009A                  (      exbasic.asm):00140         VDA       RMB  1
009B                  (      exbasic.asm):00141         SW3VEC    RMB  3
009E                  (      exbasic.asm):00142         SW2VEC    RMB  3
00A1                  (      exbasic.asm):00143         SWIVEC    RMB  3
00A4                  (      exbasic.asm):00144         NMIVEC    RMB  3
00A7                  (      exbasic.asm):00145         IRQVEC    RMB  3
00AA                  (      exbasic.asm):00146         FRQVEC    RMB  3
00AD                  (      exbasic.asm):00147         USRJMP    RMB  3              ; JUMP ADDRESS FOR BASIC'S USR FUNCTION
00B0                  (      exbasic.asm):00148         RVSEED    RMB  1              ; * FLOATING POINT RANDOM NUMBER SEED EXPONENT
00B1                  (      exbasic.asm):00149                   RMB  4              ; * MANTISSA: INITIALLY SET TO $804FC75259
                      (      exbasic.asm):00150         
                      (      exbasic.asm):00151         **** USR FUNCTION VECTOR ADDRESSES (EX BASIC ONLY)
00B5                  (      exbasic.asm):00152         USR0      RMB  2              ; USR 0 VECTOR
00B7                  (      exbasic.asm):00153                   RMB  2              ; USR 1
00B9                  (      exbasic.asm):00154                   RMB  2              ; USR 2
00BB                  (      exbasic.asm):00155                   RMB  2              ; USR 3
00BD                  (      exbasic.asm):00156                   RMB  2              ; USR 4
00BF                  (      exbasic.asm):00157                   RMB  2              ; USR 5
00C1                  (      exbasic.asm):00158                   RMB  2              ; USR 6
00C3                  (      exbasic.asm):00159                   RMB  2              ; USR 7
00C5                  (      exbasic.asm):00160                   RMB  2              ; USR 8
00C7                  (      exbasic.asm):00161                   RMB  2              ; USR 9
                      (      exbasic.asm):00162         
00C9                  (      exbasic.asm):00163         STRSTK    RMB  8*5            ; STRING DESCRIPTOR STACK
00F1                  (      exbasic.asm):00164         LINHDR    RMB  2              ; LINE INPUT BUFFER HEADER
00F3                  (      exbasic.asm):00165         LINBUF    RMB  LBUFMX+1       ; BASIC LINE INPUT BUFFER
01EE                  (      exbasic.asm):00166         STRBUF    RMB  41             ; STRING BUFFER
                      (      exbasic.asm):00167         
                      (      exbasic.asm):00168         * CFM - This is the memory for the Basic program. In the original
                      (      exbasic.asm):00169         * code we search up from here and test whether we have valid RAM
                      (      exbasic.asm):00170         * by reading the location, complementing the value, writing it
                      (      exbasic.asm):00171         * back out and then comparing it to see if it's writable memory.
                      (      exbasic.asm):00172         * since all our memory is RAM, that won't work and we'll
                      (      exbasic.asm):00173         * overwrite the code. So make it a fixed size here
                      (      exbasic.asm):00174         
     4E20             (      exbasic.asm):00175         PROGSZ      EQU     20000
0217                  (      exbasic.asm):00176         PROGST      RMB     PROGSZ              ; START OF PROGRAM SPACE
     4E20             (      exbasic.asm):00177         PROGEND     EQU     *-PROGST
                      (      exbasic.asm):00178         
                      (      exbasic.asm):00179         *         INTERRUPT VECTORS
                      (      exbasic.asm):00180                   ORG  $FFF2
FFF2                  (      exbasic.asm):00181         SWI3      RMB  2
FFF4                  (      exbasic.asm):00182         SWI2      RMB  2
FFF6                  (      exbasic.asm):00183         FIRQ      RMB  2
FFF8                  (      exbasic.asm):00184         IRQ       RMB  2
FFFA                  (      exbasic.asm):00185         SWI       RMB  2
FFFC                  (      exbasic.asm):00186         NMI       RMB  2
FFFE                  (      exbasic.asm):00187         RESETV    RMB  2
                      (      exbasic.asm):00188         
                      (      exbasic.asm):00189         
                      (      exbasic.asm):00190         
                      (      exbasic.asm):00191                   ORG  $C000
C000 FFFFFFFFFFFFFFFF (      exbasic.asm):00192                   FILL $FF,$DB00-*   ; Fill ROM with FFs until $DB00
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
                      (      exbasic.asm):00193         
                      (      exbasic.asm):00194         * CONSOLE IN
DB00 8D03             (      exbasic.asm):00195         LA171     BSR  KEYIN          ; GET A CHARACTER FROM CONSOLE IN
DB02 27FC             (      exbasic.asm):00196                   BEQ  LA171          ; LOOP IF NO KEY DOWN
DB04 39               (      exbasic.asm):00197                   RTS
                      (      exbasic.asm):00198         
                      (      exbasic.asm):00199         *
                      (      exbasic.asm):00200         * THIS ROUTINE GETS A KEYSTROKE FROM THE KEYBOARD IF A KEY
                      (      exbasic.asm):00201         * IS DOWN. IT RETURNS ZERO TRUE IF THERE WAS NO KEY DOWN.
                      (      exbasic.asm):00202         *
                      (      exbasic.asm):00203         *
DB05                  (      exbasic.asm):00204         LA1C1
DB05                  (      exbasic.asm):00205         KEYIN
DB05 BDFC06           (      exbasic.asm):00206                   JSR getc           ; CFM - Added
                      (      exbasic.asm):00207         ;          LDA  USTAT
                      (      exbasic.asm):00208         ;          BITA #1
DB08 4D               (      exbasic.asm):00209                   TSTA               ; CFM - Added
DB09 2703             (      exbasic.asm):00210                   BEQ  NOCHAR
                      (      exbasic.asm):00211         ;          LDA  RECEV
DB0B 847F             (      exbasic.asm):00212                   ANDA #$7F
DB0D 39               (      exbasic.asm):00213                   RTS
DB0E 4F               (      exbasic.asm):00214         NOCHAR    CLRA
DB0F 39               (      exbasic.asm):00215                   RTS
                      (      exbasic.asm):00216         
                      (      exbasic.asm):00217         
                      (      exbasic.asm):00218         
                      (      exbasic.asm):00219         * CONSOLE OUT
DB10                  (      exbasic.asm):00220         PUTCHR
                      (      exbasic.asm):00221         ;          BSR  WAITACIA
DB10 3402             (      exbasic.asm):00222                   PSHS A              ;
DB12 810D             (      exbasic.asm):00223                   CMPA #CR            ; IS IT CARRIAGE RETURN?
DB14 270B             (      exbasic.asm):00224                   BEQ  NEWLINE        ; YES
                      (      exbasic.asm):00225         ;          STA  TRANS
DB16 BDFC00           (      exbasic.asm):00226                   JSR putc            ; CFM - New Code
DB19 0C79             (      exbasic.asm):00227                   INC  LPTPOS         ; INCREMENT CHARACTER COUNTER
DB1B 9679             (      exbasic.asm):00228                   LDA  LPTPOS         ; CHECK FOR END OF LINE PRINTER LINE
DB1D 9178             (      exbasic.asm):00229                   CMPA LPTWID         ; AT END OF LINE PRINTER LINE?
DB1F 250E             (      exbasic.asm):00230                   BLO  PUTEND         ; NO
DB21 0F79             (      exbasic.asm):00231         NEWLINE   CLR  LPTPOS         ; RESET CHARACTER COUNTER
                      (      exbasic.asm):00232         ;          BSR  WAITACIA
DB23 860D             (      exbasic.asm):00233                   LDA  #13
                      (      exbasic.asm):00234         ;          STA  TRANS
DB25 BDFC00           (      exbasic.asm):00235                   JSR putc            ; CFM - New Code
DB28 8D08             (      exbasic.asm):00236                   BSR  WAITACIA
DB2A 860A             (      exbasic.asm):00237                   LDA  #10            ; DO LINEFEED AFTER CR
                      (      exbasic.asm):00238         ;          STA  TRANS
DB2C BDFC00           (      exbasic.asm):00239                   JSR putc            ; CFM - New Code
DB2F 3502             (      exbasic.asm):00240         PUTEND    PULS A              ;
DB31 39               (      exbasic.asm):00241                   RTS
                      (      exbasic.asm):00242         
DB32 3402             (      exbasic.asm):00243         WAITACIA  PSHS A
DB34 B6A000           (      exbasic.asm):00244         WRWAIT    LDA  USTAT
DB37 8502             (      exbasic.asm):00245                   BITA #2
DB39 27F9             (      exbasic.asm):00246                   BEQ  WRWAIT
DB3B 3502             (      exbasic.asm):00247                   PULS A              ;
DB3D 39               (      exbasic.asm):00248                   RTS
                      (      exbasic.asm):00249         
                      (      exbasic.asm):00250         *
DB3E                  (      exbasic.asm):00251         RESVEC
DB3E 10CE01EE         (      exbasic.asm):00252         LA00E     LDS  #LINBUF+LBUFMX+1 ; SET STACK TO TOP OF LINE INPUT BUFFER
DB42 966E             (      exbasic.asm):00253                   LDA  RSTFLG         ; GET WARM START FLAG
DB44 8155             (      exbasic.asm):00254                   CMPA #$55           ; IS IT A WARM START?
DB46 260A             (      exbasic.asm):00255                   BNE  BACDST         ; NO - D0 A COLD START
DB48 9E6F             (      exbasic.asm):00256                   LDX  RSTVEC         ; WARM START VECTOR
DB4A A684             (      exbasic.asm):00257                   LDA  ,X             ; GET FIRST BYTE OF WARM START ADDR
DB4C 8112             (      exbasic.asm):00258                   CMPA #$12           ; IS IT NOP?
DB4E 2602             (      exbasic.asm):00259                   BNE  BACDST         ; NO - DO A COLD START
DB50 6E84             (      exbasic.asm):00260                   JMP  ,X             ; YES, G0 THERE
                      (      exbasic.asm):00261         
                      (      exbasic.asm):00262         * COLD START ENTRY
                      (      exbasic.asm):00263         
                      (      exbasic.asm):00264         * CFM - Clear memory down to 0. This used to clear the byte at $ffff
                      (      exbasic.asm):00265         * which didn't matter because it was ROM. It's illegal memory for
                      (      exbasic.asm):00266         * us so don't do that
                      (      exbasic.asm):00267         *
DB52 8E0218           (      exbasic.asm):00268         BACDST    LDX  #PROGST+1      ; POINT X TO CLEAR 1ST 1K OF RAM
DB55 6F83             (      exbasic.asm):00269         LA077     CLR  ,--X           ; MOVE POINTER DOWN AND CLEAR BYTE
DB57 3084             (      exbasic.asm):00270                   LEAX ,X             ; See if we are done
DB59 26FA             (      exbasic.asm):00271                   BNE  LA077          ; KEEP GOING IF NOT AT BOTTOM OF PAGE 0
                      (      exbasic.asm):00272         
                      (      exbasic.asm):00273         * CFM - Setup Basic program memory. See comment at PROGST.
                      (      exbasic.asm):00274         * End of memory is PROGEND-1.
                      (      exbasic.asm):00275         *
DB5B 8E0217           (      exbasic.asm):00276                   LDX  #PROGST        ; SET TO START OF PROGRAM SPACE
DB5E 6F80             (      exbasic.asm):00277                   CLR  ,X+            ; CLEAR 1ST BYTE OF BASIC PROGRAM
DB60 9F19             (      exbasic.asm):00278                   STX  TXTTAB         ; BEGINNING OF BASIC PROGRAM
                      (      exbasic.asm):00279                   
DB62 8E4E1F           (      exbasic.asm):00280                   LDX  #PROGEND-1
                      (      exbasic.asm):00281             
DB65 9F71             (      exbasic.asm):00282                   STX  TOPRAM         ; SAVE ABSOLUTE TOP OF RAM
DB67 9F27             (      exbasic.asm):00283                   STX  MEMSIZ         ; SAVE TOP OF STRING SPACE
DB69 9F23             (      exbasic.asm):00284                   STX  STRTAB         ; SAVE START OF STRING VARIABLES
DB6B 3089FF38         (      exbasic.asm):00285                   LEAX -200,X         ; CLEAR 200 - DEFAULT STRING SPACE TO 200 BYTES
DB6F 9F21             (      exbasic.asm):00286                   STX  FRETOP         ; SAVE START OF STRING SPACE
DB71 1F14             (      exbasic.asm):00287                   TFR  X,S            ; PUT STACK THERE
DB73 8EDBBA           (      exbasic.asm):00288                   LDX  #LA10D         ; POINT X TO ROM SOURCE DATA
DB76 CE0076           (      exbasic.asm):00289                   LDU  #LPTCFW        ; POINT U TO RAM DESTINATION
DB79 C612             (      exbasic.asm):00290                   LDB  #18            ; MOVE 18 BYTES
DB7B BDDC97           (      exbasic.asm):00291                   JSR  LA59A          ; MOVE 18 BYTES FROM ROM TO RAM
DB7E CE00A7           (      exbasic.asm):00292                   LDU  #IRQVEC        ; POINT U TO NEXT RAM DESTINATION
DB81 C604             (      exbasic.asm):00293                   LDB  #4             ; MOVE 4 MORE BYTES
DB83 BDDC97           (      exbasic.asm):00294                   JSR  LA59A          ; MOVE 4 BYTES FROM ROM TO RAM
DB86 8639             (      exbasic.asm):00295                   LDA  #$39
DB88 97F0             (      exbasic.asm):00296                   STA  LINHDR-1       ; PUT RTS IN LINHDR-1
DB8A BDDFA3           (      exbasic.asm):00297                   JSR  LAD19          ; G0 DO A 'NEW'
                      (      exbasic.asm):00298         * EXTENDED BASIC INITIALISATION
DB8D 8E00B5           (      exbasic.asm):00299                   LDX  #USR0          ; INITIALIZE ADDRESS OF START OF
DB90 9F8D             (      exbasic.asm):00300                   STX  USRADR         ; USR JUMP TABLE
                      (      exbasic.asm):00301         * INITIALIZE THE USR CALLS TO 'FC ERROR'
DB92 CEE6B7           (      exbasic.asm):00302                   LDU  #LB44A         ; ADDRESS OF 'FC ERROR' ROUTINE
DB95 C60A             (      exbasic.asm):00303                   LDB  #10            ; 10 USR CALLS IN EX BASIC
DB97 EF81             (      exbasic.asm):00304         L8031     STU  ,X++           ; STORE 'FC' ERROR AT USR ADDRESSES
DB99 5A               (      exbasic.asm):00305                   DECB                ; FINISHED ALL 10?
DB9A 26FB             (      exbasic.asm):00306                   BNE  L8031          ; NO
                      (      exbasic.asm):00307         
                      (      exbasic.asm):00308         * INITIALISE ACIA
DB9C 8615             (      exbasic.asm):00309                   LDA  #RTS_LOW       ; DIV16 CLOCK -> 7372800 / 4 / 16 = 115200
DB9E B7A000           (      exbasic.asm):00310                   STA  UCTRL
DBA1 8EDBEF           (      exbasic.asm):00311                   LDX  #LA147-1       ; POINT X TO COLOR BASIC COPYRIGHT MESSAGE
DBA4 BDEBCE           (      exbasic.asm):00312                   JSR  LB99C          ; PRINT 'COLOR BASIC'
DBA7 8EDBB2           (      exbasic.asm):00313                   LDX  #BAWMST        ; WARM START ADDRESS
DBAA 9F6F             (      exbasic.asm):00314                   STX  RSTVEC         ; SAVE IT
DBAC 8655             (      exbasic.asm):00315                   LDA  #$55           ; WARM START FLAG
DBAE 976E             (      exbasic.asm):00316                   STA  RSTFLG         ; SAVE IT
DBB0 2004             (      exbasic.asm):00317                   BRA  LA0F3          ; GO TO BASIC'S MAIN LOOP
DBB2 12               (      exbasic.asm):00318         BAWMST    NOP                 ; NOP REQ'D FOR WARM START
DBB3 BDDFBD           (      exbasic.asm):00319                   JSR  LAD33          ; DO PART OF A NEW
DBB6 7EDF0B           (      exbasic.asm):00320         LA0F3     JMP  LAC73          ; GO TO MAIN LOOP OF BASIC
                      (      exbasic.asm):00321         *
                      (      exbasic.asm):00322         * FIRQ SERVICE ROUTINE
DBB9                  (      exbasic.asm):00323         BFRQSV
DBB9 3B               (      exbasic.asm):00324                   RTI
                      (      exbasic.asm):00325         *
                      (      exbasic.asm):00326         * THESE BYTES ARE MOVED TO ADDRESSES $76 - $85 THE DIRECT PAGE
DBBA 10               (      exbasic.asm):00327         LA10D     FCB  16             ; TAB FIELD WIDTH
DBBB 40               (      exbasic.asm):00328                   FCB  64             ; LAST TAB ZONE
DBBC 50               (      exbasic.asm):00329                   FCB  80             ; PRINTER WIDTH
DBBD 00               (      exbasic.asm):00330                   FCB  0              ; LINE PRINTER POSITION
DBBE E6B7             (      exbasic.asm):00331                   FDB  LB44A          ; ARGUMENT OF EXEC COMMAND - SET TO 'FC' ERROR
                      (      exbasic.asm):00332         * LINE INPUT ROUTINE
DBC0 0C84             (      exbasic.asm):00333                   INC  CHARAD+1
DBC2 2602             (      exbasic.asm):00334                   BNE  LA123
DBC4 0C83             (      exbasic.asm):00335                   INC  CHARAD
DBC6 B60000           (      exbasic.asm):00336         LA123     LDA  >0000
DBC9 7EDCA8           (      exbasic.asm):00337                   JMP  BROMHK
                      (      exbasic.asm):00338         *
                      (      exbasic.asm):00339         * THESE BYTES ARE MOVED TO ADDRESSES $A7-$B1
DBCC 7EDCA7           (      exbasic.asm):00340                   JMP  BIRQSV         ; IRQ SERVICE
DBCF 7EDBB9           (      exbasic.asm):00341                   JMP  BFRQSV         ; FIRQ SERVICE
DBD2 7EE6B7           (      exbasic.asm):00342                   JMP  LB44A          ; USR ADDRESS FOR 8K BASIC (INITIALIZED TO 'FC' ERROR)
DBD5 80               (      exbasic.asm):00343                   FCB  $80            ; *RANDOM SEED
DBD6 4FC7             (      exbasic.asm):00344                   FDB  $4FC7          ; *RANDON SEED OF MANTISSA
DBD8 5259             (      exbasic.asm):00345                   FDB  $5259          ; *.811635157
                      (      exbasic.asm):00346         * BASIC COMMAND INTERPRETATION TABLE ROM IMAGE
DBDA 32               (      exbasic.asm):00347         COMVEC    FCB  50             ; 50 BASIC COMMANDS
DBDB DD06             (      exbasic.asm):00348                   FDB  LAA66          ; POINTS TO RESERVED WORDS
DBDD DE13             (      exbasic.asm):00349                   FDB  LAB67          ; POINTS TO JUMP TABLE FOR COMMANDS
DBDF 1D               (      exbasic.asm):00350                   FCB  29             ; 29 BASIC SECONDARY COMMANDS
DBE0 DDA6             (      exbasic.asm):00351                   FDB  LAB1A          ; POINTS TO SECONDARY FUNCTION RESERVED WORDS
DBE2 DCB7             (      exbasic.asm):00352                   FDB  LAA29          ; POINTS TO SECONDARY FUNCTION JUMP TABLE
DBE4 0000             (      exbasic.asm):00353                   FDB  0              ; NO MORE TABLES (RES WORDS=0)
DBE6 0000             (      exbasic.asm):00354                   FDB  0              ; NO MORE TABLES
DBE8 0000             (      exbasic.asm):00355                   FDB  0              ; NO MORE TABLES
DBEA 0000             (      exbasic.asm):00356                   FDB  0              ; NO MORE TABLES
DBEC 0000             (      exbasic.asm):00357                   FDB  0              ; NO MORE TABLES
DBEE 0000             (      exbasic.asm):00358                   FDB  0              ; NO MORE TABLES (SECONDARY FNS =0)
                      (      exbasic.asm):00359         
                      (      exbasic.asm):00360         * COPYRIGHT MESSAGES
DBF0 3638303920455854 (      exbasic.asm):00361         LA147     FCC  "6809 EXTENDED BASIC"
     454E444544204241
     534943
DC03 0D               (      exbasic.asm):00362                   FCB  CR
DC04 2843292031393832 (      exbasic.asm):00363                   FCC  "(C) 1982 BY MICROSOFT"
     204259204D494352
     4F534F4654
DC19 0D0D             (      exbasic.asm):00364         LA156     FCB  CR,CR
DC1B 00               (      exbasic.asm):00365         LA165     FCB  $00
                      (      exbasic.asm):00366         
                      (      exbasic.asm):00367         
DC1C 3416             (      exbasic.asm):00368         LA35F     PSHS X,B,A          ; SAVE REGISTERS
DC1E 9E76             (      exbasic.asm):00369                   LDX  LPTCFW         ; TAB FIELD WIDTH AND TAB ZONE
DC20 DC78             (      exbasic.asm):00370                   LDD  LPTWID         ; PRINTER WIDTH AND POSITION
DC22 9F6A             (      exbasic.asm):00371         LA37C     STX  DEVCFW         ; SAVE TAB FIELD WIDTH AND ZONE
DC24 D76C             (      exbasic.asm):00372                   STB  DEVPOS         ; SAVE PRINT POSITION
DC26 976D             (      exbasic.asm):00373                   STA  DEVWID         ; SAVE PRINT WIDTH
DC28 3596             (      exbasic.asm):00374                   PULS A,B,X,PC       ; RESTORE REGISTERS
                      (      exbasic.asm):00375         
                      (      exbasic.asm):00376         * THIS IS THE ROUTINE THAT GETS AN INPUT LINE FOR BASIC
                      (      exbasic.asm):00377         * EXIT WITH BREAK KEY: CARRY = 1
                      (      exbasic.asm):00378         * EXIT WITH ENTER KEY: CARRY = 0
DC2A                  (      exbasic.asm):00379         LA38D
DC2A 0F73             (      exbasic.asm):00380         LA390     CLR  IKEYIM         ; RESET BREAK CHECK KEY TEMP KEY STORAGE
DC2C 8E00F4           (      exbasic.asm):00381                   LDX  #LINBUF+1      ; INPUT LINE BUFFER
DC2F C601             (      exbasic.asm):00382                   LDB  #1             ; ACCB CHAR COUNTER: SET TO 1 TO ALLOW A
                      (      exbasic.asm):00383         *         BACKSPACE AS FIRST CHARACTER
DC31 BDDB00           (      exbasic.asm):00384         LA39A     JSR  LA171          ; GO GET A CHARACTER FROM CONSOLE IN
DC34 8108             (      exbasic.asm):00385                   CMPA #BS            ; BACKSPACE
DC36 2607             (      exbasic.asm):00386                   BNE  LA3B4          ; NO
DC38 5A               (      exbasic.asm):00387                   DECB                ; YES - DECREMENT CHAR COUNTER
DC39 27EF             (      exbasic.asm):00388                   BEQ  LA390          ; BRANCH IF BACK AT START OF LINE AGAIN
DC3B 301F             (      exbasic.asm):00389                   LEAX -1,X           ; DECREMENT BUFFER POINTER
DC3D 2034             (      exbasic.asm):00390                   BRA  LA3E8          ; ECHO CHAR TO SCREEN
DC3F 8115             (      exbasic.asm):00391         LA3B4     CMPA #$15           ; SHIFT RIGHT ARROW?
DC41 260A             (      exbasic.asm):00392                   BNE  LA3C2          ; NO
                      (      exbasic.asm):00393         * YES, RESET BUFFER TO BEGINNING AND ERASE CURRENT LINE
DC43 5A               (      exbasic.asm):00394         LA3B8     DECB                ; DEC CHAR CTR
DC44 27E4             (      exbasic.asm):00395                   BEQ  LA390          ; GO BACK TO START IF CHAR CTR = 0
DC46 8608             (      exbasic.asm):00396                   LDA  #BS            ; BACKSPACE?
DC48 BDDB10           (      exbasic.asm):00397                   JSR  PUTCHR         ; SEND TO CONSOLE OUT (SCREEN)
DC4B 20F6             (      exbasic.asm):00398                   BRA  LA3B8          ; KEEP GOING
DC4D 8103             (      exbasic.asm):00399         LA3C2     CMPA #3             ; BREAK KEY?
DC4F 1A01             (      exbasic.asm):00400                   ORCC #1             ; SET CARRY FLAG
DC51 2705             (      exbasic.asm):00401                   BEQ  LA3CD          ; BRANCH IF BREAK KEY DOWN
DC53 810D             (      exbasic.asm):00402         LA3C8     CMPA #CR            ; ENTER KEY?
DC55 260D             (      exbasic.asm):00403                   BNE  LA3D9          ; NO
DC57 4F               (      exbasic.asm):00404         LA3CC     CLRA                ; CLEAR CARRY FLAG IF ENTER KEY - END LINE ENTRY
DC58 3401             (      exbasic.asm):00405         LA3CD     PSHS CC             ; SAVE CARRY FLAG
DC5A BDEB8E           (      exbasic.asm):00406                   JSR  LB958          ; SEND CR TO SCREEN
DC5D 6F84             (      exbasic.asm):00407                   CLR  ,X             ; MAKE LAST BYTE IN INPUT BUFFER = 0
DC5F 8E00F3           (      exbasic.asm):00408                   LDX  #LINBUF        ; RESET INPUT BUFFER POINTER
DC62 3581             (      exbasic.asm):00409                   PULS CC,PC          ; RESTORE CARRY FLAG
                      (      exbasic.asm):00410         
                      (      exbasic.asm):00411         * INSERT A CHARACTER INTO THE BASIC LINE INPUT BUFFER
DC64 8120             (      exbasic.asm):00412         LA3D9     CMPA #$20           ; IS IT CONTROL CHAR?
DC66 25C9             (      exbasic.asm):00413                   BLO  LA39A          ; BRANCH IF CONTROL CHARACTER
DC68 817B             (      exbasic.asm):00414                   CMPA #'z+1          ; *
DC6A 24C5             (      exbasic.asm):00415                   BCC  LA39A          ; * IGNORE IF > LOWER CASE Z
DC6C C1FA             (      exbasic.asm):00416                   CMPB #LBUFMX        ; HAVE 250 OR MORE CHARACTERS BEEN ENTERED?
DC6E 24C1             (      exbasic.asm):00417                   BCC  LA39A          ; YES, IGNORE ANY MORE
DC70 A780             (      exbasic.asm):00418                   STA  ,X+            ; PUT IT IN INPUT BUFFER
DC72 5C               (      exbasic.asm):00419                   INCB                ; INCREMENT CHARACTER COUNTER
DC73                  (      exbasic.asm):00420         LA3E8
                      (      exbasic.asm):00421         ;          JSR  PUTCHR         ; ECHO IT TO SCREEN
DC73 20BC             (      exbasic.asm):00422                   BRA  LA39A          ; GO SET SOME MORE
                      (      exbasic.asm):00423         
                      (      exbasic.asm):00424         
                      (      exbasic.asm):00425         * EXEC
DC75 2705             (      exbasic.asm):00426         EXEC      BEQ  LA545          ; BRANCH IF NO ARGUMENT
DC77 BDE9AA           (      exbasic.asm):00427                   JSR  LB73D          ; EVALUATE ARGUMENT - ARGUMENT RETURNED IN X
DC7A 9F7A             (      exbasic.asm):00428                   STX  EXECJP         ; STORE X TO EXEC JUMP ADDRESS
DC7C 6E9F007A         (      exbasic.asm):00429         LA545     JMP  [EXECJP]       ; GO DO IT
                      (      exbasic.asm):00430         
                      (      exbasic.asm):00431         * BREAK CHECK
DC80 7EE08C           (      exbasic.asm):00432         LA549     JMP  LADEB          ; GO DO BREAK KEY CHECK
                      (      exbasic.asm):00433         
                      (      exbasic.asm):00434         * INKEY$
DC83 9673             (      exbasic.asm):00435         INKEY     LDA  IKEYIM         ; WAS A KEY DOWN IN THE BREAK CHECK?
DC85 2603             (      exbasic.asm):00436                   BNE  LA56B          ; YES
DC87 BDDB05           (      exbasic.asm):00437                   JSR  KEYIN          ; GO GET A KEY
DC8A 0F73             (      exbasic.asm):00438         LA56B     CLR  IKEYIM         ; CLEAR INKEY RAM IMAGE
DC8C 9753             (      exbasic.asm):00439                   STA  FPA0+3         ; STORE THE KEY IN FPA0
DC8E 10260C6A         (      exbasic.asm):00440                   LBNE LB68F          ; CONVERT FPA0+3 TO A STRING
DC92 9756             (      exbasic.asm):00441                   STA  STRDES         ; SET LENGTH OF STRING = 0 IF NO KEY DOWN
DC94 7EE908           (      exbasic.asm):00442                   JMP  LB69B          ; PUT A NULL STRING ONTO THE STRING STACK
                      (      exbasic.asm):00443         
                      (      exbasic.asm):00444         * MOVE ACCB BYTES FROM (X) TO (U)
DC97 A680             (      exbasic.asm):00445         LA59A     LDA  ,X+            ; GET BYTE FROM X
DC99 A7C0             (      exbasic.asm):00446                   STA  ,U+            ; STORE IT AT U
DC9B 5A               (      exbasic.asm):00447                   DECB                ; MOVED ALL BYTES?
DC9C 26F9             (      exbasic.asm):00448                   BNE  LA59A          ; NO
DC9E 39               (      exbasic.asm):00449         LA5A1     RTS
                      (      exbasic.asm):00450         
DC9F 39               (      exbasic.asm):00451         LA5C4     RTS
                      (      exbasic.asm):00452         
                      (      exbasic.asm):00453         ** THIS ROUTINE WILL SCAN OFF THE FILE NAME FROM A BASIC LINE
                      (      exbasic.asm):00454         ** AND RETURN A SYNTAX ERROR IF THERE ARE ANY CHARACTERS
                      (      exbasic.asm):00455         ** FOLLOWING THE END OF THE NAME
DCA0 9D82             (      exbasic.asm):00456         LA5C7     JSR  GETCCH         ; GET CURRENT INPUT CHAR FROM BASIC LINE
DCA2 27FB             (      exbasic.asm):00457         LA5C9     BEQ  LA5C4          ; RETURN IF END OF LINE
DCA4 7EE4E9           (      exbasic.asm):00458                   JMP  LB277          ; SYNTAX ERROR IF ANY MORE CHARACTERS
                      (      exbasic.asm):00459         * IRQ SERVICE
DCA7                  (      exbasic.asm):00460         BIRQSV
DCA7 3B               (      exbasic.asm):00461         LA9C5     RTI                 ; RETURN FROM INTERRUPT
                      (      exbasic.asm):00462         
                      (      exbasic.asm):00463         * SET CARRY IF NUMERIC - RETURN WITH
                      (      exbasic.asm):00464         * ZERO FLAG SET IF ACCA = 0 OR 3A(:) - END
                      (      exbasic.asm):00465         * OF BASIC LINE OR SUB LINE
DCA8 813A             (      exbasic.asm):00466         BROMHK    CMPA #'9+1          ; IS THIS CHARACTER >=(ASCII 9)+1?
DCAA 240A             (      exbasic.asm):00467                   BHS  LAA28          ; BRANCH IF > 9; Z SET IF = COLON
DCAC 8120             (      exbasic.asm):00468                   CMPA #SPACE         ; SPACE?
DCAE 2602             (      exbasic.asm):00469                   BNE  LAA24          ; NO - SET CARRY IF NUMERIC
DCB0 0E7C             (      exbasic.asm):00470                   JMP  GETNCH         ; IF SPACE, GET NECT CHAR (IGNORE SPACES)
DCB2 8030             (      exbasic.asm):00471         LAA24     SUBA #'0            ; * SET CARRY IF
DCB4 80D0             (      exbasic.asm):00472                   SUBA #-'0           ; * CHARACTER > ASCII 0
DCB6 39               (      exbasic.asm):00473         LAA28     RTS
                      (      exbasic.asm):00474         
                      (      exbasic.asm):00475         * DISPATCH TABLE FOR SECONDARY FUNCTIONS
                      (      exbasic.asm):00476         * TOKENS ARE PRECEEDED BY $FF
                      (      exbasic.asm):00477         * FIRST SET ALWAYS HAS ONE PARAMETER
DCB7                  (      exbasic.asm):00478         FUNC_TAB
DCB7 EEAC             (      exbasic.asm):00479         LAA29     FDB  SGN            ; SGN
DCB9 EF20             (      exbasic.asm):00480                   FDB  INT            ; INT
DCBB EEC5             (      exbasic.asm):00481                   FDB  ABS            ; ABS
DCBD 00AD             (      exbasic.asm):00482                   FDB  USRJMP         ; USR
     0083             (      exbasic.asm):00483         TOK_USR   EQU  (*-FUNC_TAB)/2+$7F
     FF83             (      exbasic.asm):00484         TOK_FF_USR EQU  (*-FUNC_TAB)/2+$FF7F
DCBF F151             (      exbasic.asm):00485                   FDB  RND            ; RND
DCC1 F1A6             (      exbasic.asm):00486                   FDB  SIN            ; SIN
DCC3 E9BD             (      exbasic.asm):00487                   FDB  PEEK           ; PEEK
DCC5 E8EE             (      exbasic.asm):00488                   FDB  LEN            ; LEN
DCC7 E76A             (      exbasic.asm):00489                   FDB  STR            ; STR$
DCC9 E983             (      exbasic.asm):00490                   FDB  VAL            ; VAL
DCCB E90D             (      exbasic.asm):00491                   FDB  ASC            ; ASC
DCCD E8F9             (      exbasic.asm):00492                   FDB  CHR            ; CHR$
DCCF F256             (      exbasic.asm):00493                   FDB  ATN            ; ATN
DCD1 F21E             (      exbasic.asm):00494                   FDB  COS            ; COS
DCD3 F227             (      exbasic.asm):00495                   FDB  TAN            ; TAN
DCD5 F398             (      exbasic.asm):00496                   FDB  EXP            ; EXP
DCD7 F3CA             (      exbasic.asm):00497                   FDB  FIX            ; FIX
DCD9 F2EC             (      exbasic.asm):00498                   FDB  LOG            ; LOG
DCDB F552             (      exbasic.asm):00499                   FDB  POS            ; POS
DCDD F326             (      exbasic.asm):00500                   FDB  SQR            ; SQR
DCDF FA24             (      exbasic.asm):00501                   FDB  HEXDOL         ; HEX$
                      (      exbasic.asm):00502         * LEFT, RIGHT AND MID ARE TREATED SEPARATELY
DCE1 E918             (      exbasic.asm):00503                   FDB  LEFT           ; LEFT$
     0095             (      exbasic.asm):00504         TOK_LEFT  EQU  (*-FUNC_TAB)/2+$7F
DCE3 E935             (      exbasic.asm):00505                   FDB  RIGHT          ; RIGHT$
DCE5 E93C             (      exbasic.asm):00506                   FDB  MID            ; MID$
     0097             (      exbasic.asm):00507         TOK_MID   EQU  (*-FUNC_TAB)/2+$7F
                      (      exbasic.asm):00508         * REMAINING FUNCTIONS
DCE7 DC83             (      exbasic.asm):00509                   FDB  INKEY          ; INKEY$
     0098             (      exbasic.asm):00510         TOK_INKEY EQU  (*-FUNC_TAB)/2+$7F
DCE9 E75B             (      exbasic.asm):00511                   FDB  MEM            ; MEM
DCEB F55A             (      exbasic.asm):00512                   FDB  VARPT          ; VARPTR
DCED F61A             (      exbasic.asm):00513                   FDB  INSTR          ; INSTR
DCEF F5EA             (      exbasic.asm):00514                   FDB  STRING         ; STRING$
     001D             (      exbasic.asm):00515         NUM_SEC_FNS EQU  (*-FUNC_TAB)/2
                      (      exbasic.asm):00516         
                      (      exbasic.asm):00517         * THIS TABLE CONTAINS PRECEDENCES AND DISPATCH ADDRESSES FOR ARITHMETIC
                      (      exbasic.asm):00518         * AND LOGICAL OPERATORS - THE NEGATION OPERATORS DO NOT ACT ON TWO OPERANDS
                      (      exbasic.asm):00519         * S0 THEY ARE NOT LISTED IN THIS TABLE. THEY ARE TREATED SEPARATELY IN THE
                      (      exbasic.asm):00520         * EXPRESSION EVALUATION ROUTINE. THEY ARE:
                      (      exbasic.asm):00521         * UNARY NEGATION (-), PRECEDENCE &7D AND LOGICAL NEGATION (NOT), PRECEDENCE $5A
                      (      exbasic.asm):00522         * THE RELATIONAL OPERATORS < > = ARE ALSO NOT LISTED, PRECEDENCE $64.
                      (      exbasic.asm):00523         * A PRECEDENCE VALUE OF ZERO INDICATES END OF EXPRESSION OR PARENTHESES
                      (      exbasic.asm):00524         *
DCF1 79               (      exbasic.asm):00525         LAA51     FCB  $79
DCF2 EBF7             (      exbasic.asm):00526                   FDB  LB9C5          ; +
DCF4 79               (      exbasic.asm):00527                   FCB  $79
DCF5 EBEE             (      exbasic.asm):00528                   FDB  LB9BC          ; -
DCF7 7B               (      exbasic.asm):00529                   FCB  $7B
DCF8 ECFE             (      exbasic.asm):00530                   FDB  LBACC          ; *
DCFA 7B               (      exbasic.asm):00531                   FCB  $7B
DCFB EDC3             (      exbasic.asm):00532                   FDB  LBB91          ; /
DCFD 7F               (      exbasic.asm):00533                   FCB  $7F
DCFE F32F             (      exbasic.asm):00534                   FDB  L8489          ; EXPONENTIATION
DD00 50               (      exbasic.asm):00535                   FCB  $50
DD01 E542             (      exbasic.asm):00536                   FDB  LB2D5          ; AND
DD03 46               (      exbasic.asm):00537                   FCB  $46
DD04 E541             (      exbasic.asm):00538                   FDB  LB2D4          ; OR
                      (      exbasic.asm):00539         
                      (      exbasic.asm):00540         * THIS IS THE RESERVED WORD TABLE
                      (      exbasic.asm):00541         * FIRST PART OF THE TABLE CONTAINS EXECUTABLE COMMANDS
DD06 464F             (      exbasic.asm):00542         LAA66     FCC  "FO"           ; 80
DD08 D2               (      exbasic.asm):00543                   FCB  $80+'R
DD09 47               (      exbasic.asm):00544                   FCC  "G"            ; 81
DD0A CF               (      exbasic.asm):00545                   FCB  $80+'O
     0081             (      exbasic.asm):00546         TOK_GO    EQU  $81
DD0B 5245             (      exbasic.asm):00547                   FCC  "RE"           ; 82
DD0D CD               (      exbasic.asm):00548                   FCB  $80+'M
DD0E A7               (      exbasic.asm):00549                   FCB  ''+$80         ; 83
DD0F 454C53           (      exbasic.asm):00550                   FCC  "ELS"          ; 84
DD12 C5               (      exbasic.asm):00551                   FCB  $80+'E
DD13 49               (      exbasic.asm):00552                   FCC  "I"            ; 85
DD14 C6               (      exbasic.asm):00553                   FCB  $80+'F
DD15 444154           (      exbasic.asm):00554                   FCC  "DAT"          ; 86
DD18 C1               (      exbasic.asm):00555                   FCB  $80+'A
DD19 5052494E         (      exbasic.asm):00556                   FCC  "PRIN"         ; 87
DD1D D4               (      exbasic.asm):00557                   FCB  $80+'T
DD1E 4F               (      exbasic.asm):00558                   FCC  "O"            ; 88
DD1F CE               (      exbasic.asm):00559                   FCB  $80+'N
DD20 494E5055         (      exbasic.asm):00560                   FCC  "INPU"         ; 89
DD24 D4               (      exbasic.asm):00561                   FCB  $80+'T
DD25 454E             (      exbasic.asm):00562                   FCC  "EN"           ; 8A
DD27 C4               (      exbasic.asm):00563                   FCB  $80+'D
DD28 4E4558           (      exbasic.asm):00564                   FCC  "NEX"          ; 8B
DD2B D4               (      exbasic.asm):00565                   FCB  $80+'T
DD2C 4449             (      exbasic.asm):00566                   FCC  "DI"           ; 8C
DD2E CD               (      exbasic.asm):00567                   FCB  $80+'M
DD2F 524541           (      exbasic.asm):00568                   FCC  "REA"          ; 8D
DD32 C4               (      exbasic.asm):00569                   FCB  $80+'D
DD33 5255             (      exbasic.asm):00570                   FCC  "RU"           ; 8E
DD35 CE               (      exbasic.asm):00571                   FCB  $80+'N
DD36 524553544F52     (      exbasic.asm):00572                   FCC  "RESTOR"       ; 8F
DD3C C5               (      exbasic.asm):00573                   FCB  $80+'E
DD3D 5245545552       (      exbasic.asm):00574                   FCC  "RETUR"        ; 90
DD42 CE               (      exbasic.asm):00575                   FCB  $80+'N
DD43 53544F           (      exbasic.asm):00576                   FCC  "STO"          ; 91
DD46 D0               (      exbasic.asm):00577                   FCB  $80+'P
DD47 504F4B           (      exbasic.asm):00578                   FCC  "POK"          ; 92
DD4A C5               (      exbasic.asm):00579                   FCB  $80+'E
DD4B 434F4E           (      exbasic.asm):00580                   FCC  "CON"          ; 93
DD4E D4               (      exbasic.asm):00581                   FCB  $80+'T
DD4F 4C4953           (      exbasic.asm):00582                   FCC  "LIS"          ; 94
DD52 D4               (      exbasic.asm):00583                   FCB  $80+'T
DD53 434C4541         (      exbasic.asm):00584                   FCC  "CLEA"         ; 95
DD57 D2               (      exbasic.asm):00585                   FCB  $80+'R
DD58 4E45             (      exbasic.asm):00586                   FCC  "NE"           ; 96
DD5A D7               (      exbasic.asm):00587                   FCB  $80+'W
DD5B 455845           (      exbasic.asm):00588                   FCC  "EXE"          ; 97
DD5E C3               (      exbasic.asm):00589                   FCB  $80+'C
DD5F 54524F           (      exbasic.asm):00590                   FCC  "TRO"          ; 98
DD62 CE               (      exbasic.asm):00591                   FCB  $80+'N
DD63 54524F46         (      exbasic.asm):00592                   FCC  "TROF"         ; 99
DD67 C6               (      exbasic.asm):00593                   FCB  $80+'F
DD68 4445             (      exbasic.asm):00594                   FCC  "DE"           ; 9A
DD6A CC               (      exbasic.asm):00595                   FCB  $80+'L
DD6B 4445             (      exbasic.asm):00596                   FCC  "DE"           ; 9B
DD6D C6               (      exbasic.asm):00597                   FCB  $80+'F
DD6E 4C494E           (      exbasic.asm):00598                   FCC  "LIN"          ; 9C
DD71 C5               (      exbasic.asm):00599                   FCB  $80+'E
DD72 52454E55         (      exbasic.asm):00600                   FCC  "RENU"         ; 9D
DD76 CD               (      exbasic.asm):00601                   FCB  $80+'M
DD77 454449           (      exbasic.asm):00602                   FCC  "EDI"          ; 9E
DD7A D4               (      exbasic.asm):00603                   FCB  $80+'T
                      (      exbasic.asm):00604         * END OF EXECUTABLE COMMANDS. THE REMAINDER OF THE TABLE ARE NON-EXECUTABLE TOKENS
DD7B 544142           (      exbasic.asm):00605                   FCC  "TAB"          ; 9F
DD7E A8               (      exbasic.asm):00606                   FCB  $80+'(
     009F             (      exbasic.asm):00607         TOK_TAB   EQU  $9F
DD7F 54               (      exbasic.asm):00608                   FCC  "T"            ; A0
DD80 CF               (      exbasic.asm):00609                   FCB  $80+'O
     00A0             (      exbasic.asm):00610         TOK_TO    EQU  $A0
DD81 5355             (      exbasic.asm):00611                   FCC  "SU"           ; A1
DD83 C2               (      exbasic.asm):00612                   FCB  $80+'B
     00A1             (      exbasic.asm):00613         TOK_SUB   EQU  $A1
DD84 544845           (      exbasic.asm):00614                   FCC  "THE"          ; A2
DD87 CE               (      exbasic.asm):00615                   FCB  $80+'N
     00A2             (      exbasic.asm):00616         TOK_THEN  EQU  $A2
DD88 4E4F             (      exbasic.asm):00617                   FCC  "NO"           ; A3
DD8A D4               (      exbasic.asm):00618                   FCB  $80+'T
     00A3             (      exbasic.asm):00619         TOK_NOT   EQU  $A3
DD8B 535445           (      exbasic.asm):00620                   FCC  "STE"          ; A4
DD8E D0               (      exbasic.asm):00621                   FCB  $80+'P
     00A4             (      exbasic.asm):00622         TOK_STEP  EQU  $A4
DD8F 4F46             (      exbasic.asm):00623                   FCC  "OF"           ; A5
DD91 C6               (      exbasic.asm):00624                   FCB  $80+'F
DD92 AB               (      exbasic.asm):00625                   FCB  '++$80         ; A6
     00A6             (      exbasic.asm):00626         TOK_PLUS  EQU  $A6
DD93 AD               (      exbasic.asm):00627                   FCB  '-+$80         ; A7
     00A7             (      exbasic.asm):00628         TOK_MINUS EQU  $A7
DD94 AA               (      exbasic.asm):00629                   FCB  '*+$80         ; A8
DD95 AF               (      exbasic.asm):00630                   FCB  '/+$80         ; A9
DD96 DE               (      exbasic.asm):00631                   FCB  '^+$80         ; AA
DD97 414E             (      exbasic.asm):00632                   FCC  "AN"           ; AB
DD99 C4               (      exbasic.asm):00633                   FCB  $80+'D
DD9A 4F               (      exbasic.asm):00634                   FCC  "O"            ; AC
DD9B D2               (      exbasic.asm):00635                   FCB  $80+'R
DD9C BE               (      exbasic.asm):00636                   FCB  '>+$80         ; AD
     00AD             (      exbasic.asm):00637         TOK_GREATER EQU  $AD
DD9D BD               (      exbasic.asm):00638                   FCB  '=+$80         ; AE
     00AE             (      exbasic.asm):00639         TOK_EQUALS EQU  $AE
DD9E BC               (      exbasic.asm):00640                   FCB  '<+$80         ; AF
DD9F 46               (      exbasic.asm):00641                   FCC  "F"            ; B0
DDA0 CE               (      exbasic.asm):00642                   FCB  $80+'N
     00B0             (      exbasic.asm):00643         TOK_FN    EQU  $B0
DDA1 5553494E         (      exbasic.asm):00644                   FCC  "USIN"         ; B1
DDA5 C7               (      exbasic.asm):00645                   FCB  $80+'G
     00B1             (      exbasic.asm):00646         TOK_USING EQU  $B1
                      (      exbasic.asm):00647         *
                      (      exbasic.asm):00648         
                      (      exbasic.asm):00649         * FIRST SET ALWAYS HAS ONE PARAMETER
DDA6 5347             (      exbasic.asm):00650         LAB1A     FCC  "SG"           ; 80
DDA8 CE               (      exbasic.asm):00651                   FCB  $80+'N
DDA9 494E             (      exbasic.asm):00652                   FCC  "IN"           ; 81
DDAB D4               (      exbasic.asm):00653                   FCB  $80+'T
DDAC 4142             (      exbasic.asm):00654                   FCC  "AB"           ; 82
DDAE D3               (      exbasic.asm):00655                   FCB  $80+'S
DDAF 5553             (      exbasic.asm):00656                   FCC  "US"           ; 83
DDB1 D2               (      exbasic.asm):00657                   FCB  $80+'R
DDB2 524E             (      exbasic.asm):00658                   FCC  "RN"           ; 84
DDB4 C4               (      exbasic.asm):00659                   FCB  $80+'D
DDB5 5349             (      exbasic.asm):00660                   FCC  "SI"           ; 85
DDB7 CE               (      exbasic.asm):00661                   FCB  $80+'N
DDB8 504545           (      exbasic.asm):00662                   FCC  "PEE"          ; 86
DDBB CB               (      exbasic.asm):00663                   FCB  $80+'K
DDBC 4C45             (      exbasic.asm):00664                   FCC  "LE"           ; 87
DDBE CE               (      exbasic.asm):00665                   FCB  $80+'N
DDBF 535452           (      exbasic.asm):00666                   FCC  "STR"          ; 88
DDC2 A4               (      exbasic.asm):00667                   FCB  $80+'$
DDC3 5641             (      exbasic.asm):00668                   FCC  "VA"           ; 89
DDC5 CC               (      exbasic.asm):00669                   FCB  $80+'L
DDC6 4153             (      exbasic.asm):00670                   FCC  "AS"           ; 8A
DDC8 C3               (      exbasic.asm):00671                   FCB  $80+'C
DDC9 434852           (      exbasic.asm):00672                   FCC  "CHR"          ; 8B
DDCC A4               (      exbasic.asm):00673                   FCB  $80+'$
DDCD 4154             (      exbasic.asm):00674                   FCC  "AT"           ; 8C
DDCF CE               (      exbasic.asm):00675                   FCB  $80+'N
DDD0 434F             (      exbasic.asm):00676                   FCC  "CO"           ; 8D
DDD2 D3               (      exbasic.asm):00677                   FCB  $80+'S
DDD3 5441             (      exbasic.asm):00678                   FCC  "TA"           ; 8E
DDD5 CE               (      exbasic.asm):00679                   FCB  $80+'N
DDD6 4558             (      exbasic.asm):00680                   FCC  "EX"           ; 8F
DDD8 D0               (      exbasic.asm):00681                   FCB  $80+'P
DDD9 4649             (      exbasic.asm):00682                   FCC  "FI"           ; 90
DDDB D8               (      exbasic.asm):00683                   FCB  $80+'X
DDDC 4C4F             (      exbasic.asm):00684                   FCC  "LO"           ; 91
DDDE C7               (      exbasic.asm):00685                   FCB  $80+'G
DDDF 504F             (      exbasic.asm):00686                   FCC  "PO"           ; 92
DDE1 D3               (      exbasic.asm):00687                   FCB  $80+'S
DDE2 5351             (      exbasic.asm):00688                   FCC  "SQ"           ; 93
DDE4 D2               (      exbasic.asm):00689                   FCB  $80+'R
DDE5 484558           (      exbasic.asm):00690                   FCC  "HEX"          ; 94
DDE8 A4               (      exbasic.asm):00691                   FCB  $80+'$
                      (      exbasic.asm):00692         * LEFT, RIGHT AND MID ARE TREATED SEPARATELY
DDE9 4C454654         (      exbasic.asm):00693                   FCC  "LEFT"         ; 95
DDED A4               (      exbasic.asm):00694                   FCB  $80+'$
DDEE 5249474854       (      exbasic.asm):00695                   FCC  "RIGHT"        ; 96
DDF3 A4               (      exbasic.asm):00696                   FCB  $80+'$
DDF4 4D4944           (      exbasic.asm):00697                   FCC  "MID"          ; 97
DDF7 A4               (      exbasic.asm):00698                   FCB  $80+'$
                      (      exbasic.asm):00699         * REMAINING FUNCTIONS
DDF8 494E4B4559       (      exbasic.asm):00700                   FCC  "INKEY"        ; 98
DDFD A4               (      exbasic.asm):00701                   FCB  $80+'$
DDFE 4D45             (      exbasic.asm):00702                   FCC  "ME"           ; 99
DE00 CD               (      exbasic.asm):00703                   FCB  $80+'M
DE01 5641525054       (      exbasic.asm):00704                   FCC  "VARPT"        ; 9A
DE06 D2               (      exbasic.asm):00705                   FCB  $80+'R
DE07 494E5354         (      exbasic.asm):00706                   FCC  "INST"         ; 9B
DE0B D2               (      exbasic.asm):00707                   FCB  $80+'R
DE0C 535452494E47     (      exbasic.asm):00708                   FCC  "STRING"       ; 9C
DE12 A4               (      exbasic.asm):00709                   FCB  $80+'$
                      (      exbasic.asm):00710         
                      (      exbasic.asm):00711         *
                      (      exbasic.asm):00712         * DISPATCH TABLE FOR COMMANDS TOKEN #
DE13                  (      exbasic.asm):00713         CMD_TAB
DE13 DFD1             (      exbasic.asm):00714         LAB67     FDB  FOR            ; 80
DE15 E11C             (      exbasic.asm):00715                   FDB  GO             ; 81
DE17 E179             (      exbasic.asm):00716                   FDB  REM            ; 82
     0082             (      exbasic.asm):00717         TOK_REM   EQU  (*-CMD_TAB)/2+$7F
DE19 E179             (      exbasic.asm):00718                   FDB  REM            ; 83 (')
     0083             (      exbasic.asm):00719         TOK_SNGL_Q EQU  (*-CMD_TAB)/2+$7F
DE1B E179             (      exbasic.asm):00720                   FDB  REM            ; 84 (ELSE)
     0084             (      exbasic.asm):00721         TOK_ELSE  EQU  (*-CMD_TAB)/2+$7F
DE1D E1AA             (      exbasic.asm):00722                   FDB  IF             ; 85
     0085             (      exbasic.asm):00723         TOK_IF    EQU  (*-CMD_TAB)/2+$7F
DE1F E176             (      exbasic.asm):00724                   FDB  DATA           ; 86
     0086             (      exbasic.asm):00725         TOK_DATA  EQU  (*-CMD_TAB)/2+$7F
DE21 EB53             (      exbasic.asm):00726                   FDB  PRINT          ; 87
     0087             (      exbasic.asm):00727         TOK_PRINT EQU  (*-CMD_TAB)/2+$7F
DE23 E1D8             (      exbasic.asm):00728                   FDB  ON             ; 88
DE25 E285             (      exbasic.asm):00729                   FDB  INPUT          ; 89
     0089             (      exbasic.asm):00730         TOK_INPUT EQU  (*-CMD_TAB)/2+$7F
DE27 E0A3             (      exbasic.asm):00731                   FDB  END            ; 8A
DE29 E36A             (      exbasic.asm):00732                   FDB  NEXT           ; 8B
DE2B E5BB             (      exbasic.asm):00733                   FDB  DIM            ; 8C
DE2D E2BF             (      exbasic.asm):00734                   FDB  READ           ; 8D
DE2F E111             (      exbasic.asm):00735                   FDB  RUN            ; 8E
DE31 E085             (      exbasic.asm):00736                   FDB  RESTOR         ; 8F
DE33 E156             (      exbasic.asm):00737                   FDB  RETURN         ; 90
DE35 E0A7             (      exbasic.asm):00738                   FDB  STOP           ; 91
DE37 E9C4             (      exbasic.asm):00739                   FDB  POKE           ; 92
DE39 E0CC             (      exbasic.asm):00740                   FDB  CONT           ; 93
DE3B E9CB             (      exbasic.asm):00741                   FDB  LIST           ; 94
DE3D E0DD             (      exbasic.asm):00742                   FDB  CLEAR          ; 95
DE3F DFA1             (      exbasic.asm):00743                   FDB  NEW            ; 96
DE41 DC75             (      exbasic.asm):00744                   FDB  EXEC           ; 97
DE43 F54D             (      exbasic.asm):00745                   FDB  TRON           ; 98
DE45 F54E             (      exbasic.asm):00746                   FDB  TROFF          ; 99
DE47 F7C9             (      exbasic.asm):00747                   FDB  DEL            ; 9A
DE49 F70D             (      exbasic.asm):00748                   FDB  DEF            ; 9B
DE4B FEB7             (      exbasic.asm):00749                   FDB  LINE           ; 9C
DE4D F853             (      exbasic.asm):00750                   FDB  RENUM          ; 9D
DE4F F3D9             (      exbasic.asm):00751                   FDB  EDIT           ; 9E
     009E             (      exbasic.asm):00752         TOK_HIGH_EXEC EQU  (*-CMD_TAB)/2+$7F
                      (      exbasic.asm):00753         
                      (      exbasic.asm):00754         * ERROR MESSAGES AND THEIR NUMBERS AS USED INTERNALLY
DE51 4E46             (      exbasic.asm):00755         LABAF     FCC  "NF"           ; 0 NEXT WITHOUT FOR
DE53 534E             (      exbasic.asm):00756                   FCC  "SN"           ; 1 SYNTAX ERROR
DE55 5247             (      exbasic.asm):00757                   FCC  "RG"           ; 2 RETURN WITHOUT GOSUB
DE57 4F44             (      exbasic.asm):00758                   FCC  "OD"           ; 3 OUT OF DATA
DE59 4643             (      exbasic.asm):00759                   FCC  "FC"           ; 4 ILLEGAL FUNCTION CALL
DE5B 4F56             (      exbasic.asm):00760                   FCC  "OV"           ; 5 OVERFLOW
DE5D 4F4D             (      exbasic.asm):00761                   FCC  "OM"           ; 6 OUT OF MEMORY
DE5F 554C             (      exbasic.asm):00762                   FCC  "UL"           ; 7 UNDEFINED LINE NUMBER
DE61 4253             (      exbasic.asm):00763                   FCC  "BS"           ; 8 BAD SUBSCRIPT
DE63 4444             (      exbasic.asm):00764                   FCC  "DD"           ; 9 REDIMENSIONED ARRAY
DE65 2F30             (      exbasic.asm):00765                   FCC  "/0"           ; 10 DIVISION BY ZERO
DE67 4944             (      exbasic.asm):00766                   FCC  "ID"           ; 11 ILLEGAL DIRECT STATEMENT
DE69 544D             (      exbasic.asm):00767                   FCC  "TM"           ; 12 TYPE MISMATCH
DE6B 4F53             (      exbasic.asm):00768                   FCC  "OS"           ; 13 OUT OF STRING SPACE
DE6D 4C53             (      exbasic.asm):00769                   FCC  "LS"           ; 14 STRING TOO LONG
DE6F 5354             (      exbasic.asm):00770                   FCC  "ST"           ; 15 STRING FORMULA TOO COMPLEX
DE71 434E             (      exbasic.asm):00771                   FCC  "CN"           ; 16 CAN'T CONTINUE
DE73 4644             (      exbasic.asm):00772                   FCC  "FD"           ; 17 BAD FILE DATA
DE75 414F             (      exbasic.asm):00773                   FCC  "AO"           ; 18 FILE ALREADY OPEN
DE77 444E             (      exbasic.asm):00774                   FCC  "DN"           ; 19 DEVICE NUMBER ERROR
DE79 494F             (      exbasic.asm):00775                   FCC  "IO"           ; 20 I/O ERROR
DE7B 464D             (      exbasic.asm):00776                   FCC  "FM"           ; 21 BAD FILE MODE
DE7D 4E4F             (      exbasic.asm):00777                   FCC  "NO"           ; 22 FILE NOT OPEN
DE7F 4945             (      exbasic.asm):00778                   FCC  "IE"           ; 23 INPUT PAST END OF FILE
DE81 4453             (      exbasic.asm):00779                   FCC  "DS"           ; 24 DIRECT STATEMENT IN FILE
                      (      exbasic.asm):00780         * ADDITIONAL ERROR MESSAGES ADDED BY EXTENDED BASIC
DE83 5546             (      exbasic.asm):00781         L890B     FCC  "UF"           ; 25 UNDEFINED FUNCTION (FN) CALL
DE85 4E45             (      exbasic.asm):00782         L890D     FCC  "NE"           ; 26 FILE NOT FOUND
                      (      exbasic.asm):00783         
DE87 204552524F52     (      exbasic.asm):00784         LABE1     FCC  " ERROR"
DE8D 00               (      exbasic.asm):00785                   FCB  $00
DE8E 20494E20         (      exbasic.asm):00786         LABE8     FCC  " IN "
DE92 00               (      exbasic.asm):00787                   FCB  $00
DE93 0D               (      exbasic.asm):00788         LABED     FCB  CR
DE94 4F4B             (      exbasic.asm):00789         LABEE     FCC  "OK"
DE96 0D00             (      exbasic.asm):00790                   FCB  CR,$00
DE98 0D               (      exbasic.asm):00791         LABF2     FCB  CR
DE99 425245414B       (      exbasic.asm):00792                   FCC  "BREAK"
DE9E 00               (      exbasic.asm):00793                   FCB  $00
                      (      exbasic.asm):00794         
                      (      exbasic.asm):00795         * SEARCH THE STACK FOR 'GOSUB/RETURN' OR 'FOR/NEXT' DATA.
                      (      exbasic.asm):00796         * THE 'FOR/NEXT' INDEX VARIABLE DESCRIPTOR ADDRESS BEING
                      (      exbasic.asm):00797         * SOUGHT IS STORED IN VARDES. EACH BLOCK OF FOR/NEXT DATA IS 18
                      (      exbasic.asm):00798         * BYTES WITH A $80 LEADER BYTE AND THE GOSUB/RETURN DATA IS 5 BYTES
                      (      exbasic.asm):00799         * WITH AN $A6 LEADER BYTE. THE FIRST NON "FOR/NEXT" DATA
                      (      exbasic.asm):00800         * IS CONSIDERED 'GOSUB/RETURN'
DE9F 3064             (      exbasic.asm):00801         LABF9     LEAX 4,S            ; POINT X TO 3RD ADDRESS ON STACK - IGNORE THE
                      (      exbasic.asm):00802         *         FIRST TWO RETURN ADDRESSES ON THE STACK
DEA1 C612             (      exbasic.asm):00803         LABFB     LDB  #18            ; 18 BYTES SAVED ON STACK FOR EACH 'FOR' LOOP
DEA3 9F0F             (      exbasic.asm):00804                   STX  TEMPTR         ; SAVE POINTER
DEA5 A684             (      exbasic.asm):00805                   LDA  ,X             ; GET 1ST BYTE
DEA7 8080             (      exbasic.asm):00806                   SUBA #$80           ; * CHECK FOR TYPE OF STACK JUMP FOUND
DEA9 2615             (      exbasic.asm):00807                   BNE  LAC1A          ; * BRANCH IF NOT 'FOR/NEXT'
DEAB AE01             (      exbasic.asm):00808                   LDX  1,X            ; = GET INDEX VARIABLE DESCRIPTOR
DEAD 9F11             (      exbasic.asm):00809                   STX  TMPTR1         ; = POINTER AND SAVE IT IN TMPTR1
DEAF 9E3B             (      exbasic.asm):00810                   LDX  VARDES         ; GET INDEX VARIABLE BEING SEARCHED FOR
DEB1 2709             (      exbasic.asm):00811                   BEQ  LAC16          ; BRANCH IF DEFAULT INDEX VARIABLE - USE THE
                      (      exbasic.asm):00812         *                             ; FIRST 'FOR/NEXT' DATA FOUND ON STACK
                      (      exbasic.asm):00813         *                             ; IF NO INDEX VARIABLE AFTER 'NEXT'
DEB3 9C11             (      exbasic.asm):00814                   CMPX TMPTR1         ; DOES THE STACK INDEX MATCH THE ONE
                      (      exbasic.asm):00815         *                             ; BEING SEARCHED FOR?
DEB5 2709             (      exbasic.asm):00816                   BEQ  LAC1A          ; YES
DEB7 9E0F             (      exbasic.asm):00817                   LDX  TEMPTR         ; * RESTORE INITIAL POINTER, ADD
DEB9 3A               (      exbasic.asm):00818                   ABX                 ; * 18 TO IT AND LOOK FOR
DEBA 20E5             (      exbasic.asm):00819                   BRA  LABFB          ; * NEXT BLOCK OF DATA
DEBC 9E11             (      exbasic.asm):00820         LAC16     LDX  TMPTR1         ; = GET 1ST INDEX VARIABLE FOUND AND
DEBE 9F3B             (      exbasic.asm):00821                   STX  VARDES         ; = SAVE AS 'NEXT' INDEX
DEC0 9E0F             (      exbasic.asm):00822         LAC1A     LDX  TEMPTR         ; POINT X TO START OF 'FOR/NEXT' DATA
DEC2 4D               (      exbasic.asm):00823                   TSTA                ; SET ZERO FLAG IF 'FOR/NEXT' DATA
DEC3 39               (      exbasic.asm):00824                   RTS
                      (      exbasic.asm):00825         * CHECK FOR MEMORY SPACE FOR NEW TOP OF
                      (      exbasic.asm):00826         * ARRAYS AND MOVE ARRAYS TO NEW LOCATION
DEC4 8D17             (      exbasic.asm):00827         LAC1E     BSR  LAC37          ; ACCD = NEW BOTTOM OF FREE RAM - IS THERE
                      (      exbasic.asm):00828         *                             ; ROOM FOR THE STACK?
                      (      exbasic.asm):00829         * MOVE BYTES FROM V43(X) TO V41(U) UNTIL (X) = V47 AND
                      (      exbasic.asm):00830         * SAVE FINAL VALUE OF U IN V45
DEC6 DE41             (      exbasic.asm):00831         LAC20     LDU  V41            ; POINT U TO DESTINATION ADDRESS (V41)
DEC8 3341             (      exbasic.asm):00832                   LEAU 1,U            ; ADD ONE TO U - COMPENSATE FOR FIRST PSHU
DECA 9E43             (      exbasic.asm):00833                   LDX  V43            ; POINT X TO SOURCE ADDRESS (V43)
DECC 3001             (      exbasic.asm):00834                   LEAX 1,X            ; ADD ONE - COMPENSATE FOR FIRST LDA ,X
DECE A682             (      exbasic.asm):00835         LAC28     LDA  ,-X            ; GRAB A BYTE FROM SOURCE
DED0 3602             (      exbasic.asm):00836                   PSHU A              ; MOVE IT TO DESTINATION
DED2 9C47             (      exbasic.asm):00837                   CMPX V47            ; DONE?
DED4 26F8             (      exbasic.asm):00838                   BNE  LAC28          ; NO - KEEP MOVING BYTES
DED6 DF45             (      exbasic.asm):00839                   STU  V45            ; SAVE FINAL DESTINATION ADDRESS
DED8 39               (      exbasic.asm):00840         LAC32     RTS
                      (      exbasic.asm):00841         * CHECK TO SEE IF THERE IS ROOM TO STORE 2*ACCB
                      (      exbasic.asm):00842         * BYTES IN FREE RAM - OM ERROR IF NOT
DED9 4F               (      exbasic.asm):00843         LAC33     CLRA                ; * ACCD CONTAINS NUMBER OF EXTRA
DEDA 58               (      exbasic.asm):00844                   ASLB                ; * BYTES TO PUT ON STACK
DEDB D31F             (      exbasic.asm):00845                   ADDD ARYEND         ; END OF PROGRAM AND VARIABLES
DEDD C3003A           (      exbasic.asm):00846         LAC37     ADDD #STKBUF        ; ADD STACK BUFFER - ROOM FOR STACK?
DEE0 2508             (      exbasic.asm):00847                   BCS  LAC44          ; BRANCH IF GREATER THAN $FFFF
DEE2 10DF17           (      exbasic.asm):00848                   STS  BOTSTK         ; CURRENT NEW BOTTOM OF STACK STACK POINTER
DEE5 109317           (      exbasic.asm):00849                   CMPD BOTSTK         ; ARE WE GOING TO BE BELOW STACK?
DEE8 25EE             (      exbasic.asm):00850                   BCS  LAC32          ; YES - NO ERROR
DEEA C60C             (      exbasic.asm):00851         LAC44     LDB  #6*2           ; OUT OF MEMORY ERROR
                      (      exbasic.asm):00852         
                      (      exbasic.asm):00853         * ERROR SERVICING ROUTINE
DEEC BDDFBD           (      exbasic.asm):00854         LAC46     JSR  LAD33          ; RESET STACK, STRING STACK, CONTINUE POINTER
DEEF BDEB92           (      exbasic.asm):00855                   JSR  LB95C          ; SEND A CR TO SCREEN
DEF2 BDEBE1           (      exbasic.asm):00856                   JSR  LB9AF          ; SEND A '?' TO SCREEN
DEF5 8EDE51           (      exbasic.asm):00857                   LDX  #LABAF         ; POINT TO ERROR TABLE
DEF8 3A               (      exbasic.asm):00858         LAC60     ABX                 ; ADD MESSAGE NUMBER OFFSET
DEF9 8D31             (      exbasic.asm):00859                   BSR  LACA0          ; * GET TWO CHARACTERS FROM X AND
DEFB 8D2F             (      exbasic.asm):00860                   BSR  LACA0          ; * SEND TO CONSOLE OUT (SCREEN)
DEFD 8EDE86           (      exbasic.asm):00861                   LDX  #LABE1-1       ; POINT TO "ERROR" MESSAGE
DF00 BDEBCE           (      exbasic.asm):00862         LAC68     JSR  LB99C          ; PRINT MESSAGE POINTED TO BY X
DF03 9668             (      exbasic.asm):00863                   LDA  CURLIN         ; GET CURRENT LINE NUMBER (CURL IN)
DF05 4C               (      exbasic.asm):00864                   INCA                ; TEST FOR DIRECT MODE
DF06 2703             (      exbasic.asm):00865                   BEQ  LAC73          ; BRANCH IF DIRECT MODE
DF08 BDEFF7           (      exbasic.asm):00866                   JSR  LBDC5          ; PRINT 'IN ****'
                      (      exbasic.asm):00867         
                      (      exbasic.asm):00868         * THIS IS THE MAIN LOOP OF BASIC WHEN IN DIRECT MODE
DF0B BDEB92           (      exbasic.asm):00869         LAC73     JSR  LB95C          ; MOVE CURSOR TO START OF LINE
DF0E 8EDE93           (      exbasic.asm):00870                   LDX  #LABED         ; POINT X TO 'OK', CR MESSAGE
DF11 BDEBCE           (      exbasic.asm):00871                   JSR  LB99C          ; PRINT 'OK', CR
DF14 BDDC2A           (      exbasic.asm):00872         LAC7C     JSR  LA390          ; GO GET AN INPUT LINE
DF17 CEFFFF           (      exbasic.asm):00873                   LDU  #$FFFF         ; THE LINE NUMBER FOR DIRECT MODE IS $FFFF
DF1A DF68             (      exbasic.asm):00874                   STU  CURLIN         ; SAVE IT IN CURLIN
DF1C 25F6             (      exbasic.asm):00875                   BCS  LAC7C          ; BRANCH IF LINE INPUT TERMINATED BY BREAK
DF1E 9F83             (      exbasic.asm):00876                   STX  CHARAD         ; SAVE (X) AS CURRENT INPUT POINTER - THIS WILL
                      (      exbasic.asm):00877         *         ENABLE THE 'LIVE KEYBOARD' (DIRECT) MODE. THE
                      (      exbasic.asm):00878         *         LINE JUST ENTERED WILL BE INTERPRETED
DF20 9D7C             (      exbasic.asm):00879                   JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
DF22 27F0             (      exbasic.asm):00880                   BEQ  LAC7C          ; NO LINE INPUT - GET ANOTHER LINE
DF24 250B             (      exbasic.asm):00881                   BCS  LACA5          ; BRANCH IF NUMER1C - THERE WAS A LINE NUMBER BEFORE
                      (      exbasic.asm):00882         *         THE  STATEMENT ENTERED, SO THIS STATEMENT
                      (      exbasic.asm):00883         *         WILL BE MERGED INTO THE BASIC PROGRAM
DF26 BDEA80           (      exbasic.asm):00884                   JSR  LB821          ; GO CRUNCH LINE
DF29 7EE05A           (      exbasic.asm):00885                   JMP  LADC0          ; GO EXECUTE THE STATEMENT (LIVE KEYBOARD)
                      (      exbasic.asm):00886         *
DF2C A680             (      exbasic.asm):00887         LACA0     LDA  ,X+            ; GET A CHARACTER
DF2E 7EEBE3           (      exbasic.asm):00888                   JMP  LB9B1          ; SEND TO CONSOLE OUT
                      (      exbasic.asm):00889         * TAKE A LINE FROM THE LINE INPUT BUFFER
                      (      exbasic.asm):00890         * AND INSERT IT INTO THE BASIC PROGRAM
DF31 BDE1FD           (      exbasic.asm):00891         LACA5     JSR  LAF67          ; CONVERT LINE NUMBER TO BINARY
DF34 9E2B             (      exbasic.asm):00892         LACA8     LDX  BINVAL         ; GET CONVERTED LINE NUMBER
DF36 9FF1             (      exbasic.asm):00893                   STX  LINHDR         ; STORE IT IN LINE INPUT HEADER
DF38 BDEA80           (      exbasic.asm):00894                   JSR  LB821          ; GO CRUNCH THE LINE
DF3B D703             (      exbasic.asm):00895                   STB  TMPLOC         ; SAVE LINE LENGTH
DF3D 8D4C             (      exbasic.asm):00896                   BSR  LAD01          ; FIND OUT WHERE TO INSERT LINE
DF3F 2512             (      exbasic.asm):00897                   BCS  LACC8          ; RANCH IF LINE NUMBER DOES NOT ALREADY EXIST
DF41 DC47             (      exbasic.asm):00898                   LDD  V47            ; GET ABSOLUTE ADDRESS OF LINE NUMBER
DF43 A384             (      exbasic.asm):00899                   SUBD ,X             ; SUBTRACT ADDRESS OF NEXT LINE NUMBER
DF45 D31B             (      exbasic.asm):00900                   ADDD VARTAB         ; * ADD TO CURRENT END OF PROGRAM - THIS WILL REMOVE
DF47 DD1B             (      exbasic.asm):00901                   STD  VARTAB         ; * THE LENGTH OF THIS LINE NUMBER FROM THE PROGRAM
DF49 EE84             (      exbasic.asm):00902                   LDU  ,X             ; POINT U TO ADDRESS OF NEXT LINE NUMBER
                      (      exbasic.asm):00903         * DELETE OLD LINE FROM BASIC PROGRAM
DF4B 3702             (      exbasic.asm):00904         LACC0     PULU A              ; GET A BYTE FROM WHAT'S LEFT OF PROGRAM
DF4D A780             (      exbasic.asm):00905                   STA  ,X+            ; MOVE IT DOWN
DF4F 9C1B             (      exbasic.asm):00906                   CMPX VARTAB         ; COMPARE TO END OF BASIC PROGRAM
DF51 26F8             (      exbasic.asm):00907                   BNE  LACC0          ; BRANCH IF NOT AT END
DF53 96F3             (      exbasic.asm):00908         LACC8     LDA  LINBUF         ; * CHECK TO SEE IF THERE IS A LINE IN
DF55 271C             (      exbasic.asm):00909                   BEQ  LACE9          ; * THE BUFFER AND BRANCH IF NONE
DF57 DC1B             (      exbasic.asm):00910                   LDD  VARTAB         ; = SAVE CURRENT END OF
DF59 DD43             (      exbasic.asm):00911                   STD  V43            ; = PROGRAM IN V43
DF5B DB03             (      exbasic.asm):00912                   ADDB TMPLOC         ; * ADD LENGTH OF CRUNCHED LINE,
DF5D 8900             (      exbasic.asm):00913                   ADCA #0             ; * PROPOGATE CARRY AND SAVE NEW END
DF5F DD41             (      exbasic.asm):00914                   STD  V41            ; * OF PROGRAM IN V41
DF61 BDDEC4           (      exbasic.asm):00915                   JSR  LAC1E          ; = MAKE SURE THERE'S ENOUGH RAM FOR THIS
                      (      exbasic.asm):00916         *         =    LINE & MAKE A HOLE IN BASIC FOR NEW LINE
DF64 CE00EF           (      exbasic.asm):00917                   LDU  #LINHDR-2      ; POINT U TO LINE TO BE INSERTED
DF67 3702             (      exbasic.asm):00918         LACDD     PULU A              ; GET A BYTE FROM NEW LINE
DF69 A780             (      exbasic.asm):00919                   STA  ,X+            ; INSERT IT IN PROGRAM
DF6B 9C45             (      exbasic.asm):00920                   CMPX V45            ; * COMPARE TO ADDRESS OF END OF INSERTED
DF6D 26F8             (      exbasic.asm):00921                   BNE  LACDD          ; * LINE AND BRANCH IF NOT DONE
DF6F 9E41             (      exbasic.asm):00922                   LDX  V41            ; = GET AND SAVE
DF71 9F1B             (      exbasic.asm):00923                   STX  VARTAB         ; = END OF PROGRAM
DF73 8D36             (      exbasic.asm):00924         LACE9     BSR  LAD21          ; RESET INPUT POINTER, CLEAR VARIABLES, INITIALIZE
DF75 8D02             (      exbasic.asm):00925                   BSR  LACEF          ; ADJUST START OF NEXT LINE ADDRESSES
DF77 209B             (      exbasic.asm):00926                   BRA  LAC7C          ; EENTER BASIC'S INPUT LOOP
                      (      exbasic.asm):00927         * COMPUTE THE START OF NEXT LINE ADDRESSES FOR THE BASIC PROGRAM
DF79 9E19             (      exbasic.asm):00928         LACEF     LDX  TXTTAB         ; POINT X TO START OF PROGRAM
DF7B EC84             (      exbasic.asm):00929         LACF1     LDD  ,X             ; GET ADDRESS OF NEXT LINE
DF7D 2721             (      exbasic.asm):00930                   BEQ  LAD16          ; RETURN IF END OF PROGRAM
DF7F 3304             (      exbasic.asm):00931                   LEAU 4,X            ; POINT U TO START OF BASIC TEXT IN LINE
DF81 A6C0             (      exbasic.asm):00932         LACF7     LDA  ,U+            ; * SKIP THROUGH THE LINE UNTIL A
DF83 26FC             (      exbasic.asm):00933                   BNE  LACF7          ; * ZERO (END OF LINE) IS FOUND
DF85 EF84             (      exbasic.asm):00934                   STU  ,X             ; SAVE THE NEW START OF NEXT LINE ADDRESS
DF87 AE84             (      exbasic.asm):00935                   LDX  ,X             ; POINT X TO START OF NEXT LINE
DF89 20F0             (      exbasic.asm):00936                   BRA  LACF1          ; KEEP GOING
                      (      exbasic.asm):00937         *
                      (      exbasic.asm):00938         * FIND A LINE NUMBER IN THE BASIC PROGRAM
                      (      exbasic.asm):00939         * RETURN WITH CARRY SET IF NO MATCH FOUND
DF8B DC2B             (      exbasic.asm):00940         LAD01     LDD  BINVAL         ; GET THE LINE NUMBER TO FIND
DF8D 9E19             (      exbasic.asm):00941                   LDX  TXTTAB         ; BEGINNING OF PROGRAM
DF8F EE84             (      exbasic.asm):00942         LAD05     LDU  ,X             ; GET ADDRESS OF NEXT LINE NUMBER
DF91 2709             (      exbasic.asm):00943                   BEQ  LAD12          ; BRANCH IF END OF PROG
DF93 10A302           (      exbasic.asm):00944                   CMPD 2,X            ; IS IT A MATCH?
DF96 2306             (      exbasic.asm):00945                   BLS  LAD14          ; CARRY SET IF LOWER; CARRY CLEAR IF MATCH
DF98 AE84             (      exbasic.asm):00946                   LDX  ,X             ; X = ADDRESS OF NEXT LINE
DF9A 20F3             (      exbasic.asm):00947                   BRA  LAD05          ; KEEP LOOPING FOR LINE NUMBER
DF9C 1A01             (      exbasic.asm):00948         LAD12     ORCC #1             ; SET CARRY FLAG
DF9E 9F47             (      exbasic.asm):00949         LAD14     STX  V47            ; SAVE MATCH LINE NUMBER OR NUMBER OF LINE JUST AFTER
                      (      exbasic.asm):00950         *                             ; WHERE IT SHOULD HAVE BEEN
DFA0 39               (      exbasic.asm):00951         LAD16     RTS
                      (      exbasic.asm):00952         
                      (      exbasic.asm):00953         * NEW
DFA1 26FB             (      exbasic.asm):00954         NEW       BNE  LAD14          ; BRANCH IF ARGUMENT GIVEN
DFA3 9E19             (      exbasic.asm):00955         LAD19     LDX  TXTTAB         ; GET START OF BASIC
DFA5 6F80             (      exbasic.asm):00956                   CLR  ,X+            ; * PUT 2 ZERO BYTES THERE - ERASE
DFA7 6F80             (      exbasic.asm):00957                   CLR  ,X+            ; * THE BASIC PROGRAM
DFA9 9F1B             (      exbasic.asm):00958                   STX  VARTAB         ; AND THE NEXT ADDRESS IS NOW THE END OF PROGRAM
DFAB 9E19             (      exbasic.asm):00959         LAD21     LDX  TXTTAB         ; GET START OF BASIC
DFAD BDE151           (      exbasic.asm):00960                   JSR  LAEBB          ; PUT INPUT POINTER ONE BEFORE START OF BASIC
                      (      exbasic.asm):00961         * ERASE ALL VARIABLES
DFB0 9E27             (      exbasic.asm):00962         LAD26     LDX  MEMSIZ         ; * RESET START OF STRING VARIABLES
DFB2 9F23             (      exbasic.asm):00963                   STX  STRTAB         ; * TO TOP OF STRING SPACE
DFB4 BDE085           (      exbasic.asm):00964                   JSR  RESTOR         ; RESET 'DATA' POINTER TO START OF BASIC
DFB7 9E1B             (      exbasic.asm):00965                   LDX  VARTAB         ; * GET START OF VARIABLES AND USE IT
DFB9 9F1D             (      exbasic.asm):00966                   STX  ARYTAB         ; * TO RESET START OF ARRAYS
DFBB 9F1F             (      exbasic.asm):00967                   STX  ARYEND         ; RESET END OF ARRAYS
DFBD 8E00C9           (      exbasic.asm):00968         LAD33     LDX  #STRSTK        ; * RESET STRING STACK POINTER TO
DFC0 9F0B             (      exbasic.asm):00969                   STX  TEMPPT         ; * BOTTOM OF STRING STACK
DFC2 AEE4             (      exbasic.asm):00970                   LDX  ,S             ; GET RETURN ADDRESS OFF STACK
DFC4 10DE21           (      exbasic.asm):00971                   LDS  FRETOP         ; RESTORE STACK POINTER
DFC7 6FE2             (      exbasic.asm):00972                   CLR  ,-S            ; PUT A ZERO BYTE ON STACK - TO CLEAR ANY RETURN OF
                      (      exbasic.asm):00973         *                             ; FOR/NEXT DATA FROM THE STACK
DFC9 0F2D             (      exbasic.asm):00974                   CLR  OLDPTR         ; RESET 'CONT' ADDRESS SO YOU
DFCB 0F2E             (      exbasic.asm):00975                   CLR  OLDPTR+1       ; 'CAN'T CONTINUE'
DFCD 0F08             (      exbasic.asm):00976                   CLR  ARYDIS         ; CLEAR THE ARRAY DISABLE FLAG
DFCF 6E84             (      exbasic.asm):00977                   JMP  ,X             ; RETURN TO CALLING ROUTINE - THIS IS NECESSARY
                      (      exbasic.asm):00978         *                             ; SINCE THE STACK WAS RESET
                      (      exbasic.asm):00979         *
                      (      exbasic.asm):00980         * FOR
                      (      exbasic.asm):00981         *
                      (      exbasic.asm):00982         * THE FOR COMMAND WILL STORE 18 BYTES ON THE STACK FOR
                      (      exbasic.asm):00983         * EACH FOR-NEXT LOOP WHICH IS BEING PROCESSED. THESE
                      (      exbasic.asm):00984         * BYTES ARE DEFINED AS FOLLOWS: 0- $80 (FOR FLAG);
                      (      exbasic.asm):00985         *         1,2=INDEX VARIABLE DESCRIPTOR POINTER; 3-7=FP VALUE OF STEP;
                      (      exbasic.asm):00986         *         8=STEP DIRECTION: $FF IF NEGATIVE; 0 IF ZERO; 1 IF POSITIVE;
                      (      exbasic.asm):00987         * 9-13=FP VALUE OF 'TO' PARAMETER;
                      (      exbasic.asm):00988         * 14,15=CURRENT LINE NUMBER; 16,17=RAM ADDRESS OF THE END
                      (      exbasic.asm):00989         *         OF   THE LINE CONTAINING THE 'FOR' STATEMENT
DFD1 8680             (      exbasic.asm):00990         FOR       LDA  #$80           ; * SAVE THE DISABLE ARRAY FLAG IN VO8
DFD3 9708             (      exbasic.asm):00991                   STA  ARYDIS         ; * DO NOT ALLOW THE INDEX VARIABLE TO BE AN ARRAY
DFD5 BDE21F           (      exbasic.asm):00992                   JSR  LET            ; SET INDEX VARIABLE TO INITIAL VALUE
DFD8 BDDE9F           (      exbasic.asm):00993                   JSR  LABF9          ; SEARCH THE STACK FOR 'FOR/NEXT' DATA
DFDB 3262             (      exbasic.asm):00994                   LEAS 2,S            ; PURGE RETURN ADDRESS OFF OF THE STACK
DFDD 2604             (      exbasic.asm):00995                   BNE  LAD59          ; BRANCH IF INDEX VARIABLE NOT ALREADY BEING USED
DFDF 9E0F             (      exbasic.asm):00996                   LDX  TEMPTR         ; GET (ADDRESS + 18) OF MATCHED 'FOR/NEXT' DATA
DFE1 3285             (      exbasic.asm):00997                   LEAS B,X            ; MOVE THE STACK POINTER TO THE BEGINNING OF THE
                      (      exbasic.asm):00998         * MATCHED 'FOR/NEXT' DATA SO THE NEW DATA WILL
                      (      exbasic.asm):00999         * OVERLAY THE OLD DATA. THIS WILL ALSO DESTROY
                      (      exbasic.asm):01000         * ALL OF THE 'RETURN' AND 'FOR/NEXT' DATA BELOW
                      (      exbasic.asm):01001         * THIS POINT ON THE STACK
DFE3 C609             (      exbasic.asm):01002         LAD59     LDB  #$09           ; * CHECK FOR ROOM FOR 18 BYTES
DFE5 BDDED9           (      exbasic.asm):01003                   JSR  LAC33          ; * IN FREE RAM
DFE8 BDE17E           (      exbasic.asm):01004                   JSR  LAEE8          ; GET ADDR OF END OF SUBLINE IN X
DFEB DC68             (      exbasic.asm):01005                   LDD  CURLIN         ; GET CURRENT LINE NUMBER
DFED 3416             (      exbasic.asm):01006                   PSHS X,B,A          ; SAVE LINE ADDR AND LINE NUMBER ON STACK
DFEF C6A0             (      exbasic.asm):01007                   LDB  #TOK_TO        ; TOKEN FOR 'TO'
DFF1 BDE4E1           (      exbasic.asm):01008                   JSR  LB26F          ; SYNTAX CHECK FOR 'TO'
DFF4 BDE3B5           (      exbasic.asm):01009                   JSR  LB143          ; 'TM' ERROR IF INDEX VARIABLE SET TO STRING
DFF7 BDE3B3           (      exbasic.asm):01010                   JSR  LB141          ; EVALUATE EXPRESSION
                      (      exbasic.asm):01011         *
DFFA D654             (      exbasic.asm):01012                   LDB  FP0SGN         ; GET FPA0 MANTISSA SIGN
DFFC CA7F             (      exbasic.asm):01013                   ORB  #$7F           ; FORM A MASK TO SAVE DATA BITS OF HIGH ORDER MANTISSA
DFFE D450             (      exbasic.asm):01014                   ANDB FPA0           ; PUT THE MANTISSA SIGN IN BIT 7 OF HIGH ORDER MANTISSA
E000 D750             (      exbasic.asm):01015                   STB  FPA0           ; SAVE THE PACKED HIGH ORDER MANTISSA
E002 108EE009         (      exbasic.asm):01016                   LDY  #LAD7F         ; LOAD FOLLOWING ADDRESS INTO Y AS A RETURN
E006 7EE45C           (      exbasic.asm):01017                   JMP  LB1EA          ; ADDRESS - PUSH FPA0 ONTO THE STACK
E009 8EECF7           (      exbasic.asm):01018         LAD7F     LDX  #LBAC5         ; POINT X TO FLOATING POINT NUMBER 1.0 (DEFAULT STEP VALUE)
E00C BDEE46           (      exbasic.asm):01019                   JSR  LBC14          ; MOVE (X) TO FPA0
E00F 9D82             (      exbasic.asm):01020                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E011 81A4             (      exbasic.asm):01021                   CMPA #TOK_STEP      ; STEP TOKEN
E013 2605             (      exbasic.asm):01022                   BNE  LAD90          ; BRANCH IF NO 'STEP' VALUE
E015 9D7C             (      exbasic.asm):01023                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
E017 BDE3B3           (      exbasic.asm):01024                   JSR  LB141          ; EVALUATE NUMERIC EXPRESSION
E01A BDEE9F           (      exbasic.asm):01025         LAD90     JSR  LBC6D          ; CHECK STATUS OF FPA0
E01D BDE458           (      exbasic.asm):01026                   JSR  LB1E6          ; SAVE STATUS AND FPA0 ON THE STACK
E020 DC3B             (      exbasic.asm):01027                   LDD  VARDES         ; * GET DESCRIPTOR POINTER FOR THE 'STEP'
E022 3406             (      exbasic.asm):01028                   PSHS B,A            ; * VARIABLE AND SAVE IT ON THE STACK
E024 8680             (      exbasic.asm):01029                   LDA  #$80           ; = GET THE 'FOR' FLAG AND
E026 3402             (      exbasic.asm):01030                   PSHS A              ; = SAVE IT ON THE STACK
                      (      exbasic.asm):01031         *
                      (      exbasic.asm):01032         * MAIN COMMAND INTERPRETATION LOOP
E028 1CAF             (      exbasic.asm):01033         LAD9E     ANDCC #$AF          ; ENABLE IRQ,FIRQ
E02A 8D60             (      exbasic.asm):01034                   BSR  LADEB          ; CHECK FOR KEYBOARD BREAK
E02C 9E83             (      exbasic.asm):01035                   LDX  CHARAD         ; GET BASIC'S INPUT POINTER
E02E 9F2F             (      exbasic.asm):01036                   STX  TINPTR         ; SAVE IT
E030 A680             (      exbasic.asm):01037                   LDA  ,X+            ; GET CURRENT INPUT CHAR & MOVE POINTER
E032 2707             (      exbasic.asm):01038                   BEQ  LADB4          ; BRANCH IF END OF LINE
E034 813A             (      exbasic.asm):01039                   CMPA #':            ; CHECK FOR LINE SEPARATOR
E036 2722             (      exbasic.asm):01040                   BEQ  LADC0          ; BRANCH IF COLON
E038 7EE4E9           (      exbasic.asm):01041         LADB1     JMP  LB277          ; 'SYNTAX ERROR'-IF NOT LINE SEPARATOR
E03B A681             (      exbasic.asm):01042         LADB4     LDA  ,X++           ; GET MS BYTE OF ADDRESS OF NEXT BASIC LINE
E03D 9700             (      exbasic.asm):01043                   STA  ENDFLG         ; SAVE IN STOP/END FLAG - CAUSE A STOP IF
                      (      exbasic.asm):01044         *                             ; NEXT LINE ADDRESS IS < $8000; CAUSE
                      (      exbasic.asm):01045         *                             ; AN END IF ADDRESS > $8000
E03F 2772             (      exbasic.asm):01046                   BEQ  LAE15          ; BRANCH TO 'STOP' - END OF PROGRAM
E041 EC80             (      exbasic.asm):01047                   LDD  ,X+            ; GET CURRENT LINE NUMBER
E043 DD68             (      exbasic.asm):01048                   STD  CURLIN         ; SAVE IN CURLIN
E045 9F83             (      exbasic.asm):01049                   STX  CHARAD         ; SAVE ADDRESS OF FIRST BYTE OF LINE
                      (      exbasic.asm):01050         * EXTENDED BASIC TRACE
E047 968C             (      exbasic.asm):01051                   LDA  TRCFLG         ; TEST THE TRACE FLAG
E049 270F             (      exbasic.asm):01052                   BEQ  LADC0          ; BRANCH IF TRACE OFF
E04B 865B             (      exbasic.asm):01053                   LDA  #$5B           ; <LEFT HAND MARKER FOR TRON LINE NUMBER
E04D BDDB10           (      exbasic.asm):01054                   JSR  PUTCHR         ; OUTPUT A CHARACTER
E050 9668             (      exbasic.asm):01055                   LDA  CURLIN         ; GET MS BYTE OF LINE NUMBER
E052 BDEFFE           (      exbasic.asm):01056                   JSR  LBDCC          ; CONVERT ACCD TO DECIMAL AND PRINT ON SCREEN
E055 865D             (      exbasic.asm):01057                   LDA  #$5D           ; > RIGHT HAND MARKER FOR TRON LINE NUMBER
E057 BDDB10           (      exbasic.asm):01058                   JSR  PUTCHR         ; OUTPUT A CHARACTER
                      (      exbasic.asm):01059         * END OF EXTENDED BASIC TRACE
E05A 9D7C             (      exbasic.asm):01060         LADC0     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
E05C 8D02             (      exbasic.asm):01061                   BSR  LADC6          ; GO PROCESS COMMAND
E05E 20C8             (      exbasic.asm):01062                   BRA  LAD9E          ; GO BACK TO MAIN LOOP
E060 2729             (      exbasic.asm):01063         LADC6     BEQ  LADEA          ; RETURN IF END OF LINE (RTS - was BEQ LAE40)
E062 4D               (      exbasic.asm):01064                   TSTA                ; CHECK FOR TOKEN - BIT 7 SET (NEGATIVE)
E063 102A01B8         (      exbasic.asm):01065                   LBPL LET            ; BRANCH IF NOT A TOKEN - GO DO A 'LET' WHICH
                      (      exbasic.asm):01066         *                             ; IS THE 'DEFAULT' TOKEN FOR MICROSOFT BASIC
E067 81FF             (      exbasic.asm):01067                   CMPA #$FF           ; SECONDARY TOKEN
E069 270F             (      exbasic.asm):01068                   BEQ  SECTOK
E06B 819E             (      exbasic.asm):01069                   CMPA #TOK_HIGH_EXEC ; SKIPF TOKEN - HIGHEST EXECUTABLE COMMAND IN BASIC
E06D 22C9             (      exbasic.asm):01070                   BHI  LADB1          ; 'SYNTAX ERROR' IF NON-EXECUTABLE TOKEN
E06F BEDBDD           (      exbasic.asm):01071                   LDX  COMVEC+3       ; GET ADDRESS OF BASIC'S COMMAND TABLE
E072 48               (      exbasic.asm):01072         LADD4     ASLA                ; X2 (2 BYTE/JUMP ADDRESS) & DISCARD BIT 7
E073 1F89             (      exbasic.asm):01073                   TFR  A,B            ; SAVE COMMAND OFFSET IN ACCB
E075 3A               (      exbasic.asm):01074                   ABX                 ; NON X POINTS TO COMMAND JUMP ADDR
E076 9D7C             (      exbasic.asm):01075                   JSR  GETNCH         ; GET AN INPUT CHAR
                      (      exbasic.asm):01076         *
                      (      exbasic.asm):01077         * HERE IS WHERE WE BRANCH TO DO A 'COMMAND'
E078 6E94             (      exbasic.asm):01078                   JMP  [,X]           ; GO DO A COMMAND
E07A                  (      exbasic.asm):01079         SECTOK
                      (      exbasic.asm):01080         * THE ONLY SECONDARY TOKEN THAT CAN ALSO BE AN EXECUTABLE IS
                      (      exbasic.asm):01081         * THE MID$ REPLACEMENT STATEMENT. SO SPECIAL-CASE CHECK DONE HERE
E07A 9D7C             (      exbasic.asm):01082                   JSR  GETNCH         ; GET AN INPUT CHAR
E07C 8197             (      exbasic.asm):01083                   CMPA #TOK_MID       ; TOKEN FOR "MID$"
E07E 102714F0         (      exbasic.asm):01084                   LBEQ L86D6          ; PROCESS MID$ REPLACEMENT
E082 7EE4E9           (      exbasic.asm):01085                   JMP  LB277          ; SYNTAX ERROR
                      (      exbasic.asm):01086         
                      (      exbasic.asm):01087         *
                      (      exbasic.asm):01088         * RESTORE
E085 9E19             (      exbasic.asm):01089         RESTOR    LDX  TXTTAB         ; BEGINNING OF PROGRAM ADDRESS
E087 301F             (      exbasic.asm):01090                   LEAX -1,X           ; MOVE TO ONE BYTE BEFORE PROGRAM
E089 9F33             (      exbasic.asm):01091         LADE8     STX  DATPTR         ; SAVE NEW DATA POINTER
E08B 39               (      exbasic.asm):01092         LADEA     RTS
                      (      exbasic.asm):01093         *
                      (      exbasic.asm):01094         * BREAK CHECK
E08C BDDB05           (      exbasic.asm):01095         LADEB     JSR  LA1C1          ; GET A KEYSTROKE ENTRY
E08F 270A             (      exbasic.asm):01096                   BEQ  LADFA          ; RETURN IF NO INPUT
E091 8103             (      exbasic.asm):01097         LADF0     CMPA #3             ; CONTROL C? (BREAK)
E093 2712             (      exbasic.asm):01098                   BEQ  STOP           ; YES
E095 8113             (      exbasic.asm):01099                   CMPA #$13           ; CONTROL S? (PAUSE)
E097 2703             (      exbasic.asm):01100                   BEQ  LADFB          ; YES
E099 9773             (      exbasic.asm):01101                   STA  IKEYIM         ; SAVE KEYSTROKE IN INKEY IMAGE
E09B 39               (      exbasic.asm):01102         LADFA     RTS
E09C BDDB05           (      exbasic.asm):01103         LADFB     JSR  KEYIN          ; GET A KEY
E09F 27FB             (      exbasic.asm):01104                   BEQ  LADFB          ; BRANCH IF NO KEY DOWN
E0A1 20EE             (      exbasic.asm):01105                   BRA  LADF0          ; CONTINUE - DO A BREAK CHECK
                      (      exbasic.asm):01106         *
                      (      exbasic.asm):01107         * END
E0A3 9D82             (      exbasic.asm):01108         END       JSR  GETCCH         ; GET CURRENT INPUT CHAR
E0A5 2002             (      exbasic.asm):01109                   BRA  LAE0B
                      (      exbasic.asm):01110         *
                      (      exbasic.asm):01111         * STOP
E0A7 1A01             (      exbasic.asm):01112         STOP      ORCC #$01           ; SET CARRY FLAG
E0A9 2631             (      exbasic.asm):01113         LAE0B     BNE  LAE40          ; BRANCH IF ARGUMENT EXISTS
E0AB 9E83             (      exbasic.asm):01114                   LDX  CHARAD         ; * SAVE CURRENT POSITION OF
E0AD 9F2F             (      exbasic.asm):01115                   STX  TINPTR         ; * BASIC'S INPUT POINTER
E0AF 0600             (      exbasic.asm):01116         LAE11     ROR  ENDFLG         ; ROTATE CARRY INTO BIT 7 OF STOP/END FLAG
E0B1 3262             (      exbasic.asm):01117                   LEAS 2,S            ; PURGE RETURN ADDRESS OFF STACK
E0B3 9E68             (      exbasic.asm):01118         LAE15     LDX  CURLIN         ; GET CURRENT LINE NUMBER
E0B5 8CFFFF           (      exbasic.asm):01119                   CMPX #$FFFF         ; DIRECT MODE?
E0B8 2706             (      exbasic.asm):01120                   BEQ  LAE22          ; YES
E0BA 9F29             (      exbasic.asm):01121                   STX  OLDTXT         ; SAVE CURRENT LINE NUMBER
E0BC 9E2F             (      exbasic.asm):01122                   LDX  TINPTR         ; * GET AND SAVE CURRENT POSITION
E0BE 9F2D             (      exbasic.asm):01123                   STX  OLDPTR         ; * OF BASIC'S INPUT POINTER
E0C0                  (      exbasic.asm):01124         LAE22
E0C0 8EDE97           (      exbasic.asm):01125                   LDX  #LABF2-1       ; POINT TO CR, 'BREAK' MESSAGE
E0C3 0D00             (      exbasic.asm):01126                   TST  ENDFLG         ; CHECK STOP/END FLAG
E0C5 102AFE42         (      exbasic.asm):01127                   LBPL LAC73          ; BRANCH TO MAIN LOOP OF BASIC IF END
E0C9 7EDF00           (      exbasic.asm):01128                   JMP  LAC68          ; PRINT 'BREAK AT ####' AND GO TO
                      (      exbasic.asm):01129         *                             ; BASIC'S MAIN LOOP IF 'STOP'
                      (      exbasic.asm):01130         
                      (      exbasic.asm):01131         * CONT
E0CC 260E             (      exbasic.asm):01132         CONT      BNE  LAE40          ; RETURN IF ARGUMENT GIVEN
E0CE C620             (      exbasic.asm):01133                   LDB  #2*16          ; 'CAN'T CONTINUE' ERROR
E0D0 9E2D             (      exbasic.asm):01134                   LDX  OLDPTR         ; GET CONTINUE ADDRESS (INPUT POINTER)
E0D2 1027FE16         (      exbasic.asm):01135                   LBEQ LAC46          ; 'CN' ERROR IF CONTINUE ADDRESS = 0
E0D6 9F83             (      exbasic.asm):01136                   STX  CHARAD         ; RESET BASIC'S INPUT POINTER
E0D8 9E29             (      exbasic.asm):01137                   LDX  OLDTXT         ; GET LINE NUMBER
E0DA 9F68             (      exbasic.asm):01138                   STX  CURLIN         ; RESET CURRENT LINE NUMBER
E0DC 39               (      exbasic.asm):01139         LAE40     RTS
                      (      exbasic.asm):01140         *
                      (      exbasic.asm):01141         * CLEAR
E0DD 272C             (      exbasic.asm):01142         CLEAR     BEQ  LAE6F          ; BRANCH IF NO ARGUMENT
E0DF BDE653           (      exbasic.asm):01143                   JSR  LB3E6          ; EVALUATE ARGUMENT
E0E2 3406             (      exbasic.asm):01144                   PSHS B,A            ; SAVE AMOUNT OF STRING SPACE ON STACK
E0E4 9E27             (      exbasic.asm):01145                   LDX  MEMSIZ         ; GET CURRENT TOP OF CLEARED SPACE
E0E6 9D82             (      exbasic.asm):01146                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E0E8 270C             (      exbasic.asm):01147                   BEQ  LAE5A          ; BRANCH IF NO NEW TOP OF CLEARED SPACE
E0EA BDE4DF           (      exbasic.asm):01148                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
E0ED BDE9AA           (      exbasic.asm):01149                   JSR  LB73D          ; EVALUATE EXPRESSlON; RETURN VALUE IN X
E0F0 301F             (      exbasic.asm):01150                   LEAX -1,X           ; X = TOP OF CLEARED SPACE
E0F2 9C71             (      exbasic.asm):01151                   CMPX TOPRAM         ; COMPARE TO TOP OF RAM
E0F4 2218             (      exbasic.asm):01152                   BHI  LAE72          ; 'OM' ERROR IF > TOP OF RAM
E0F6 1F10             (      exbasic.asm):01153         LAE5A     TFR  X,D            ; ACCD = TOP OF CLEARED SPACE
E0F8 A3E1             (      exbasic.asm):01154                   SUBD ,S++           ; SUBTRACT OUT AMOUNT OF CLEARED SPACE
E0FA 2512             (      exbasic.asm):01155                   BCS  LAE72          ; 'OM' ERROR IF FREE MEM < 0
E0FC 1F03             (      exbasic.asm):01156                   TFR  D,U            ; U = BOTTOM OF CLEARED SPACE
E0FE 83003A           (      exbasic.asm):01157                   SUBD #STKBUF        ; SUBTRACT OUT STACK BUFFER
E101 250B             (      exbasic.asm):01158                   BCS  LAE72          ; 'OM' ERROR IF FREE MEM < 0
E103 931B             (      exbasic.asm):01159                   SUBD VARTAB         ; SUBTRACT OUT START OF VARIABLES
E105 2507             (      exbasic.asm):01160                   BCS  LAE72          ; 'OM' ERROR IF FREE MEM < 0
E107 DF21             (      exbasic.asm):01161                   STU  FRETOP         ; SAVE NEW BOTTOM OF CLEARED SPACE
E109 9F27             (      exbasic.asm):01162                   STX  MEMSIZ         ; SAVE NEW TOP OF CLEARED SPACE
E10B 7EDFB0           (      exbasic.asm):01163         LAE6F     JMP  LAD26          ; ERASE ALL VARIABLES, INITIALIZE POINTERS, ETC
E10E 7EDEEA           (      exbasic.asm):01164         LAE72     JMP  LAC44          ; 'OM' ERROR
                      (      exbasic.asm):01165         *
                      (      exbasic.asm):01166         * RUN
E111 9D82             (      exbasic.asm):01167         RUN       JSR  GETCCH         ; * GET CURRENT INPUT CHARACTER
E113 1027FE94         (      exbasic.asm):01168                   LBEQ LAD21          ; * IF NO LINE NUMBER
E117 BDDFB0           (      exbasic.asm):01169                   JSR  LAD26          ; ERASE ALL VARIABLES
E11A 2019             (      exbasic.asm):01170                   BRA  LAE9F          ; 'GOTO' THE RUN ADDRESS
                      (      exbasic.asm):01171         *
                      (      exbasic.asm):01172         * GO
E11C 1F89             (      exbasic.asm):01173         GO        TFR  A,B            ; SAVE INPUT CHARACTER IN ACCB
E11E 9D7C             (      exbasic.asm):01174         LAE88     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
E120 C1A0             (      exbasic.asm):01175                   CMPB #TOK_TO        ; 'TO' TOKEN
E122 2716             (      exbasic.asm):01176                   BEQ  LAEA4          ; BRANCH IF GOTO
E124 C1A1             (      exbasic.asm):01177                   CMPB #TOK_SUB       ; 'SUB' TOKEN
E126 2645             (      exbasic.asm):01178                   BNE  LAED7          ; 'SYNTAX ERROR' IF NEITHER
E128 C603             (      exbasic.asm):01179                   LDB  #3             ; =ROOM FOR 6
E12A BDDED9           (      exbasic.asm):01180                   JSR  LAC33          ; =BYTES ON STACK?
E12D DE83             (      exbasic.asm):01181                   LDU  CHARAD         ; * SAVE CURRENT BASIC INPUT POINTER, LINE
E12F 9E68             (      exbasic.asm):01182                   LDX  CURLIN         ; * NUMBER AND SUB TOKEN ON STACK
E131 86A1             (      exbasic.asm):01183                   LDA  #TOK_SUB       ; *
E133 3452             (      exbasic.asm):01184                   PSHS U,X,A          ; *
E135 8D03             (      exbasic.asm):01185         LAE9F     BSR  LAEA4          ; GO DO A 'GOTO'
E137 7EE028           (      exbasic.asm):01186                   JMP  LAD9E          ; JUMP BACK TO BASIC'S MAIN LOOP
                      (      exbasic.asm):01187         * GOTO
E13A 9D82             (      exbasic.asm):01188         LAEA4     JSR  GETCCH         ; GET CURRENT INPUT CHAR
E13C BDE1FD           (      exbasic.asm):01189                   JSR  LAF67          ; GET LINE NUMBER TO BINARY IN BINVAL
E13F 8D40             (      exbasic.asm):01190                   BSR  LAEEB          ; ADVANCE BASIC'S POINTER TO END OF LINE
E141 3001             (      exbasic.asm):01191                   LEAX $01,X          ; POINT TO START OF NEXT LINE
E143 DC2B             (      exbasic.asm):01192                   LDD  BINVAL         ; GET THE LINE NUMBER TO RUN
E145 109368           (      exbasic.asm):01193                   CMPD CURLIN         ; COMPARE TO CURRENT LINE NUMBER
E148 2202             (      exbasic.asm):01194                   BHI  LAEB6          ; IF REO'D LINE NUMBER IS > CURRENT LINE NUMBER,
                      (      exbasic.asm):01195         *              ; DON'T START LOOKING FROM
                      (      exbasic.asm):01196         *              ; START OF PROGRAM
E14A 9E19             (      exbasic.asm):01197                   LDX  TXTTAB         ; BEGINNING OF PROGRAM
E14C BDDF8F           (      exbasic.asm):01198         LAEB6     JSR  LAD05          ; GO FIND A LINE NUMBER
E14F 2517             (      exbasic.asm):01199                   BCS  LAED2          ; 'UNDEFINED LINE NUMBER'
E151 301F             (      exbasic.asm):01200         LAEBB     LEAX -1,X           ; MOVE BACK TO JUST BEFORE START OF LINE
E153 9F83             (      exbasic.asm):01201                   STX  CHARAD         ; RESET BASIC'S INPUT POINTER
E155 39               (      exbasic.asm):01202         LAEBF     RTS
                      (      exbasic.asm):01203         *
                      (      exbasic.asm):01204         * RETURN
E156 26FD             (      exbasic.asm):01205         RETURN    BNE  LAEBF          ; EXIT ROUTINE IF ARGUMENT GIVEN
E158 86FF             (      exbasic.asm):01206                   LDA  #$FF           ; * PUT AN ILLEGAL VARIABLE NAME IN FIRST BYTE OF
E15A 973B             (      exbasic.asm):01207                   STA  VARDES         ; * VARDES WHICH WILL CAUSE 'FOR/NEXT' DATA ON THE
                      (      exbasic.asm):01208         *              ; STACK TO BE IGNORED
E15C BDDE9F           (      exbasic.asm):01209                   JSR  LABF9          ; CHECK FOR RETURN DATA ON THE STACK
E15F 1F14             (      exbasic.asm):01210                   TFR  X,S            ; RESET STACK POINTER - PURGE TWO RETURN ADDRESSES
                      (      exbasic.asm):01211         *              ; FROM THE STACK
E161 8121             (      exbasic.asm):01212                   CMPA #TOK_SUB-$80   ; SUB TOKEN - $80
E163 270B             (      exbasic.asm):01213                   BEQ  LAEDA          ; BRANCH IF 'RETURN' FROM SUBROUTINE
E165 C604             (      exbasic.asm):01214                   LDB  #2*2           ; ERROR #2 'RETURN WITHOUT GOSUB'
E167 8C               (      exbasic.asm):01215                   FCB  SKP2           ; SKIP TWO BYTES
E168 C60E             (      exbasic.asm):01216         LAED2     LDB  #7*2           ; ERROR #7 'UNDEFINED LINE NUMBER'
E16A 7EDEEC           (      exbasic.asm):01217                   JMP  LAC46          ; JUMP TO ERROR HANDLER
E16D 7EE4E9           (      exbasic.asm):01218         LAED7     JMP  LB277          ; 'SYNTAX ERROR'
E170 3552             (      exbasic.asm):01219         LAEDA     PULS A,X,U          ; * RESTORE VALUES OF CURRENT LINE NUMBER AND
E172 9F68             (      exbasic.asm):01220                   STX  CURLIN         ; * BASIC'S INPUT POINTER FOR THIS SUBROUTINE
E174 DF83             (      exbasic.asm):01221                   STU  CHARAD         ; * AND LOAD ACCA WITH SUB TOKEN ($A6)
                      (      exbasic.asm):01222         *
                      (      exbasic.asm):01223         * DATA
E176 8D06             (      exbasic.asm):01224         DATA      BSR  LAEE8          ; MOVE INPUT POINTER TO END OF SUBLINE OR LINE
E178 8C               (      exbasic.asm):01225                   FCB  SKP2           ; SKIP 2 BYTES
                      (      exbasic.asm):01226         
                      (      exbasic.asm):01227         * REM, ELSE
E179                  (      exbasic.asm):01228         ELSE
E179 8D06             (      exbasic.asm):01229         REM       BSR  LAEEB          ; MOVE INPUT POINTER TO END OF LINE
E17B 9F83             (      exbasic.asm):01230                   STX  CHARAD         ; RESET BASIC'S INPUT POINTER
E17D 39               (      exbasic.asm):01231         LAEE7     RTS
                      (      exbasic.asm):01232         * ADVANCE INPUT POINTER TO END OF SUBLINE OR LINE
E17E C63A             (      exbasic.asm):01233         LAEE8     LDB  #':            ; COLON = SUBLINE TERMINATOR CHARACTER
E180 86               (      exbasic.asm):01234         LAEEA     FCB  SKP1LD         ; SKPILD SKIP ONE BYTE; LDA #$5F
                      (      exbasic.asm):01235         * ADVANCE BASIC'S INPUT POINTER TO END OF
                      (      exbasic.asm):01236         * LINE - RETURN ADDRESS OF END OF LINE+1 IN X
E181 5F               (      exbasic.asm):01237         LAEEB     CLRB                ; 0 = LINE TERMINATOR CHARACTER
E182 D701             (      exbasic.asm):01238                   STB  CHARAC         ; TEMP STORE PRIMARY TERMINATOR CHARACTER
E184 5F               (      exbasic.asm):01239                   CLRB                ; 0 (END OF LINE) = ALTERNATE TERM. CHAR.
E185 9E83             (      exbasic.asm):01240                   LDX  CHARAD         ; LOAD X W/BASIC'S INPUT POINTER
E187 1F98             (      exbasic.asm):01241         LAEF1     TFR  B,A            ; * CHANGE TERMINATOR CHARACTER
E189 D601             (      exbasic.asm):01242                   LDB  CHARAC         ; * FROM ACCB TO CHARAC - SAVE OLD TERMINATOR
                      (      exbasic.asm):01243         *         IN   CHARAC
E18B 9701             (      exbasic.asm):01244                   STA  CHARAC         ; SWAP PRIMARY AND SECONDARY TERMINATORS
E18D A684             (      exbasic.asm):01245         LAEF7     LDA  ,X             ; GET NEXT INPUT CHARACTER
E18F 27EC             (      exbasic.asm):01246                   BEQ  LAEE7          ; RETURN IF 0 (END OF LINE)
E191 3404             (      exbasic.asm):01247                   PSHS B              ; SAVE TERMINATOR ON STACK
E193 A1E0             (      exbasic.asm):01248                   CMPA ,S+            ; COMPARE TO INPUT CHARACTER
E195 27E6             (      exbasic.asm):01249                   BEQ  LAEE7          ; RETURN IF EQUAL
E197 3001             (      exbasic.asm):01250                   LEAX 1,X            ; MOVE POINTER UP ONE
E199 8122             (      exbasic.asm):01251                   CMPA #'"            ; CHECK FOR DOUBLE QUOTES
E19B 27EA             (      exbasic.asm):01252                   BEQ  LAEF1          ; BRANCH IF " - TOGGLE TERMINATOR CHARACTERS
E19D 4C               (      exbasic.asm):01253                   INCA                ; * CHECK FOR $FF AND BRANCH IF
E19E 2602             (      exbasic.asm):01254                   BNE  LAF0C          ; * NOT SECONDARY TOKEN
E1A0 3001             (      exbasic.asm):01255                   LEAX 1,X            ; MOVE INPUT POINTER 1 MORE IF SECONDARY
E1A2 8186             (      exbasic.asm):01256         LAF0C     CMPA #TOK_IF+1      ; TOKEN FOR IF?
E1A4 26E7             (      exbasic.asm):01257                   BNE  LAEF7          ; NO - GET ANOTHER INPUT CHARACTER
E1A6 0C04             (      exbasic.asm):01258                   INC  IFCTR          ; INCREMENT IF COUNTER - KEEP TRACK OF HOW MANY
                      (      exbasic.asm):01259         *                             ; 'IF' STATEMENTS ARE NESTED IN ONE LINE
E1A8 20E3             (      exbasic.asm):01260                   BRA  LAEF7          ; GET ANOTHER INPUT CHARACTER
                      (      exbasic.asm):01261         
                      (      exbasic.asm):01262         * IF
E1AA BDE3B3           (      exbasic.asm):01263         IF        JSR  LB141          ; EVALUATE NUMERIC EXPRESSION
E1AD 9D82             (      exbasic.asm):01264                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E1AF 8181             (      exbasic.asm):01265                   CMPA #TOK_GO        ; TOKEN FOR GO
E1B1 2705             (      exbasic.asm):01266                   BEQ  LAF22          ; TREAT 'GO' THE SAME AS 'THEN'
E1B3 C6A2             (      exbasic.asm):01267                   LDB  #TOK_THEN      ; TOKEN FOR THEN
E1B5 BDE4E1           (      exbasic.asm):01268                   JSR  LB26F          ; DO A SYNTAX CHECK ON ACCB
E1B8 964F             (      exbasic.asm):01269         LAF22     LDA  FP0EXP         ; CHECK FOR TRUE/FALSE - FALSE IF FPA0 EXPONENT = ZERO
E1BA 2613             (      exbasic.asm):01270                   BNE  LAF39          ; BRANCH IF CONDITION TRUE
E1BC 0F04             (      exbasic.asm):01271                   CLR  IFCTR          ; CLEAR FLAG - KEEP TRACK OF WHICH NESTED ELSE STATEMENT
                      (      exbasic.asm):01272         *                             ; TO SEARCH FOR IN NESTED 'IF' LOOPS
E1BE 8DB6             (      exbasic.asm):01273         LAF28     BSR  DATA           ; MOVE BASIC'S POINTER TO END OF SUBLINE
E1C0 4D               (      exbasic.asm):01274                   TSTA                ; * CHECK TO SEE IF END OF LINE OR SUBLINE
E1C1 27BA             (      exbasic.asm):01275                   BEQ  LAEE7          ; * AND RETURN IF END OF LINE
E1C3 9D7C             (      exbasic.asm):01276                   JSR  GETNCH         ; GET AN INPUT CHARACTER FROM BASIC
E1C5 8184             (      exbasic.asm):01277                   CMPA #TOK_ELSE      ; TOKEN FOR ELSE
E1C7 26F5             (      exbasic.asm):01278                   BNE  LAF28          ; IGNORE ALL DATA EXCEPT 'ELSE' UNTIL
                      (      exbasic.asm):01279         *                             ; END OF LINE (ZERO BYTE)
E1C9 0A04             (      exbasic.asm):01280                   DEC  IFCTR          ; CHECK TO SEE IF YOU MUST SEARCH ANOTHER SUBLINE
E1CB 2AF1             (      exbasic.asm):01281                   BPL  LAF28          ; BRANCH TO SEARCH ANOTHER SUBLINE FOR 'ELSE'
E1CD 9D7C             (      exbasic.asm):01282                   JSR  GETNCH         ; GET AN INPUT CHARACTER FROM BASIC
E1CF 9D82             (      exbasic.asm):01283         LAF39     JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E1D1 1025FF65         (      exbasic.asm):01284                   LBCS LAEA4          ; BRANCH TO 'GOTO' IF NUMERIC CHARACTER
E1D5 7EE060           (      exbasic.asm):01285                   JMP  LADC6          ; RETURN TO MAIN INTERPRETATION LOOP
                      (      exbasic.asm):01286         
                      (      exbasic.asm):01287         * ON
E1D8 BDE978           (      exbasic.asm):01288         ON        JSR  LB70B          ; EVALUATE EXPRESSION
E1DB C681             (      exbasic.asm):01289                   LDB  #TOK_GO        ; TOKEN FOR GO
E1DD BDE4E1           (      exbasic.asm):01290                   JSR  LB26F          ; SYNTAX CHECK FOR GO
E1E0 3402             (      exbasic.asm):01291                   PSHS A              ; SAVE NEW TOKEN (TO,SUB)
E1E2 81A1             (      exbasic.asm):01292                   CMPA #TOK_SUB       ; TOKEN FOR SUB?
E1E4 2704             (      exbasic.asm):01293                   BEQ  LAF54          ; YES
E1E6 81A0             (      exbasic.asm):01294                   CMPA #TOK_TO        ; TOKEN FOR TO?
E1E8 2683             (      exbasic.asm):01295         LAF52     BNE  LAED7          ; 'SYNTAX' ERROR IF NOT 'SUB' OR 'TO'
E1EA 0A53             (      exbasic.asm):01296         LAF54     DEC  FPA0+3         ; DECREMENT IS BYTE OF MANTISSA OF FPA0 - THIS
                      (      exbasic.asm):01297         *                             ; IS THE ARGUMENT OF THE 'ON' STATEMENT
E1EC 2605             (      exbasic.asm):01298                   BNE  LAF5D          ; BRANCH IF NOT AT THE PROPER GOTO OR GOSUB LINE NUMBER
E1EE 3504             (      exbasic.asm):01299                   PULS B              ; GET BACK THE TOKEN FOLLOWING 'GO'
E1F0 7EE11E           (      exbasic.asm):01300                   JMP  LAE88          ; GO DO A 'GOTO' OR 'GOSUB'
E1F3 9D7C             (      exbasic.asm):01301         LAF5D     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
E1F5 8D06             (      exbasic.asm):01302                   BSR  LAF67          ; CONVERT BASIC LINE NUMBER TO BINARY
E1F7 812C             (      exbasic.asm):01303                   CMPA #',            ; IS CHARACTER FOLLOWING LINE NUMBER A COMMA?
E1F9 27EF             (      exbasic.asm):01304                   BEQ  LAF54          ; YES
E1FB 3584             (      exbasic.asm):01305                   PULS B,PC           ; IF NOT, FALL THROUGH TO NEXT COMMAND
E1FD 9E74             (      exbasic.asm):01306         LAF67     LDX  ZERO           ; DEFAULT LINE NUMBER OF ZERO
E1FF 9F2B             (      exbasic.asm):01307                   STX  BINVAL         ; SAVE IT IN BINVAL
                      (      exbasic.asm):01308         *
                      (      exbasic.asm):01309         * CONVERT LINE NUMBER TO BINARY - RETURN VALUE IN BINVAL
                      (      exbasic.asm):01310         *
E201 2461             (      exbasic.asm):01311         LAF6B     BCC  LAFCE          ; RETURN IF NOT NUMERIC CHARACTER
E203 8030             (      exbasic.asm):01312                   SUBA #'0            ; MASK OFF ASCII
E205 9701             (      exbasic.asm):01313                   STA  CHARAC         ; SAVE DIGIT IN VO1
E207 DC2B             (      exbasic.asm):01314                   LDD  BINVAL         ; GET ACCUMULATED LINE NUMBER VALUE
E209 8118             (      exbasic.asm):01315                   CMPA #24            ; LARGEST LINE NUMBER IS $F9FF (63999) -
                      (      exbasic.asm):01316         *         (24*256+255)*10+9
E20B 22DB             (      exbasic.asm):01317                   BHI  LAF52          ; 'SYNTAX' ERROR IF TOO BIG
                      (      exbasic.asm):01318         * MULT ACCD X 10
E20D 58               (      exbasic.asm):01319                   ASLB                ; *
E20E 49               (      exbasic.asm):01320                   ROLA                ; * TIMES 2
E20F 58               (      exbasic.asm):01321                   ASLB                ; =
E210 49               (      exbasic.asm):01322                   ROLA                ; = TIMES 4
E211 D32B             (      exbasic.asm):01323                   ADDD BINVAL         ; ADD 1 = TIMES 5
E213 58               (      exbasic.asm):01324                   ASLB                ; *
E214 49               (      exbasic.asm):01325                   ROLA                ; * TIMES 10
E215 DB01             (      exbasic.asm):01326                   ADDB CHARAC         ; ADD NEXT DIGIT
E217 8900             (      exbasic.asm):01327                   ADCA #0             ; PROPAGATE CARRY
E219 DD2B             (      exbasic.asm):01328                   STD  BINVAL         ; SAVE NEW ACCUMULATED LINE NUMBER
E21B 9D7C             (      exbasic.asm):01329                   JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
E21D 20E2             (      exbasic.asm):01330                   BRA  LAF6B          ; LOOP- PROCESS NEXT DIGIT
                      (      exbasic.asm):01331         *
                      (      exbasic.asm):01332         * LET (EXBAS)
                      (      exbasic.asm):01333         * EVALUATE A NON-TOKEN EXPRESSION
                      (      exbasic.asm):01334         * TARGET = REPLACEMENT
E21F BDE5C4           (      exbasic.asm):01335         LET       JSR  LB357          ; FIND TARGET VARIABLE DESCRIPTOR
E222 9F3B             (      exbasic.asm):01336                   STX  VARDES         ; SAVE DESCRIPTOR ADDRESS OF 1ST EXPRESSION
E224 C6AE             (      exbasic.asm):01337                   LDB  #TOK_EQUALS    ; TOKEN FOR "="
E226 BDE4E1           (      exbasic.asm):01338                   JSR  LB26F          ; DO A SYNTAX CHECK FOR '='
E229 9606             (      exbasic.asm):01339                   LDA  VALTYP         ; * GET VARIABLE TYPE AND
E22B 3402             (      exbasic.asm):01340                   PSHS A              ; * SAVE ON THE STACK
E22D BDE3C8           (      exbasic.asm):01341                   JSR  LB156          ; EVALUATE EXPRESSION
E230 3502             (      exbasic.asm):01342                   PULS A              ; * REGET VARIABLE TYPE OF 1ST EXPRESSION AND
E232 46               (      exbasic.asm):01343                   RORA                ; * SET CARRY IF STRING
E233 BDE3BA           (      exbasic.asm):01344                   JSR  LB148          ; TYPE CHECK-TM ERROR IF VARIABLE TYPES ON
                      (      exbasic.asm):01345         *                             ; BOTH SIDES OF EQUALS SIGN NOT THE SAME
E236 10270C2B         (      exbasic.asm):01346                   LBEQ LBC33          ; GO PUT FPA0 INTO VARIABLE DESCRIPTOR IF NUMERIC
                      (      exbasic.asm):01347         * MOVE A STRING WHOSE DESCRIPTOR IS LOCATED AT
                      (      exbasic.asm):01348         * FPA0+2 INTO THE STRING SPACE. TRANSFER THE
                      (      exbasic.asm):01349         * DESCRIPTOR ADDRESS TO THE ADDRESS IN VARDES
                      (      exbasic.asm):01350         * DON'T MOVE THE STRING IF IT IS ALREADY IN THE
                      (      exbasic.asm):01351         * STRING SPACE. REMOVE DESCRIPTOR FROM STRING
                      (      exbasic.asm):01352         * STACK IF IT IS LAST ONE ON THE STACK
E23A 9E52             (      exbasic.asm):01353         LAFA4     LDX  FPA0+2         ; POINT X TO DESCRIPTOR OF REPLACEMENT STRING
E23C DC21             (      exbasic.asm):01354                   LDD  FRETOP         ; LOAD ACCD WITH START OF STRING SPACE
E23E 10A302           (      exbasic.asm):01355                   CMPD 2,X            ; IS THE STRING IN STRING SPACE?
E241 2411             (      exbasic.asm):01356                   BCC  LAFBE          ; BRANCH IF IT'S NOT IN THE STRING SPACE
E243 9C1B             (      exbasic.asm):01357                   CMPX VARTAB         ; COMPARE DESCRIPTOR ADDRESS TO START OF VARIABLES
E245 250D             (      exbasic.asm):01358                   BCS  LAFBE          ; BRANCH IF DESCRIPTOR ADDRESS NOT IN VARIABLES
E247 E684             (      exbasic.asm):01359         LAFB1     LDB  ,X             ; GET LENGTH OF REPLACEMENT STRING
E249 BDE77A           (      exbasic.asm):01360                   JSR  LB50D          ; RESERVE ACCB BYTES OF STRING SPACE
E24C 9E4D             (      exbasic.asm):01361                   LDX  V4D            ; GET DESCRIPTOR ADDRESS BACK
E24E BDE8B0           (      exbasic.asm):01362                   JSR  LB643          ; MOVE STRING INTO STRING SPACE
E251 8E0056           (      exbasic.asm):01363                   LDX  #STRDES        ; POINT X TO TEMP STRING DESCRIPTOR ADDRESS
E254 9F4D             (      exbasic.asm):01364         LAFBE     STX  V4D            ; SAVE STRING DESCRIPTOR ADDRESS IN V4D
E256 BDE8E2           (      exbasic.asm):01365                   JSR  LB675          ; REMOVE STRING DESCRIPTOR IF LAST ONE
                      (      exbasic.asm):01366         *              ; ON STRING STACK
E259 DE4D             (      exbasic.asm):01367                   LDU  V4D            ; POINT U TO REPLACEMENT DESCRIPTOR ADDRESS
E25B 9E3B             (      exbasic.asm):01368                   LDX  VARDES         ; GET TARGET DESCRIPTOR ADDRESS
E25D 3726             (      exbasic.asm):01369                   PULU A,B,Y          ; GET LENGTH AND START OF REPLACEMENT STRING
E25F A784             (      exbasic.asm):01370                   STA  ,X             ; * SAVE STRING LENGTH AND START IN
E261 10AF02           (      exbasic.asm):01371                   STY  2,X            ; * TARGET DESCRIPTOR LOCATION
E264 39               (      exbasic.asm):01372         LAFCE     RTS
                      (      exbasic.asm):01373         
E265 3F5245444F       (      exbasic.asm):01374         LAFCF     FCC  "?REDO"        ; ?REDO MESSAGE
E26A 0D00             (      exbasic.asm):01375                   FCB  CR,$00
                      (      exbasic.asm):01376         
E26C                  (      exbasic.asm):01377         LAFD6
E26C 7EDEEC           (      exbasic.asm):01378         LAFDC     JMP  LAC46          ; JMP TO ERROR HANDLER
E26F 9609             (      exbasic.asm):01379         LAFDF     LDA  INPFLG         ; = GET THE INPUT FLAG AND BRANCH
E271 2707             (      exbasic.asm):01380                   BEQ  LAFEA          ; = IF 'INPUT'
E273 9E31             (      exbasic.asm):01381                   LDX  DATTXT         ; * GET LINE NUMBER WHERE THE ERROR OCCURRED
E275 9F68             (      exbasic.asm):01382                   STX  CURLIN         ; * AND USE IT AS THE CURRENT LINE NUMBER
E277 7EE4E9           (      exbasic.asm):01383                   JMP  LB277          ; 'SYNTAX ERROR'
E27A 8EE264           (      exbasic.asm):01384         LAFEA     LDX  #LAFCF-1       ; * POINT X TO '?REDO' AND PRINT
E27D BDEBCE           (      exbasic.asm):01385                   JSR  LB99C          ; * IT ON THE SCREEN
E280 9E2F             (      exbasic.asm):01386                   LDX  TINPTR         ; = GET THE SAVED ABSOLUTE ADDRESS OF
E282 9F83             (      exbasic.asm):01387                   STX  CHARAD         ; = INPUT POINTER AND RESTORE IT
E284 39               (      exbasic.asm):01388                   RTS
                      (      exbasic.asm):01389         *
                      (      exbasic.asm):01390         * INPUT
E285 C616             (      exbasic.asm):01391         INPUT     LDB  #11*2          ; 'ID' ERROR
E287 9E68             (      exbasic.asm):01392                   LDX  CURLIN         ; GET CURRENT LINE NUMBER
E289 3001             (      exbasic.asm):01393                   LEAX 1,X            ; ADD ONE
E28B 27DF             (      exbasic.asm):01394                   BEQ  LAFDC          ; 'ID' ERROR BRANCH IF DIRECT MODE
E28D 8D01             (      exbasic.asm):01395                   BSR  LB00F          ; GET SOME INPUT DATA - WAS LB002
E28F 39               (      exbasic.asm):01396                   RTS
E290 8122             (      exbasic.asm):01397         LB00F     CMPA #'"            ; CHECK FOR PROMPT STRING DELIMITER
E292 260B             (      exbasic.asm):01398                   BNE  LB01E          ; BRANCH IF NO PROMPT STRING
E294 BDE4B6           (      exbasic.asm):01399                   JSR  LB244          ; PUT PROMPT STRING ON STRING STACK
E297 C63B             (      exbasic.asm):01400                   LDB  #';            ; *
E299 BDE4E1           (      exbasic.asm):01401                   JSR  LB26F          ; * DO A SYNTAX CHECK FOR SEMICOLON
E29C BDEBD1           (      exbasic.asm):01402                   JSR  LB99F          ; PRINT MESSAGE TO CONSOLE OUT
E29F 8E00F3           (      exbasic.asm):01403         LB01E     LDX  #LINBUF        ; POINT TO BASIC'S LINE BUFFER
E2A2 6F84             (      exbasic.asm):01404                   CLR  ,X             ; CLEAR 1ST BYTE - FLAG TO INDICATE NO DATA
                      (      exbasic.asm):01405         *              ; IN LINE BUFFER
E2A4 8D06             (      exbasic.asm):01406                   BSR  LB02F          ; INPUT A STRING TO LINE BUFFER
E2A6 C62C             (      exbasic.asm):01407                   LDB  #',            ; * INSERT A COMMA AT THE END
E2A8 E784             (      exbasic.asm):01408                   STB  ,X             ; * OF THE LINE INPUT BUFFER
E2AA 2016             (      exbasic.asm):01409                   BRA  LB049
                      (      exbasic.asm):01410         * FILL BASIC'S LINE INPUT BUFFER CONSOLE IN
E2AC BDEBE1           (      exbasic.asm):01411         LB02F     JSR  LB9AF          ; SEND A "?" TO CONSOLE OUT
E2AF BDEBDE           (      exbasic.asm):01412                   JSR  LB9AC          ; SEND A 'SPACE' TO CONSOLE OUT
E2B2 BDDC2A           (      exbasic.asm):01413         LB035     JSR  LA390          ; GO READ IN A BASIC LINE
E2B5 2405             (      exbasic.asm):01414                   BCC  LB03F          ; BRANCH IF ENTER KEY ENDED ENTRY
E2B7 3264             (      exbasic.asm):01415                   LEAS 4,S            ; PURGE TWO RETURN ADDRESSES OFF THE STACK
E2B9 7EE0AF           (      exbasic.asm):01416                   JMP  LAE11          ; GO DO A 'STOP' IF BREAK KEY ENDED LINE ENTRY
E2BC C62E             (      exbasic.asm):01417         LB03F     LDB  #2*23          ; 'INPUT PAST END OF FILE' ERROR
E2BE 39               (      exbasic.asm):01418                   RTS
                      (      exbasic.asm):01419         *
                      (      exbasic.asm):01420         * READ
E2BF 9E33             (      exbasic.asm):01421         READ      LDX  DATPTR         ; GET 'READ' START ADDRESS
E2C1 86               (      exbasic.asm):01422                   FCB  SKP1LD         ; SKIP ONE BYTE - LDA #*$4F
E2C2 4F               (      exbasic.asm):01423         LB049     CLRA                ; 'INPUT' ENTRY POINT: INPUT FLAG = 0
E2C3 9709             (      exbasic.asm):01424                   STA  INPFLG         ; SET INPUT FLAG; 0 = INPUT: <> 0 = READ
E2C5 9F35             (      exbasic.asm):01425                   STX  DATTMP         ; SAVE 'READ' START ADDRESS/'INPUT' BUFFER START
E2C7 BDE5C4           (      exbasic.asm):01426         LB04E     JSR  LB357          ; EVALUATE A VARIABLE
E2CA 9F3B             (      exbasic.asm):01427                   STX  VARDES         ; SAVE DESCRIPTOR ADDRESS
E2CC 9E83             (      exbasic.asm):01428                   LDX  CHARAD         ; * GET BASIC'S INPUT POINTER
E2CE 9F2B             (      exbasic.asm):01429                   STX  BINVAL         ; * AND SAVE IT
E2D0 9E35             (      exbasic.asm):01430                   LDX  DATTMP         ; GET 'READ' ADDRESS START/'INPUT' BUFFER POINTER
E2D2 A684             (      exbasic.asm):01431                   LDA  ,X             ; GET A CHARACTER FROM THE BASIC PROGRAM
E2D4 2609             (      exbasic.asm):01432                   BNE  LB069          ; BRANCH IF NOT END OF LINE
E2D6 9609             (      exbasic.asm):01433                   LDA  INPFLG         ; * CHECK INPUT FLAG AND BRANCH
E2D8 2651             (      exbasic.asm):01434                   BNE  LB0B9          ; * IF LOOKING FOR DATA (READ)
                      (      exbasic.asm):01435         * NO DATA IN 'INPUT' LINE BUFFER AND/OR INPUT
                      (      exbasic.asm):01436         * NOT COMING FROM SCREEN
E2DA BDEBE1           (      exbasic.asm):01437                   JSR  LB9AF          ; SEND A '?' TO CONSOLE OUT
E2DD 8DCD             (      exbasic.asm):01438                   BSR  LB02F          ; FILL INPUT BUFFER FROM CONSOLE IN
E2DF 9F83             (      exbasic.asm):01439         LB069     STX  CHARAD         ; RESET BASIC'S INPUT POINTER
E2E1 9D7C             (      exbasic.asm):01440                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
E2E3 D606             (      exbasic.asm):01441                   LDB  VALTYP         ; * CHECK VARIABLE TYPE AND
E2E5 2723             (      exbasic.asm):01442                   BEQ  LB098          ; * BRANCH IF NUMERIC
                      (      exbasic.asm):01443         * READ/INPUT A STRING VARIABLE
E2E7 9E83             (      exbasic.asm):01444                   LDX  CHARAD         ; LOAD X WITH CURRENT BASIC INPUT POINTER
E2E9 9701             (      exbasic.asm):01445                   STA  CHARAC         ; SAVE CURRENT INPUT CHARACTER
E2EB 8122             (      exbasic.asm):01446                   CMPA #'"            ; CHECK FOR STRING DELIMITER
E2ED 270E             (      exbasic.asm):01447                   BEQ  LB08B          ; BRANCH IF STRING DELIMITER
E2EF 301F             (      exbasic.asm):01448                   LEAX -1,X           ; BACK UP POINTER
E2F1 4F               (      exbasic.asm):01449                   CLRA                ; * ZERO = END OF LINE CHARACTER
E2F2 9701             (      exbasic.asm):01450                   STA  CHARAC         ; * SAVE AS TERMINATOR
E2F4 BDDC1C           (      exbasic.asm):01451                   JSR  LA35F          ; SET UP PRINT PARAMETERS
E2F7 863A             (      exbasic.asm):01452                   LDA  #':            ; END OF SUBLINE CHARACTER
E2F9 9701             (      exbasic.asm):01453                   STA  CHARAC         ; SAVE AS TERMINATOR I
E2FB 862C             (      exbasic.asm):01454                   LDA  #',            ; COMMA
E2FD 9702             (      exbasic.asm):01455         LB08B     STA  ENDCHR         ; SAVE AS TERMINATOR 2
E2FF BDE78B           (      exbasic.asm):01456                   JSR  LB51E          ; STRIP A STRING FROM THE INPUT BUFFER
E302 BDE4BB           (      exbasic.asm):01457                   JSR  LB249          ; MOVE INPUT POINTER TO END OF STRING
E305 BDE23A           (      exbasic.asm):01458                   JSR  LAFA4          ; PUT A STRING INTO THE STRING SPACE IF NECESSARY
E308 2006             (      exbasic.asm):01459                   BRA  LB09E          ; CHECK FOR ANOTHER DATA ITEM
                      (      exbasic.asm):01460         * SAVE A NUMERIC VALUE IN A READ OR INPUT DATA ITEM
E30A BDEF44           (      exbasic.asm):01461         LB098     JSR  LBD12          ; CONVERT AN ASCII STRING TO FP NUMBER
E30D BDEE65           (      exbasic.asm):01462                   JSR  LBC33          ; PACK FPA0 AND STORE IT IN ADDRESS IN VARDES -
                      (      exbasic.asm):01463         *                             ; INPUT OR READ DATA ITEM
E310 9D82             (      exbasic.asm):01464         LB09E     JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E312 2706             (      exbasic.asm):01465                   BEQ  LB0A8          ; BRANCH IF END OF LINE
E314 812C             (      exbasic.asm):01466                   CMPA #',            ; CHECK FOR A COMMA
E316 1026FF52         (      exbasic.asm):01467                   LBNE LAFD6          ; BAD FILE DATA' ERROR OR RETRY
E31A 9E83             (      exbasic.asm):01468         LB0A8     LDX  CHARAD         ; * GET CURRENT INPUT
E31C 9F35             (      exbasic.asm):01469                   STX  DATTMP         ; * POINTER (USED AS A DATA POINTER) AND SAVE IT
E31E 9E2B             (      exbasic.asm):01470                   LDX  BINVAL         ; * RESET INPUT POINTER TO INPUT OR
E320 9F83             (      exbasic.asm):01471                   STX  CHARAD         ; * READ STATEMENT
E322 9D82             (      exbasic.asm):01472                   JSR  GETCCH         ; GET CURRENT CHARACTER FROM BASIC
E324 2721             (      exbasic.asm):01473                   BEQ  LB0D5          ; BRANCH IF END OF LINE - EXIT COMMAND
E326 BDE4DF           (      exbasic.asm):01474                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
E329 209C             (      exbasic.asm):01475                   BRA  LB04E          ; GET ANOTHER INPUT OR READ ITEM
                      (      exbasic.asm):01476         * SEARCH FROM ADDRESS IN X FOR
                      (      exbasic.asm):01477         * 1ST OCCURENCE OF THE TOKEN FOR DATA
E32B 9F83             (      exbasic.asm):01478         LB0B9     STX  CHARAD         ; RESET BASIC'S INPUT POINTER
E32D BDE17E           (      exbasic.asm):01479                   JSR  LAEE8          ; SEARCH FOR END OF CURRENT LINE OR SUBLINE
E330 3001             (      exbasic.asm):01480                   LEAX 1,X            ; MOVE X ONE PAST END OF LINE
E332 4D               (      exbasic.asm):01481                   TSTA                ; CHECK FOR END OF LINE
E333 260A             (      exbasic.asm):01482                   BNE  LB0CD          ; BRANCH IF END OF SUBLINE
E335 C606             (      exbasic.asm):01483                   LDB  #2*3           ; 'OUT OF DATA' ERROR
E337 EE81             (      exbasic.asm):01484                   LDU  ,X++           ; GET NEXT 2 CHARACTERS
E339 2741             (      exbasic.asm):01485                   BEQ  LB10A          ; 'OD' ERROR IF END OF PROGRAM
E33B EC81             (      exbasic.asm):01486                   LDD  ,X++           ; GET BASIC LINE NUMBER AND
E33D DD31             (      exbasic.asm):01487                   STD  DATTXT         ; SAVE IT IN DATTXT
E33F A684             (      exbasic.asm):01488         LB0CD     LDA  ,X             ; GET AN INPUT CHARACTER
E341 8186             (      exbasic.asm):01489                   CMPA #TOK_DATA      ; DATA TOKEN?
E343 26E6             (      exbasic.asm):01490                   BNE  LB0B9          ; NO - KEEP LOOKING
E345 2098             (      exbasic.asm):01491                   BRA  LB069          ; YES
                      (      exbasic.asm):01492         * EXIT READ AND INPUT COMMANDS
E347 9E35             (      exbasic.asm):01493         LB0D5     LDX  DATTMP         ; GET DATA POINTER
E349 D609             (      exbasic.asm):01494                   LDB  INPFLG         ; * CHECK INPUT FLAG
E34B 1026FD3A         (      exbasic.asm):01495                   LBNE LADE8          ; * SAVE NEW DATA POINTER IF READ
E34F A684             (      exbasic.asm):01496                   LDA  ,X             ; = CHECK NEXT CHARACTER IN 'INPUT' BUFFER
E351 2706             (      exbasic.asm):01497                   BEQ  LB0E7          ; =
E353 8EE359           (      exbasic.asm):01498                   LDX  #LB0E8-1       ; POINT X TO '?EXTRA IGNORED'
E356 7EEBCE           (      exbasic.asm):01499                   JMP  LB99C          ; PRINT THE MESSAGE
E359 39               (      exbasic.asm):01500         LB0E7     RTS
                      (      exbasic.asm):01501         
E35A 3F45585452412049 (      exbasic.asm):01502         LB0E8     FCC  "?EXTRA IGNORED" ; ?EXTRA IGNORED MESSAGE
     474E4F524544
                      (      exbasic.asm):01503         
                      (      exbasic.asm):01504         
E368 0D00             (      exbasic.asm):01505                   FCB  CR,$00
                      (      exbasic.asm):01506         
                      (      exbasic.asm):01507         * NEXT
E36A 2604             (      exbasic.asm):01508         NEXT      BNE  LB0FE          ; BRANCH IF ARGUMENT GIVEN
E36C 9E74             (      exbasic.asm):01509                   LDX  ZERO           ; X = 0: DEFAULT FOR NO ARGUMENT
E36E 2003             (      exbasic.asm):01510                   BRA  LB101
E370 BDE5C4           (      exbasic.asm):01511         LB0FE     JSR  LB357          ; EVALUATE AN ALPHA EXPRESSION
E373 9F3B             (      exbasic.asm):01512         LB101     STX  VARDES         ; SAVE VARIABLE DESCRIPTOR POINTER
E375 BDDE9F           (      exbasic.asm):01513                   JSR  LABF9          ; GO SCAN FOR 'FOR/NEXT' DATA ON STACK
E378 2704             (      exbasic.asm):01514                   BEQ  LB10C          ; BRANCH IF DATA FOUND
E37A C600             (      exbasic.asm):01515                   LDB  #0             ; 'NEXT WITHOUT FOR' ERROR (SHOULD BE CLRB)
E37C 2047             (      exbasic.asm):01516         LB10A     BRA  LB153          ; PROCESS ERROR
E37E 1F14             (      exbasic.asm):01517         LB10C     TFR  X,S            ; POINT S TO START OF 'FOR/NEXT' DATA
E380 3003             (      exbasic.asm):01518                   LEAX 3,X            ; POINT X TO FP VALUE OF STEP
E382 BDEE46           (      exbasic.asm):01519                   JSR  LBC14          ; COPY A FP NUMBER FROM (X) TO FPA0
E385 A668             (      exbasic.asm):01520                   LDA  8,S            ; GET THE DIRECTION OF STEP
E387 9754             (      exbasic.asm):01521                   STA  FP0SGN         ; SAVE IT AS THE SIGN OF FPA0
E389 9E3B             (      exbasic.asm):01522                   LDX  VARDES         ; POINT (X) TO INDEX VARIABLE DESCRIPTOR
E38B BDEBF4           (      exbasic.asm):01523                   JSR  LB9C2          ; ADD (X) TO FPA0 (STEP TO INDEX)
E38E BDEE65           (      exbasic.asm):01524                   JSR  LBC33          ; PACK FPA0 AND STORE IT IN ADDRESS
                      (      exbasic.asm):01525         *                             ; CONTAINED IN VARDES
E391 3069             (      exbasic.asm):01526                   LEAX 9,S            ; POINT (X) TO TERMINAL VALUE OF INDEX
E393 BDEEC8           (      exbasic.asm):01527                   JSR  LBC96          ; COMPARE CURRENT INDEX VALUE TO TERMINAL VALUE OF INDEX
E396 E068             (      exbasic.asm):01528                   SUBB 8,S            ; ACCB = 0 IF TERMINAL VALUE=CURRENT VALUE AND STEP=0 OR IF
                      (      exbasic.asm):01529         *                             ; STEP IS POSITIVE AND CURRENT VALUE>TERMINAL VALUE OR
                      (      exbasic.asm):01530         *                             ; STEP IS NEGATIVE AND CURRENT VALUE<TERMINAL VALUE
E398 270C             (      exbasic.asm):01531                   BEQ  LB134          ; BRANCH IF 'FOR/NEXT' LOOP DONE
E39A AE6E             (      exbasic.asm):01532                   LDX  14,S           ; * GET LINE NUMBER AND
E39C 9F68             (      exbasic.asm):01533                   STX  CURLIN         ; * BASIC POINTER OF
E39E AEE810           (      exbasic.asm):01534                   LDX  16,S           ; * STATEMENT FOLLOWING THE
E3A1 9F83             (      exbasic.asm):01535                   STX  CHARAD         ; * PROPER FOR STATEMENT
E3A3 7EE028           (      exbasic.asm):01536         LB131     JMP  LAD9E          ; JUMP BACK TO COMMAND INTEPR. LOOP
E3A6 32E812           (      exbasic.asm):01537         LB134     LEAS 18,S           ; PULL THE 'FOR-NEXT' DATA OFF THE STACK
E3A9 9D82             (      exbasic.asm):01538                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E3AB 812C             (      exbasic.asm):01539                   CMPA #',            ; CHECK FOR ANOTHER ARGUMENT
E3AD 26F4             (      exbasic.asm):01540                   BNE  LB131          ; RETURN IF NONE
E3AF 9D7C             (      exbasic.asm):01541                   JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
E3B1 8DBD             (      exbasic.asm):01542                   BSR  LB0FE          ; BSR SIMULATES A CALL TO 'NEXT' FROM COMMAND LOOP
                      (      exbasic.asm):01543         
                      (      exbasic.asm):01544         
E3B3 8D13             (      exbasic.asm):01545         LB141     BSR  LB156          ; EVALUATE EXPRESSION AND DO A TYPE CHECK FOR NUMERIC
E3B5 1CFE             (      exbasic.asm):01546         LB143     ANDCC #$FE          ; CLEAR CARRY FLAG
E3B7 7D               (      exbasic.asm):01547         LB145     FCB  $7D            ; OP CODE OF TST $1A01 - SKIP TWO BYTES (DO
                      (      exbasic.asm):01548         *              ; NOT CHANGE CARRY FLAG)
E3B8 1A01             (      exbasic.asm):01549         LB146     ORCC #1             ; SET CARRY
                      (      exbasic.asm):01550         
                      (      exbasic.asm):01551         * STRING TYPE MODE CHECK - IF ENTERED AT LB146 THEN VALTYP PLUS IS 'TM' ERROR
                      (      exbasic.asm):01552         * NUMERIC TYPE MODE CHECK - IF ENTERED AT LB143 THEN VALTYP MINUS IS 'TM' ERROR
                      (      exbasic.asm):01553         * IF ENTERED AT LB148, A TYPE CHECK IS DONE ON VALTYP
                      (      exbasic.asm):01554         * IF ENTERED WITH CARRY SET, THEN 'TM' ERROR IF NUMERIC
                      (      exbasic.asm):01555         * IF ENTERED WITH CARRY CLEAR, THEN 'TM' ERROR IF STRING.
E3BA 0D06             (      exbasic.asm):01556         LB148     TST  VALTYP         ; TEST TYPE FLAG; DO NOT CHANGE CARRY
E3BC 2503             (      exbasic.asm):01557                   BCS  LB14F          ; BRANCH IF STRING
E3BE 2A99             (      exbasic.asm):01558                   BPL  LB0E7          ; RETURN ON PLUS
E3C0 8C               (      exbasic.asm):01559                   FCB  SKP2           ; SKIP 2 BYTES - 'TM' ERROR
E3C1 2B96             (      exbasic.asm):01560         LB14F     BMI  LB0E7          ; RETURN ON MINUS
E3C3 C618             (      exbasic.asm):01561                   LDB  #12*2          ; 'TYPE M1SMATCH' ERROR
E3C5 7EDEEC           (      exbasic.asm):01562         LB153     JMP  LAC46          ; PROCESS ERROR
                      (      exbasic.asm):01563         * EVALUATE EXPRESSION
E3C8 8D6E             (      exbasic.asm):01564         LB156     BSR  LB1C6          ; BACK UP INPUT POINTER
E3CA 4F               (      exbasic.asm):01565         LB158     CLRA                ; END OF OPERATION PRECEDENCE FLAG
E3CB 8C               (      exbasic.asm):01566                   FCB  SKP2           ; SKIP TWO BYTES
E3CC 3404             (      exbasic.asm):01567         LB15A     PSHS B              ; SAVE FLAG (RELATIONAL OPERATOR FLAG)
E3CE 3402             (      exbasic.asm):01568                   PSHS A              ; SAVE FLAG (PRECEDENCE FLAG)
E3D0 C601             (      exbasic.asm):01569                   LDB  #1             ; *
E3D2 BDDED9           (      exbasic.asm):01570                   JSR  LAC33          ; * SEE IF ROOM IN FREE RAM FOR (B) WORDS
E3D5 BDE495           (      exbasic.asm):01571                   JSR  LB223          ; GO EVALUATE AN EXPRESSION
E3D8 0F3F             (      exbasic.asm):01572                   CLR  TRELFL         ; RESET RELATIONAL OPERATOR FLAG
E3DA 9D82             (      exbasic.asm):01573         LB168     JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
                      (      exbasic.asm):01574         * CHECK FOR RELATIONAL OPERATORS
E3DC 80AD             (      exbasic.asm):01575         LB16A     SUBA #TOK_GREATER   ; TOKEN FOR >
E3DE 2513             (      exbasic.asm):01576                   BCS  LB181          ; BRANCH IF LESS THAN RELATIONAL OPERATORS
E3E0 8103             (      exbasic.asm):01577                   CMPA #3             ; *
E3E2 240F             (      exbasic.asm):01578                   BCC  LB181          ; * BRANCH IF GREATER THAN RELATIONAL OPERATORS
E3E4 8101             (      exbasic.asm):01579                   CMPA #1             ; SET CARRY IF '>'
E3E6 49               (      exbasic.asm):01580                   ROLA                ; CARRY TO BIT 0
E3E7 983F             (      exbasic.asm):01581                   EORA TRELFL         ; * CARRY SET IF
E3E9 913F             (      exbasic.asm):01582                   CMPA TRELFL         ; * TRELFL = ACCA
E3EB 2564             (      exbasic.asm):01583                   BCS  LB1DF          ; BRANCH IF SYNTAX ERROR : == << OR >>
E3ED 973F             (      exbasic.asm):01584                   STA  TRELFL         ; BIT 0: >, BIT 1 =, BIT 2: <
E3EF 9D7C             (      exbasic.asm):01585                   JSR  GETNCH         ; GET AN INPUT CHARACTER
E3F1 20E9             (      exbasic.asm):01586                   BRA  LB16A          ; CHECK FOR ANOTHER RELATIONAL OPERATOR
                      (      exbasic.asm):01587         *
E3F3 D63F             (      exbasic.asm):01588         LB181     LDB  TRELFL         ; GET RELATIONAL OPERATOR FLAG
E3F5 2633             (      exbasic.asm):01589                   BNE  LB1B8          ; BRANCH IF RELATIONAL COMPARISON
E3F7 1024006B         (      exbasic.asm):01590                   LBCC LB1F4          ; BRANCH IF > RELATIONAL OPERATOR
E3FB 8B07             (      exbasic.asm):01591                   ADDA #7             ; SEVEN ARITHMETIC/LOGICAL OPERATORS
E3FD 2467             (      exbasic.asm):01592                   BCC  LB1F4          ; BRANCH IF NOT ARITHMETIC/LOGICAL OPERATOR
E3FF 9906             (      exbasic.asm):01593                   ADCA VALTYP         ; ADD CARRY, NUMERIC FLAG AND MODIFIED TOKEN NUMBER
E401 10270477         (      exbasic.asm):01594                   LBEQ LB60F          ; BRANCH IF VALTYP = FF, AND ACCA = '+' TOKEN -
                      (      exbasic.asm):01595         *                             ; CONCATENATE TWO STRINGS
E405 89FF             (      exbasic.asm):01596                   ADCA #-1            ; RESTORE ARITHMETIC/LOGICAL OPERATOR NUMBER
E407 3402             (      exbasic.asm):01597                   PSHS A              ; * STORE OPERATOR NUMBER ON STACK; MULTIPLY IT BY 2
E409 48               (      exbasic.asm):01598                   ASLA                ; * THEN ADD THE STORED STACK DATA = MULTIPLY
E40A ABE0             (      exbasic.asm):01599                   ADDA ,S+            ; * X 3; 3 BYTE/TABLE ENTRY
E40C 8EDCF1           (      exbasic.asm):01600                   LDX  #LAA51         ; JUMP TABLE FOR ARITHMETIC & LOGICAL OPERATORS
E40F 3086             (      exbasic.asm):01601                   LEAX A,X            ; POINT X TO PROPER TABLE
E411 3502             (      exbasic.asm):01602         LB19F     PULS A              ; GET PRECEDENCE FLAG FROM STACK
E413 A184             (      exbasic.asm):01603                   CMPA ,X             ; COMPARE TO CURRENT OPERATOR
E415 2455             (      exbasic.asm):01604                   BCC  LB1FA          ; BRANCH IF STACK OPERATOR > CURRENT OPERATOR
E417 8D9C             (      exbasic.asm):01605                   BSR  LB143          ; 'TM' ERROR IF VARIABLE TYPE = STRING
                      (      exbasic.asm):01606         
                      (      exbasic.asm):01607         * OPERATION BEING PROCESSED IS OF HIGHER PRECEDENCE THAN THE PREVIOUS OPERATION.
E419 3402             (      exbasic.asm):01608         LB1A7     PSHS A              ; SAVE PRECEDENCE FLAG
E41B 8D29             (      exbasic.asm):01609                   BSR  LB1D4          ; PUSH OPERATOR ROUTINE ADDRESS AND FPA0 ONTO STACK
E41D 9E3D             (      exbasic.asm):01610                   LDX  RELPTR         ; GET POINTER TO ARITHMETIC/LOGICAL TABLE ENTRY FOR
                      (      exbasic.asm):01611         *                             ; LAST CALCULATED OPERATION
E41F 3502             (      exbasic.asm):01612                   PULS A              ; GET PRECEDENCE FLAG OF PREVIOUS OPERATION
E421 261D             (      exbasic.asm):01613                   BNE  LB1CE          ; BRANCH IF NOT END OF OPERATION
E423 4D               (      exbasic.asm):01614                   TSTA                ; CHECK TYPE OF PRECEDENCE FLAG
E424 1027006A         (      exbasic.asm):01615                   LBEQ LB220          ; BRANCH IF END OF EXPRESSION OR SUB-EXPRESSION
E428 204B             (      exbasic.asm):01616                   BRA  LB203          ; EVALUATE AN OPERATION
                      (      exbasic.asm):01617         
E42A 0806             (      exbasic.asm):01618         LB1B8     ASL  VALTYP         ; BIT 7 OF TYPE FLAG TO CARRY
E42C 59               (      exbasic.asm):01619                   ROLB                ; SHIFT RELATIONAL FLAG LEFT - VALTYP TO BIT 0
E42D 8D09             (      exbasic.asm):01620                   BSR  LB1C6          ; MOVE THE INPUT POINTER BACK ONE
E42F 8EE43D           (      exbasic.asm):01621                   LDX  #LB1CB         ; POINT X TO RELATIONAL COMPARISON JUMP TABLE
E432 D73F             (      exbasic.asm):01622                   STB  TRELFL         ; SAVE RELATIONAL COMPARISON DATA
E434 0F06             (      exbasic.asm):01623                   CLR  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
E436 20D9             (      exbasic.asm):01624                   BRA  LB19F          ; PERFORM OPERATION OR SAVE ON STACK
                      (      exbasic.asm):01625         
E438 9E83             (      exbasic.asm):01626         LB1C6     LDX  CHARAD         ; * GET BASIC'S INPUT POINTER AND
E43A 7EE151           (      exbasic.asm):01627                   JMP  LAEBB          ; * MOVE IT BACK ONE
                      (      exbasic.asm):01628         * RELATIONAL COMPARISON JUMP TABLE
E43D 64               (      exbasic.asm):01629         LB1CB     FCB  $64            ; RELATIONAL COMPARISON FLAG
E43E E561             (      exbasic.asm):01630         LB1CC     FDB  LB2F4          ; JUMP ADDRESS
                      (      exbasic.asm):01631         
E440 A184             (      exbasic.asm):01632         LB1CE     CMPA ,X             ; COMPARE PRECEDENCE OF LAST DONE OPERATION TO
                      (      exbasic.asm):01633         *         NEXT TO BE DONE OPERATION
E442 2431             (      exbasic.asm):01634                   BCC  LB203          ; EVALUATE OPERATION IF LOWER PRECEDENCE
E444 20D3             (      exbasic.asm):01635                   BRA  LB1A7          ; PUSH OPERATION DATA ON STACK IF HIGHER PRECEDENCE
                      (      exbasic.asm):01636         
                      (      exbasic.asm):01637         * PUSH OPERATOR EVALUATION ADDRESS AND FPA0 ONTO STACK AND EVALUATE ANOTHER EXPR
E446 EC01             (      exbasic.asm):01638         LB1D4     LDD  1,X            ; GET ADDRESS OF OPERATOR ROUTINE
E448 3406             (      exbasic.asm):01639                   PSHS B,A            ; SAVE IT ON THE STACK
E44A 8D08             (      exbasic.asm):01640                   BSR  LB1E2          ; PUSH FPA0 ONTO STACK
E44C D63F             (      exbasic.asm):01641                   LDB  TRELFL         ; GET BACK RELATIONAL OPERATOR FLAG
E44E 16FF7B           (      exbasic.asm):01642                   LBRA LB15A          ; EVALUATE ANOTHER EXPRESSION
E451 7EE4E9           (      exbasic.asm):01643         LB1DF     JMP  LB277          ; 'SYNTAX ERROR'
                      (      exbasic.asm):01644         * PUSH FPA0 ONTO THE STACK. ,S   = EXPONENT
                      (      exbasic.asm):01645         * 1-2,S =HIGH ORDER MANTISSA 3-4,S = LOW ORDER MANTISSA
                      (      exbasic.asm):01646         * 5,S = SIGN RETURN WITH PRECEDENCE CODE IN ACCA
E454 D654             (      exbasic.asm):01647         LB1E2     LDB  FP0SGN         ; GET SIGN OF FPA0 MANTISSA
E456 A684             (      exbasic.asm):01648                   LDA  ,X             ; GET PRECEDENCE CODE TO ACCA
E458 3520             (      exbasic.asm):01649         LB1E6     PULS Y              ; GET RETURN ADDRESS FROM STACK & PUT IT IN Y
E45A 3404             (      exbasic.asm):01650                   PSHS B              ; SAVE ACCB ON STACK
E45C D64F             (      exbasic.asm):01651         LB1EA     LDB  FP0EXP         ; * PUSH FPA0 ONTO THE STACK
E45E 9E50             (      exbasic.asm):01652                   LDX  FPA0           ; *
E460 DE52             (      exbasic.asm):01653                   LDU  FPA0+2         ; *
E462 3454             (      exbasic.asm):01654                   PSHS U,X,B          ; *
E464 6EA4             (      exbasic.asm):01655                   JMP  ,Y             ; JUMP TO ADDRESS IN Y
                      (      exbasic.asm):01656         
                      (      exbasic.asm):01657         * BRANCH HERE IF NON-OPERATOR CHARACTER FOUND - USUALLY ')' OR END OF LINE
E466 9E74             (      exbasic.asm):01658         LB1F4     LDX  ZERO           ; POINT X TO DUMMY VALUE (ZERO)
E468 A6E0             (      exbasic.asm):01659                   LDA  ,S+            ; GET PRECEDENCE FLAG FROM STACK
E46A 2726             (      exbasic.asm):01660                   BEQ  LB220          ; BRANCH IF END OF EXPRESSION
E46C 8164             (      exbasic.asm):01661         LB1FA     CMPA #$64           ; * CHECK FOR RELATIONAL COMPARISON FLAG
E46E 2703             (      exbasic.asm):01662                   BEQ  LB201          ; * AND BRANCH IF RELATIONAL COMPARISON
E470 BDE3B5           (      exbasic.asm):01663                   JSR  LB143          ; 'TM' ERROR IF VARIABLE TYPE = STRING
E473 9F3D             (      exbasic.asm):01664         LB201     STX  RELPTR         ; SAVE POINTER TO OPERATOR ROUTINE
E475 3504             (      exbasic.asm):01665         LB203     PULS B              ; GET RELATIONAL OPERATOR FLAG FROM STACK
E477 815A             (      exbasic.asm):01666                   CMPA #$5A           ; CHECK FOR 'NOT' OPERATOR
E479 2719             (      exbasic.asm):01667                   BEQ  LB222          ; RETURN IF 'NOT' - NO RELATIONAL COMPARISON
E47B 817D             (      exbasic.asm):01668                   CMPA #$7D           ; CHECK FOR NEGATION (UNARY) FLAG
E47D 2715             (      exbasic.asm):01669                   BEQ  LB222          ; RETURN IF NEGATION - NO RELATIONAL COMPARISON
                      (      exbasic.asm):01670         
                      (      exbasic.asm):01671         * EVALUATE AN OPERATION. EIGHT BYTES WILL BE STORED ON STACK, FIRST SIX BYTES
                      (      exbasic.asm):01672         * ARE A TEMPORARY FLOATING POINT RESULT THEN THE ADDRESS OF ROUTINE WHICH
                      (      exbasic.asm):01673         * WILL EVALUATE THE OPERATION. THE RTS AT END OF ROUTINE WILL VECTOR
                      (      exbasic.asm):01674         * TO EVALUATING ROUTINE.
E47F 54               (      exbasic.asm):01675                   LSRB                ; = ROTATE VALTYP BIT INTO CARRY
E480 D70A             (      exbasic.asm):01676                   STB  RELFLG         ; = FLAG AND SAVE NEW RELFLG
E482 3552             (      exbasic.asm):01677                   PULS A,X,U          ; * PULL A FP VALUE OFF OF THE STACK
E484 975C             (      exbasic.asm):01678                   STA  FP1EXP         ; * AND SAVE IT IN FPA1
E486 9F5D             (      exbasic.asm):01679                   STX  FPA1           ; *
E488 DF5F             (      exbasic.asm):01680                   STU  FPA1+2         ; *
E48A 3504             (      exbasic.asm):01681                   PULS B              ; = GET MANTISSA SIGN AND
E48C D761             (      exbasic.asm):01682                   STB  FP1SGN         ; = SAVE IT IN FPA1
E48E D854             (      exbasic.asm):01683                   EORB FP0SGN         ; EOR IT WITH FPA1 MANTISSA SIGN
E490 D762             (      exbasic.asm):01684                   STB  RESSGN         ; SAVE IT IN RESULT SIGN BYTE
E492 D64F             (      exbasic.asm):01685         LB220     LDB  FP0EXP         ; GET EXPONENT OF FPA0
E494 39               (      exbasic.asm):01686         LB222     RTS
                      (      exbasic.asm):01687         
E495 BDF6E2           (      exbasic.asm):01688         LB223     JSR  XVEC15         ; CALL EXTENDED BASIC ADD-IN
E498 0F06             (      exbasic.asm):01689                   CLR  VALTYP         ; INITIALIZE TYPE FLAG TO NUMERIC
E49A 9D7C             (      exbasic.asm):01690                   JSR  GETNCH         ; GET AN INPUT CHAR
E49C 2403             (      exbasic.asm):01691                   BCC  LB22F          ; BRANCH IF NOT NUMERIC
E49E 7EEF44           (      exbasic.asm):01692         LB22C     JMP  LBD12          ; CONVERT ASCII STRING TO FLOATING POINT -
                      (      exbasic.asm):01693         *         RETURN RESULT IN FPA0
                      (      exbasic.asm):01694         * PROCESS A NON NUMERIC FIRST CHARACTER
E4A1 BDE60F           (      exbasic.asm):01695         LB22F     JSR  LB3A2          ; SET CARRY IF NOT ALPHA
E4A4 2450             (      exbasic.asm):01696                   BCC  LB284          ; BRANCH IF ALPHA CHARACTER
E4A6 812E             (      exbasic.asm):01697                   CMPA #'.            ; IS IT '.' (DECIMAL POINT)?
E4A8 27F4             (      exbasic.asm):01698                   BEQ  LB22C          ; CONVERT ASCII STRING TO FLOATING POINT
E4AA 81A7             (      exbasic.asm):01699                   CMPA #TOK_MINUS     ; MINUS TOKEN
E4AC 2740             (      exbasic.asm):01700                   BEQ  LB27C          ; YES - GO PROCESS THE MINUS OPERATOR
E4AE 81A6             (      exbasic.asm):01701                   CMPA #TOK_PLUS      ; PLUS TOKEN
E4B0 27E3             (      exbasic.asm):01702                   BEQ  LB223          ; YES - GET ANOTHER CHARACTER
E4B2 8122             (      exbasic.asm):01703                   CMPA #'"            ; STRING DELIMITER?
E4B4 260A             (      exbasic.asm):01704                   BNE  LB24E          ; NO
E4B6 9E83             (      exbasic.asm):01705         LB244     LDX  CHARAD         ; CURRENT BASIC POINTER TO X
E4B8 BDE785           (      exbasic.asm):01706                   JSR  LB518          ; SAVE STRING ON STRING STACK
E4BB 9E64             (      exbasic.asm):01707         LB249     LDX  COEFPT         ; * GET ADDRESS OF END OF STRING AND
E4BD 9F83             (      exbasic.asm):01708                   STX  CHARAD         ; * PUT BASIC'S INPUT POINTER THERE
E4BF 39               (      exbasic.asm):01709                   RTS
E4C0 81A3             (      exbasic.asm):01710         LB24E     CMPA #TOK_NOT       ; NOT TOKEN?
E4C2 260D             (      exbasic.asm):01711                   BNE  LB25F          ; NO
                      (      exbasic.asm):01712         * PROCESS THE NOT OPERATOR
E4C4 865A             (      exbasic.asm):01713                   LDA  #$5A           ; 'NOT' PRECEDENCE FLAG
E4C6 BDE3CC           (      exbasic.asm):01714                   JSR  LB15A          ; PROCESS OPERATION FOLLOWING 'NOT'
E4C9 BDE65A           (      exbasic.asm):01715                   JSR  INTCNV         ; CONVERT FPA0 TO INTEGER IN ACCD
E4CC 43               (      exbasic.asm):01716                   COMA                ; * 'NOT' THE INTEGER
E4CD 53               (      exbasic.asm):01717                   COMB                ; *
E4CE 7EE761           (      exbasic.asm):01718                   JMP  GIVABF         ; CONVERT ACCD TO FLOATING POINT (FPA0)
E4D1 4C               (      exbasic.asm):01719         LB25F     INCA                ; CHECK FOR TOKENS PRECEEDED BY $FF
E4D2 272E             (      exbasic.asm):01720                   BEQ  LB290          ; IT WAS PRECEEDED BY $FF
E4D4 8D06             (      exbasic.asm):01721         LB262     BSR  LB26A          ; SYNTAX CHECK FOR A '('
E4D6 BDE3C8           (      exbasic.asm):01722                   JSR  LB156          ; EVALUATE EXPRESSIONS WITHIN PARENTHESES AT
                      (      exbasic.asm):01723         *         HIGHEST PRECEDENCE
E4D9 C629             (      exbasic.asm):01724         LB267     LDB  #')            ; SYNTAX CHECK FOR ')'
E4DB 8C               (      exbasic.asm):01725                   FCB  SKP2           ; SKIP 2 BYTES
E4DC C628             (      exbasic.asm):01726         LB26A     LDB  #'(            ; SYNTAX CHECK FOR '('
E4DE 8C               (      exbasic.asm):01727                   FCB  SKP2           ; SKIP 2 BYTES
E4DF C62C             (      exbasic.asm):01728         LB26D     LDB  #',            ; SYNTAX CHECK FOR COMMA
E4E1 E19F0083         (      exbasic.asm):01729         LB26F     CMPB [CHARAD]       ; * COMPARE ACCB TO CURRENT INPUT
E4E5 2602             (      exbasic.asm):01730                   BNE  LB277          ; * CHARACTER - SYNTAX ERROR IF NO MATCH
E4E7 0E7C             (      exbasic.asm):01731                   JMP  GETNCH         ; GET A CHARACTER FROM BASIC
E4E9 C602             (      exbasic.asm):01732         LB277     LDB  #2*1           ; SYNTAX ERROR
E4EB 7EDEEC           (      exbasic.asm):01733                   JMP  LAC46          ; JUMP TO ERROR HANDLER
                      (      exbasic.asm):01734         
                      (      exbasic.asm):01735         * PROCESS THE MINUS (UNARY) OPERATOR
E4EE 867D             (      exbasic.asm):01736         LB27C     LDA  #$7D           ; MINUS (UNARY) PRECEDENCE FLAG
E4F0 BDE3CC           (      exbasic.asm):01737                   JSR  LB15A          ; PROCESS OPERATION FOLLOWING 'UNARY' NEGATION
E4F3 7EF11B           (      exbasic.asm):01738                   JMP  LBEE9          ; CHANGE SIGN OF FPA0 MANTISSA
                      (      exbasic.asm):01739         
                      (      exbasic.asm):01740         * EVALUATE ALPHA EXPRESSION
E4F6 BDE5C4           (      exbasic.asm):01741         LB284     JSR  LB357          ; FIND THE DESCRIPTOR ADDRESS OF A VARIABLE
E4F9 9F52             (      exbasic.asm):01742         LB287     STX  FPA0+2         ; SAVE DESCRIPTOR ADDRESS IN FPA0
E4FB 9606             (      exbasic.asm):01743                   LDA  VALTYP         ; TEST VARIABLE TYPE
E4FD 2695             (      exbasic.asm):01744                   BNE  LB222          ; RETURN IF STRING
E4FF 7EEE46           (      exbasic.asm):01745                   JMP  LBC14          ; COPY A FP NUMBER FROM (X) TO FPA0
                      (      exbasic.asm):01746         
                      (      exbasic.asm):01747         * EVALUATING A SECONDARY TOKEN
E502 9D7C             (      exbasic.asm):01748         LB290     JSR  GETNCH         ; GET AN INPUT CHARACTER (SECONDARY TOKEN)
E504 1F89             (      exbasic.asm):01749                   TFR  A,B            ; SAVE IT IN ACCB
E506 58               (      exbasic.asm):01750                   ASLB                ; X2 & BET RID OF BIT 7
E507 9D7C             (      exbasic.asm):01751                   JSR  GETNCH         ; GET ANOTHER INPUT CHARACTER
E509 C11B             (      exbasic.asm):01752                   CMPB #NUM_SEC_FNS-1*2 ; 29 SECONDARY FUNCTIONS - 1
E50B 2303             (      exbasic.asm):01753                   BLS  LB29F          ; BRANCH IF COLOR BASIC TOKEN
E50D 7EE4E9           (      exbasic.asm):01754                   JMP  LB277          ; SYNTAX ERROR
E510 3404             (      exbasic.asm):01755         LB29F     PSHS B              ; SAVE TOKEN OFFSET ON STACK
E512 C195             (      exbasic.asm):01756                   CMPB #TOK_LEFT-$80*2 ; CHECK FOR TOKEN WITH AN ARGUMENT
E514 251E             (      exbasic.asm):01757                   BCS  LB2C7          ; DO SECONDARIES STRING$ OR LESS
E516 C198             (      exbasic.asm):01758                   CMPB #TOK_INKEY-$80*2 ; *
E518 241C             (      exbasic.asm):01759                   BCC  LB2C9          ; * DO SECONDARIES $92 (INKEY$) OR >
E51A 8DC0             (      exbasic.asm):01760                   BSR  LB26A          ; SYNTAX CHECK FOR A '('
E51C A6E4             (      exbasic.asm):01761                   LDA  ,S             ; GET TOKEN NUMBER
                      (      exbasic.asm):01762         * DO SECONDARIES (LEFT$, RIGHT$, MID$)
E51E BDE3C8           (      exbasic.asm):01763                   JSR  LB156          ; EVALUATE FIRST STRING IN ARGUMENT
E521 8DBC             (      exbasic.asm):01764                   BSR  LB26D          ; SYNTAX CHECK FOR A COMMA
E523 BDE3B8           (      exbasic.asm):01765                   JSR  LB146          ; 'TM' ERROR IF NUMERIC VARiABLE
E526 3502             (      exbasic.asm):01766                   PULS A              ; GET TOKEN OFFSET FROM STACK
E528 DE52             (      exbasic.asm):01767                   LDU  FPA0+2         ; POINT U TO STRING DESCRIPTOR
E52A 3442             (      exbasic.asm):01768                   PSHS U,A            ; SAVE TOKEN OFFSET AND DESCRIPTOR ADDRESS
E52C BDE978           (      exbasic.asm):01769                   JSR  LB70B          ; EVALUATE FIRST NUMERIC ARGUMENT
E52F 3502             (      exbasic.asm):01770                   PULS A              ; GET TOKEN OFFSET FROM STACK
E531 3406             (      exbasic.asm):01771                   PSHS B,A            ; SAVE TOKEN OFFSET AND NUMERIC ARGUMENT
E533 8E               (      exbasic.asm):01772                   FCB  $8E            ; OP CODE OF LDX# - SKlP 2 BYTES
E534 8D9E             (      exbasic.asm):01773         LB2C7     BSR  LB262          ; SYNTAX CHECK FOR A '('
E536 3504             (      exbasic.asm):01774         LB2C9     PULS B              ; GET TOKEN OFFSET
E538 BEDBE2           (      exbasic.asm):01775                   LDX  COMVEC+8       ; GET SECONDARY FUNCTION JUMP TABLE ADDRESS
E53B 3A               (      exbasic.asm):01776         LB2CE     ABX                 ; ADD IN COMMAND OFFSET
                      (      exbasic.asm):01777         *
                      (      exbasic.asm):01778         * HERE IS WHERE WE BRANCH TO A SECONDARY FUNCTION
E53C AD94             (      exbasic.asm):01779                   JSR  [,X]           ; GO DO AN SECONDARY FUNCTION
E53E 7EE3B5           (      exbasic.asm):01780                   JMP  LB143          ; 'TM' ERROR IF VARIABLE TYPE = STRING
                      (      exbasic.asm):01781         
                      (      exbasic.asm):01782         * LOGICAL OPERATOR 'OR' JUMPS HERE
E541 86               (      exbasic.asm):01783         LB2D4     FCB  SKP1LD         ; SKIP ONE BYTE - 'OR' FLAG = $4F
                      (      exbasic.asm):01784         
                      (      exbasic.asm):01785         * LOGICAL OPERATOR 'AND' JUMPS HERE
E542 4F               (      exbasic.asm):01786         LB2D5     CLRA                ; AND FLAG = 0
E543 9703             (      exbasic.asm):01787                   STA  TMPLOC         ; AND/OR FLAG
E545 BDE65A           (      exbasic.asm):01788                   JSR  INTCNV         ; CONVERT FPA0 INTO AN INTEGER IN ACCD
E548 DD01             (      exbasic.asm):01789                   STD  CHARAC         ; TEMP SAVE ACCD
E54A BDEE7C           (      exbasic.asm):01790                   JSR  LBC4A          ; MOVE FPA1 TO FPA0
E54D BDE65A           (      exbasic.asm):01791                   JSR  INTCNV         ; CONVERT FPA0 INTO AN INTEGER IN ACCD
E550 0D03             (      exbasic.asm):01792                   TST  TMPLOC         ; CHECK AND/OR FLAG
E552 2606             (      exbasic.asm):01793                   BNE  LB2ED          ; BRANCH IF OR
E554 9401             (      exbasic.asm):01794                   ANDA CHARAC         ; * 'AND' ACCD WITH FPA0 INTEGER
E556 D402             (      exbasic.asm):01795                   ANDB ENDCHR         ; * STORED IN ENDCHR
E558 2004             (      exbasic.asm):01796                   BRA  LB2F1          ; CONVERT TO FP
E55A 9A01             (      exbasic.asm):01797         LB2ED     ORA  CHARAC         ; * 'OR' ACCD WITH FPA0 INTEGER
E55C DA02             (      exbasic.asm):01798                   ORB  ENDCHR         ; * STORED IN CHARAC
E55E 7EE761           (      exbasic.asm):01799         LB2F1     JMP  GIVABF         ; CONVERT THE VALUE IN ACCD INTO A FP NUMBER
                      (      exbasic.asm):01800         
                      (      exbasic.asm):01801         * RELATIONAL COMPARISON PROCESS HANDLER
E561 BDE3BA           (      exbasic.asm):01802         LB2F4     JSR  LB148          ; 'TM' ERROR IF TYPE MISMATCH
E564 2610             (      exbasic.asm):01803                   BNE  LB309          ; BRANCH IF STRING VARIABLE
E566 9661             (      exbasic.asm):01804                   LDA  FP1SGN         ; * 'PACK' THE MANTISSA
E568 8A7F             (      exbasic.asm):01805                   ORA  #$7F           ; * SIGN OF FPA1 INTO
E56A 945D             (      exbasic.asm):01806                   ANDA FPA1           ; * BIT 7 OF THE
E56C 975D             (      exbasic.asm):01807                   STA  FPA1           ; * MANTISSA MS BYTE
E56E 8E005C           (      exbasic.asm):01808                   LDX  #FP1EXP        ; POINT X TO FPA1
E571 BDEEC8           (      exbasic.asm):01809                   JSR  LBC96          ; COMPARE FPA0 TO FPA1
E574 2036             (      exbasic.asm):01810                   BRA  LB33F          ; CHECK TRUTH OF RELATIONAL COMPARISON
                      (      exbasic.asm):01811         
                      (      exbasic.asm):01812         * RELATIONAL COMPARISON OF STRINGS
E576 0F06             (      exbasic.asm):01813         LB309     CLR  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
E578 0A3F             (      exbasic.asm):01814                   DEC  TRELFL         ; REMOVE STRING TYPE FLAG (BIT0=1 FOR STRINGS) FROM THE
                      (      exbasic.asm):01815         *                             ; DESIRED RELATIONAL COMPARISON DATA
E57A BDE8C4           (      exbasic.asm):01816                   JSR  LB657          ; GET LENGTH AND ADDRESS OF STRING WHOSE
                      (      exbasic.asm):01817         *                             ; DESCRIPTOR ADDRESS IS IN THE BOTTOM OF FPA0
E57D D756             (      exbasic.asm):01818                   STB  STRDES         ; * SAVE LENGTH AND ADDRESS IN TEMPORARY
E57F 9F58             (      exbasic.asm):01819                   STX  STRDES+2       ; * DESCRIPTOR (STRING B)
E581 9E5F             (      exbasic.asm):01820                   LDX  FPA1+2         ; = RETURN LENGTH AND ADDRESS OF STRING
E583 BDE8C6           (      exbasic.asm):01821                   JSR  LB659          ; = WHOSE DESCRIPTOR ADDRESS IS STORED IN FPA1+2
E586 9656             (      exbasic.asm):01822                   LDA  STRDES         ; LOAD ACCA WITH LENGTH OF STRING B
E588 3404             (      exbasic.asm):01823                   PSHS B              ; SAVE LENGTH A ON STACK
E58A A0E0             (      exbasic.asm):01824                   SUBA ,S+            ; SUBTRACT LENGTH A FROM LENGTH B
E58C 2707             (      exbasic.asm):01825                   BEQ  LB328          ; BRANCH IF STRINGS OF EQUAL LENGTH
E58E 8601             (      exbasic.asm):01826                   LDA  #1             ; ; TRUE FLAG
E590 2403             (      exbasic.asm):01827                   BCC  LB328          ; TRUE IF LENGTH B > LENGTH A
E592 D656             (      exbasic.asm):01828                   LDB  STRDES         ; LOAD ACCB WITH LENGTH B
E594 40               (      exbasic.asm):01829                   NEGA                ; SET FLAG = FALSE (1FF)
E595 9754             (      exbasic.asm):01830         LB328     STA  FP0SGN         ; SAVE TRUE/FALSE FLAG
E597 DE58             (      exbasic.asm):01831                   LDU  STRDES+2       ; POINT U TO START OF STRING
E599 5C               (      exbasic.asm):01832                   INCB                ; COMPENSATE FOR THE DECB BELOW
                      (      exbasic.asm):01833         * ENTER WITH ACCB CONTAINING LENGTH OF SHORTER STRING
E59A 5A               (      exbasic.asm):01834         LB32D     DECB                ; DECREMENT SHORTER STRING LENGTH
E59B 2604             (      exbasic.asm):01835                   BNE  LB334          ; BRANCH IF ALL OF STRING NOT COMPARED
E59D D654             (      exbasic.asm):01836                   LDB  FP0SGN         ; GET TRUE/FALSE FLAB
E59F 200B             (      exbasic.asm):01837                   BRA  LB33F          ; CHECK TRUTH OF RELATIONAL COMPARISON
E5A1 A680             (      exbasic.asm):01838         LB334     LDA  ,X+            ; GET A BYTE FROM STRING A
E5A3 A1C0             (      exbasic.asm):01839                   CMPA ,U+            ; COMPARE TO STRING B
E5A5 27F3             (      exbasic.asm):01840                   BEQ  LB32D          ; CHECK ANOTHER CHARACTER IF =
E5A7 C6FF             (      exbasic.asm):01841                   LDB  #$FF           ; FALSE FLAG IF STRING A > B
E5A9 2401             (      exbasic.asm):01842                   BCC  LB33F          ; BRANCH IF STRING A > STRING B
E5AB 50               (      exbasic.asm):01843                   NEGB                ; SET FLAG = TRUE
                      (      exbasic.asm):01844         
                      (      exbasic.asm):01845         * DETERMINE TRUTH OF COMPARISON - RETURN RESULT IN FPA0
E5AC CB01             (      exbasic.asm):01846         LB33F     ADDB #1             ; CONVERT $FF,0,1 TO 0,1,2
E5AE 59               (      exbasic.asm):01847                   ROLB                ; NOW IT'S 1,2,4 FOR > = <
E5AF D40A             (      exbasic.asm):01848                   ANDB RELFLG         ; 'AND' THE ACTUAL COMPARISON WITH THE DESIRED -
E5B1                  (      exbasic.asm):01849         COMPARISON
E5B1 2702             (      exbasic.asm):01850                   BEQ  LB348          ; BRANCH IF FALSE (NO MATCHING BITS)
E5B3 C6FF             (      exbasic.asm):01851                   LDB  #$FF           ; TRUE FLAG
E5B5 7EEEAE           (      exbasic.asm):01852         LB348     JMP  LBC7C          ; CONVERT ACCB INTO FP NUMBER IN FPA0
                      (      exbasic.asm):01853         
                      (      exbasic.asm):01854         * DIM
E5B8 BDE4DF           (      exbasic.asm):01855         LB34B     JSR  LB26D          ; SYNTAX CHECK FOR COMMA
E5BB C601             (      exbasic.asm):01856         DIM       LDB  #1             ; DIMENSION FLAG
E5BD 8D08             (      exbasic.asm):01857                   BSR  LB35A          ; SAVE ARRAY SPACE FOR THIS VARIABLE
E5BF 9D82             (      exbasic.asm):01858                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E5C1 26F5             (      exbasic.asm):01859                   BNE  LB34B          ; KEEP DIMENSIONING IF NOT END OF LINE
E5C3 39               (      exbasic.asm):01860                   RTS
                      (      exbasic.asm):01861         * EVALUATE A VARIABLE - RETURN X AND
                      (      exbasic.asm):01862         * VARPTR POINTING TO VARIABLE DESCRIPTOR
                      (      exbasic.asm):01863         * EACH VARIABLE REQUIRES 7 BYTES - THE FIRST TWO
                      (      exbasic.asm):01864         * BYTES ARE THE VARIABLE NAME AND THE NEXT 5
                      (      exbasic.asm):01865         * BYTES ARE THE DESCRIPTOR. IF BIT 7 OF THE
                      (      exbasic.asm):01866         * FIRST BYTE OF VARlABLE NAME IS SET, THE
                      (      exbasic.asm):01867         * VARIABLE IS A DEF FN VARIABLE. IF BIT 7 OF
                      (      exbasic.asm):01868         * THE SECOND BYTE OF VARIABLE NAME IS SET, THE
                      (      exbasic.asm):01869         * VARIABLE IS A STRING, OTHERWISE THE VARIABLE
                      (      exbasic.asm):01870         * IS NUMERIC.
                      (      exbasic.asm):01871         * IF THE VARIABLE IS NOT FOUND, A ZERO VARIABLE IS
                      (      exbasic.asm):01872         * INSERTED INTO THE VARIABLE SPACE
E5C4 5F               (      exbasic.asm):01873         LB357     CLRB                ; DIMENSION FLAG = 0; DO NOT SET UP AN ARRAY
E5C5 9D82             (      exbasic.asm):01874                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E5C7 D705             (      exbasic.asm):01875         LB35A     STB  DIMFLG         ; SAVE ARRAY FLAG
                      (      exbasic.asm):01876         * ENTRY POINT FOR DEF FN VARIABLE SEARCH
E5C9 9737             (      exbasic.asm):01877         LB35C     STA  VARNAM         ; SAVE INPUT CHARACTER
E5CB 9D82             (      exbasic.asm):01878                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E5CD 8D40             (      exbasic.asm):01879                   BSR  LB3A2          ; SET CARRY IF NOT ALPHA
E5CF 1025FF16         (      exbasic.asm):01880                   LBCS LB277          ; SYNTAX ERROR IF NOT ALPHA
E5D3 5F               (      exbasic.asm):01881                   CLRB                ; DEFAULT 2ND VARIABLE CHARACTER TO ZERO
E5D4 D706             (      exbasic.asm):01882                   STB  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
E5D6 9D7C             (      exbasic.asm):01883                   JSR  GETNCH         ; GET ANOTHER CHARACTER FROM BASIC
E5D8 2504             (      exbasic.asm):01884                   BCS  LB371          ; BRANCH IF NUMERIC (2ND CHARACTER IN
                      (      exbasic.asm):01885         *                             ; VARIABLE MAY BE NUMERIC)
E5DA 8D33             (      exbasic.asm):01886                   BSR  LB3A2          ; SET CARRY IF NOT ALPHA
E5DC 250A             (      exbasic.asm):01887                   BCS  LB37B          ; BRANCH IF NOT ALPHA
E5DE 1F89             (      exbasic.asm):01888         LB371     TFR  A,B            ; SAVE 2ND CHARACTER IN ACCB
                      (      exbasic.asm):01889         * READ INPUT CHARACTERS UNTIL A NON ALPHA OR
                      (      exbasic.asm):01890         * NON NUMERIC IS FOUND - IGNORE ALL CHARACTERS
                      (      exbasic.asm):01891         * IN VARIABLE NAME AFTER THE 1ST TWO
E5E0 9D7C             (      exbasic.asm):01892         LB373     JSR  GETNCH         ; GET AN INPUT CHARACTER
E5E2 25FC             (      exbasic.asm):01893                   BCS  LB373          ; BRANCH IF NUMERIC
E5E4 8D29             (      exbasic.asm):01894                   BSR  LB3A2          ; SET CARRY IF NOT ALPHA
E5E6 24F8             (      exbasic.asm):01895                   BCC  LB373          ; BRANCH IF ALPHA
E5E8 8124             (      exbasic.asm):01896         LB37B     CMPA #'$            ; CHECK FOR A STRING VARIABLE
E5EA 2606             (      exbasic.asm):01897                   BNE  LB385          ; BRANCH IF IT IS NOT A STRING
E5EC 0306             (      exbasic.asm):01898                   COM  VALTYP         ; SET VARIABLE TYPE TO STRING
E5EE CB80             (      exbasic.asm):01899                   ADDB #$80           ; SET BIT 7 OF 2ND CHARACTER (STRING)
E5F0 9D7C             (      exbasic.asm):01900                   JSR  GETNCH         ; GET AN INPUT CHARACTER
E5F2 D738             (      exbasic.asm):01901         LB385     STB  VARNAM+1       ; SAVE 2ND CHARACTER IN VARNAM+1
E5F4 9A08             (      exbasic.asm):01902                   ORA  ARYDIS         ; OR IN THE ARRAY DISABLE FLAG - IF = $80,
                      (      exbasic.asm):01903         *              ; DON'T SEARCH FOR VARIABLES IN THE ARRAYS
E5F6 8028             (      exbasic.asm):01904                   SUBA #'(            ; IS THIS AN ARRAY VARIABLE?
E5F8 10270075         (      exbasic.asm):01905                   LBEQ LB404          ; BRANCH IF IT IS
E5FC 0F08             (      exbasic.asm):01906                   CLR  ARYDIS         ; RESET THE ARRAY DISABLE FLAG
E5FE 9E1B             (      exbasic.asm):01907                   LDX  VARTAB         ; POINT X TO THE START OF VARIABLES
E600 DC37             (      exbasic.asm):01908                   LDD  VARNAM         ; GET VARIABLE IN QUESTION
E602 9C1D             (      exbasic.asm):01909         LB395     CMPX ARYTAB         ; COMPARE X TO THE END OF VARIABLES
E604 2712             (      exbasic.asm):01910                   BEQ  LB3AB          ; BRANCH IF END OF VARIABLES
E606 10A381           (      exbasic.asm):01911                   CMPD ,X++           ; * COMPARE VARIABLE IN QUESTION TO CURRENT
E609 273E             (      exbasic.asm):01912                   BEQ  LB3DC          ; * VARIABLE AND BRANCH IF MATCH
E60B 3005             (      exbasic.asm):01913                   LEAX 5,X            ; = MOVE POINTER TO NEXT VARIABLE AND
E60D 20F3             (      exbasic.asm):01914                   BRA  LB395          ; = KEEP LOOKING
                      (      exbasic.asm):01915         
                      (      exbasic.asm):01916         * SET CARRY IF NOT UPPER CASE ALPHA
E60F 8141             (      exbasic.asm):01917         LB3A2     CMPA #'A            ; * CARRY SET IF < 'A'
E611 2504             (      exbasic.asm):01918                   BCS  LB3AA          ; *
E613 805B             (      exbasic.asm):01919                   SUBA #'Z+1          ; =
                      (      exbasic.asm):01920         *         SUBA #-('Z+1)       ; = CARRY CLEAR IF <= 'Z'
E615 80A5             (      exbasic.asm):01921                   FCB  $80,$A5
E617 39               (      exbasic.asm):01922         LB3AA     RTS
                      (      exbasic.asm):01923         * PUT A NEW VARIABLE IN TABLE OF VARIABLES
E618 8E0074           (      exbasic.asm):01924         LB3AB     LDX  #ZERO          ; POINT X TO ZERO LOCATION
E61B EEE4             (      exbasic.asm):01925                   LDU  ,S             ; GET CURRENT RETURN ADDRESS
E61D 1183E4F9         (      exbasic.asm):01926                   CMPU #LB287         ; DID WE COME FROM 'EVALUATE ALPHA EXPR'?
E621 2728             (      exbasic.asm):01927                   BEQ  LB3DE          ; YES - RETURN A ZERO VALUE
E623 DC1F             (      exbasic.asm):01928                   LDD  ARYEND         ; * GET END OF ARRAYS ADDRESS AND
E625 DD43             (      exbasic.asm):01929                   STD  V43            ; * SAVE IT AT V43
E627 C30007           (      exbasic.asm):01930                   ADDD #7             ; = ADD 7 TO END OF ARRAYS (EACH
E62A DD41             (      exbasic.asm):01931                   STD  V41            ; = VARIABLE = 7 BYTES) AND SAVE AT V41
E62C 9E1D             (      exbasic.asm):01932                   LDX  ARYTAB         ; * GET END OF VARIABLES AND SAVE AT V47
E62E 9F47             (      exbasic.asm):01933                   STX  V47            ; *
E630 BDDEC4           (      exbasic.asm):01934                   JSR  LAC1E          ; MAKE A SEVEN BYTE SLOT FOR NEW VARIABLE AT
                      (      exbasic.asm):01935         *         TOP  OF VARIABLES
E633 9E41             (      exbasic.asm):01936                   LDX  V41            ; = GET NEW END OF ARRAYS AND SAVE IT
E635 9F1F             (      exbasic.asm):01937                   STX  ARYEND         ; =
E637 9E45             (      exbasic.asm):01938                   LDX  V45            ; * GET NEW END OF VARIABLES AND SAVE IT
E639 9F1D             (      exbasic.asm):01939                   STX  ARYTAB         ; *
E63B 9E47             (      exbasic.asm):01940                   LDX  V47            ; GET OLD END OF VARIABLES
E63D DC37             (      exbasic.asm):01941                   LDD  VARNAM         ; GET NEW VARIABLE NAME
E63F ED81             (      exbasic.asm):01942                   STD  ,X++           ; SAVE VARIABLE NAME
E641 4F               (      exbasic.asm):01943                   CLRA                ; * ZERO OUT THE FP VALUE OF THE NUMERIC
E642 5F               (      exbasic.asm):01944                   CLRB                ; * VARIABLE OR THE LENGTH AND ADDRESS
E643 ED84             (      exbasic.asm):01945                   STD  ,X             ; * OF A STRING VARIABLE
E645 ED02             (      exbasic.asm):01946                   STD  2,X            ; *
E647 A704             (      exbasic.asm):01947                   STA  4,X            ; *
E649 9F39             (      exbasic.asm):01948         LB3DC     STX  VARPTR         ; STORE ADDRESS OF VARIABLE VALUE
E64B 39               (      exbasic.asm):01949         LB3DE     RTS
                      (      exbasic.asm):01950         *
E64C 9080000000       (      exbasic.asm):01951         LB3DF     FCB  $90,$80,$00,$00,$00 ; * FLOATING POINT -32768
                      (      exbasic.asm):01952         *                             ; SMALLEST SIGNED TWO BYTE INTEGER
                      (      exbasic.asm):01953         *
E651 9D7C             (      exbasic.asm):01954         LB3E4     JSR  GETNCH         ; GET AN INPUT CHARACTER FROM BASIC
E653 BDE3B3           (      exbasic.asm):01955         LB3E6     JSR  LB141          ; GO EVALUATE NUMERIC EXPRESSION
E656 9654             (      exbasic.asm):01956         LB3E9     LDA  FP0SGN         ; GET FPA0 MANTISSA SIGN
E658 2B5D             (      exbasic.asm):01957                   BMI  LB44A          ; 'FC' ERROR IF NEGATIVE NUMBER
                      (      exbasic.asm):01958         
                      (      exbasic.asm):01959         
E65A BDE3B5           (      exbasic.asm):01960         INTCNV    JSR  LB143          ; 'TM' ERROR IF STRING VARIABLE
E65D 964F             (      exbasic.asm):01961                   LDA  FP0EXP         ; GET FPA0 EXPONENT
E65F 8190             (      exbasic.asm):01962                   CMPA #$90           ; * COMPARE TO 32768 - LARGEST INTEGER EXPONENT AND
E661 2508             (      exbasic.asm):01963                   BCS  LB3FE          ; * BRANCH IF FPA0 < 32768
E663 8EE64C           (      exbasic.asm):01964                   LDX  #LB3DF         ; POINT X TO FP VALUE OF -32768
E666 BDEEC8           (      exbasic.asm):01965                   JSR  LBC96          ; COMPARE -32768 TO FPA0
E669 264C             (      exbasic.asm):01966                   BNE  LB44A          ; 'FC' ERROR IF NOT =
E66B BDEEFA           (      exbasic.asm):01967         LB3FE     JSR  LBCC8          ; CONVERT FPA0 TO A TWO BYTE INTEGER
E66E DC52             (      exbasic.asm):01968                   LDD  FPA0+2         ; GET THE INTEGER
E670 39               (      exbasic.asm):01969                   RTS
                      (      exbasic.asm):01970         * EVALUATE AN ARRAY VARIABLE
E671 DC05             (      exbasic.asm):01971         LB404     LDD  DIMFLG         ; GET ARRAY FLAG AND VARIABLE TYPE
E673 3406             (      exbasic.asm):01972                   PSHS B,A            ; SAVE THEM ON STACK
E675 12               (      exbasic.asm):01973                   NOP                 ; DEAD SPACE CAUSED BY 1.2 REVISION
E676 5F               (      exbasic.asm):01974                   CLRB                ; RESET DIMENSION COUNTER
E677 9E37             (      exbasic.asm):01975         LB40A     LDX  VARNAM         ; GET VARIABLE NAME
E679 3414             (      exbasic.asm):01976                   PSHS X,B            ; SAVE VARIABLE NAME AND DIMENSION COUNTER
E67B 8DD4             (      exbasic.asm):01977                   BSR  LB3E4          ; EVALUATE EXPRESSION (DIMENSlON LENGTH)
E67D 3534             (      exbasic.asm):01978                   PULS B,X,Y          ; PULL OFF VARIABLE NAME, DIMENSlON COUNTER,
                      (      exbasic.asm):01979         *                             ; ARRAY FLAG
E67F 9F37             (      exbasic.asm):01980                   STX  VARNAM         ; SAVE VARIABLE NAME AND VARIABLE TYPE
E681 DE52             (      exbasic.asm):01981                   LDU  FPA0+2         ; GET DIMENSION LENGTH
E683 3460             (      exbasic.asm):01982                   PSHS U,Y            ; SAVE DIMENSION LENGTH, ARRAY FLAG, VARIABLE TYPE
E685 5C               (      exbasic.asm):01983                   INCB                ; INCREASE DIMENSION COUNTER
E686 9D82             (      exbasic.asm):01984                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E688 812C             (      exbasic.asm):01985                   CMPA #',            ; CHECK FOR ANOTHER DIMENSION
E68A 27EB             (      exbasic.asm):01986                   BEQ  LB40A          ; BRANCH IF MORE
E68C D703             (      exbasic.asm):01987                   STB  TMPLOC         ; SAVE DIMENSION COUNTER
E68E BDE4D9           (      exbasic.asm):01988                   JSR  LB267          ; SYNTAX CHECK FOR A ')'
E691 3506             (      exbasic.asm):01989                   PULS A,B            ; * RESTORE VARIABLE TYPE AND ARRAY
E693 DD05             (      exbasic.asm):01990                   STD  DIMFLG         ; * FLAG - LEAVE DIMENSION LENGTH ON STACK
E695 9E1D             (      exbasic.asm):01991                   LDX  ARYTAB         ; GET START OF ARRAYS
E697 9C1F             (      exbasic.asm):01992         LB42A     CMPX ARYEND         ; COMPARE TO END OF ARRAYS
E699 2721             (      exbasic.asm):01993                   BEQ  LB44F          ; BRANCH IF NO MATCH FOUND
E69B DC37             (      exbasic.asm):01994                   LDD  VARNAM         ; GET VARIABLE IN QUESTION
E69D 10A384           (      exbasic.asm):01995                   CMPD ,X             ; COMPARE TO CURRENT VARIABLE
E6A0 2706             (      exbasic.asm):01996                   BEQ  LB43B          ; BRANCH IF =
E6A2 EC02             (      exbasic.asm):01997                   LDD  2,X            ; GET OFFSET TO NEXT ARRAY VARIABLE
E6A4 308B             (      exbasic.asm):01998                   LEAX D,X            ; ADD TO CURRENT POINTER
E6A6 20EF             (      exbasic.asm):01999                   BRA  LB42A          ; KEEP SEARCHING
E6A8 C612             (      exbasic.asm):02000         LB43B     LDB  #2*9           ; 'REDIMENSIONED ARRAY' ERROR
E6AA 9605             (      exbasic.asm):02001                   LDA  DIMFLG         ; * TEST ARRAY FLAG - IF <>0 YOU ARE TRYING
E6AC 260B             (      exbasic.asm):02002                   BNE  LB44C          ; * TO REDIMENSION AN ARRAY
E6AE D603             (      exbasic.asm):02003                   LDB  TMPLOC         ; GET NUMBER OF DIMENSIONS IN ARRAY
E6B0 E104             (      exbasic.asm):02004                   CMPB 4,X            ; COMPARE TO THIS ARRAYS DIMENSIONS
E6B2 2759             (      exbasic.asm):02005                   BEQ  LB4A0          ; BRANCH IF =
E6B4 C610             (      exbasic.asm):02006         LB447     LDB  #8*2           ; 'BAD SUBSCRIPT'
E6B6 8C               (      exbasic.asm):02007                   FCB  SKP2           ; SKIP TWO BYTES
E6B7 C608             (      exbasic.asm):02008         LB44A     LDB  #4*2           ; 'ILLEGAL FUNCTION CALL'
E6B9 7EDEEC           (      exbasic.asm):02009         LB44C     JMP  LAC46          ; JUMP TO ERROR SERVICING ROUTINE
                      (      exbasic.asm):02010         
                      (      exbasic.asm):02011         * INSERT A NEW ARRAY INTO ARRAY VARIABLES
                      (      exbasic.asm):02012         * EACH SET OF ARRAY VARIABLES IS PRECEEDED BY A DE-
                      (      exbasic.asm):02013         * SCRIPTOR BLOCK COMPOSED OF 5+2*N BYTES WHERE N IS THE
                      (      exbasic.asm):02014         * NUMBER OF DIMENSIONS IN THE ARRAY. THE BLOCK IS DEFINED
                      (      exbasic.asm):02015         * AS FOLLOWS: BYTES 0,1:VARIABLE'S NAME; 2,3:TOTAL LENGTH
                      (      exbasic.asm):02016         * OF ARRAY ITEMS AND DESCRIPTOR BLOCK; 4:NUMBER OF DIMEN-
                      (      exbasic.asm):02017         * ISIONS; 5,6:LENGTH OF DIMENSION 1; 7,8:LENGTH OF DIMEN-
                      (      exbasic.asm):02018         * SION 2;... 4+N,5+N:LENGTH OF DIMENSION N.
                      (      exbasic.asm):02019         
E6BC CC0005           (      exbasic.asm):02020         LB44F     LDD  #5             ; * 5 BYTES/ARRAY ENTRY SAVE AT COEFPT
E6BF DD64             (      exbasic.asm):02021                   STD  COEFPT         ; *
E6C1 DC37             (      exbasic.asm):02022                   LDD  VARNAM         ; = GET NAME OF ARRAY AND SAVE IN
E6C3 ED84             (      exbasic.asm):02023                   STD  ,X             ; = FIRST 2 BYTES OF DESCRIPTOR
E6C5 D603             (      exbasic.asm):02024                   LDB  TMPLOC         ; GET NUMBER OF DIMENSIONS AND SAVE IN
E6C7 E704             (      exbasic.asm):02025                   STB  4,X            ; * 5TH BYTE OF DESCRIPTOR
E6C9 BDDED9           (      exbasic.asm):02026                   JSR  LAC33          ; CHECK FOR ROOM FOR DESCRIPTOR IN FREE RAM
E6CC 9F41             (      exbasic.asm):02027                   STX  V41            ; TEMPORARILY SAVE DESCRIPTOR ADDRESS
E6CE C60B             (      exbasic.asm):02028         LB461     LDB  #11            ; * DEFAULT DIMENSION VALUE:X(10)
E6D0 4F               (      exbasic.asm):02029                   CLRA                ; *
E6D1 0D05             (      exbasic.asm):02030                   TST  DIMFLG         ; = CHECK ARRAY FLAG AND BRANCH IF
E6D3 2705             (      exbasic.asm):02031                   BEQ  LB46D          ; = NOT DIMENSIONING AN ARRAY
E6D5 3506             (      exbasic.asm):02032                   PULS A,B            ; GET DIMENSION LENGTH
E6D7 C30001           (      exbasic.asm):02033                   ADDD #1             ; ADD ONE (X(0) HAS A LENGTH OF ONE)
E6DA ED05             (      exbasic.asm):02034         LB46D     STD  5,X            ; SAVE LENGTH OF ARRAY DIMENSION
E6DC 8D5D             (      exbasic.asm):02035                   BSR  LB4CE          ; MULTIPLY ACCUM ARRAY SIZE NUMBER LENGTH
                      (      exbasic.asm):02036         *                             ; OF NEW DIMENSION
E6DE DD64             (      exbasic.asm):02037                   STD  COEFPT         ; TEMP STORE NEW CURRENT ACCUMULATED ARRAY SIZE
E6E0 3002             (      exbasic.asm):02038                   LEAX 2,X            ; BUMP POINTER UP TWO
E6E2 0A03             (      exbasic.asm):02039                   DEC  TMPLOC         ; * DECREMENT DIMENSION COUNTER AND BRANCH IF
E6E4 26E8             (      exbasic.asm):02040                   BNE  LB461          ; * NOT DONE WITH ALL DIMENSIONS
E6E6 9F0F             (      exbasic.asm):02041                   STX  TEMPTR         ; SAVE ADDRESS OF (END OF ARRAY DESCRIPTOR - 5)
E6E8 D30F             (      exbasic.asm):02042                   ADDD TEMPTR         ; ADD TOTAL SIZE OF NEW ARRAY
E6EA 1025F7FC         (      exbasic.asm):02043                   LBCS LAC44          ; 'OM' ERROR IF > $FFFF
E6EE 1F01             (      exbasic.asm):02044                   TFR  D,X            ; SAVE END OF ARRAY IN X
E6F0 BDDEDD           (      exbasic.asm):02045                   JSR  LAC37          ; MAKE SURE THERE IS ENOUGH FREE RAM FOR ARRAY
E6F3 830035           (      exbasic.asm):02046                   SUBD #STKBUF-5      ; SUBTRACT OUT THE (STACK BUFFER - 5)
E6F6 DD1F             (      exbasic.asm):02047                   STD  ARYEND         ; SAVE NEW END OF ARRAYS
E6F8 4F               (      exbasic.asm):02048                   CLRA                ; ZERO = TERMINATOR BYTE
E6F9 301F             (      exbasic.asm):02049         LB48C     LEAX -1,X           ; * STORE TWO TERMINATOR BYTES AT
E6FB A705             (      exbasic.asm):02050                   STA  5,X            ; * THE END OF THE ARRAY DESCRIPTOR
E6FD 9C0F             (      exbasic.asm):02051                   CMPX TEMPTR         ; *
E6FF 26F8             (      exbasic.asm):02052                   BNE  LB48C          ; *
E701 9E41             (      exbasic.asm):02053                   LDX  V41            ; GET ADDRESS OF START OF DESCRIPTOR
E703 961F             (      exbasic.asm):02054                   LDA  ARYEND         ; GET MSB OF END OF ARRAYS; LSB ALREADY THERE
E705 9341             (      exbasic.asm):02055                   SUBD V41            ; SUBTRACT OUT ADDRESS OF START OF DESCRIPTOR
E707 ED02             (      exbasic.asm):02056                   STD  2,X            ; SAVE LENGTH OF (ARRAY AND DESCRIPTOR)
E709 9605             (      exbasic.asm):02057                   LDA  DIMFLG         ; * GET ARRAY FLAG AND BRANCH
E70B 262D             (      exbasic.asm):02058                   BNE  LB4CD          ; * BACK IF DIMENSIONING
                      (      exbasic.asm):02059         * CALCULATE POINTER TO CORRECT ELEMENT
E70D E604             (      exbasic.asm):02060         LB4A0     LDB  4,X            ; GET THE NUMBER OF DIMENSIONS
E70F D703             (      exbasic.asm):02061                   STB  TMPLOC         ; TEMPORARILY SAVE
E711 4F               (      exbasic.asm):02062                   CLRA                ; * INITIALIZE POINTER
E712 5F               (      exbasic.asm):02063                   CLRB                ; * TO ZERO
E713 DD64             (      exbasic.asm):02064         LB4A6     STD  COEFPT         ; SAVE ACCUMULATED POINTER
E715 3506             (      exbasic.asm):02065                   PULS A,B            ; * PULL DIMENSION ARGUMENT OFF THE
E717 DD52             (      exbasic.asm):02066                   STD  FPA0+2         ; * STACK AND SAVE IT
E719 10A305           (      exbasic.asm):02067                   CMPD 5,X            ; COMPARE TO STORED 'DIM' ARGUMENT
E71C 243A             (      exbasic.asm):02068                   BCC  LB4EB          ; 'BS' ERROR IF > = "DIM" ARGUMENT
E71E DE64             (      exbasic.asm):02069                   LDU  COEFPT         ; * GET ACCUMULATED POINTER AND
E720 2704             (      exbasic.asm):02070                   BEQ  LB4B9          ; * BRANCH IF 1ST DIMENSION
E722 8D17             (      exbasic.asm):02071                   BSR  LB4CE          ; = MULTIPLY ACCUMULATED POINTER AND DIMENSION
E724 D352             (      exbasic.asm):02072                   ADDD FPA0+2         ; = LENGTH AND ADD TO CURRENT ARGUMENT
E726 3002             (      exbasic.asm):02073         LB4B9     LEAX 2,X            ; MOVE POINTER TO NEXT DIMENSION
E728 0A03             (      exbasic.asm):02074                   DEC  TMPLOC         ; * DECREMENT DIMENSION COUNTER AND
E72A 26E7             (      exbasic.asm):02075                   BNE  LB4A6          ; * BRANCH IF ANY DIMENSIONS LEFT
                      (      exbasic.asm):02076         * MULTIPLY ACCD BY 5 - 5 BYTES/ARRAY VALUE
E72C EDE3             (      exbasic.asm):02077                   STD  ,--S
E72E 58               (      exbasic.asm):02078                   ASLB
E72F 49               (      exbasic.asm):02079                   ROLA                ; TIMES 2
E730 58               (      exbasic.asm):02080                   ASLB
E731 49               (      exbasic.asm):02081                   ROLA                ; TIMES 4
E732 E3E1             (      exbasic.asm):02082                   ADDD ,S++           ; TIMES 5
E734 308B             (      exbasic.asm):02083                   LEAX D,X            ; ADD OFFSET TO START OF ARRAY
E736 3005             (      exbasic.asm):02084                   LEAX 5,X            ; ADJUST POINTER FOR SIZE OF DESCRIPTOR
E738 9F39             (      exbasic.asm):02085                   STX  VARPTR         ; SAVE POINTER TO ARRAY VALUE
E73A 39               (      exbasic.asm):02086         LB4CD     RTS
                      (      exbasic.asm):02087         * MULTIPLY 2 BYTE NUMBER IN 5,X BY THE 2 BYTE NUMBER
                      (      exbasic.asm):02088         * IN COEFPT. RETURN RESULT IN ACCD, BS ERROR IF > $FFFF
E73B 8610             (      exbasic.asm):02089         LB4CE     LDA  #16            ; 16 SHIFTS TO DO A MULTIPLY
E73D 9745             (      exbasic.asm):02090                   STA  V45            ; SHIFT COUNTER
E73F EC05             (      exbasic.asm):02091                   LDD  5,X            ; * GET SIZE OF DIMENSION
E741 DD17             (      exbasic.asm):02092                   STD  BOTSTK         ; * AND SAVE IT
E743 4F               (      exbasic.asm):02093                   CLRA                ; * ZERO
E744 5F               (      exbasic.asm):02094                   CLRB                ; * ACCD
E745 58               (      exbasic.asm):02095         LB4D8     ASLB                ; = SHIFT ACCB LEFT
E746 49               (      exbasic.asm):02096                   ROLA                ; = ONE BIT
E747 250F             (      exbasic.asm):02097                   BCS  LB4EB          ; 'BS' ERROR IF CARRY
E749 0865             (      exbasic.asm):02098                   ASL  COEFPT+1       ; * SHIFT MULTIPLICAND LEFT ONE
E74B 0964             (      exbasic.asm):02099                   ROL  COEFPT         ; * BIT - ADD MULTIPLIER TO ACCUMULATOR
E74D 2404             (      exbasic.asm):02100                   BCC  LB4E6          ; * IF CARRY <> 0
E74F D317             (      exbasic.asm):02101                   ADDD BOTSTK         ; ADD MULTIPLIER TO ACCD
E751 2505             (      exbasic.asm):02102                   BCS  LB4EB          ; 'BS' ERROR IF CARRY (>$FFFF)
E753 0A45             (      exbasic.asm):02103         LB4E6     DEC  V45            ; * DECREMENT SHIFT COUNTER
E755 26EE             (      exbasic.asm):02104                   BNE  LB4D8          ; * IF NOT DONE
E757 39               (      exbasic.asm):02105                   RTS
E758 7EE6B4           (      exbasic.asm):02106         LB4EB     JMP  LB447          ; 'BS' ERROR
                      (      exbasic.asm):02107         *
                      (      exbasic.asm):02108         * MEM
                      (      exbasic.asm):02109         * THIS IS NOT A TRUE INDICATOR OF FREE MEMORY BECAUSE
                      (      exbasic.asm):02110         * BASIC REQUIRES A STKBUF SIZE BUFFER FOR THE STACK
                      (      exbasic.asm):02111         * FOR WHICH MEM DOES NOT ALLOW.
                      (      exbasic.asm):02112         *
E75B 1F40             (      exbasic.asm):02113         MEM       TFR  S,D            ; PUT STACK POINTER INTO ACCD
E75D 931F             (      exbasic.asm):02114                   SUBD ARYEND         ; SUBTRACT END OF ARRAYS
E75F 21               (      exbasic.asm):02115                   FCB  SKP1           ; SKIP ONE BYTE
                      (      exbasic.asm):02116         *CONVERT THE VALUE IN ACCB INTO A FP NUMBER IN FPA0
E760 4F               (      exbasic.asm):02117         LB4F3     CLRA                ; CLEAR MS BYTE OF ACCD
                      (      exbasic.asm):02118         * CONVERT THE VALUE IN ACCD INTO A FLOATING POINT NUMBER IN FPA0
E761 0F06             (      exbasic.asm):02119         GIVABF    CLR  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
E763 DD50             (      exbasic.asm):02120                   STD  FPA0           ; SAVE ACCD IN TOP OF FACA
E765 C690             (      exbasic.asm):02121                   LDB  #$90           ; EXPONENT REQUIRED IF THE TOP TWO BYTES
                      (      exbasic.asm):02122         *         OF   FPA0 ARE TO BE TREATED AS AN INTEGER IN FPA0
E767 7EEEB4           (      exbasic.asm):02123                   JMP  LBC82          ; CONVERT THE REST OF FPA0 TO AN INTEGER
                      (      exbasic.asm):02124         
                      (      exbasic.asm):02125         * STR$
E76A BDE3B5           (      exbasic.asm):02126         STR       JSR  LB143          ; 'TM' ERROR IF STRING VARIABLE
E76D CE01F0           (      exbasic.asm):02127                   LDU  #STRBUF+2      ; *CONVERT FP NUMBER TO ASCII STRING IN
E770 BDF00E           (      exbasic.asm):02128                   JSR  LBDDC          ; *THE STRING BUFFER
E773 3262             (      exbasic.asm):02129                   LEAS 2,S            ; PURGE THE RETURN ADDRESS FROM THE STACK
E775 8E01EF           (      exbasic.asm):02130                   LDX  #STRBUF+1      ; *POINT X TO STRING BUFFER AND SAVE
E778 200B             (      exbasic.asm):02131                   BRA  LB518          ; *THE STRING IN THE STRING SPACE
                      (      exbasic.asm):02132         * RESERVE ACCB BYTES OF STRING SPACE. RETURN START
                      (      exbasic.asm):02133         * ADDRESS IN (X) AND FRESPC
E77A 9F4D             (      exbasic.asm):02134         LB50D     STX  V4D            ; SAVE X IN V4D
E77C 8D5C             (      exbasic.asm):02135         LB50F     BSR  LB56D          ; RESERVE ACCB BYTES IN STRING SPACE
E77E 9F58             (      exbasic.asm):02136         LB511     STX  STRDES+2       ; SAVE NEW STRING ADDRESS
E780 D756             (      exbasic.asm):02137                   STB  STRDES         ; SAVE LENGTH OF RESERVED BLOCK
E782 39               (      exbasic.asm):02138                   RTS
E783 301F             (      exbasic.asm):02139         LB516     LEAX -1,X           ; MOVE POINTER BACK ONE
                      (      exbasic.asm):02140         * SCAN A LINE FROM (X) UNTIL AN END OF LINE FLAG (ZERO) OR
                      (      exbasic.asm):02141         * EITHER OF THE TWO TERMINATORS STORED IN CHARAC OR ENDCHR IS MATCHED.
                      (      exbasic.asm):02142         * THE RESULTING STRING IS STORED IN THE STRING SPACE
                      (      exbasic.asm):02143         * ONLY IF THE START OF THE STRING IS <= STRBUF+2
E785 8622             (      exbasic.asm):02144         LB518     LDA  #'"            ; * INITIALIZE
E787 9701             (      exbasic.asm):02145                   STA  CHARAC         ; * TERMINATORS
E789 9702             (      exbasic.asm):02146         LB51A     STA  ENDCHR         ; * TO "
E78B 3001             (      exbasic.asm):02147         LB51E     LEAX 1,X            ; MOVE POINTER UP ONE
E78D 9F62             (      exbasic.asm):02148                   STX  RESSGN         ; TEMPORARILY SAVE START OF STRING
E78F 9F58             (      exbasic.asm):02149                   STX  STRDES+2       ; SAVE START OF STRING IN TEMP DESCRIPTOR
E791 C6FF             (      exbasic.asm):02150                   LDB  #-1            ; INITIALIZE CHARACTER COUNTER TO - 1
E793 5C               (      exbasic.asm):02151         LB526     INCB                ; INCREMENT CHARACTER COUNTER
E794 A680             (      exbasic.asm):02152                   LDA  ,X+            ; GET CHARACTER
E796 270C             (      exbasic.asm):02153                   BEQ  LB537          ; BRANCH IF END OF LINE
E798 9101             (      exbasic.asm):02154                   CMPA CHARAC         ; * CHECK FOR TERMINATORS
E79A 2704             (      exbasic.asm):02155                   BEQ  LB533          ; * IN CHARAC AND ENDCHR
E79C 9102             (      exbasic.asm):02156                   CMPA ENDCHR         ; * DON'T MOVE POINTER BACK
E79E 26F3             (      exbasic.asm):02157                   BNE  LB526          ; * ONE IF TERMINATOR IS "MATCHED"
E7A0 8122             (      exbasic.asm):02158         LB533     CMPA #'"            ; = COMPARE CHARACTER TO STRING DELIMITER
E7A2 2702             (      exbasic.asm):02159                   BEQ  LB539          ; = & DON'T MOVE POINTER BACK IF SO
E7A4 301F             (      exbasic.asm):02160         LB537     LEAX -1,X           ; MOVE POINTER BACK ONE
E7A6 9F64             (      exbasic.asm):02161         LB539     STX  COEFPT         ; SAVE END OF STRING ADDRESS
E7A8 D756             (      exbasic.asm):02162                   STB  STRDES         ; SAVE STRING LENGTH IN TEMP DESCRIPTOR
E7AA DE62             (      exbasic.asm):02163                   LDU  RESSGN         ; GET INITlAL STRING START
E7AC 118301F0         (      exbasic.asm):02164                   CMPU #STRBUF+2      ; COMPARE TO START OF STRING BUFFER
E7B0 2207             (      exbasic.asm):02165         LB543     BHI  LB54C          ; BRANCH IF > START OF STRING BUFFER
E7B2 8DC6             (      exbasic.asm):02166                   BSR  LB50D          ; GO RESERVE SPACE FOR THE STRING
E7B4 9E62             (      exbasic.asm):02167                   LDX  RESSGN         ; POINT X TO THE BEGINNING OF THE STRING
E7B6 BDE8B2           (      exbasic.asm):02168                   JSR  LB645          ; MOVE (B) BYTES FROM (X) TO
                      (      exbasic.asm):02169         *                             [FRESPC] - MOVE STRING DATA
                      (      exbasic.asm):02170         * PUT DIRECT PAGE STRING DESCRIPTOR BUFFER DATA
                      (      exbasic.asm):02171         * ON THE STRING STACK. SET VARIABLE TYPE TO STRING
E7B9 9E0B             (      exbasic.asm):02172         LB54C     LDX  TEMPPT         ; GET NEXT AVAILABLE STRING STACK DESCRIPTOR
E7BB 8C00F1           (      exbasic.asm):02173                   CMPX #LINHDR        ; COMPARE TO TOP OF STRING DESCRIPTOR STACK - WAS #CFNBUF
E7BE 2605             (      exbasic.asm):02174                   BNE  LB558          ; FORMULA O.K.
E7C0 C61E             (      exbasic.asm):02175                   LDB  #15*2          ; STRING FORMULA TOO COMPLEX' ERROR
E7C2 7EDEEC           (      exbasic.asm):02176         LB555     JMP  LAC46          ; JUMP TO ERROR SERVICING ROUTINE
E7C5 9656             (      exbasic.asm):02177         LB558     LDA  STRDES         ; * GET LENGTH OF STRING AND SAVE IT
                      (      exbasic.asm):02178         *         STA  ,X             ; * IN BYTE 0 OF DESCRIPTOR
E7C7 A700             (      exbasic.asm):02179                   FCB  $A7,$00
E7C9 DC58             (      exbasic.asm):02180                   LDD  STRDES+2       ; = GET START ADDRESS OF ACTUAL STRING
E7CB ED02             (      exbasic.asm):02181                   STD  2,X            ; = AND SAVE IN BYTES 2,3 OF DESCRIPTOR
E7CD 86FF             (      exbasic.asm):02182                   LDA  #$FF           ; * VARIABLE TYPE = STRING
E7CF 9706             (      exbasic.asm):02183                   STA  VALTYP         ; * SAVE IN VARIABLE TYPE FLAG
E7D1 9F0D             (      exbasic.asm):02184                   STX  LASTPT         ; = SAVE START OF DESCRIPTOR
E7D3 9F52             (      exbasic.asm):02185                   STX  FPA0+2         ; = ADDRESS IN LASTPT AND FPA0
E7D5 3005             (      exbasic.asm):02186                   LEAX 5,X            ; 5 BYTES/STRING DESCRIPTOR
E7D7 9F0B             (      exbasic.asm):02187                   STX  TEMPPT         ; NEXT AVAILABLE STRING VARIABLE DESCRIPTOR
E7D9 39               (      exbasic.asm):02188                   RTS
                      (      exbasic.asm):02189         * RESERVE ACCB BYTES IN STRING STORAGE SPACE
                      (      exbasic.asm):02190         * RETURN WITH THE STARTING ADDRESS OF THE
                      (      exbasic.asm):02191         * RESERVED STRING SPACE IN (X) AND FRESPC
E7DA 0F07             (      exbasic.asm):02192         LB56D     CLR  GARBFL         ; CLEAR STRING REORGANIZATION FLAG
E7DC 4F               (      exbasic.asm):02193         LB56F     CLRA                ; * PUSH THE LENGTH OF THE
E7DD 3406             (      exbasic.asm):02194                   PSHS B,A            ; * STRING ONTO THE STACK
E7DF DC23             (      exbasic.asm):02195                   LDD  STRTAB         ; GET START OF STRING VARIABLES
E7E1 A3E0             (      exbasic.asm):02196                   SUBD ,S+            ; SUBTRACT STRING LENGTH
E7E3 109321           (      exbasic.asm):02197                   CMPD FRETOP         ; COMPARE TO START OF STRING STORAGE
E7E6 250A             (      exbasic.asm):02198                   BCS  LB585          ; IF BELOW START, THEN REORGANIZE
E7E8 DD23             (      exbasic.asm):02199                   STD  STRTAB         ; SAVE NEW START OF STRING VARIABLES
E7EA 9E23             (      exbasic.asm):02200                   LDX  STRTAB         ; GET START OF STRING VARIABLES
E7EC 3001             (      exbasic.asm):02201                   LEAX 1,X            ; ADD ONE
E7EE 9F25             (      exbasic.asm):02202                   STX  FRESPC         ; SAVE START ADDRESS OF NEWLY RESERVED SPACE
E7F0 3584             (      exbasic.asm):02203                   PULS B,PC           ; RESTORE NUMBER OF BYTES RESERVED AND RETURN
E7F2 C61A             (      exbasic.asm):02204         LB585     LDB  #2*13          ; OUT OF STRING SPACE' ERROR
E7F4 0307             (      exbasic.asm):02205                   COM  GARBFL         ; TOGGLE REORGANIZATiON FLAG
E7F6 27CA             (      exbasic.asm):02206                   BEQ  LB555          ; ERROR IF FRESHLY REORGANIZED
E7F8 8D04             (      exbasic.asm):02207                   BSR  LB591          ; GO REORGANIZE STRING SPACE
E7FA 3504             (      exbasic.asm):02208                   PULS B              ; GET BACK THE NUMBER OF BYTES TO RESERVE
E7FC 20DE             (      exbasic.asm):02209                   BRA  LB56F          ; TRY TO RESERVE ACCB BYTES AGAIN
                      (      exbasic.asm):02210         * REORGANIZE THE STRING SPACE
E7FE 9E27             (      exbasic.asm):02211         LB591     LDX  MEMSIZ         ; GET THE TOP OF STRING SPACE
E800 9F23             (      exbasic.asm):02212         LB593     STX  STRTAB         ; SAVE TOP OF UNORGANIZED STRING SPACE
E802 4F               (      exbasic.asm):02213                   CLRA                ; * ZERO OUT ACCD
E803 5F               (      exbasic.asm):02214                   CLRB                ; * AND RESET VARIABLE
E804 DD4B             (      exbasic.asm):02215                   STD  V4B            ; * POINTER TO 0
E806 9E21             (      exbasic.asm):02216                   LDX  FRETOP         ; POINT X TO START OF STRING SPACE
E808 9F47             (      exbasic.asm):02217                   STX  V47            ; SAVE POINTER IN V47
E80A 8E00C9           (      exbasic.asm):02218                   LDX  #STRSTK        ; POINT X TO START OF STRING DESCRIPTOR STACK
E80D 9C0B             (      exbasic.asm):02219         LB5A0     CMPX TEMPPT         ; COMPARE TO ADDRESS OF NEXT AVAILABLE DESCRIPTOR
E80F 2704             (      exbasic.asm):02220                   BEQ  LB5A8          ; BRANCH IF TOP OF STRING STACK
E811 8D32             (      exbasic.asm):02221                   BSR  LB5D8          ; CHECK FOR STRING IN UNORGANIZED STRING SPACE
E813 20F8             (      exbasic.asm):02222                   BRA  LB5A0          ; KEEP CHECKING
E815 9E1B             (      exbasic.asm):02223         LB5A8     LDX  VARTAB         ; GET THE END OF BASIC PROGRAM
E817 9C1D             (      exbasic.asm):02224         LB5AA     CMPX ARYTAB         ; COMPARE TO END OF VARIABLES
E819 2704             (      exbasic.asm):02225                   BEQ  LB5B2          ; BRANCH IF AT TOP OF VARIABLES
E81B 8D22             (      exbasic.asm):02226                   BSR  LB5D2          ; CHECK FOR STRING IN UNORGANIZED STRING SPACE
E81D 20F8             (      exbasic.asm):02227                   BRA  LB5AA          ; KEEP CHECKING VARIABLES
E81F 9F41             (      exbasic.asm):02228         LB5B2     STX  V41            ; SAVE ADDRESS OF THE END OF VARIABLES
E821 9E41             (      exbasic.asm):02229         LB5B4     LDX  V41            ; GET CURRENT ARRAY POINTER
E823 9C1F             (      exbasic.asm):02230         LB5B6     CMPX ARYEND         ; COMPARE TO THE END OF ARRAYS
E825 2735             (      exbasic.asm):02231                   BEQ  LB5EF          ; BRANCH IF AT END OF ARRAYS
E827 EC02             (      exbasic.asm):02232                   LDD  2,X            ; GET LENGTH OF ARRAY AND DESCRIPTOR
E829 D341             (      exbasic.asm):02233                   ADDD V41            ; * ADD TO CURRENT ARRAY POINTER
E82B DD41             (      exbasic.asm):02234                   STD  V41            ; * AND SAVE IT
E82D A601             (      exbasic.asm):02235                   LDA  1,X            ; GET 1ST CHARACTER OF VARIABLE NAME
E82F 2AF0             (      exbasic.asm):02236                   BPL  LB5B4          ; BRANCH IF NUMERIC ARRAY
E831 E604             (      exbasic.asm):02237                   LDB  4,X            ; GET THE NUMBER OF DIMENSIONS IN THIS ARRAY
E833 58               (      exbasic.asm):02238                   ASLB                ; MULTIPLY BY 2
E834 CB05             (      exbasic.asm):02239                   ADDB #5             ; ADD FIVE BYTES (VARIABLE NAME, ARRAY
                      (      exbasic.asm):02240         *                             ; LENGTH, NUMBER DIMENSIONS)
E836 3A               (      exbasic.asm):02241                   ABX                 ; X NOW POINTS TO START OF ARRAY ELEMENTS
E837 9C41             (      exbasic.asm):02242         LB5CA     CMPX V41            ; AT END OF THIS ARRAY?
E839 27E8             (      exbasic.asm):02243                   BEQ  LB5B6          ; YES - CHECK FOR ANOTHER
E83B 8D08             (      exbasic.asm):02244                   BSR  LB5D8          ; CHECK FOR STRING LOCATED IN
                      (      exbasic.asm):02245         *                             ; UNORGANIZED STRING SPACE
E83D 20F8             (      exbasic.asm):02246                   BRA  LB5CA          ; KEEP CHECKING ELEMENTS IN THIS ARRAY
E83F A601             (      exbasic.asm):02247         LB5D2     LDA  1,X            ; GET F1RST BYTE OF VARIABLE NAME
E841 3002             (      exbasic.asm):02248                   LEAX 2,X            ; MOVE POINTER TO DESCRIPTOR
E843 2A14             (      exbasic.asm):02249                   BPL  LB5EC          ; BRANCH IF VARIABLE IS NUMERIC
                      (      exbasic.asm):02250         * SEARCH FOR STRING - ENTER WITH X POINTING TO
                      (      exbasic.asm):02251         * THE STRING DESCRIPTOR. IF STRING IS STORED
                      (      exbasic.asm):02252         * BETWEEN V47 AND STRTAB, SAVE DESCRIPTOR POINTER
                      (      exbasic.asm):02253         * IN V4B AND RESET V47 TO STRING ADDRESS
E845 E684             (      exbasic.asm):02254         LB5D8     LDB  ,X             ; GET THE LENGTH OF THE STRING
E847 2710             (      exbasic.asm):02255                   BEQ  LB5EC          ; BRANCH IF NULL - NO STRING
E849 EC02             (      exbasic.asm):02256                   LDD  2,X            ; GET STARTING ADDRESS OF THE STRING
E84B 109323           (      exbasic.asm):02257                   CMPD STRTAB         ; COMPARE TO THE START OF STRING VARIABLES
E84E 2209             (      exbasic.asm):02258                   BHI  LB5EC          ; BRANCH IF THIS STRING IS STORED IN
                      (      exbasic.asm):02259         *              ; THE STRING VARIABLES
E850 109347           (      exbasic.asm):02260                   CMPD V47            ; COMPARE TO START OF STRING SPACE
E853 2304             (      exbasic.asm):02261                   BLS  LB5EC          ; BRANCH IF NOT STORED IN THE STRING SPACE
E855 9F4B             (      exbasic.asm):02262                   STX  V4B            ; SAVE VARIABLE POINTER IF STORED IN STRING SPACE
E857 DD47             (      exbasic.asm):02263                   STD  V47            ; SAVE STRING STARTING ADDRESS
E859 3005             (      exbasic.asm):02264         LB5EC     LEAX 5,X            ; MOVE TO NEXT VARIABLE DESCRIPTOR
E85B 39               (      exbasic.asm):02265         LB5EE     RTS
E85C 9E4B             (      exbasic.asm):02266         LB5EF     LDX  V4B            ; GET ADDRESS OF THE DESCRIPTOR FOR THE
                      (      exbasic.asm):02267         *              ; STRING WHICH IS STORED IN THE HIGHEST RAM ADDRESS IN
                      (      exbasic.asm):02268         *              ; THE UNORGANIZED STRING SPACE
E85E 27FB             (      exbasic.asm):02269                   BEQ  LB5EE          ; BRANCH IF NONE FOUND AND REORGANIZATION DONE
E860 4F               (      exbasic.asm):02270                   CLRA                ; CLEAR MS BYTE OF LENGTH
E861 E684             (      exbasic.asm):02271                   LDB  ,X             ; GET LENGTH OF STRING
E863 5A               (      exbasic.asm):02272                   DECB                ; SUBTRACT ONE
E864 D347             (      exbasic.asm):02273                   ADDD V47            ; ADD LENGTH OF STRING TO ITS STARTING ADDRESS
E866 DD43             (      exbasic.asm):02274                   STD  V43            ; SAVE AS MOVE STARTING ADDRESS
E868 9E23             (      exbasic.asm):02275                   LDX  STRTAB         ; POINT X TO THE START OF ORGANIZED STRING VARIABLES
E86A 9F41             (      exbasic.asm):02276                   STX  V41            ; SAVE AS MOVE ENDING ADDRESS
E86C BDDEC6           (      exbasic.asm):02277                   JSR  LAC20          ; MOVE STRING FROM CURRENT POSITION TO THE
                      (      exbasic.asm):02278         *              ; TOP OF UNORGANIZED STRING SPACE
E86F 9E4B             (      exbasic.asm):02279                   LDX  V4B            ; POINT X TO STRING DESCRIPTOR
E871 DC45             (      exbasic.asm):02280                   LDD  V45            ; * GET NEW STARTING ADDRESS OF STRING AND
E873 ED02             (      exbasic.asm):02281                   STD  2,X            ; * SAVE IT IN DESCRIPTOR
E875 9E45             (      exbasic.asm):02282                   LDX  V45            ; GET NEW TOP OF UNORGANIZED STRING SPACE
E877 301F             (      exbasic.asm):02283                   LEAX -1,X           ; MOVE POINTER BACK ONE
E879 7EE800           (      exbasic.asm):02284                   JMP  LB593          ; JUMP BACK AND REORGANIZE SOME MORE
                      (      exbasic.asm):02285         
                      (      exbasic.asm):02286         
E87C DC52             (      exbasic.asm):02287         LB60F     LDD  FPA0+2         ; * GET DESCRIPTOR ADDRESS OF STRING A
E87E 3406             (      exbasic.asm):02288                   PSHS B,A            ; * AND SAVE IT ON THE STACK
E880 BDE495           (      exbasic.asm):02289                   JSR  LB223          ; GET DESCRIPTOR ADDRESS OF STRING B
E883 BDE3B8           (      exbasic.asm):02290                   JSR  LB146          ; 'TM' ERROR IF NUMERIC VARIABLE
E886 3510             (      exbasic.asm):02291                   PULS X              ; * POINT X TO STRING A DESCRIPTOR
E888 9F62             (      exbasic.asm):02292                   STX  RESSGN         ; * ADDRESS AND SAVE IT IN RESSGN
E88A E684             (      exbasic.asm):02293                   LDB  ,X             ; GET LENGTH OF STRING A
E88C 9E52             (      exbasic.asm):02294                   LDX  FPA0+2         ; POINT X TO DESCRIPTOR OF STRING B
E88E EB84             (      exbasic.asm):02295                   ADDB ,X             ; ADD LENGTH OF STRING B TO STR1NG A
E890 2405             (      exbasic.asm):02296                   BCC  LB62A          ; BRANCH IF LENGTH < 256
E892 C61C             (      exbasic.asm):02297                   LDB  #2*14          ; 'STRING TOO LONG' ERROR IF LENGTH > 255
E894 7EDEEC           (      exbasic.asm):02298                   JMP  LAC46          ; JUMP TO ERROR SERVICING ROUTINE
E897 BDE77A           (      exbasic.asm):02299         LB62A     JSR  LB50D          ; RESERVE ROOM IN STRING SPACE FOR NEW STRING
E89A 9E62             (      exbasic.asm):02300                   LDX  RESSGN         ; GET DESCRIPTOR ADDRESS OF STRING A
E89C E684             (      exbasic.asm):02301                   LDB  ,X             ; GET LENGTH OF STRING A
E89E 8D10             (      exbasic.asm):02302                   BSR  LB643          ; MOVE STRING A INTO RESERVED BUFFER IN STRING SPACE
E8A0 9E4D             (      exbasic.asm):02303                   LDX  V4D            ; GET DESCRIPTOR ADDRESS OF STRING B
E8A2 8D22             (      exbasic.asm):02304                   BSR  LB659          ; GET LENGTH AND ADDRESS OF STRING B
E8A4 8D0C             (      exbasic.asm):02305                   BSR  LB645          ; MOVE STRING B INTO REST OF RESERVED BUFFER
E8A6 9E62             (      exbasic.asm):02306                   LDX  RESSGN         ; POINT X TO DESCRIPTOR OF STRING A
E8A8 8D1C             (      exbasic.asm):02307                   BSR  LB659          ; DELETE STRING A IF LAST STRING ON STRING STACK
E8AA BDE7B9           (      exbasic.asm):02308                   JSR  LB54C          ; PUT STRING DESCRIPTOR ON THE STRING STACK
E8AD 7EE3DA           (      exbasic.asm):02309                   JMP  LB168          ; BRANCH BACK TO EXPRESSION EVALUATION
                      (      exbasic.asm):02310         
                      (      exbasic.asm):02311         * MOVE (B) BYTES FROM 2,X TO FRESPC
E8B0 AE02             (      exbasic.asm):02312         LB643     LDX  2,X            ; POINT X TO SOURCE ADDRESS
E8B2 DE25             (      exbasic.asm):02313         LB645     LDU  FRESPC         ; POINT U TO DESTINATION ADDRESS
E8B4 5C               (      exbasic.asm):02314                   INCB                ; COMPENSATION FOR THE DECB BELOW
E8B5 2004             (      exbasic.asm):02315                   BRA  LB64E          ; GO MOVE THE BYTES
                      (      exbasic.asm):02316         * MOVE B BYTES FROM (X) TO (U)
E8B7 A680             (      exbasic.asm):02317         LB64A     LDA  ,X+            ; * GET A SOURCE BYTE AND MOVE IT
E8B9 A7C0             (      exbasic.asm):02318                   STA  ,U+            ; * TO THE DESTINATION
E8BB 5A               (      exbasic.asm):02319         LB64E     DECB                ; DECREMENT BYTE COUNTER
E8BC 26F9             (      exbasic.asm):02320                   BNE  LB64A          ; BRANCH IF ALL BYTES NOT MOVED
E8BE DF25             (      exbasic.asm):02321                   STU  FRESPC         ; SAVE ENDING ADDRESS IN FRESPC
E8C0 39               (      exbasic.asm):02322                   RTS
                      (      exbasic.asm):02323         * RETURN LENGTH (ACCB) AND ADDRESS (X) OF
                      (      exbasic.asm):02324         * STRING WHOSE DESCRIPTOR IS IN FPA0+2
                      (      exbasic.asm):02325         * DELETE THE STRING IF IT IS THE LAST ONE
                      (      exbasic.asm):02326         * PUT ON THE STRING STACK. REMOVE STRING FROM STRING
                      (      exbasic.asm):02327         * SPACE IF IT IS AT THE BOTTOM OF STRING VARIABLES.
E8C1 BDE3B8           (      exbasic.asm):02328         LB654     JSR  LB146          ; 'TM' ERROR IF VARIABLE TYPE = NUMERIC
E8C4 9E52             (      exbasic.asm):02329         LB657     LDX  FPA0+2         ; GET ADDRESS OF SELECTED STRING DESCRIPTOR
E8C6 E684             (      exbasic.asm):02330         LB659     LDB  ,X             ; GET LENGTH OF STRING
E8C8 8D18             (      exbasic.asm):02331                   BSR  LB675          ; * CHECK TO SEE IF THIS STRING DESCRIPTOR WAS
E8CA 2613             (      exbasic.asm):02332                   BNE  LB672          ; * THE LAST ONE PUT ON THE STRING STACK AND
                      (      exbasic.asm):02333         *                             ; * BRANCH IF NOT
E8CC AE07             (      exbasic.asm):02334                   LDX  5+2,X          ; GET START ADDRESS OF STRING JUST REMOVED
E8CE 301F             (      exbasic.asm):02335                   LEAX -1,X           ; MOVE POINTER DOWN ONE
E8D0 9C23             (      exbasic.asm):02336                   CMPX STRTAB         ; COMPARE TO START OF STRING VARIABLES
E8D2 2608             (      exbasic.asm):02337                   BNE  LB66F          ; BRANCH IF THIS STRING IS NOT AT THE BOTTOM
                      (      exbasic.asm):02338         *                             ; OF STRING VARIABLES
E8D4 3404             (      exbasic.asm):02339                   PSHS B              ; SAVE LENGTH; ACCA WAS CLEARED
E8D6 D323             (      exbasic.asm):02340                   ADDD STRTAB         ; * ADD THE LENGTH OF THE JUST REMOVED STRING
E8D8 DD23             (      exbasic.asm):02341                   STD  STRTAB         ; * TO THE START OF STRING VARIABLES - THIS WILL
                      (      exbasic.asm):02342         *                             ; * REMOVE THE STRING FROM THE STRING SPACE
E8DA 3504             (      exbasic.asm):02343                   PULS B              ; RESTORE LENGTH
E8DC 3001             (      exbasic.asm):02344         LB66F     LEAX 1,X            ; ADD ONE TO POINTER
E8DE 39               (      exbasic.asm):02345                   RTS
E8DF AE02             (      exbasic.asm):02346         LB672     LDX  2,X            ; *POINT X TO ADDRESS OF STRING NOT
E8E1 39               (      exbasic.asm):02347                   RTS                 ; *ON THE STRING STACK
                      (      exbasic.asm):02348         * REMOVE STRING FROM STRING STACK. ENTER WITH X
                      (      exbasic.asm):02349         * POINTING TO A STRING DESCRIPTOR - DELETE THE
                      (      exbasic.asm):02350         * STRING FROM STACK IF IT IS ON TOP OF THE
                      (      exbasic.asm):02351         * STACK. IF THE STRING IS DELETED, SET THE ZERO FLAG
E8E2 9C0D             (      exbasic.asm):02352         LB675     CMPX LASTPT         ; *COMPARE TO LAST USED DESCRIPTOR ADDRESS
E8E4 2607             (      exbasic.asm):02353                   BNE  LB680          ; *ON THE STRING STACK, RETURN IF DESCRIPTOR
                      (      exbasic.asm):02354         *                             ; *ADDRESS NOT ON THE STRING STACK
E8E6 9F0B             (      exbasic.asm):02355                   STX  TEMPPT         ; SAVE LAST USED DESCRIPTOR AS NEXT AVAILABLE
E8E8 301B             (      exbasic.asm):02356                   LEAX -5,X           ; * MOVE LAST USED DESCRIPTOR BACK 5 BYTES
E8EA 9F0D             (      exbasic.asm):02357                   STX  LASTPT         ; * AND SAVE AS THE LAST USED DESCRIPTOR ADDR
E8EC 4F               (      exbasic.asm):02358                   CLRA                ; SET ZERO FLAG
E8ED 39               (      exbasic.asm):02359         LB680     RTS
                      (      exbasic.asm):02360         
                      (      exbasic.asm):02361         * LEN
E8EE 8D03             (      exbasic.asm):02362         LEN       BSR  LB686          ; POINT X TO PROPER STRING AND GET LENGTH
E8F0 7EE760           (      exbasic.asm):02363         LB683     JMP  LB4F3          ; CONVERT ACCB TO FP NUMBER IN FPA0
                      (      exbasic.asm):02364         * POINT X TO STRING ADDRESS LOAD LENGTH INTO
                      (      exbasic.asm):02365         * ACCB. ENTER WITH THE STRING DESCRIPTOR IN
                      (      exbasic.asm):02366         * BOTTOM TWO BYTES OF FPA0
E8F3 8DCC             (      exbasic.asm):02367         LB686     BSR  LB654          ; GET LENGTH AND ADDRESS OF STRING
E8F5 0F06             (      exbasic.asm):02368                   CLR  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
E8F7 5D               (      exbasic.asm):02369                   TSTB                ; SET FLAGS ACCORDING TO LENGTH
E8F8 39               (      exbasic.asm):02370                   RTS
                      (      exbasic.asm):02371         
                      (      exbasic.asm):02372         * CHR$
E8F9 BDE97B           (      exbasic.asm):02373         CHR       JSR  LB70E          ; CONVERT FPA0 TO AN INTEGER IN ACCD
E8FC C601             (      exbasic.asm):02374         LB68F     LDB  #1             ; * RESERVE ONE BYTE IN
E8FE BDE7DA           (      exbasic.asm):02375                   JSR  LB56D          ; * THE STRING SPACE
E901 9653             (      exbasic.asm):02376                   LDA  FPA0+3         ; GET ASCII STRING VALUE
E903 BDE77E           (      exbasic.asm):02377                   JSR  LB511          ; SAVE RESERVED STRING DESCRIPTOR IN TEMP DESCRIPTOR
E906 A784             (      exbasic.asm):02378                   STA  ,X             ; SAVE THE STRING (IT'S ONLY ONE BYTE)
E908 3262             (      exbasic.asm):02379         LB69B     LEAS 2,S            ; PURGE THE RETURN ADDRESS OFF OF THE STACK
E90A 7EE7B9           (      exbasic.asm):02380         LB69D     JMP  LB54C          ; PUT TEMP DESCRIPTOR DATA ONTO STRING STACK
                      (      exbasic.asm):02381         
                      (      exbasic.asm):02382         
E90D 8D02             (      exbasic.asm):02383         ASC       BSR  LB6A4          ; PUT 1ST CHARACTER OF STRING INTO ACCB
E90F 20DF             (      exbasic.asm):02384                   BRA  LB683          ; CONVERT ACCB INTO FP NUMBER IN FPA0
E911 8DE0             (      exbasic.asm):02385         LB6A4     BSR  LB686          ; POINT X TO STRING DESCRIPTOR
E913 275E             (      exbasic.asm):02386                   BEQ  LB706          ; 'FC' ERROR IF NULL STRING
E915 E684             (      exbasic.asm):02387                   LDB  ,X             ; GET FIRST BYTE OF STRING
E917 39               (      exbasic.asm):02388                   RTS
                      (      exbasic.asm):02389         
                      (      exbasic.asm):02390         
E918 8D48             (      exbasic.asm):02391         LEFT      BSR  LB6F5          ; GET ARGUMENTS FROM STACK
E91A 4F               (      exbasic.asm):02392         LB6AD     CLRA                ; CLEAR STRING POINTER OFFSET - OFFSET = 0 FOR LEFT$
E91B E184             (      exbasic.asm):02393         LB6AE     CMPB ,X             ; * COMPARE LENGTH PARAMETER TO LENGTH OF
E91D 2303             (      exbasic.asm):02394                   BLS  LB6B5          ; * STRING AND BRANCH IF LENGTH OF STRING
                      (      exbasic.asm):02395         *                             ; >= LENGTH PARAMETER
E91F E684             (      exbasic.asm):02396                   LDB  ,X             ; USE LENGTH OF STRING OTHERWISE
E921 4F               (      exbasic.asm):02397                   CLRA                ; CLEAR STRING POINTER OFFSET (0 FOR LEFT$)
E922 3406             (      exbasic.asm):02398         LB6B5     PSHS B,A            ; PUSH PARAMETERS ONTO STACK
E924 BDE77C           (      exbasic.asm):02399                   JSR  LB50F          ; RESERVE ACCB BYTES IN THE STRING SPACE
E927 9E4D             (      exbasic.asm):02400                   LDX  V4D            ; POINT X TO STRING DESCRIPTOR
E929 8D9B             (      exbasic.asm):02401                   BSR  LB659          ; GET ADDRESS OF OLD STRING (X=ADDRESS)
E92B 3504             (      exbasic.asm):02402                   PULS B              ; * PULL STRING POINTER OFFSET OFF OF THE STACK
E92D 3A               (      exbasic.asm):02403                   ABX                 ; * AND ADD IT TO STRING ADDRESS
E92E 3504             (      exbasic.asm):02404                   PULS B              ; PULL LENGTH PARAMETER OFF OF THE STACK
E930 BDE8B2           (      exbasic.asm):02405                   JSR  LB645          ; MOVE ACCB BYTES FROM (X) TO [FRESPC]
E933 20D5             (      exbasic.asm):02406                   BRA  LB69D          ; PUT TEMP STRING DESCRIPTOR ONTO THE STRING STACK
                      (      exbasic.asm):02407         
                      (      exbasic.asm):02408         * RIGHT$
E935 8D2B             (      exbasic.asm):02409         RIGHT     BSR  LB6F5          ; GET ARGUMENTS FROM STACK
E937 A084             (      exbasic.asm):02410                   SUBA ,X             ; ACCA=LENGTH PARAMETER - LENGTH OF OLD STRING
E939 40               (      exbasic.asm):02411                   NEGA                ; NOW ACCA = LENGTH OF OLD STRING
E93A 20DF             (      exbasic.asm):02412                   BRA  LB6AE          ; PUT NEW STRING IN THE STRING SPACE
                      (      exbasic.asm):02413         
                      (      exbasic.asm):02414         * MID$
E93C C6FF             (      exbasic.asm):02415         MID       LDB  #$FF           ; * GET DEFAULT VALUE OF LENGTH AND
E93E D753             (      exbasic.asm):02416                   STB  FPA0+3         ; * SAVE IT IN FPA0
E940 9D82             (      exbasic.asm):02417                   JSR  GETCCH         ; GET CURRENT CHARACTER FROM BASIC
E942 8129             (      exbasic.asm):02418                   CMPA #')            ; ARGUMENT DELIMITER?
E944 2705             (      exbasic.asm):02419                   BEQ  LB6DE          ; YES - NO LENGTH PARAMETER GIVEN
E946 BDE4DF           (      exbasic.asm):02420                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
E949 8D2D             (      exbasic.asm):02421                   BSR  LB70B          ; EVALUATE NUMERIC EXPRESSION (LENGTH)
E94B 8D15             (      exbasic.asm):02422         LB6DE     BSR  LB6F5          ; GET ARGUMENTS FROM STACK
E94D 2724             (      exbasic.asm):02423                   BEQ  LB706          ; 'FC' ERROR IF NULL STRING
E94F 5F               (      exbasic.asm):02424                   CLRB                ; CLEAR LENGTH COUNTER (DEFAULT VALUE)
E950 4A               (      exbasic.asm):02425                   DECA                ; *SUOTRACT ONE FROM POSITION PARAMETER (THESE
E951 A184             (      exbasic.asm):02426                   CMPA ,X             ; *ROUTINES EXPECT 1ST POSITION TO BE ZERO, NOT ONE)
                      (      exbasic.asm):02427         *                             ; *AND COMPARE IT TO LENGTH OF OLD STRING
E953 24CD             (      exbasic.asm):02428                   BCC  LB6B5          ; IF POSITION > LENGTH OF OLD STRING, THEN NEW
                      (      exbasic.asm):02429         *                             ; STRING WILL BE A NULL STRING
E955 1F89             (      exbasic.asm):02430                   TFR  A,B            ; SAVE ABSOLUTE POSITION PARAMETER IN ACCB
E957 E084             (      exbasic.asm):02431                   SUBB ,X             ; ACCB=POSITION-LENGTH OF OLD STRING
E959 50               (      exbasic.asm):02432                   NEGB                ; NOW ACCB=LENGTH OF OLDSTRING-POSITION
E95A D153             (      exbasic.asm):02433                   CMPB FPA0+3         ; *IF THE AMOUNT OF OLD STRING TO THE RIGHT OF
E95C 23C4             (      exbasic.asm):02434                   BLS  LB6B5          ; *POSITION IS <= THE LENGTH PARAMETER, BRANCH AND
                      (      exbasic.asm):02435         * USE ALL OF THE STRING TO THE RIGHT OF THE POSITION
                      (      exbasic.asm):02436         * INSTEAD OF THE LENGTH PARAMETER
E95E D653             (      exbasic.asm):02437                   LDB  FPA0+3         ; GET LENGTH OF NEW STRING
E960 20C0             (      exbasic.asm):02438                   BRA  LB6B5          ; PUT NEW STRING IN STRING SPACE
                      (      exbasic.asm):02439         * DO A SYNTAX CHECK FOR ")", THEN PULL THE PREVIOUSLY CALCULATED NUMERIC
                      (      exbasic.asm):02440         * ARGUMENT (ACCD) AND STRING ARGUMENT DESCRIPTOR ADDR OFF OF THE STACK
E962 BDE4D9           (      exbasic.asm):02441         LB6F5     JSR  LB267          ; SYNTAX CHECK FOR A ")"
E965 EEE4             (      exbasic.asm):02442                   LDU  ,S             ; LOAD THE RETURN ADDRESS INTO U REGISTER
E967 AE65             (      exbasic.asm):02443                   LDX  5,S            ; * GET ADDRESS OF STRING AND
E969 9F4D             (      exbasic.asm):02444                   STX  V4D            ; * SAVE IT IN V4D
E96B A664             (      exbasic.asm):02445                   LDA  4,S            ; = PUT LENGTH OF STRING IN
E96D E664             (      exbasic.asm):02446                   LDB  4,S            ; = BOTH ACCA AND ACCB
E96F 3267             (      exbasic.asm):02447                   LEAS 7,S            ; REMOVE DESCRIPTOR AND RETURN ADDRESS FROM STACK
E971 1F35             (      exbasic.asm):02448                   TFR  U,PC           ; JUMP TO ADDRESS IN U REGISTER
E973 7EE6B7           (      exbasic.asm):02449         LB706     JMP  LB44A          ; 'ILLEGAL FUNCTION CALL'
                      (      exbasic.asm):02450         * EVALUATE AN EXPRESSION - RETURN AN INTEGER IN
                      (      exbasic.asm):02451         * ACCB - 'FC' ERROR IF EXPRESSION > 255
E976 9D7C             (      exbasic.asm):02452         LB709     JSR  GETNCH         ; GET NEXT BASIC INPUT CHARACTER
E978 BDE3B3           (      exbasic.asm):02453         LB70B     JSR  LB141          ; EVALUATE A NUMERIC EXPRESSION
E97B BDE656           (      exbasic.asm):02454         LB70E     JSR  LB3E9          ; CONVERT FPA0 TO INTEGER IN ACCD
E97E 4D               (      exbasic.asm):02455                   TSTA                ; TEST MS BYTE OF INTEGER
E97F 26F2             (      exbasic.asm):02456                   BNE  LB706          ; 'FC' ERROR IF EXPRESSION > 255
E981 0E82             (      exbasic.asm):02457                   JMP  GETCCH         ; GET CURRENT INPUT CHARACTER FROM BASIC
                      (      exbasic.asm):02458         
                      (      exbasic.asm):02459         * VAL
E983 BDE8F3           (      exbasic.asm):02460         VAL       JSR  LB686          ; POINT X TO STRING ADDRESS
E986 102702E1         (      exbasic.asm):02461                   LBEQ LBA39          ; IF NULL STRING SET FPA0
E98A DE83             (      exbasic.asm):02462                   LDU  CHARAD         ; SAVE INPUT POINTER IN REGISTER U
E98C 9F83             (      exbasic.asm):02463                   STX  CHARAD         ; POINT INPUT POINTER TO ADDRESS OF STRING
E98E 3A               (      exbasic.asm):02464                   ABX                 ; MOVE POINTER TO END OF STRING TERMINATOR
E98F A684             (      exbasic.asm):02465                   LDA  ,X             ; GET LAST BYTE OF STRING
E991 3452             (      exbasic.asm):02466                   PSHS U,X,A          ; SAVE INPUT POINTER, STRING TERMINATOR
                      (      exbasic.asm):02467         *         ADDRESS AND CHARACTER
E993 6F84             (      exbasic.asm):02468                   CLR  ,X             ; CLEAR STRING TERMINATOR : FOR ASCII - FP CONVERSION
E995 9D82             (      exbasic.asm):02469                   JSR  GETCCH         ; GET CURRENT CHARACTER FROM BASIC
E997 BDEF44           (      exbasic.asm):02470                   JSR  LBD12          ; CONVERT AN ASCII STRING TO FLOATING POINT
E99A 3552             (      exbasic.asm):02471                   PULS A,X,U          ; RESTORE CHARACTERS AND POINTERS
E99C A784             (      exbasic.asm):02472                   STA  ,X             ; REPLACE STRING TERMINATOR
E99E DF83             (      exbasic.asm):02473                   STU  CHARAD         ; RESTORE INPUT CHARACTER
E9A0 39               (      exbasic.asm):02474                   RTS
                      (      exbasic.asm):02475         
E9A1 8D07             (      exbasic.asm):02476         LB734     BSR  LB73D          ; * EVALUATE AN EXPRESSION, RETURN
E9A3 9F2B             (      exbasic.asm):02477                   STX  BINVAL         ; * THE VALUE IN X; STORE IT IN BINVAL
E9A5 BDE4DF           (      exbasic.asm):02478         LB738     JSR  LB26D          ; SYNTAX CHECK FOR A COMMA
E9A8 20CE             (      exbasic.asm):02479                   BRA  LB70B          ; EVALUATE EXPRESSION IN RANGE 0 <= X < 256
                      (      exbasic.asm):02480         * EVALUATE EXPRESSION : RETURN INTEGER PORTION IN X - 'FC' ERROR IF
                      (      exbasic.asm):02481         
E9AA BDE3B3           (      exbasic.asm):02482         LB73D     JSR  LB141          ; EVALUATE NUMERIC EXPRESSION
E9AD 9654             (      exbasic.asm):02483         LB740     LDA  FP0SGN         ; GET SIGN OF FPA0 MANTISSA
E9AF 2BC2             (      exbasic.asm):02484                   BMI  LB706          ; ILLEGAL FUNCTION CALL' IF NEGATIVE
E9B1 964F             (      exbasic.asm):02485                   LDA  FP0EXP         ; GET EXPONENT OF FPA0
E9B3 8190             (      exbasic.asm):02486                   CMPA #$90           ; COMPARE TO LARGEST POSITIVE INTEGER
E9B5 22BC             (      exbasic.asm):02487                   BHI  LB706          ; ILLEGAL FUNCTION CALL' IF TOO LARGE
E9B7 BDEEFA           (      exbasic.asm):02488                   JSR  LBCC8          ; SHIFT BINARY POINT TO EXTREME RIGHT OF FPA0
E9BA 9E52             (      exbasic.asm):02489                   LDX  FPA0+2         ; LOAD X WITH LOWER TWO BYTES OF FPA0
E9BC 39               (      exbasic.asm):02490                   RTS
                      (      exbasic.asm):02491         
                      (      exbasic.asm):02492         * PEEK
E9BD 8DEE             (      exbasic.asm):02493         PEEK      BSR  LB740          ; CONVERT FPA0 TO INTEGER IN REGISTER X
E9BF E684             (      exbasic.asm):02494                   LDB  ,X             ; GET THE VALUE BEING 'PEEK'ED
E9C1 7EE760           (      exbasic.asm):02495                   JMP  LB4F3          ; CONVERT ACCB INTO A FP NUMBER
                      (      exbasic.asm):02496         
                      (      exbasic.asm):02497         * POKE
E9C4 8DDB             (      exbasic.asm):02498         POKE      BSR  LB734          ; EVALUATE 2 EXPRESSIONS
E9C6 9E2B             (      exbasic.asm):02499                   LDX  BINVAL         ; GET THE ADDRESS TO BE 'POKE'ED
E9C8 E784             (      exbasic.asm):02500                   STB  ,X             ; STORE THE DATA IN THAT ADDRESS
E9CA 39               (      exbasic.asm):02501                   RTS
                      (      exbasic.asm):02502         
                      (      exbasic.asm):02503         
                      (      exbasic.asm):02504         * LIST
E9CB 3401             (      exbasic.asm):02505         LIST      PSHS CC             ; SAVE ZERO FLAG ON STACK
E9CD BDE1FD           (      exbasic.asm):02506                   JSR  LAF67          ; CONVERT DECIMAL LINE NUMBER TO BINARY
E9D0 BDDF8B           (      exbasic.asm):02507                   JSR  LAD01          ; * FIND RAM ADDRESS OF THAT LINE NUMBER AND
E9D3 9F66             (      exbasic.asm):02508                   STX  LSTTXT         ; * SAVE IT IN LSTTXT
E9D5 3501             (      exbasic.asm):02509                   PULS CC             ; GET ZERO FLAG FROM STACK
E9D7 2712             (      exbasic.asm):02510                   BEQ  LB784          ; BRANCH IF END OF LINE
E9D9 9D82             (      exbasic.asm):02511                   JSR  GETCCH         ; GET CURRENT CHARACTER FROM BASIC
E9DB 2713             (      exbasic.asm):02512                   BEQ  LB789          ; BRANCH IF END OF LINE
E9DD 81A7             (      exbasic.asm):02513                   CMPA #TOK_MINUS     ; MINUS TOKEN (IS IT A RANGE OF LINE NUMBERS?)
E9DF 2609             (      exbasic.asm):02514                   BNE  LB783          ; NO - RETURN
E9E1 9D7C             (      exbasic.asm):02515                   JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
E9E3 2706             (      exbasic.asm):02516                   BEQ  LB784          ; BRANCH IF END OF LINE
E9E5 BDE1FD           (      exbasic.asm):02517                   JSR  LAF67          ; GET ENDING LINE NUMBER
E9E8 2706             (      exbasic.asm):02518                   BEQ  LB789          ; BRANCH IF LEGAL LINE NUMBER
E9EA 39               (      exbasic.asm):02519         LB783 RTS
                      (      exbasic.asm):02520         * LIST THE ENTIRE PROGRAM
E9EB CEFFFF           (      exbasic.asm):02521         LB784     LDU  #$FFFF         ; * SET THE DEFAULT ENDING LINE NUMBER
E9EE DF2B             (      exbasic.asm):02522                   STU  BINVAL         ; * TO $FFFF
E9F0 3262             (      exbasic.asm):02523         LB789     LEAS 2,S            ; PURGE RETURN ADDRESS FROM THE STACK
E9F2 9E66             (      exbasic.asm):02524                   LDX  LSTTXT         ; POINT X TO STARTING LINE ADDRESS
E9F4 BDEB92           (      exbasic.asm):02525         LB78D     JSR  LB95C          ; MOVE CURSOR TO START OF A NEW LINE
E9F7 BDDC80           (      exbasic.asm):02526                   JSR  LA549          ; CHECK FOR A BREAK OR PAUSE
E9FA EC84             (      exbasic.asm):02527                   LDD  ,X             ; GET ADDRESS OF NEXT BASIC LINE
E9FC 2603             (      exbasic.asm):02528                   BNE  LB79F          ; BRANCH IF NOT END OF PROGRAM
E9FE                  (      exbasic.asm):02529         LB797
E9FE 7EDF0B           (      exbasic.asm):02530                   JMP  LAC73          ; RETURN TO BASIC'S MAIN INPUT LOOP
EA01 9F66             (      exbasic.asm):02531         LB79F     STX  LSTTXT         ; SAVE NEW STARTING LINE ADDRESS
EA03 EC02             (      exbasic.asm):02532                   LDD  2,X            ; * GET THE LINE NUMBER OF THIS LINE AND
EA05 10932B           (      exbasic.asm):02533                   CMPD BINVAL         ; * COMPARE IT TO ENDING LINE NUMBER
EA08 22F4             (      exbasic.asm):02534                   BHI  LB797          ; EXIT IF LINE NUMBER > ENDING LINE NUMBER
EA0A BDEFFE           (      exbasic.asm):02535                   JSR  LBDCC          ; PRINT THE NUMBER IN ACCD ON SCREEN IN DECIMAL
EA0D BDEBDE           (      exbasic.asm):02536                   JSR  LB9AC          ; SEND A SPACE TO CONSOLE OUT
EA10 9E66             (      exbasic.asm):02537                   LDX  LSTTXT         ; GET RAM ADDRESS OF THIS LINE
EA12 8D10             (      exbasic.asm):02538                   BSR  LB7C2          ; UNCRUNCH A LINE
EA14 AE9F0066         (      exbasic.asm):02539                   LDX  [LSTTXT]       ; POINT X TO START OF NEXT LINE
EA18 CE00F4           (      exbasic.asm):02540                   LDU  #LINBUF+1      ; POINT U TO BUFFER FULL OF UNCRUNCHED LINE
EA1B A6C0             (      exbasic.asm):02541         LB7B9     LDA  ,U+            ; GET A BYTE FROM THE BUFFER
EA1D 27D5             (      exbasic.asm):02542                   BEQ  LB78D          ; BRANCH IF END OF BUFFER
EA1F BDEBE3           (      exbasic.asm):02543                   JSR  LB9B1          ; SEND CHARACTER TO CONSOLE OUT
EA22 20F7             (      exbasic.asm):02544                   BRA  LB7B9          ; GET ANOTHER CHARACTER
                      (      exbasic.asm):02545         
                      (      exbasic.asm):02546         * UNCRUNCH A LINE INTO BASIC'S LINE INPUT BUFFER
EA24 3004             (      exbasic.asm):02547         LB7C2     LEAX 4,X            ; MOVE POINTER PAST ADDRESS OF NEXT LINE AND LINE NUMBER
EA26 108E00F4         (      exbasic.asm):02548                   LDY  #LINBUF+1      ; UNCRUNCH LINE INTO LINE INPUT BUFFER
EA2A A680             (      exbasic.asm):02549         LB7CB     LDA  ,X+            ; GET A CHARACTER
EA2C 2751             (      exbasic.asm):02550                   BEQ  LB820          ; BRANCH IF END OF LINE
EA2E 2B15             (      exbasic.asm):02551                   BMI  LB7E6          ; BRANCH IF IT'S A TOKEN
EA30 813A             (      exbasic.asm):02552                   CMPA #':            ; CHECK FOR END OF SUB LINE
EA32 260D             (      exbasic.asm):02553                   BNE  LB7E2          ; BRNCH IF NOT END OF SUB LINE
EA34 E684             (      exbasic.asm):02554                   LDB  ,X             ; GET CHARACTER FOLLOWING COLON
EA36 C184             (      exbasic.asm):02555                   CMPB #TOK_ELSE      ; TOKEN FOR ELSE?
EA38 27F0             (      exbasic.asm):02556                   BEQ  LB7CB          ; YES - DON'T PUT IT IN BUFFER
EA3A C183             (      exbasic.asm):02557                   CMPB #TOK_SNGL_Q    ; TOKEN FOR REMARK?
EA3C 27EC             (      exbasic.asm):02558                   BEQ  LB7CB          ; YES - DON'T PUT IT IN BUFFER
EA3E 8C               (      exbasic.asm):02559                   FCB  SKP2           ; SKIP TWO BYTES
EA3F 8621             (      exbasic.asm):02560         LB7E0     LDA  #'!            ; EXCLAMATION POINT
EA41 8D30             (      exbasic.asm):02561         LB7E2     BSR  LB814          ; PUT CHARACTER IN BUFFER
EA43 20E5             (      exbasic.asm):02562                   BRA  LB7CB          ; GET ANOTHER CHARACTER
                      (      exbasic.asm):02563         
EA45 CEDBD0           (      exbasic.asm):02564         LB7E6     LDU  #COMVEC-10     ; FIRST DO COMMANDS
EA48 81FF             (      exbasic.asm):02565                   CMPA #$FF           ; CHECK FOR SECONDARY TOKEN
EA4A 2604             (      exbasic.asm):02566                   BNE  LB7F1          ; BRANCH IF NON SECONDARY TOKEN
EA4C A680             (      exbasic.asm):02567                   LDA  ,X+            ; GET SECONDARY TOKEN
EA4E 3345             (      exbasic.asm):02568                   LEAU 5,U            ; BUMP IT UP TO SECONDARY FUNCTIONS
EA50 847F             (      exbasic.asm):02569         LB7F1     ANDA #$7F           ; MASK OFF BIT 7 OF TOKEN
EA52 334A             (      exbasic.asm):02570         LB7F3     LEAU 10,U           ; MOVE TO NEXT COMMAND TABLE
EA54 6DC4             (      exbasic.asm):02571                   TST  ,U             ; IS THIS TABLE ENABLED?
EA56 27E7             (      exbasic.asm):02572                   BEQ  LB7E0          ; NO - ILLEGAL TOKEN
EA58 A0C4             (      exbasic.asm):02573                   SUBA ,U             ; SUBTRACT THE NUMBER OF TOKENS FROM THE CURRENT TOKEN NUMBER
EA5A 2AF6             (      exbasic.asm):02574                   BPL  LB7F3          ; BRANCH IF TOKEN NOT IN THIS TABLE
EA5C ABC4             (      exbasic.asm):02575                   ADDA ,U             ; RESTORE TOKEN NUMBER RELATIVE TO THIS TABLE
EA5E EE41             (      exbasic.asm):02576                   LDU  1,U            ; POINT U TO COMMAND DICTIONARY TABLE
EA60 4A               (      exbasic.asm):02577         LB801     DECA                ; DECREMENT TOKEN NUMBER
EA61 2B06             (      exbasic.asm):02578                   BMI  LB80A          ; BRANCH IF THIS IS THE CORRECT TOKEN
                      (      exbasic.asm):02579         * SKIP THROUGH DICTIONARY TABLE TO START OF NEXT TOKEN
EA63 6DC0             (      exbasic.asm):02580         LB804     TST  ,U+            ; GRAB A BYTE
EA65 2AFC             (      exbasic.asm):02581                   BPL  LB804          ; BRANCH IF BIT 7 NOT SET
EA67 20F7             (      exbasic.asm):02582                   BRA  LB801          ; GO SEE IF THIS IS THE CORRECT TOKEN
EA69 A6C4             (      exbasic.asm):02583         LB80A     LDA  ,U             ; GET A CHARACTER FROM DICTIONARY TABLE
EA6B 8D06             (      exbasic.asm):02584                   BSR  LB814          ; PUT CHARACTER IN BUFFER
EA6D 6DC0             (      exbasic.asm):02585                   TST  ,U+            ; CHECK FOR START OF NEXT TOKEN
EA6F 2AF8             (      exbasic.asm):02586                   BPL  LB80A          ; BRANCH IF NOT DONE WITH THIS TOKEN
EA71 20B7             (      exbasic.asm):02587                   BRA  LB7CB          ; GO GET ANOTHER CHARACTER
EA73 108C01ED         (      exbasic.asm):02588         LB814     CMPY #LINBUF+LBUFMX ; TEST FOR END OF LINE INPUT BUFFER
EA77 2406             (      exbasic.asm):02589                   BCC  LB820          ; BRANCH IF AT END OF BUFFER
EA79 847F             (      exbasic.asm):02590                   ANDA #$7F           ; MASK OFF BIT 7
EA7B A7A0             (      exbasic.asm):02591                   STA  ,Y+            ; * SAVE CHARACTER IN BUFFER AND
EA7D 6FA4             (      exbasic.asm):02592                   CLR  ,Y             ; * CLEAR NEXT CHARACTER SLOT IN BUFFER
EA7F 39               (      exbasic.asm):02593         LB820     RTS
                      (      exbasic.asm):02594         *
                      (      exbasic.asm):02595         * CRUNCH THE LINE THAT THE INPUT POINTER IS
                      (      exbasic.asm):02596         * POINTING TO INTO THE LINE INPUT BUFFER
                      (      exbasic.asm):02597         * RETURN LENGTH OF CRUNCHED LINE IN ACCD
                      (      exbasic.asm):02598         *
EA80 9E83             (      exbasic.asm):02599         LB821     LDX  CHARAD         ; GET BASIC'S INPUT POINTER ADDRESS
EA82 CE00F3           (      exbasic.asm):02600                   LDU  #LINBUF        ; POINT X TO LINE INPUT BUFFER
EA85 0F43             (      exbasic.asm):02601         LB829     CLR  V43            ; CLEAR ILLEGAL TOKEN FLAG
EA87 0F44             (      exbasic.asm):02602                   CLR  V44            ; CLEAR DATA FLAG
EA89 A680             (      exbasic.asm):02603         LB82D     LDA  ,X+            ; GET INPUT CHAR
EA8B 2721             (      exbasic.asm):02604                   BEQ  LB852          ; BRANCH IF END OF LINE
EA8D 0D43             (      exbasic.asm):02605                   TST  V43            ; * CHECK ILLEGAL TOKEN FLAG & BRANCH IF NOT
EA8F 270F             (      exbasic.asm):02606                   BEQ  LB844          ; * PROCESSING AN ILLEGAL TOKEN
EA91 BDE60F           (      exbasic.asm):02607                   JSR  LB3A2          ; SET CARRY IF NOT UPPER CASE ALPHA
EA94 2418             (      exbasic.asm):02608                   BCC  LB852          ; BRANCH IF UPPER CASE ALPHA
EA96 8130             (      exbasic.asm):02609                   CMPA #'0            ; * DON'T CRUNCH ASCII NUMERIC CHARACTERS
EA98 2504             (      exbasic.asm):02610                   BLO  LB842          ; * BRANCH IF NOT NUMERIC
EA9A 8139             (      exbasic.asm):02611                   CMPA #'9            ; *
EA9C 2310             (      exbasic.asm):02612                   BLS  LB852          ; * BRANCH IF NUMERIC
                      (      exbasic.asm):02613         * END UP HERE IF NOT UPPER CASE ALPHA OR NUMERIC
EA9E 0F43             (      exbasic.asm):02614         LB842     CLR  V43            ; CLEAR ILLEGAL TOKEN FLAG
EAA0 8120             (      exbasic.asm):02615         LB844     CMPA #SPACE         ; SPACE?
EAA2 270A             (      exbasic.asm):02616                   BEQ  LB852          ; DO NOT REMOVE SPACES
EAA4 9742             (      exbasic.asm):02617                   STA  V42            ; SAVE INPUT CHARACTER AS SCAN DELIMITER
EAA6 8122             (      exbasic.asm):02618                   CMPA #'"            ; CHECK FOR STRING DELIMITER
EAA8 2738             (      exbasic.asm):02619                   BEQ  LB886          ; BRANCH IF STRING
EAAA 0D44             (      exbasic.asm):02620                   TST  V44            ; * CHECK DATA FLAG AND BRANCH IF CLEAR
EAAC 2719             (      exbasic.asm):02621                   BEQ  LB86B          ; * DO NOT CRUNCH DATA
EAAE A7C0             (      exbasic.asm):02622         LB852     STA  ,U+            ; SAVE CHARACTER IN BUFFER
EAB0 2706             (      exbasic.asm):02623                   BEQ  LB85C          ; BRANCH IF END OF LINE
EAB2 813A             (      exbasic.asm):02624                   CMPA #':            ; * CHECK FOR END OF SUBLINE
EAB4 27CF             (      exbasic.asm):02625                   BEQ  LB829          ; * AND RESET FLAGS IF END OF SUBLINE
EAB6 20D1             (      exbasic.asm):02626         LB85A     BRA  LB82D          ; GO GET ANOTHER CHARACTER
EAB8 6FC0             (      exbasic.asm):02627         LB85C     CLR  ,U+            ; * DOUBLE ZERO AT END OF LINE
EABA 6FC0             (      exbasic.asm):02628                   CLR  ,U+            ; *
EABC 1F30             (      exbasic.asm):02629                   TFR  U,D            ; SAVE ADDRESS OF END OF LINE IN ACCD
EABE 8300F1           (      exbasic.asm):02630                   SUBD #LINHDR        ; LENGTH OF LINE IN ACCD
EAC1 8E00F2           (      exbasic.asm):02631                   LDX  #LINBUF-1      ; * SET THE INPUT POINTER TO ONE BEFORE
EAC4 9F83             (      exbasic.asm):02632                   STX  CHARAD         ; * THE START OF THE CRUNCHED LINE
EAC6 39               (      exbasic.asm):02633                   RTS                 ; EXIT 'CRUNCH'
EAC7 813F             (      exbasic.asm):02634         LB86B     CMPA #'?            ; CHECK FOR "?" - PRINT ABBREVIATION
EAC9 2604             (      exbasic.asm):02635                   BNE  LB873          ; BRANCH IF NOT PRINT ABBREVIATION
EACB 8687             (      exbasic.asm):02636                   LDA  #TOK_PRINT     ; * GET THE PRINT TOKEN AND SAVE IT
EACD 20DF             (      exbasic.asm):02637                   BRA  LB852          ; * IN BUFFER
EACF 8127             (      exbasic.asm):02638         LB873     CMPA #''            ; APOSTROPHE IS SAME AS REM
EAD1 2613             (      exbasic.asm):02639                   BNE  LB88A          ; BRANCH IF NOT REMARK
EAD3 CC3A83           (      exbasic.asm):02640                   LDD  #$3A00+TOK_SNGL_Q ; COLON, REM TOKEN
EAD6 EDC1             (      exbasic.asm):02641                   STD  ,U++           ; SAVE IN BUFFER
EAD8 0F42             (      exbasic.asm):02642         LB87C     CLR  V42            ; SET DELIMITER = 0 (END OF LINE)
EADA A680             (      exbasic.asm):02643         LB87E     LDA  ,X+            ; SCAN TILL WE MATCH [V42]
EADC 27D0             (      exbasic.asm):02644                   BEQ  LB852          ; BRANCH IF END OF LINE
EADE 9142             (      exbasic.asm):02645                   CMPA V42            ; DELIMITER?
EAE0 27CC             (      exbasic.asm):02646                   BEQ  LB852          ; BRANCH OUT IF SO
EAE2 A7C0             (      exbasic.asm):02647         LB886     STA  ,U+            ; DON'T CRUNCH REMARKS OR STRINGS
EAE4 20F4             (      exbasic.asm):02648                   BRA  LB87E          ; GO GET MORE STRING OR REMARK
EAE6 8130             (      exbasic.asm):02649         LB88A     CMPA #'0            ; * LESS THAN ASCII ZERO?
EAE8 2504             (      exbasic.asm):02650                   BCS  LB892          ; * BRANCH IF SO
EAEA 813C             (      exbasic.asm):02651                   CMPA #';+1          ; = CHECK FOR NUMERIC VALUE, COLON OR SEMICOLON
EAEC 25C0             (      exbasic.asm):02652                   BCS  LB852          ; = AND INSERT IN BUFFER IF SO
EAEE 301F             (      exbasic.asm):02653         LB892     LEAX -1,X           ; MOVE INPUT POINTER BACK ONE
EAF0 3450             (      exbasic.asm):02654                   PSHS U,X            ; SAVE POINTERS TO INPUT STRING, OUTPUT STRING
EAF2 0F41             (      exbasic.asm):02655                   CLR  V41            ; TOKEN FLAG 0 = COMMAND, FF = SECONDARY
EAF4 CEDBD0           (      exbasic.asm):02656                   LDU  #COMVEC-10     ; POINT U TO COMMAND INTERPRETATION
                      (      exbasic.asm):02657         *                             ; TABLE FOR BASIC - 10
EAF7 0F42             (      exbasic.asm):02658         LB89B     CLR  V42            ; INITIALIZE V42 AS TOKEN COUNTER
EAF9 334A             (      exbasic.asm):02659         LB89D     LEAU 10,U           ; MOVE TO NEXT COMMAND INTERPRETATION TABLE
EAFB A6C4             (      exbasic.asm):02660                   LDA  ,U             ; GET NUMBER OF COMMANDS
EAFD 2731             (      exbasic.asm):02661                   BEQ  LB8D4          ; GO DO SECONDARY FUNCTIONS IF NO COMMAND TABLE
EAFF 10AE41           (      exbasic.asm):02662                   LDY  1,U            ; POINT Y TO COMMAND DICTIONARY TABLE
EB02 AEE4             (      exbasic.asm):02663         LB8A6     LDX  ,S             ; GET POINTER TO INPUT STRING
EB04 E6A0             (      exbasic.asm):02664         LB8A8     LDB  ,Y+            ; GET A BYTE FROM DICTIONARY TABLE
EB06 E080             (      exbasic.asm):02665                   SUBB ,X+            ; SUBTRACT INPUT CHARACTER
EB08 27FA             (      exbasic.asm):02666                   BEQ  LB8A8          ; LOOP IF SAME
EB0A C180             (      exbasic.asm):02667                   CMPB #$80           ; LAST CHAR IN RESERVED WORD TABLE HAD
                      (      exbasic.asm):02668         *                             ; BIT 7 SET, SO IF WE HAVE $80 HERE
                      (      exbasic.asm):02669         *                             ; THEN IT IS A GOOD COMPARE
EB0C 2638             (      exbasic.asm):02670                   BNE  LB8EA          ; BRANCH IF NO MATCH - CHECK ANOTHER COMMAND
EB0E 3262             (      exbasic.asm):02671                   LEAS 2,S            ; DELETE OLD INPUT POINTER FROM STACK
EB10 3540             (      exbasic.asm):02672                   PULS U              ; GET POINTER TO OUTPUT STRING
EB12 DA42             (      exbasic.asm):02673                   ORB  V42            ; OR IN THE TABLE POSITION TO MAKE THE TOKEN
                      (      exbasic.asm):02674         *                             ; - NOTE THAT B ALREADY HAD $80 IN IT -
EB14 9641             (      exbasic.asm):02675                   LDA  V41            ; * CHECK TOKEN FLAG AND BRANCH
EB16 2606             (      exbasic.asm):02676                   BNE  LB8C2          ; * IF SECONDARY
EB18 C184             (      exbasic.asm):02677                   CMPB #TOK_ELSE      ; IS IT ELSE TOKEN?
EB1A 2606             (      exbasic.asm):02678                   BNE  LB8C6          ; NO
EB1C 863A             (      exbasic.asm):02679                   LDA  #':            ; PUT A COLON (SUBLINE) BEFORE ELSE TOKEN
EB1E EDC1             (      exbasic.asm):02680         LB8C2     STD  ,U++           ; SECONDARY TOKENS PRECEEDED BY $FF
EB20 2094             (      exbasic.asm):02681                   BRA  LB85A          ; GO PROCESS MORE INPUT CHARACTERS
EB22 E7C0             (      exbasic.asm):02682         LB8C6     STB  ,U+            ; SAVE THIS TOKEN
EB24 C186             (      exbasic.asm):02683                   CMPB #TOK_DATA      ; DATA TOKEN?
EB26 2602             (      exbasic.asm):02684                   BNE  LB8CE          ; NO
EB28 0C44             (      exbasic.asm):02685                   INC  V44            ; SET DATA FLAG
EB2A C182             (      exbasic.asm):02686         LB8CE     CMPB #TOK_REM       ; REM TOKEN?
EB2C 27AA             (      exbasic.asm):02687                   BEQ  LB87C          ; YES
EB2E 2086             (      exbasic.asm):02688         LB8D2     BRA  LB85A          ; GO PROCESS MORE INPUT CHARACTERS
                      (      exbasic.asm):02689         * CHECK FOR A SECONDARY TOKEN
EB30 CEDBD5           (      exbasic.asm):02690         LB8D4     LDU  #COMVEC-5      ; NOW DO SECONDARY FUNCTIONS
EB33 0341             (      exbasic.asm):02691                   COM  V41            ; TOGGLE THE TOKEN FLAG
EB35 26C0             (      exbasic.asm):02692                   BNE  LB89B          ; BRANCH IF NOW CHECKING SECONDARY COMMANDS
                      (      exbasic.asm):02693         
                      (      exbasic.asm):02694         * THIS CODE WILL PROCESS INPUT DATA WHICH CANNOT BE CRUNCHED AND SO
                      (      exbasic.asm):02695         * IS ASSUMED TO BE ILLEGAL DATA OR AN ILLEGAL TOKEN
EB37 3550             (      exbasic.asm):02696                   PULS X,U            ; RESTORE INPUT AND OUTPUT POINTERS
EB39 A680             (      exbasic.asm):02697                   LDA  ,X+            ; * MOVE THE FIRST CHARACTER OF AN
EB3B A7C0             (      exbasic.asm):02698                   STA  ,U+            ; * ILLEGAL TOKEN
EB3D BDE60F           (      exbasic.asm):02699                   JSR  LB3A2          ; SET CARRY IF NOT ALPHA
EB40 25EC             (      exbasic.asm):02700                   BCS  LB8D2          ; BRANCH IF NOT ALPHA
EB42 0343             (      exbasic.asm):02701                   COM  V43            ; SET ILLEGAL TOKEN FLAG IF UPPER CASE ALPHA
EB44 20E8             (      exbasic.asm):02702                   BRA  LB8D2          ; PROCESS MORE INPUT CHARACTERS
EB46 0C42             (      exbasic.asm):02703         LB8EA     INC  V42            ; INCREMENT TOKEN COUNTER
EB48 4A               (      exbasic.asm):02704                   DECA                ; DECR COMMAND COUNTER
EB49 27AE             (      exbasic.asm):02705                   BEQ  LB89D          ; GET ANOTHER COMMAND TABLE IF DONE W/THIS ONE
EB4B 313F             (      exbasic.asm):02706                   LEAY -1,Y           ; MOVE POINTER BACK ONE
EB4D E6A0             (      exbasic.asm):02707         LB8F1     LDB  ,Y+            ; * GET TO NEXT
EB4F 2AFC             (      exbasic.asm):02708                   BPL  LB8F1          ; * RESERVED WORD
EB51 20AF             (      exbasic.asm):02709                   BRA  LB8A6          ; GO SEE IF THIS WORD IS A MATCH
                      (      exbasic.asm):02710         
                      (      exbasic.asm):02711         * PRINT
EB53 2739             (      exbasic.asm):02712         PRINT     BEQ  LB958          ; BRANCH IF NO ARGUMENT
EB55 8D01             (      exbasic.asm):02713                   BSR  LB8FE          ; CHECK FOR ALL PRINT OPTIONS
EB57 39               (      exbasic.asm):02714                   RTS
EB58                  (      exbasic.asm):02715         LB8FE
EB58 BDFAB8           (      exbasic.asm):02716         LB918     JSR  XVEC9          ; CALL EXTENDED BASIC ADD-IN
EB5B 273E             (      exbasic.asm):02717         LB91B     BEQ  LB965          ; RETURN IF END OF LINE
EB5D 819F             (      exbasic.asm):02718         LB91D     CMPA #TOK_TAB       ; TOKEN FOR TAB( ?
EB5F 2753             (      exbasic.asm):02719                   BEQ  LB97E          ; YES
EB61 812C             (      exbasic.asm):02720                   CMPA #',            ; COMMA?
EB63 2737             (      exbasic.asm):02721                   BEQ  LB966          ; YES - ADVANCE TO NEXT TAB FIELD
EB65 813B             (      exbasic.asm):02722                   CMPA #';            ; SEMICOLON?
EB67 2760             (      exbasic.asm):02723                   BEQ  LB997          ; YES - DO NOT ADVANCE CURSOR
EB69 BDE3C8           (      exbasic.asm):02724                   JSR  LB156          ; EVALUATE EXPRESSION
EB6C 9606             (      exbasic.asm):02725                   LDA  VALTYP         ; * GET VARIABLE TYPE AND
EB6E 3402             (      exbasic.asm):02726                   PSHS A              ; * SAVE IT ON THE STACK
EB70 2606             (      exbasic.asm):02727                   BNE  LB938          ; BRANCH IF STRING VARIABLE
EB72 BDF00B           (      exbasic.asm):02728                   JSR  LBDD9          ; CONVERT FP NUMBER TO AN ASCII STRING
EB75 BDE783           (      exbasic.asm):02729                   JSR  LB516          ; PARSE A STRING FROM (X-1) AND PUT
                      (      exbasic.asm):02730         *                             ; DESCRIPTOR ON STRING STACK
EB78 8D57             (      exbasic.asm):02731         LB938     BSR  LB99F          ; PRINT STRING POINTED TO BY X
EB7A 3504             (      exbasic.asm):02732                   PULS B              ; GET VARIABLE TYPE BACK
EB7C BDDC1C           (      exbasic.asm):02733                   JSR  LA35F          ; SET UP TAB WIDTH ZONE, ETC
EB7F 5D               (      exbasic.asm):02734         LB949     TSTB                ; CHECK CURRENT PRINT POSITION
EB80 2608             (      exbasic.asm):02735                   BNE  LB954          ; BRANCH IF NOT AT START OF LINE
EB82 9D82             (      exbasic.asm):02736                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
EB84 812C             (      exbasic.asm):02737                   CMPA #',            ; COMMA?
EB86 2714             (      exbasic.asm):02738                   BEQ  LB966          ; SKIP TO NEXT TAB FIELD
EB88 8D54             (      exbasic.asm):02739                   BSR  LB9AC          ; SEND A SPACE TO CONSOLE OUT
EB8A 9D82             (      exbasic.asm):02740         LB954     JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
EB8C 26CF             (      exbasic.asm):02741                   BNE  LB91D          ; BRANCH IF NOT END OF LINE
EB8E 860D             (      exbasic.asm):02742         LB958     LDA  #CR            ; * SEND A CR TO
EB90 2051             (      exbasic.asm):02743                   BRA  LB9B1          ; * CONSOLE OUT
EB92 BDDC1C           (      exbasic.asm):02744         LB95C     JSR  LA35F          ; SET UP TAB WIDTH, ZONE ETC
EB95 27F7             (      exbasic.asm):02745                   BEQ  LB958          ; BRANCH IF WIDTH = ZERO
EB97 966C             (      exbasic.asm):02746                   LDA  DEVPOS         ; GET PRINT POSITION
EB99 26F3             (      exbasic.asm):02747                   BNE  LB958          ; BRANCH IF NOT AT START OF LINE
EB9B 39               (      exbasic.asm):02748         LB965     RTS
                      (      exbasic.asm):02749         * SKIP TO NEXT TAB FIELD
EB9C BDDC1C           (      exbasic.asm):02750         LB966     JSR  LA35F          ; SET UP TAB WIDTH, ZONE ETC
EB9F 270A             (      exbasic.asm):02751                   BEQ  LB975          ; BRANCH IF LINE WIDTH = 0 (CASSETTE)
EBA1 D66C             (      exbasic.asm):02752                   LDB  DEVPOS         ; GET CURRENT POSITION
EBA3 D16B             (      exbasic.asm):02753                   CMPB DEVLCF         ; COMPARE TO LAST TAB ZONE
EBA5 2506             (      exbasic.asm):02754                   BCS  LB977          ; BRANCH IF < LAST TAB ZONE
EBA7 8DE5             (      exbasic.asm):02755                   BSR  LB958          ; SEND A CARRIAGE RETURN TO CONSOLE OUT
EBA9 201E             (      exbasic.asm):02756                   BRA  LB997          ; GET MORE DATA
EBAB D66C             (      exbasic.asm):02757         LB975     LDB  DEVPOS         ; *
EBAD D06A             (      exbasic.asm):02758         LB977     SUBB DEVCFW         ; * SUBTRACT TAB FIELD WIDTH FROM CURRENT
EBAF 24FC             (      exbasic.asm):02759                   BCC  LB977          ; * POSITION UNTIL CARRY SET - NEGATING THE
EBB1 50               (      exbasic.asm):02760                   NEGB                ; * REMAINDER LEAVES THE NUMBER OF SPACES TO NEXT
                      (      exbasic.asm):02761         *              ; * TAB ZONE IN ACCB
EBB2 2010             (      exbasic.asm):02762                   BRA  LB98E          ; GO ADVANCE TO NEXT TAB ZONE
                      (      exbasic.asm):02763         
                      (      exbasic.asm):02764         * PRINT TAB(
EBB4 BDE976           (      exbasic.asm):02765         LB97E     JSR  LB709          ; EVALUATE EXPRESSION - RETURN VALUE IN B
EBB7 8129             (      exbasic.asm):02766                   CMPA #')            ; * 'SYNTAX' ERROR IF NOT ')'
EBB9 1026F92C         (      exbasic.asm):02767                   LBNE LB277          ; *
EBBD BDDC1C           (      exbasic.asm):02768                   JSR  LA35F          ; SET UP TAB WIDTH, ZONE ETC
EBC0 D06C             (      exbasic.asm):02769                   SUBB DEVPOS         ; GET DIFFERENCE OF PRINT POSITION & TAB POSITION
EBC2 2305             (      exbasic.asm):02770                   BLS  LB997          ; BRANCH IF TAB POSITION < CURRENT POSITION
EBC4                  (      exbasic.asm):02771         LB98E
EBC4 8D18             (      exbasic.asm):02772         LB992     BSR  LB9AC          ; SEND A SPACE TO CONSOLE OUT
EBC6 5A               (      exbasic.asm):02773                   DECB                ; DECREMENT DIFFERENCE COUNT
EBC7 26FB             (      exbasic.asm):02774                   BNE  LB992          ; BRANCH UNTIL CURRENT POSITION = TAB POSITION
EBC9 9D7C             (      exbasic.asm):02775         LB997     JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
EBCB 7EEB5B           (      exbasic.asm):02776                   JMP  LB91B          ; LOOK FOR MORE PRINT DATA
                      (      exbasic.asm):02777         * COPY A STRING FROM (X) TO CONSOLE OUT
EBCE BDE785           (      exbasic.asm):02778         LB99C     JSR  LB518          ; PARSE A STRING FROM X AND PUT
                      (      exbasic.asm):02779         *         DESCRIPTOR ON STRING STACK
EBD1 BDE8C4           (      exbasic.asm):02780         LB99F     JSR  LB657          ; GET LENGTH OF STRING AND REMOVE
                      (      exbasic.asm):02781         *         DESCRIPTOR FROM STRING STACK
EBD4 5C               (      exbasic.asm):02782                   INCB                ; COMPENSATE FOR DECB BELOW
EBD5 5A               (      exbasic.asm):02783         LB9A3     DECB                ; DECREMENT COUNTER
EBD6 27C3             (      exbasic.asm):02784                   BEQ  LB965          ; EXIT ROUTINE
EBD8 A680             (      exbasic.asm):02785                   LDA  ,X+            ; GET A CHARACTER FROM X
EBDA 8D07             (      exbasic.asm):02786                   BSR  LB9B1          ; SEND TO CONSOLE OUT
EBDC 20F7             (      exbasic.asm):02787                   BRA  LB9A3          ; KEEP LOOPING
EBDE 8620             (      exbasic.asm):02788         LB9AC     LDA  #SPACE         ; SPACE TO CONSOLE OUT
EBE0 8C               (      exbasic.asm):02789                   FCB  SKP2           ; SKIP NEXT TWO BYTES
EBE1 863F             (      exbasic.asm):02790         LB9AF     LDA  #'?            ; QUESTION MARK TO CONSOLE OUT
EBE3 7EDB10           (      exbasic.asm):02791         LB9B1     JMP  PUTCHR         ; JUMP TO CONSOLE OUT
                      (      exbasic.asm):02792         
                      (      exbasic.asm):02793         * FLOATING POINT MATH PACKAGE
                      (      exbasic.asm):02794         
                      (      exbasic.asm):02795         * ADD .5 TO FPA0
EBE6 8EF0F2           (      exbasic.asm):02796         LB9B4     LDX  #LBEC0         ; FLOATING POINT CONSTANT (.5)
EBE9 2009             (      exbasic.asm):02797                   BRA  LB9C2          ; ADD .5 TO FPA0
                      (      exbasic.asm):02798         * SUBTRACT FPA0 FROM FP NUMBER POINTED
                      (      exbasic.asm):02799         * TO BY (X), LEAVE RESULT IN FPA0
EBEB BDED61           (      exbasic.asm):02800         LB9B9     JSR  LBB2F          ; COPY PACKED FP DATA FROM (X) TO FPA1
                      (      exbasic.asm):02801         
                      (      exbasic.asm):02802         * ARITHMETIC OPERATION (-) JUMPS HERE - SUBTRACT FPA0 FROM FPA1 (ENTER
                      (      exbasic.asm):02803         * WITH EXPONENT OF FPA0 IN ACCB AND EXPONENT OF FPA1 IN ACCA)
EBEE 0354             (      exbasic.asm):02804         LB9BC     COM  FP0SGN         ; CHANGE MANTISSA SIGN OF FPA0
EBF0 0362             (      exbasic.asm):02805                   COM  RESSGN         ; REVERSE RESULT SIGN FLAG
EBF2 2003             (      exbasic.asm):02806                   BRA  LB9C5          ; GO ADD FPA1 AND FPA0
                      (      exbasic.asm):02807         * ADD FP NUMBER POINTED TO BY
                      (      exbasic.asm):02808         * (X) TO FPA0 - LEAVE RESULT IN FPA0
EBF4 BDED61           (      exbasic.asm):02809         LB9C2     JSR  LBB2F          ; UNPACK PACKED FP DATA FROM (X) TO
                      (      exbasic.asm):02810         *         FPA1; RETURN EXPONENT OF FPA1 IN ACCA
                      (      exbasic.asm):02811         
                      (      exbasic.asm):02812         * ARITHMETIC OPERATION (+) JUMPS HERE - ADD FPA0 TO
                      (      exbasic.asm):02813         
EBF7 5D               (      exbasic.asm):02814         LB9C5     TSTB                ; CHECK EXPONENT OF FPA0
EBF8 10270280         (      exbasic.asm):02815                   LBEQ LBC4A          ; COPY FPA1 TO FPA0 IF FPA0 =
EBFC 8E005C           (      exbasic.asm):02816                   LDX  #FP1EXP        ; POINT X TO FPA1
EBFF 1F89             (      exbasic.asm):02817         LB9CD     TFR  A,B            ; PUT EXPONENT OF FPA1 INTO ACCB
EC01 5D               (      exbasic.asm):02818                   TSTB                ; CHECK EXPONENT
EC02 276C             (      exbasic.asm):02819                   BEQ  LBA3E          ; RETURN IF EXPONENT = 0 (ADDING 0 TO FPA0)
EC04 D04F             (      exbasic.asm):02820                   SUBB FP0EXP         ; SUBTRACT EXPONENT OF FPA0 FROM EXPONENT OF FPA1
EC06 2769             (      exbasic.asm):02821                   BEQ  LBA3F          ; BRANCH IF EXPONENTS ARE EQUAL
EC08 250A             (      exbasic.asm):02822                   BCS  LB9E2          ; BRANCH IF EXPONENT FPA0 > FPA1
EC0A 974F             (      exbasic.asm):02823                   STA  FP0EXP         ; REPLACE FPA0 EXPONENT WITH FPA1 EXPONENT
EC0C 9661             (      exbasic.asm):02824                   LDA  FP1SGN         ; * REPLACE FPA0 MANTISSA SIGN
EC0E 9754             (      exbasic.asm):02825                   STA  FP0SGN         ; * WITH FPA1 MANTISSA SIGN
EC10 8E004F           (      exbasic.asm):02826                   LDX  #FP0EXP        ; POINT X TO FPA0
EC13 50               (      exbasic.asm):02827                   NEGB                ; NEGATE DIFFERENCE OF EXPONENTS
EC14 C1F8             (      exbasic.asm):02828         LB9E2     CMPB #-8            ; TEST DIFFERENCE OF EXPONENTS
EC16 2F59             (      exbasic.asm):02829                   BLE  LBA3F          ; BRANCH IF DIFFERENCE OF EXPONENTS <= 8
EC18 4F               (      exbasic.asm):02830                   CLRA                ; CLEAR OVERFLOW BYTE
EC19 6401             (      exbasic.asm):02831                   LSR  1,X            ; SHIFT MS BYTE OF MANTISSA; BIT 7 = 0
EC1B BDECEC           (      exbasic.asm):02832                   JSR  LBABA          ; GO SHIFT MANTISSA OF (X) TO THE RIGHT (B) TIMES
EC1E D662             (      exbasic.asm):02833         LB9EC     LDB  RESSGN         ; GET SIGN FLAG
EC20 2A0B             (      exbasic.asm):02834                   BPL  LB9FB          ; BRANCH IF FPA0 AND FPA1 SIGNS ARE THE SAME
EC22 6301             (      exbasic.asm):02835                   COM  1,X            ; * COMPLEMENT MANTISSA POINTED
EC24 6302             (      exbasic.asm):02836                   COM  2,X            ; * TO BY (X) THE
EC26 6303             (      exbasic.asm):02837                   COM  3,X            ; * ADCA BELOW WILL
EC28 6304             (      exbasic.asm):02838                   COM  4,X            ; * CONVERT THIS OPERATION
EC2A 43               (      exbasic.asm):02839                   COMA                ; * INTO A NEG (MANTISSA)
EC2B 8900             (      exbasic.asm):02840                   ADCA #0             ; ADD ONE TO ACCA - COMA ALWAYS SETS THE CARRY FLAG
                      (      exbasic.asm):02841         * THE PREVIOUS TWO BYTES MAY BE REPLACED BY A NEGA
                      (      exbasic.asm):02842         *
                      (      exbasic.asm):02843         * ADD MANTISSAS OF FPA0 AND FPA1, PUT RESULT IN FPA0
EC2D 9763             (      exbasic.asm):02844         LB9FB     STA  FPSBYT         ; SAVE FPA SUB BYTE
EC2F 9653             (      exbasic.asm):02845                   LDA  FPA0+3         ; * ADD LS BYTE
EC31 9960             (      exbasic.asm):02846                   ADCA FPA1+3         ; * OF MANTISSA
EC33 9753             (      exbasic.asm):02847                   STA  FPA0+3         ; SAVE IN FPA0 LSB
EC35 9652             (      exbasic.asm):02848                   LDA  FPA0+2         ; * ADD NEXT BYTE
EC37 995F             (      exbasic.asm):02849                   ADCA FPA1+2         ; * OF MANTISSA
EC39 9752             (      exbasic.asm):02850                   STA  FPA0+2         ; SAVE IN FPA0
EC3B 9651             (      exbasic.asm):02851                   LDA  FPA0+1         ; * ADD NEXT BYTE
EC3D 995E             (      exbasic.asm):02852                   ADCA FPA1+1         ; * OF MANTISSA
EC3F 9751             (      exbasic.asm):02853                   STA  FPA0+1         ; SAVE IN FPA0
EC41 9650             (      exbasic.asm):02854                   LDA  FPA0           ; * ADD MS BYTE
EC43 995D             (      exbasic.asm):02855                   ADCA FPA1           ; * OF MANTISSA
EC45 9750             (      exbasic.asm):02856                   STA  FPA0           ; SAVE IN FPA0
EC47 5D               (      exbasic.asm):02857                   TSTB                ; TEST SIGN FLAG
EC48 2A44             (      exbasic.asm):02858                   BPL  LBA5C          ; BRANCH IF FPA0 & FPA1 SIGNS WERE ALIKE
EC4A 2502             (      exbasic.asm):02859         LBA18     BCS  LBA1C          ; BRANCH IF POSITIVE MANTISSA
EC4C 8D5D             (      exbasic.asm):02860                   BSR  LBA79          ; NEGATE FPA0 MANTISSA
                      (      exbasic.asm):02861         
                      (      exbasic.asm):02862         * NORMALIZE FPA0
EC4E 5F               (      exbasic.asm):02863         LBA1C     CLRB                ; CLEAR TEMPORARY EXPONENT ACCUMULATOR
EC4F 9650             (      exbasic.asm):02864         LBA1D     LDA  FPA0           ; TEST MSB OF MANTISSA
EC51 262E             (      exbasic.asm):02865                   BNE  LBA4F          ; BRANCH IF <> 0
EC53 9651             (      exbasic.asm):02866                   LDA  FPA0+1         ; * IF THE MSB IS
EC55 9750             (      exbasic.asm):02867                   STA  FPA0           ; * 0, THEN SHIFT THE
EC57 9652             (      exbasic.asm):02868                   LDA  FPA0+2         ; * MANTISSA A WHOLE BYTE
EC59 9751             (      exbasic.asm):02869                   STA  FPA0+1         ; * AT A TIME. THIS
EC5B 9653             (      exbasic.asm):02870                   LDA  FPA0+3         ; * IS FASTER THAN ONE
EC5D 9752             (      exbasic.asm):02871                   STA  FPA0+2         ; * BIT AT A TIME
EC5F 9663             (      exbasic.asm):02872                   LDA  FPSBYT         ; * BUT USES MORE MEMORY.
EC61 9753             (      exbasic.asm):02873                   STA  FPA0+3         ; * FPSBYT, THE CARRY IN
EC63 0F63             (      exbasic.asm):02874                   CLR  FPSBYT         ; * BYTE, REPLACES THE MATISSA LSB.
EC65 CB08             (      exbasic.asm):02875                   ADDB #8             ; SHIFTING ONE BYTE = 8 BIT SHIFTS; ADD 8 TO EXPONENT
EC67 C128             (      exbasic.asm):02876                   CMPB #5*8           ; CHECK FOR 5 SHIFTS
EC69 2DE4             (      exbasic.asm):02877                   BLT  LBA1D          ; BRANCH IF < 5 SHIFTS, IF > 5, THEN MANTISSA = 0
EC6B 4F               (      exbasic.asm):02878         LBA39     CLRA                ; A ZERO EXPONENT = 0 FLOATING POINT
EC6C 974F             (      exbasic.asm):02879         LBA3A     STA  FP0EXP         ; ZERO OUT THE EXPONENT
EC6E 9754             (      exbasic.asm):02880                   STA  FP0SGN         ; ZERO OUT THE MANTISSA SIGN
EC70 39               (      exbasic.asm):02881         LBA3E     RTS
EC71 8D6D             (      exbasic.asm):02882         LBA3F     BSR  LBAAE          ; SHIFT FPA0 MANTISSA TO RIGHT
EC73 5F               (      exbasic.asm):02883                   CLRB                ; CLEAR CARRY FLAG
EC74 20A8             (      exbasic.asm):02884                   BRA  LB9EC
                      (      exbasic.asm):02885         * SHIFT FPA0 LEFT ONE BIT UNTIL BIT 7
                      (      exbasic.asm):02886         * OF MATISSA MS BYTE = 1
EC76 5C               (      exbasic.asm):02887         LBA44     INCB                ; ADD ONE TO EXPONENT ACCUMULATOR
EC77 0863             (      exbasic.asm):02888                   ASL  FPSBYT         ; SHIFT SUB BYTE ONE LEFT
EC79 0953             (      exbasic.asm):02889                   ROL  FPA0+3         ; SHIFT LS BYTE
EC7B 0952             (      exbasic.asm):02890                   ROL  FPA0+2         ; SHIFT NS BYTE
EC7D 0951             (      exbasic.asm):02891                   ROL  FPA0+1         ; SHIFT NS BYTE
EC7F 0950             (      exbasic.asm):02892                   ROL  FPA0           ; SHIFT MS BYTE
EC81 2AF3             (      exbasic.asm):02893         LBA4F     BPL  LBA44          ; BRANCH IF NOT YET NORMALIZED
EC83 964F             (      exbasic.asm):02894                   LDA  FP0EXP         ; GET CURRENT EXPONENT
EC85 3404             (      exbasic.asm):02895                   PSHS B              ; SAVE EXPONENT MODIFIER CAUSED BY NORMALIZATION
EC87 A0E0             (      exbasic.asm):02896                   SUBA ,S+            ; SUBTRACT ACCUMULATED EXPONENT MODIFIER
EC89 974F             (      exbasic.asm):02897                   STA  FP0EXP         ; SAVE AS NEW EXPONENT
EC8B 23DE             (      exbasic.asm):02898                   BLS  LBA39          ; SET FPA0 = 0 IF THE NORMALIZATION CAUSED
                      (      exbasic.asm):02899         *         MORE OR EQUAL NUMBER OF LEFT SHIFTS THAN THE
                      (      exbasic.asm):02900         *         SIZE OF THE EXPONENT
EC8D 8C               (      exbasic.asm):02901                   FCB  SKP2           ; SKIP 2 BYTES
EC8E 2508             (      exbasic.asm):02902         LBA5C     BCS  LBA66          ; BRANCH IF MANTISSA OVERFLOW
EC90 0863             (      exbasic.asm):02903                   ASL  FPSBYT         ; SUB BYTE BIT 7 TO CARRY - USE AS ROUND-OFF
                      (      exbasic.asm):02904         *                             ; FLAG (TRUNCATE THE REST OF SUB BYTE)
EC92 8600             (      exbasic.asm):02905                   LDA  #0             ; CLRA, BUT DO NOT CHANGE CARRY FLAG
EC94 9763             (      exbasic.asm):02906                   STA  FPSBYT         ; CLEAR THE SUB BYTE
EC96 200C             (      exbasic.asm):02907                   BRA  LBA72          ; GO ROUND-OFF RESULT
EC98 0C4F             (      exbasic.asm):02908         LBA66     INC  FP0EXP         ; INCREMENT EXPONENT - MULTIPLY BY 2
EC9A 2728             (      exbasic.asm):02909                   BEQ  LBA92          ; OVERFLOW ERROR IF CARRY PAST $FF
EC9C 0650             (      exbasic.asm):02910                   ROR  FPA0           ; * SHIFT MANTISSA
EC9E 0651             (      exbasic.asm):02911                   ROR  FPA0+1         ; * ONE TO
ECA0 0652             (      exbasic.asm):02912                   ROR  FPA0+2         ; * THE RIGHT -
ECA2 0653             (      exbasic.asm):02913                   ROR  FPA0+3         ; * DIVIDE BY TWO
ECA4 2404             (      exbasic.asm):02914         LBA72     BCC  LBA78          ; BRANCH IF NO ROUND-OFF NEEDED
ECA6 8D0D             (      exbasic.asm):02915                   BSR  LBA83          ; ADD ONE TO MANTISSA - ROUND OFF
ECA8 27EE             (      exbasic.asm):02916                   BEQ  LBA66          ; BRANCH iF OVERFLOW - MANTISSA = 0
ECAA 39               (      exbasic.asm):02917         LBA78     RTS
                      (      exbasic.asm):02918         * NEGATE FPA0 MANTISSA
ECAB 0354             (      exbasic.asm):02919         LBA79     COM  FP0SGN         ; TOGGLE SIGN OF MANTISSA
ECAD 0350             (      exbasic.asm):02920         LBA7B     COM  FPA0           ; * COMPLEMENT ALL 4 MANTISSA BYTES
ECAF 0351             (      exbasic.asm):02921                   COM  FPA0+1         ; *
ECB1 0352             (      exbasic.asm):02922                   COM  FPA0+2         ; *
ECB3 0353             (      exbasic.asm):02923                   COM  FPA0+3         ; *
                      (      exbasic.asm):02924         * ADD ONE TO FPA0 MANTISSA
ECB5 9E52             (      exbasic.asm):02925         LBA83     LDX  FPA0+2         ; * GET BOTTOM 2 MANTISSA
ECB7 3001             (      exbasic.asm):02926                   LEAX 1,X            ; * BYTES, ADD ONE TO
ECB9 9F52             (      exbasic.asm):02927                   STX  FPA0+2         ; * THEM AND SAVE THEM
ECBB 2606             (      exbasic.asm):02928                   BNE  LBA91          ; BRANCH IF NO OVERFLOW
ECBD 9E50             (      exbasic.asm):02929                   LDX  FPA0           ; * IF OVERFLOW ADD ONE
ECBF 3001             (      exbasic.asm):02930                   LEAX 1,X            ; * TO TOP 2 MANTISSA
ECC1 9F50             (      exbasic.asm):02931                   STX  FPA0           ; * BYTES AND SAVE THEM
ECC3 39               (      exbasic.asm):02932         LBA91     RTS
ECC4 C60A             (      exbasic.asm):02933         LBA92     LDB  #2*5           ; OV' OVERFLOW ERROR
ECC6 7EDEEC           (      exbasic.asm):02934                   JMP  LAC46          ; PROCESS AN ERROR
ECC9 8E0012           (      exbasic.asm):02935         LBA97     LDX  #FPA2-1        ; POINT X TO FPA2
                      (      exbasic.asm):02936         * SHIFT FPA POINTED TO BY (X) TO
                      (      exbasic.asm):02937         * THE RIGHT -(B) TIMES. EXIT WITH
                      (      exbasic.asm):02938         * ACCA CONTAINING DATA SHIFTED OUT
                      (      exbasic.asm):02939         * TO THE RIGHT (SUB BYTE) AND THE DATA
                      (      exbasic.asm):02940         * SHIFTED IN FROM THE LEFT WILL COME FROM FPCARY
ECCC A604             (      exbasic.asm):02941         LBA9A     LDA  4,X            ; GET LS BYTE OF MANTISSA (X)
ECCE 9763             (      exbasic.asm):02942                   STA  FPSBYT         ; SAVE IN FPA SUB BYTE
ECD0 A603             (      exbasic.asm):02943                   LDA  3,X            ; * SHIFT THE NEXT THREE BYTES OF THE
ECD2 A704             (      exbasic.asm):02944                   STA  4,X            ; * MANTISSA RIGHT ONE COMPLETE BYTE.
ECD4 A602             (      exbasic.asm):02945                   LDA  2,X            ; *
ECD6 A703             (      exbasic.asm):02946                   STA  3,X            ; *
ECD8 A601             (      exbasic.asm):02947                   LDA  1,X            ; *
ECDA A702             (      exbasic.asm):02948                   STA  2,X            ; *
ECDC 965B             (      exbasic.asm):02949                   LDA  FPCARY         ; GET THE CARRY IN BYTE
ECDE A701             (      exbasic.asm):02950                   STA  1,X            ; STORE AS THE MS MANTISSA BYTE OF (X)
ECE0 CB08             (      exbasic.asm):02951         LBAAE     ADDB #8             ; ADD 8 TO DIFFERENCE OF EXPONENTS
ECE2 2FE8             (      exbasic.asm):02952                   BLE  LBA9A          ; BRANCH IF EXPONENT DIFFERENCE < -8
ECE4 9663             (      exbasic.asm):02953                   LDA  FPSBYT         ; GET FPA SUB BYTE
ECE6 C008             (      exbasic.asm):02954                   SUBB #8             ; CAST OUT THE 8 ADDED IN ABOVE
ECE8 270C             (      exbasic.asm):02955                   BEQ  LBAC4          ; BRANCH IF EXPONENT DIFFERENCE = 0
                      (      exbasic.asm):02956         
                      (      exbasic.asm):02957         
ECEA 6701             (      exbasic.asm):02958         LBAB8     ASR  1,X            ; * SHIFT MANTISSA AND SUB BYTE ONE BIT TO THE RIGHT
ECEC 6602             (      exbasic.asm):02959         LBABA     ROR  2,X            ; *
ECEE 6603             (      exbasic.asm):02960                   ROR  3,X            ; *
ECF0 6604             (      exbasic.asm):02961                   ROR  4,X            ; *
ECF2 46               (      exbasic.asm):02962                   RORA                ; *
ECF3 5C               (      exbasic.asm):02963                   INCB                ; ADD ONE TO EXPONENT DIFFERENCE
ECF4 26F4             (      exbasic.asm):02964                   BNE  LBAB8          ; BRANCH IF EXPONENTS NOT =
ECF6 39               (      exbasic.asm):02965         LBAC4     RTS
ECF7 8100000000       (      exbasic.asm):02966         LBAC5     FCB  $81,$00,$00,$00,$00 ; FLOATING POINT CONSTANT 1.0
                      (      exbasic.asm):02967         
                      (      exbasic.asm):02968         * ARITHMETIC OPERATION (*) JUMPS HERE - MULTIPLY
                      (      exbasic.asm):02969         * FPA0 BY (X) - RETURN PRODUCT IN FPA0
ECFC 8D63             (      exbasic.asm):02970         LBACA     BSR  LBB2F          ; MOVE PACKED FPA FROM (X) TO FPA1
ECFE 2760             (      exbasic.asm):02971         LBACC     BEQ  LBB2E          ; BRANCH IF EXPONENT OF FPA0 = 0
ED00 8D78             (      exbasic.asm):02972                   BSR  LBB48          ; CALCULATE EXPONENT OF PRODUCT
                      (      exbasic.asm):02973         * MULTIPLY FPA0 MANTISSA BY FPA1. NORMALIZE
                      (      exbasic.asm):02974         * HIGH ORDER BYTES OF PRODUCT IN FPA0. THE
                      (      exbasic.asm):02975         * LOW ORDER FOUR BYTES OF THE PRODUCT WILL
                      (      exbasic.asm):02976         * BE STORED IN VAB-VAE.
ED02 8600             (      exbasic.asm):02977         LBAD0     LDA  #0             ; * ZERO OUT MANTISSA OF FPA2
ED04 9713             (      exbasic.asm):02978                   STA  FPA2           ; *
ED06 9714             (      exbasic.asm):02979                   STA  FPA2+1         ; *
ED08 9715             (      exbasic.asm):02980                   STA  FPA2+2         ; *
ED0A 9716             (      exbasic.asm):02981                   STA  FPA2+3         ; *
ED0C D653             (      exbasic.asm):02982                   LDB  FPA0+3         ; GET LS BYTE OF FPA0
ED0E 8D22             (      exbasic.asm):02983                   BSR  LBB00          ; MULTIPLY BY FPA1
ED10 D663             (      exbasic.asm):02984                   LDB  FPSBYT         ; * TEMPORARILY SAVE SUB BYTE 4
ED12 D78B             (      exbasic.asm):02985                   STB  VAE            ; *
ED14 D652             (      exbasic.asm):02986                   LDB  FPA0+2         ; GET NUMBER 3 MANTISSA BYTE OF FPA0
ED16 8D1A             (      exbasic.asm):02987                   BSR  LBB00          ; MULTIPLY BY FPA1
ED18 D663             (      exbasic.asm):02988                   LDB  FPSBYT         ; * TEMPORARILY SAVE SUB BYTE 3
ED1A D78A             (      exbasic.asm):02989                   STB  VAD            ; *
ED1C D651             (      exbasic.asm):02990                   LDB  FPA0+1         ; GET NUMBER 2 MANTISSA BYTE OF FPA0
ED1E 8D12             (      exbasic.asm):02991                   BSR  LBB00          ; MULTIPLY BY FPA1
ED20 D663             (      exbasic.asm):02992                   LDB  FPSBYT         ; * TEMPORARILY SAVE SUB BYTE 2
ED22 D789             (      exbasic.asm):02993                   STB  VAC            ; *
ED24 D650             (      exbasic.asm):02994                   LDB  FPA0           ; GET MS BYTE OF FPA0 MANTISSA
ED26 8D0C             (      exbasic.asm):02995                   BSR  LBB02          ; MULTIPLY BY FPA1
ED28 D663             (      exbasic.asm):02996                   LDB  FPSBYT         ; * TEMPORARILY SAVE SUB BYTE 1
ED2A D788             (      exbasic.asm):02997                   STB  VAB            ; *
ED2C BDEE3D           (      exbasic.asm):02998                   JSR  LBC0B          ; COPY MANTISSA FROM FPA2 TO FPA0
ED2F 7EEC4E           (      exbasic.asm):02999                   JMP  LBA1C          ; NORMALIZE FPA0
ED32 2795             (      exbasic.asm):03000         LBB00     BEQ  LBA97          ; SHIFT FPA2 ONE BYTE TO RIGHT
ED34 43               (      exbasic.asm):03001         LBB02     COMA                ; SET CARRY FLAG
                      (      exbasic.asm):03002         * MULTIPLY FPA1 MANTISSA BY ACCB AND
                      (      exbasic.asm):03003         * ADD PRODUCT TO FPA2 MANTISSA
ED35 9613             (      exbasic.asm):03004         LBB03     LDA  FPA2           ; GET FPA2 MS BYTE
ED37 56               (      exbasic.asm):03005                   RORB                ; ROTATE CARRY FLAG INTO SHIFT COUNTER;
                      (      exbasic.asm):03006         *         DATA BIT INTO CARRY
ED38 2726             (      exbasic.asm):03007                   BEQ  LBB2E          ; BRANCH WHEN 8 SHIFTS DONE
ED3A 2416             (      exbasic.asm):03008                   BCC  LBB20          ; DO NOT ADD FPA1 IF DATA BIT = 0
ED3C 9616             (      exbasic.asm):03009                   LDA  FPA2+3         ; * ADD MANTISSA LS BYTE
ED3E 9B60             (      exbasic.asm):03010                   ADDA FPA1+3         ; *
ED40 9716             (      exbasic.asm):03011                   STA  FPA2+3         ; *
ED42 9615             (      exbasic.asm):03012                   LDA  FPA2+2         ; = ADD MANTISSA NUMBER 3 BYTE
ED44 995F             (      exbasic.asm):03013                   ADCA FPA1+2         ; =
ED46 9715             (      exbasic.asm):03014                   STA  FPA2+2         ; =
ED48 9614             (      exbasic.asm):03015                   LDA  FPA2+1         ; * ADD MANTISSA NUMBER 2 BYTE
ED4A 995E             (      exbasic.asm):03016                   ADCA FPA1+1         ; *
ED4C 9714             (      exbasic.asm):03017                   STA  FPA2+1         ; *
ED4E 9613             (      exbasic.asm):03018                   LDA  FPA2           ; = ADD MANTISSA MS BYTE
ED50 995D             (      exbasic.asm):03019                   ADCA FPA1           ; =
ED52 46               (      exbasic.asm):03020         LBB20     RORA                ; * ROTATE CARRY INTO MS BYTE
ED53 9713             (      exbasic.asm):03021                   STA  FPA2           ; *
ED55 0614             (      exbasic.asm):03022                   ROR  FPA2+1         ; = ROTATE FPA2 ONE BIT TO THE RIGHT
ED57 0615             (      exbasic.asm):03023                   ROR  FPA2+2         ; =
ED59 0616             (      exbasic.asm):03024                   ROR  FPA2+3         ; =
ED5B 0663             (      exbasic.asm):03025                   ROR  FPSBYT         ; =
ED5D 4F               (      exbasic.asm):03026                   CLRA                ; CLEAR CARRY FLAG
ED5E 20D5             (      exbasic.asm):03027                   BRA  LBB03          ; KEEP LOOPING
ED60 39               (      exbasic.asm):03028         LBB2E     RTS
                      (      exbasic.asm):03029         * UNPACK A FP NUMBER FROM (X) TO FPA1
ED61 EC01             (      exbasic.asm):03030         LBB2F     LDD  1,X            ; GET TWO MSB BYTES OF MANTISSA FROM
                      (      exbasic.asm):03031         *         FPA  POINTED TO BY X
ED63 9761             (      exbasic.asm):03032                   STA  FP1SGN         ; SAVE PACKED MANTISSA SIGN BYTE
ED65 8A80             (      exbasic.asm):03033                   ORA  #$80           ; FORCE BIT 7 OF MSB MANTISSA = 1
ED67 DD5D             (      exbasic.asm):03034                   STD  FPA1           ; SAVE 2 MSB BYTES IN FPA1
ED69 D661             (      exbasic.asm):03035                   LDB  FP1SGN         ; * GET PACKED MANTISSA SIGN BYTE. EOR W/FPA0
ED6B D854             (      exbasic.asm):03036                   EORB FP0SGN         ; * SIGN - NEW SIGN POSITION IF BOTH OLD SIGNS ALIKE,
ED6D D762             (      exbasic.asm):03037                   STB  RESSGN         ; * NEG IF BOTH OLD SIGNS DIFF. SAVE ADJUSTED
                      (      exbasic.asm):03038         *                             ; * MANTISSA SIGN BYTE
ED6F EC03             (      exbasic.asm):03039                   LDD  3,X            ; = GET 2 LSB BYTES OF MANTISSA
ED71 DD5F             (      exbasic.asm):03040                   STD  FPA1+2         ; = AND PUT IN FPA1
ED73 A684             (      exbasic.asm):03041                   LDA  ,X             ; * GET EXPONENT FROM (X) AND
ED75 975C             (      exbasic.asm):03042                   STA  FP1EXP         ; * PUT IN EXPONENT OF FPA1
ED77 D64F             (      exbasic.asm):03043                   LDB  FP0EXP         ; GET EXPONENT OF FPA0
ED79 39               (      exbasic.asm):03044                   RTS
                      (      exbasic.asm):03045         * CALCULATE EXPONENT FOR PRODUCT OF FPA0 & FPA1
                      (      exbasic.asm):03046         * ENTER WITH EXPONENT OF FPA1 IN ACCA
ED7A 4D               (      exbasic.asm):03047         LBB48     TSTA                ; TEST EXPONENT OF FPA1
ED7B 2716             (      exbasic.asm):03048                   BEQ  LBB61          ; PURGE RETURN ADDRESS & SET FPA0 = 0
ED7D 9B4F             (      exbasic.asm):03049                   ADDA FP0EXP         ; ADD FPA1 EXPONENT TO FPA0 EXPONENT
ED7F 46               (      exbasic.asm):03050                   RORA                ; ROTATE CARRY INTO BIT 7; BIT 0 INTO CARRY
ED80 49               (      exbasic.asm):03051                   ROLA                ; SET OVERFLOW FLAG
ED81 2810             (      exbasic.asm):03052                   BVC  LBB61          ; BRANCH IF EXPONENT TOO LARGE OR SMALL
ED83 8B80             (      exbasic.asm):03053                   ADDA #$80           ; ADD $80 BIAS TO EXPONENT
ED85 974F             (      exbasic.asm):03054                   STA  FP0EXP         ; SAVE NEW EXPONENT
ED87 270C             (      exbasic.asm):03055                   BEQ  LBB63          ; SET FPA0
ED89 9662             (      exbasic.asm):03056                   LDA  RESSGN         ; GET MANTISSA SIGN
ED8B 9754             (      exbasic.asm):03057                   STA  FP0SGN         ; SAVE AS MANTISSA SIGN OF FPA0
ED8D 39               (      exbasic.asm):03058                   RTS
                      (      exbasic.asm):03059         * IF FPA0 = POSITIVE THEN 'OV' ERROR IF FPA0
                      (      exbasic.asm):03060         * = IS NEGATIVE THEN FPA0 = 0
ED8E 9654             (      exbasic.asm):03061         LBB5C     LDA  FP0SGN         ; GET MANTISSA SIGN OF FPA0
ED90 43               (      exbasic.asm):03062                   COMA                ; CHANGE SIGN OF FPA0 MANTISSA
ED91 2002             (      exbasic.asm):03063                   BRA  LBB63
ED93 3262             (      exbasic.asm):03064         LBB61     LEAS 2,S            ; PURGE RETURN ADDRESS FROM STACK
ED95 102AFED2         (      exbasic.asm):03065         LBB63     LBPL LBA39          ; ZERO FPA0 MANTISSA SIGN & EXPONENT
ED99 7EECC4           (      exbasic.asm):03066         LBB67     JMP  LBA92          ; 'OV' OVERFLOW ERROR
                      (      exbasic.asm):03067         * FAST MULTIPLY BY 10 AND LEAVE RESULT IN FPA0
ED9C BDEE91           (      exbasic.asm):03068         LBB6A     JSR  LBC5F          ; TRANSFER FPA0 TO FPA1
ED9F 270D             (      exbasic.asm):03069                   BEQ  LBB7C          ; BRANCH IF EXPONENT = 0
EDA1 8B02             (      exbasic.asm):03070                   ADDA #2             ; ADD 2 TO EXPONENT (TIMES 4)
EDA3 25F4             (      exbasic.asm):03071                   BCS  LBB67          ; 'OV' ERROR IF EXPONENT > $FF
EDA5 0F62             (      exbasic.asm):03072                   CLR  RESSGN         ; CLEAR RESULT SIGN BYTE
EDA7 BDEBFF           (      exbasic.asm):03073                   JSR  LB9CD          ; ADD FPA1 TO FPA0 (TIMES 5)
EDAA 0C4F             (      exbasic.asm):03074                   INC  FP0EXP         ; ADD ONE TO EXPONENT (TIMES 10)
EDAC 27EB             (      exbasic.asm):03075                   BEQ  LBB67          ; 'OV' ERROR IF EXPONENT > $FF
EDAE 39               (      exbasic.asm):03076         LBB7C     RTS
EDAF 8420000000       (      exbasic.asm):03077         LBB7D     FCB  $84,$20,$00,$00,$00 ; FLOATING POINT CONSTANT 10
                      (      exbasic.asm):03078         * DIVIDE FPA0 BY 10
EDB4 BDEE91           (      exbasic.asm):03079         LBB82     JSR  LBC5F          ; MOVE FPA0 TO FPA1
EDB7 8EEDAF           (      exbasic.asm):03080                   LDX  #LBB7D         ; POINT TO FLOATING POINT CONSTANT 10
EDBA 5F               (      exbasic.asm):03081                   CLRB                ; ZERO MANTISSA SIGN BYTE
EDBB D762             (      exbasic.asm):03082         LBB89     STB  RESSGN         ; STORE THE QUOTIENT MANTISSA SIGN BYTE
EDBD BDEE46           (      exbasic.asm):03083                   JSR  LBC14          ; UNPACK AN FP NUMBER FROM (X) INTO FPA0
EDC0 8C               (      exbasic.asm):03084                   FCB  SKP2           ; SKIP TWO BYTES
                      (      exbasic.asm):03085         * DIVIDE (X) BY FPA0-LEAVE NORMALIZED QUOTIENT IN FPA0
EDC1 8D9E             (      exbasic.asm):03086         LBB8F     BSR  LBB2F          ; GET FP NUMBER FROM (X) TO FPA1
                      (      exbasic.asm):03087         
                      (      exbasic.asm):03088         * ARITHMETIC OPERATION (/) JUMPS HERE. DIVIDE FPA1 BY FPA0 (ENTER WITH
                      (      exbasic.asm):03089         * EXPONENT OF FPA1 IN ACCA AND FLAGS SET BY TSTA)
                      (      exbasic.asm):03090         
                      (      exbasic.asm):03091         * DIVIDE FPA1 BY FPA0
EDC3 2773             (      exbasic.asm):03092         LBB91     BEQ  LBC06          ; '/0' DIVIDE BY ZERO ERROR
EDC5 004F             (      exbasic.asm):03093                   NEG  FP0EXP         ; GET EXPONENT OF RECIPROCAL OF DIVISOR
EDC7 8DB1             (      exbasic.asm):03094                   BSR  LBB48          ; CALCULATE EXPONENT OF QUOTIENT
EDC9 0C4F             (      exbasic.asm):03095                   INC  FP0EXP         ; INCREMENT EXPONENT
EDCB 27CC             (      exbasic.asm):03096                   BEQ  LBB67          ; 'OV' OVERFLOW ERROR
EDCD 8E0013           (      exbasic.asm):03097                   LDX  #FPA2          ; POINT X TO MANTISSA OF FPA2 - HOLD
                      (      exbasic.asm):03098         *                             ; TEMPORARY QUOTIENT IN FPA2
EDD0 C604             (      exbasic.asm):03099                   LDB  #4             ; 5 BYTE DIVIDE
EDD2 D703             (      exbasic.asm):03100                   STB  TMPLOC         ; SAVE BYTE COUNTER
EDD4 C601             (      exbasic.asm):03101                   LDB  #1             ; SHIFT COUNTER-AND TEMPORARY QUOTIENT BYTE
                      (      exbasic.asm):03102         * COMPARE FPA0 MANTISSA TO FPA1 MANTISSA -
                      (      exbasic.asm):03103         * SET CARRY FLAG IF FPA1 >= FPA0
EDD6 9650             (      exbasic.asm):03104         LBBA4     LDA  FPA0           ; * COMPARE THE TWO MS BYTES
EDD8 915D             (      exbasic.asm):03105                   CMPA FPA1           ; * OF FPA0 AND FPA1 AND
EDDA 2613             (      exbasic.asm):03106                   BNE  LBBBD          ; * BRANCH IF <>
EDDC 9651             (      exbasic.asm):03107                   LDA  FPA0+1         ; = COMPARE THE NUMBER 2
EDDE 915E             (      exbasic.asm):03108                   CMPA FPA1+1         ; = BYTES AND
EDE0 260D             (      exbasic.asm):03109                   BNE  LBBBD          ; = BRANCH IF <>
EDE2 9652             (      exbasic.asm):03110                   LDA  FPA0+2         ; * COMPARE THE NUMBER 3
EDE4 915F             (      exbasic.asm):03111                   CMPA FPA1+2         ; * BYTES AND
EDE6 2607             (      exbasic.asm):03112                   BNE  LBBBD          ; * BRANCH IF <>
EDE8 9653             (      exbasic.asm):03113                   LDA  FPA0+3         ; = COMPARE THE LS BYTES
EDEA 9160             (      exbasic.asm):03114                   CMPA FPA1+3         ; = AND BRANCH
EDEC 2601             (      exbasic.asm):03115                   BNE  LBBBD          ; = IF <>
EDEE 43               (      exbasic.asm):03116                   COMA                ; SET CARRY FLAG IF FPA0 = FPA1
EDEF 1FA8             (      exbasic.asm):03117         LBBBD     TFR  CC,A           ; SAVE CARRY FLAG STATUS IN ACCA; CARRY
                      (      exbasic.asm):03118         *         CLEAR IF FPA0 > FPA1
EDF1 59               (      exbasic.asm):03119                   ROLB                ; ROTATE CARRY INTO TEMPORARY QUOTIENT BYTE
EDF2 240A             (      exbasic.asm):03120                   BCC  LBBCC          ; CARRY WILL BE SET AFTER 8 SHIFTS
EDF4 E780             (      exbasic.asm):03121                   STB  ,X+            ; SAVE TEMPORARY QUOTIENT
EDF6 0A03             (      exbasic.asm):03122                   DEC  TMPLOC         ; DECREMENT BYTE COUNTER
EDF8 2B34             (      exbasic.asm):03123                   BMI  LBBFC          ; BRANCH IF DONE
EDFA 272E             (      exbasic.asm):03124                   BEQ  LBBF8          ; BRANCH IF LAST BYTE
EDFC C601             (      exbasic.asm):03125                   LDB  #1             ; RESET SHIFT COUNTER AND TEMPORARY QUOTIENT BYTE
EDFE 1F8A             (      exbasic.asm):03126         LBBCC     TFR  A,CC           ; RESTORE CARRY FLAG AND
EE00 250E             (      exbasic.asm):03127                   BCS  LBBDE          ; BRANCH IF FPA0 =< FPA1
EE02 0860             (      exbasic.asm):03128         LBBD0     ASL  FPA1+3         ; * SHIFT FPA1 MANTISSA 1 BIT TO LEFT
EE04 095F             (      exbasic.asm):03129                   ROL  FPA1+2         ; *
EE06 095E             (      exbasic.asm):03130                   ROL  FPA1+1         ; *
EE08 095D             (      exbasic.asm):03131                   ROL  FPA1           ; *
EE0A 25E3             (      exbasic.asm):03132                   BCS  LBBBD          ; BRANCH IF CARRY - ADD ONE TO PARTIAL QUOTIENT
EE0C 2BC8             (      exbasic.asm):03133                   BMI  LBBA4          ; IF MSB OF HIGH ORDER MANTISSA BYTE IS
                      (      exbasic.asm):03134         *         SET, CHECK THE MAGNITUDES OF FPA0, FPA1
EE0E 20DF             (      exbasic.asm):03135                   BRA  LBBBD          ; CARRY IS CLEAR, CHECK ANOTHER BIT
                      (      exbasic.asm):03136         * SUBTRACT FPA0 FROM FPA1 - LEAVE RESULT IN FPA1
EE10 9660             (      exbasic.asm):03137         LBBDE     LDA  FPA1+3         ; * SUBTRACT THE LS BYTES OF MANTISSA
EE12 9053             (      exbasic.asm):03138                   SUBA FPA0+3         ; *
EE14 9760             (      exbasic.asm):03139                   STA  FPA1+3         ; *
EE16 965F             (      exbasic.asm):03140                   LDA  FPA1+2         ; = THEN THE NEXT BYTE
EE18 9252             (      exbasic.asm):03141                   SBCA FPA0+2         ; =
EE1A 975F             (      exbasic.asm):03142                   STA  FPA1+2         ; =
EE1C 965E             (      exbasic.asm):03143                   LDA  FPA1+1         ; * AND THE NEXT
EE1E 9251             (      exbasic.asm):03144                   SBCA FPA0+1         ; *
EE20 975E             (      exbasic.asm):03145                   STA  FPA1+1         ; *
EE22 965D             (      exbasic.asm):03146                   LDA  FPA1           ; = AND FINALLY, THE MS BYTE OF MANTISSA
EE24 9250             (      exbasic.asm):03147                   SBCA FPA0           ; =
EE26 975D             (      exbasic.asm):03148                   STA  FPA1           ; =
EE28 20D8             (      exbasic.asm):03149                   BRA  LBBD0          ; GO SHIFT FPA1
EE2A C640             (      exbasic.asm):03150         LBBF8     LDB  #$40           ; USE ONLY TWO BITS OF THE LAST BYTE (FIFTH)
EE2C 20D0             (      exbasic.asm):03151                   BRA  LBBCC          ; GO SHIFT THE LAST BYTE
EE2E 56               (      exbasic.asm):03152         LBBFC     RORB                ; * SHIFT CARRY (ALWAYS SET HERE) INTO
EE2F 56               (      exbasic.asm):03153                   RORB                ; * BIT 5 AND MOVE
EE30 56               (      exbasic.asm):03154                   RORB                ; * BITS 1,0 TO BITS 7,6
EE31 D763             (      exbasic.asm):03155                   STB  FPSBYT         ; SAVE SUB BYTE
EE33 8D08             (      exbasic.asm):03156                   BSR  LBC0B          ; MOVE MANTISSA OF FPA2 TO FPA0
EE35 7EEC4E           (      exbasic.asm):03157                   JMP  LBA1C          ; NORMALIZE FPA0
EE38 C614             (      exbasic.asm):03158         LBC06     LDB  #2*10          ; /0' ERROR
EE3A 7EDEEC           (      exbasic.asm):03159                   JMP  LAC46          ; PROCESS THE ERROR
                      (      exbasic.asm):03160         * COPY MANTISSA FROM FPA2 TO FPA0
EE3D 9E13             (      exbasic.asm):03161         LBC0B     LDX  FPA2           ; * MOVE TOP 2 BYTES
EE3F 9F50             (      exbasic.asm):03162                   STX  FPA0           ; *
EE41 9E15             (      exbasic.asm):03163                   LDX  FPA2+2         ; = MOVE BOTTOM 2 BYTES
EE43 9F52             (      exbasic.asm):03164                   STX  FPA0+2         ; =
EE45 39               (      exbasic.asm):03165                   RTS
                      (      exbasic.asm):03166         * COPY A PACKED FP NUMBER FROM (X) TO FPA0
EE46 3402             (      exbasic.asm):03167         LBC14     PSHS A              ; SAVE ACCA
EE48 EC01             (      exbasic.asm):03168                   LDD  1,X            ; GET TOP TWO MANTISSA BYTES
EE4A 9754             (      exbasic.asm):03169                   STA  FP0SGN         ; SAVE MS BYTE OF MANTISSA AS MANTISSA SIGN
EE4C 8A80             (      exbasic.asm):03170                   ORA  #$80           ; UNPACK MS BYTE
EE4E DD50             (      exbasic.asm):03171                   STD  FPA0           ; SAVE UNPACKED TOP 2 MANTISSA BYTES
EE50 0F63             (      exbasic.asm):03172                   CLR  FPSBYT         ; CLEAR MANTISSA SUB BYTE
EE52 E684             (      exbasic.asm):03173                   LDB  ,X             ; GET EXPONENT TO ACCB
EE54 AE03             (      exbasic.asm):03174                   LDX  3,X            ; * MOVE LAST 2
EE56 9F52             (      exbasic.asm):03175                   STX  FPA0+2         ; * MANTISSA BYTES
EE58 D74F             (      exbasic.asm):03176                   STB  FP0EXP         ; SAVE EXPONENT
EE5A 3582             (      exbasic.asm):03177                   PULS A,PC           ; RESTORE ACCA AND RETURN
                      (      exbasic.asm):03178         
EE5C 8E0045           (      exbasic.asm):03179         LBC2A     LDX  #V45           ; POINT X TO MANTISSA OF FPA4
EE5F 2006             (      exbasic.asm):03180                   BRA  LBC35          ; MOVE FPA0 TO FPA4
EE61 8E0040           (      exbasic.asm):03181         LBC2F     LDX  #V40           ; POINT X TO MANTISSA OF FPA3
EE64 8C               (      exbasic.asm):03182                   FCB  SKP2           ; SKIP TWO BYTES
EE65 9E3B             (      exbasic.asm):03183         LBC33     LDX  VARDES         ; POINT X TO VARIABLE DESCRIPTOR IN VARDES
                      (      exbasic.asm):03184         * PACK FPA0 AND MOVE IT TO ADDRESS IN X
EE67 964F             (      exbasic.asm):03185         LBC35     LDA  FP0EXP         ; * COPY EXPONENT
EE69 A784             (      exbasic.asm):03186                   STA  ,X             ; *
EE6B 9654             (      exbasic.asm):03187                   LDA  FP0SGN         ; GET MANTISSA SIGN BIT
EE6D 8A7F             (      exbasic.asm):03188                   ORA  #$7F           ; MASK THE BOTTOM 7 BITS
EE6F 9450             (      exbasic.asm):03189                   ANDA FPA0           ; AND BIT 7 OF MANTISSA SIGN INTO BIT 7 OF MS BYTE
EE71 A701             (      exbasic.asm):03190                   STA  1,X            ; SAVE MS BYTE
EE73 9651             (      exbasic.asm):03191                   LDA  FPA0+1         ; * MOVE 2ND MANTISSA BYTE
EE75 A702             (      exbasic.asm):03192                   STA  2,X            ; *
EE77 DE52             (      exbasic.asm):03193                   LDU  FPA0+2         ; = MOVE BOTTOM 2 MANTISSA BYTES
EE79 EF03             (      exbasic.asm):03194                   STU  3,X            ; =
EE7B 39               (      exbasic.asm):03195                   RTS
                      (      exbasic.asm):03196         * MOVE FPA1 TO FPA0 RETURN W/MANTISSA SIGN IN ACCA
EE7C 9661             (      exbasic.asm):03197         LBC4A     LDA  FP1SGN         ; * COPY MANTISSA SIGN FROM
EE7E 9754             (      exbasic.asm):03198         LBC4C     STA  FP0SGN         ; * FPA1 TO FPA0
EE80 9E5C             (      exbasic.asm):03199                   LDX  FP1EXP         ; = COPY EXPONENT + MS BYTE FROM
EE82 9F4F             (      exbasic.asm):03200                   STX  FP0EXP         ; = FPA1 TO FPA0
EE84 0F63             (      exbasic.asm):03201                   CLR  FPSBYT         ; CLEAR MANTISSA SUB BYTE
EE86 965E             (      exbasic.asm):03202                   LDA  FPA1+1         ; * COPY 2ND MANTISSA BYTE
EE88 9751             (      exbasic.asm):03203                   STA  FPA0+1         ; * FROM FPA1 TO FPA0
EE8A 9654             (      exbasic.asm):03204                   LDA  FP0SGN         ; GET MANTISSA SIGN
EE8C 9E5F             (      exbasic.asm):03205                   LDX  FPA1+2         ; * COPY 3RD AND 4TH MANTISSA BYTE
EE8E 9F52             (      exbasic.asm):03206                   STX  FPA0+2         ; * FROM FPA1 TO FPA0
EE90 39               (      exbasic.asm):03207                   RTS
                      (      exbasic.asm):03208         * TRANSFER FPA0 TO FPA1
EE91 DC4F             (      exbasic.asm):03209         LBC5F     LDD  FP0EXP         ; * TRANSFER EXPONENT & MS BYTE
EE93 DD5C             (      exbasic.asm):03210                   STD  FP1EXP         ; *
EE95 9E51             (      exbasic.asm):03211                   LDX  FPA0+1         ; = TRANSFER MIDDLE TWO BYTES
EE97 9F5E             (      exbasic.asm):03212                   STX  FPA1+1         ; =
EE99 9E53             (      exbasic.asm):03213                   LDX  FPA0+3         ; * TRANSFER BOTTOM TWO BYTES
EE9B 9F60             (      exbasic.asm):03214                   STX  FPA1+3         ; *
EE9D 4D               (      exbasic.asm):03215                   TSTA                ; SET FLAGS ACCORDING TO EXPONENT
EE9E 39               (      exbasic.asm):03216                   RTS
                      (      exbasic.asm):03217         * CHECK FPA0; RETURN ACCB = 0 IF FPA0 = 0,
                      (      exbasic.asm):03218         * ACCB = $FF IF FPA0 = NEGATIVE, ACCB = 1 IF FPA0 = POSITIVE
EE9F D64F             (      exbasic.asm):03219         LBC6D     LDB  FP0EXP         ; GET EXPONENT
EEA1 2708             (      exbasic.asm):03220                   BEQ  LBC79          ; BRANCH IF FPA0 = 0
EEA3 D654             (      exbasic.asm):03221         LBC71     LDB  FP0SGN         ; GET SIGN OF MANTISSA
EEA5 59               (      exbasic.asm):03222         LBC73     ROLB                ; BIT 7 TO CARRY
EEA6 C6FF             (      exbasic.asm):03223                   LDB  #$FF           ; NEGATIVE FLAG
EEA8 2501             (      exbasic.asm):03224                   BCS  LBC79          ; BRANCH IF NEGATIVE MANTISSA
EEAA 50               (      exbasic.asm):03225                   NEGB                ; ACCB = 1 IF POSITIVE MANTISSA
EEAB 39               (      exbasic.asm):03226         LBC79     RTS
                      (      exbasic.asm):03227         
                      (      exbasic.asm):03228         * SGN
EEAC 8DF1             (      exbasic.asm):03229         SGN       BSR  LBC6D          ; SET ACCB ACCORDING TO SIGN OF FPA0
                      (      exbasic.asm):03230         * CONVERT A SIGNED NUMBER IN ACCB INTO A FLOATING POINT NUMBER
EEAE D750             (      exbasic.asm):03231         LBC7C     STB  FPA0           ; SAVE ACCB IN FPA0
EEB0 0F51             (      exbasic.asm):03232                   CLR  FPA0+1         ; CLEAR NUMBER 2 MANTISSA BYTE OF FPA0
EEB2 C688             (      exbasic.asm):03233                   LDB  #$88           ; EXPONENT REQUIRED IF FPA0 IS TO BE AN INTEGER
EEB4 9650             (      exbasic.asm):03234         LBC82     LDA  FPA0           ; GET MS BYTE OF MANTISSA
EEB6 8080             (      exbasic.asm):03235                   SUBA #$80           ; SET CARRY IF POSITIVE MANTISSA
EEB8 D74F             (      exbasic.asm):03236         LBC86     STB  FP0EXP         ; SAVE EXPONENT
EEBA DC74             (      exbasic.asm):03237                   LDD  ZERO           ; * ZERO OUT ACCD AND
EEBC DD52             (      exbasic.asm):03238                   STD  FPA0+2         ; * BOTTOM HALF OF FPA0
EEBE 9763             (      exbasic.asm):03239                   STA  FPSBYT         ; CLEAR SUB BYTE
EEC0 9754             (      exbasic.asm):03240                   STA  FP0SGN         ; CLEAR SIGN OF FPA0 MANTISSA
EEC2 7EEC4A           (      exbasic.asm):03241                   JMP  LBA18          ; GO NORMALIZE FPA0
                      (      exbasic.asm):03242         
                      (      exbasic.asm):03243         * ABS
EEC5 0F54             (      exbasic.asm):03244         ABS       CLR  FP0SGN         ; FORCE MANTISSA SIGN OF FPA0 POSITIVE
EEC7 39               (      exbasic.asm):03245                   RTS
                      (      exbasic.asm):03246         * COMPARE A PACKED FLOATING POINT NUMBER POINTED TO
                      (      exbasic.asm):03247         * BY (X) TO AN UNPACKED FP NUMBER IN FPA0. RETURN
                      (      exbasic.asm):03248         * ZERO FLAG SET AND ACCB = 0, IF EQUAL; ACCB = 1 IF
                      (      exbasic.asm):03249         * FPA0 > (X); ACCB = $FF IF FPA0 < (X)
EEC8 E684             (      exbasic.asm):03250         LBC96     LDB  ,X             ; CHECK EXPONENT OF (X)
EECA 27D3             (      exbasic.asm):03251                   BEQ  LBC6D          ; BRANCH IF FPA = 0
EECC E601             (      exbasic.asm):03252                   LDB  1,X            ; GET MS BYTE OF MANTISSA OF (X)
EECE D854             (      exbasic.asm):03253                   EORB FP0SGN         ; EOR WITH SIGN OF FPA0
EED0 2BD1             (      exbasic.asm):03254                   BMI  LBC71          ; BRANCH IF SIGNS NOT =
                      (      exbasic.asm):03255         * COMPARE FPA0 WITH FP NUMBER POINTED TO BY (X).
                      (      exbasic.asm):03256         * FPA0 IS NORMALIZED, (X) IS PACKED.
EED2 D64F             (      exbasic.asm):03257         LBCA0     LDB  FP0EXP         ; * GET EXPONENT OF
EED4 E184             (      exbasic.asm):03258                   CMPB ,X             ; * FPA0, COMPARE TO EXPONENT OF
EED6 261D             (      exbasic.asm):03259                   BNE  LBCC3          ; * (X) AND BRANCH IF <>.
EED8 E601             (      exbasic.asm):03260                   LDB  1,X            ; * GET MS BYTE OF (X), KEEP ONLY
EEDA CA7F             (      exbasic.asm):03261                   ORB  #$7F           ; * THE SIGN BIT - 'AND' THE BOTTOM 7
EEDC D450             (      exbasic.asm):03262                   ANDB FPA0           ; * BITS OF FPA0 INTO ACCB
EEDE E101             (      exbasic.asm):03263                   CMPB 1,X            ; = COMPARE THE BOTTOM 7 BITS OF THE MANTISSA
EEE0 2613             (      exbasic.asm):03264                   BNE  LBCC3          ; = MS BYTE AND BRANCH IF <>
EEE2 D651             (      exbasic.asm):03265                   LDB  FPA0+1         ; * COMPARE 2ND BYTE
EEE4 E102             (      exbasic.asm):03266                   CMPB 2,X            ; * OF MANTISSA,
EEE6 260D             (      exbasic.asm):03267                   BNE  LBCC3          ; * BRANCH IF <>
EEE8 D652             (      exbasic.asm):03268                   LDB  FPA0+2         ; = COMPARE 3RD BYTE
EEEA E103             (      exbasic.asm):03269                   CMPB 3,X            ; = OF MANTISSA,
EEEC 2607             (      exbasic.asm):03270                   BNE  LBCC3          ; = BRANCH IF <>
EEEE D653             (      exbasic.asm):03271                   LDB  FPA0+3         ; * SUBTRACT LS BYTE
EEF0 E004             (      exbasic.asm):03272                   SUBB 4,X            ; * OF (X) FROM LS BYTE OF
EEF2 2601             (      exbasic.asm):03273                   BNE  LBCC3          ; * FPA0, BRANCH IF <>
EEF4 39               (      exbasic.asm):03274                   RTS                 ; RETURN IF FP (X) = FPA0
EEF5 56               (      exbasic.asm):03275         LBCC3     RORB                ; SHIFT CARRY TO BIT 7; CARRY SET IF FPA0 < (X)
EEF6 D854             (      exbasic.asm):03276                   EORB FP0SGN         ; TOGGLE SIZE COMPARISON BIT IF FPA0 IS NEGATIVE
EEF8 20AB             (      exbasic.asm):03277                   BRA  LBC73          ; GO SET ACCB ACCORDING TO COMPARISON
                      (      exbasic.asm):03278         * DE-NORMALIZE FPA0 : SHIFT THE MANTISSA UNTIL THE BINARY POINT IS TO THE RIGHT
                      (      exbasic.asm):03279         * OF THE LEAST SIGNIFICANT BYTE OF THE MANTISSA
EEFA D64F             (      exbasic.asm):03280         LBCC8     LDB  FP0EXP         ; GET EXPONENT OF FPA0
EEFC 273D             (      exbasic.asm):03281                   BEQ  LBD09          ; ZERO MANTISSA IF FPA0 = 0
EEFE C0A0             (      exbasic.asm):03282                   SUBB #$A0           ; SUBTRACT $A0 FROM FPA0 EXPONENT T THIS WILL YIELD
                      (      exbasic.asm):03283         *                             ; THE NUMBER OF SHIFTS REQUIRED TO DENORMALIZE FPA0. WHEN
                      (      exbasic.asm):03284         *                             ; THE EXPONENT OF FPA0 IS = ZERO, THEN THE BINARY POINT
                      (      exbasic.asm):03285         *                             ; WILL BE TO THE RIGHT OF THE MANTISSA
EF00 9654             (      exbasic.asm):03286                   LDA  FP0SGN         ; TEST SIGN OF FPA0 MANTISSA
EF02 2A05             (      exbasic.asm):03287                   BPL  LBCD7          ; BRANCH IF POSITIVE
EF04 035B             (      exbasic.asm):03288                   COM  FPCARY         ; COMPLEMENT CARRY IN BYTE
EF06 BDECAD           (      exbasic.asm):03289                   JSR  LBA7B          ; NEGATE MANTISSA OF FPA0
EF09 8E004F           (      exbasic.asm):03290         LBCD7     LDX  #FP0EXP        ; POINT X TO FPA0
EF0C C1F8             (      exbasic.asm):03291                   CMPB #-8            ; EXPONENT DIFFERENCE < -8?
EF0E 2E06             (      exbasic.asm):03292                   BGT  LBCE4          ; YES
EF10 BDECE0           (      exbasic.asm):03293                   JSR  LBAAE          ; SHIFT FPA0 RIGHT UNTIL FPA0 EXPONENT = $A0
EF13 0F5B             (      exbasic.asm):03294                   CLR  FPCARY         ; CLEAR CARRY IN BYTE
EF15 39               (      exbasic.asm):03295                   RTS
EF16 0F5B             (      exbasic.asm):03296         LBCE4     CLR  FPCARY         ; CLEAR CARRY IN BYTE
EF18 9654             (      exbasic.asm):03297                   LDA  FP0SGN         ; * GET SIGN OF FPA0 MANTISSA
EF1A 49               (      exbasic.asm):03298                   ROLA                ; * ROTATE IT INTO THE CARRY FLAG
EF1B 0650             (      exbasic.asm):03299                   ROR  FPA0           ; ROTATE CARRY (MANTISSA SIGN) INTO BIT 7
                      (      exbasic.asm):03300         *                             ; OF LS BYTE OF MANTISSA
EF1D 7EECEC           (      exbasic.asm):03301                   JMP  LBABA          ; DE-NORMALIZE FPA0
                      (      exbasic.asm):03302         
                      (      exbasic.asm):03303         * INT
                      (      exbasic.asm):03304         * THE INT STATEMENT WILL "DENORMALIZE" FPA0 - THAT IS IT WILL SHIFT THE BINARY POINT
                      (      exbasic.asm):03305         * TO THE EXTREME RIGHT OF THE MANTISSA TO FORCE ITS EXPONENT TO BE $AO. ONCE
                      (      exbasic.asm):03306         * THIS IS DONE THE MANTISSA OF FPA0 WILL CONTAIN THE FOUR LEAST SIGNIFICANT
                      (      exbasic.asm):03307         * BYTES OF THE INTEGER PORTION OF FPA0. AT THE CONCLUSION OF THE DE-NORMALIZATION
                      (      exbasic.asm):03308         * ONLY THE INTEGER PORTION OF FPA0 WILL REMAIN.
                      (      exbasic.asm):03309         *
EF20 D64F             (      exbasic.asm):03310         INT       LDB  FP0EXP         ; GET EXPONENT OF FPA0
EF22 C1A0             (      exbasic.asm):03311                   CMPB #$A0           ; LARGEST POSSIBLE INTEGER EXPONENT
EF24 241D             (      exbasic.asm):03312                   BCC  LBD11          ; RETURN IF FPA0 >= 32768
EF26 8DD2             (      exbasic.asm):03313                   BSR  LBCC8          ; SHIFT THE BINARY POINT ONE TO THE RIGHT OF THE
                      (      exbasic.asm):03314         *                             ; LS BYTE OF THE FPA0 MANTISSA
EF28 D763             (      exbasic.asm):03315                   STB  FPSBYT         ; ACCB = 0: ZERO OUT THE SUB BYTE
EF2A 9654             (      exbasic.asm):03316                   LDA  FP0SGN         ; GET MANTISSA SIGN
EF2C D754             (      exbasic.asm):03317                   STB  FP0SGN         ; FORCE MANTISSA SIGN TO BE POSITIVE
EF2E 8080             (      exbasic.asm):03318                   SUBA #$80           ; SET CARRY IF MANTISSA
EF30 86A0             (      exbasic.asm):03319                   LDA  #$A0           ; * GET DENORMALIZED EXPONENT AND
EF32 974F             (      exbasic.asm):03320                   STA  FP0EXP         ; * SAVE IT IN FPA0 EXPONENT
EF34 9653             (      exbasic.asm):03321                   LDA  FPA0+3         ; = GET LS BYTE OF FPA0 AND
EF36 9701             (      exbasic.asm):03322                   STA  CHARAC         ; = SAVE IT IN CHARAC
EF38 7EEC4A           (      exbasic.asm):03323                   JMP  LBA18          ; NORMALIZE FPA0
                      (      exbasic.asm):03324         
EF3B D750             (      exbasic.asm):03325         LBD09     STB  FPA0           ; * LOAD MANTISSA OF FPA0 WITH CONTENTS OF ACCB
EF3D D751             (      exbasic.asm):03326                   STB  FPA0+1         ; *
EF3F D752             (      exbasic.asm):03327                   STB  FPA0+2         ; *
EF41 D753             (      exbasic.asm):03328                   STB  FPA0+3         ; *
EF43 39               (      exbasic.asm):03329         LBD11     RTS                 ; *
                      (      exbasic.asm):03330         
                      (      exbasic.asm):03331         * CONVERT ASCII STRING TO FLOATING POINT
EF44 9E74             (      exbasic.asm):03332         LBD12     LDX  ZERO           ; (X) = 0
EF46 9F54             (      exbasic.asm):03333                   STX  FP0SGN         ; * ZERO OUT FPA0 & THE SIGN FLAG (COEFCT)
EF48 9F4F             (      exbasic.asm):03334                   STX  FP0EXP         ; *
EF4A 9F51             (      exbasic.asm):03335                   STX  FPA0+1         ; *
EF4C 9F52             (      exbasic.asm):03336                   STX  FPA0+2         ; *
EF4E 9F47             (      exbasic.asm):03337                   STX  V47            ; INITIALIZE EXPONENT & EXPONENT SIGN FLAG TO ZERO
EF50 9F45             (      exbasic.asm):03338                   STX  V45            ; INITIALIZE RIGHT DECIMAL CTR & DECIMAL PT FLAG TO 0
EF52 2564             (      exbasic.asm):03339                   BCS  LBD86          ; IF CARRY SET (NUMERIC CHARACTER), ASSUME ACCA CONTAINS FIRST
                      (      exbasic.asm):03340         *         NUMERIC CHAR, SIGN IS POSITIVE AND SKIP THE RAM HOOK
EF54 BDF681           (      exbasic.asm):03341                   JSR  XVEC19         ; CALL EXTENDED BASIC ADD-IN
EF57 812D             (      exbasic.asm):03342         LBD25     CMPA #'-            ; * CHECK FOR A LEADING MINUS SIGN AND BRANCH
EF59 2604             (      exbasic.asm):03343                   BNE  LBD2D          ; * IF NO MINUS SIGN
EF5B 0355             (      exbasic.asm):03344                   COM  COEFCT         ; TOGGLE SIGN; 0 = +; FF = -
EF5D 2004             (      exbasic.asm):03345                   BRA  LBD31          ; INTERPRET THE REST OF THE STRING
EF5F 812B             (      exbasic.asm):03346         LBD2D     CMPA #'+            ; * CHECK FOR LEADING PLUS SlGN AND BRANCH
EF61 2604             (      exbasic.asm):03347                   BNE  LBD35          ; * IF NOT A PLUS SIGN
EF63 9D7C             (      exbasic.asm):03348         LBD31     JSR  GETNCH         ; GET NEXT INPUT CHARACTER FROM BASIC
EF65 2551             (      exbasic.asm):03349                   BCS  LBD86          ; BRANCH IF NUMERIC CHARACTER
EF67 812E             (      exbasic.asm):03350         LBD35     CMPA #'.            ; DECIMAL POlNT?
EF69 2728             (      exbasic.asm):03351                   BEQ  LBD61          ; YES
EF6B 8145             (      exbasic.asm):03352                   CMPA #'E            ; "E" SHORTHAND FORM (SCIENTIFIC NOTATION)?
EF6D 2628             (      exbasic.asm):03353                   BNE  LBD65          ; NO
                      (      exbasic.asm):03354         * EVALUATE EXPONENT OF EXPONENTIAL FORMAT
EF6F 9D7C             (      exbasic.asm):03355                   JSR  GETNCH         ; GET NEXT INPUT CHARACTER FROM BASIC
EF71 2564             (      exbasic.asm):03356                   BCS  LBDA5          ; BRANCH IF NUMERIC
EF73 81A7             (      exbasic.asm):03357                   CMPA #TOK_MINUS     ; MINUS TOKEN?
EF75 270E             (      exbasic.asm):03358                   BEQ  LBD53          ; YES
EF77 812D             (      exbasic.asm):03359                   CMPA #'-            ; ASCII MINUS?
EF79 270A             (      exbasic.asm):03360                   BEQ  LBD53          ; YES
EF7B 81A6             (      exbasic.asm):03361                   CMPA #TOK_PLUS      ; PLUS TOKEN?
EF7D 2708             (      exbasic.asm):03362                   BEQ  LBD55          ; YES
EF7F 812B             (      exbasic.asm):03363                   CMPA #'+            ; ASCII PLUS?
EF81 2704             (      exbasic.asm):03364                   BEQ  LBD55          ; YES
EF83 2006             (      exbasic.asm):03365                   BRA  LBD59          ; BRANCH IF NO SIGN FOUND
EF85 0348             (      exbasic.asm):03366         LBD53     COM  V48            ; SET EXPONENT SIGN FLAG TO NEGATIVE
                      (      exbasic.asm):03367         * STRIP A DECIMAL NUMBER FROM BASIC LINE, CONVERT IT TO BINARY IN V47
EF87 9D7C             (      exbasic.asm):03368         LBD55     JSR  GETNCH         ; GET NEXT INPUT CHARACTER FROM BASIC
EF89 254C             (      exbasic.asm):03369                   BCS  LBDA5          ; IF NUMERIC CHARACTER, CONVERT TO BINARY
EF8B 0D48             (      exbasic.asm):03370         LBD59     TST  V48            ; * CHECK EXPONENT SIGN FLAG
EF8D 2708             (      exbasic.asm):03371                   BEQ  LBD65          ; * AND BRANCH IF POSITIVE
EF8F 0047             (      exbasic.asm):03372                   NEG  V47            ; NEGATE VALUE OF EXPONENT
EF91 2004             (      exbasic.asm):03373                   BRA  LBD65
EF93 0346             (      exbasic.asm):03374         LBD61     COM  V46            ; *TOGGLE DECIMAL PT FLAG AND INTERPRET ANOTHER
EF95 26CC             (      exbasic.asm):03375                   BNE  LBD31          ; *CHARACTER IF <> 0 - TERMINATE INTERPRETATION
                      (      exbasic.asm):03376         *         IF   SECOND DECIMAL POINT
                      (      exbasic.asm):03377         * ADJUST FPA0 FOR THE DECIMAL EXPONENT IN V47
EF97 9647             (      exbasic.asm):03378         LBD65     LDA  V47            ; * GET EXPONENT, SUBTRACT THE NUMBER OF
EF99 9045             (      exbasic.asm):03379                   SUBA V45            ; * PLACES TO THE RIGHT OF DECIMAL POINT
EF9B 9747             (      exbasic.asm):03380                   STA  V47            ; * AND RESAVE IT.
EF9D 2712             (      exbasic.asm):03381                   BEQ  LBD7F          ; EXIT ROUTINE IF ADJUSTED EXPONENT = ZERO
EF9F 2A09             (      exbasic.asm):03382                   BPL  LBD78          ; BRANCH IF POSITIVE EXPONENT
EFA1 BDEDB4           (      exbasic.asm):03383         LBD6F     JSR  LBB82          ; DIVIDE FPA0 BY 10
EFA4 0C47             (      exbasic.asm):03384                   INC  V47            ; INCREMENT EXPONENT COUNTER (MULTIPLY BY 10)
EFA6 26F9             (      exbasic.asm):03385                   BNE  LBD6F          ; KEEP MULTIPLYING
EFA8 2007             (      exbasic.asm):03386                   BRA  LBD7F          ; EXIT ROUTINE
EFAA BDED9C           (      exbasic.asm):03387         LBD78     JSR  LBB6A          ; MULTIPLY FPA0 BY 10
EFAD 0A47             (      exbasic.asm):03388                   DEC  V47            ; DECREMENT EXPONENT COUNTER (DIVIDE BY 10)
EFAF 26F9             (      exbasic.asm):03389                   BNE  LBD78          ; KEEP MULTIPLYING
EFB1 9655             (      exbasic.asm):03390         LBD7F     LDA  COEFCT         ; GET THE SIGN FLAG
EFB3 2A8E             (      exbasic.asm):03391                   BPL  LBD11          ; RETURN IF POSITIVE
EFB5 7EF11B           (      exbasic.asm):03392                   JMP  LBEE9          ; TOGGLE MANTISSA SIGN OF FPA0, IF NEGATIVE
                      (      exbasic.asm):03393         *MULTIPLY FPA0 BY TEN AND ADD ACCA TO THE RESULT
EFB8 D645             (      exbasic.asm):03394         LBD86     LDB  V45            ; *GET THE RIGHT DECIMAL COUNTER AND SUBTRACT
EFBA D046             (      exbasic.asm):03395                   SUBB V46            ; *THE DECIMAL POINT FLAG FROM IT. IF DECIMAL POINT
EFBC D745             (      exbasic.asm):03396                   STB  V45            ; *FLAG=0, NOTHING HAPPENS. IF DECIMAL POINT FLAG IS
                      (      exbasic.asm):03397         *                             -1, THEN RIGHT DECIMAL COUNTER IS INCREMENTED BY ONE
EFBE 3402             (      exbasic.asm):03398                   PSHS A              ; SAVE NEW DIGIT ON STACK
EFC0 BDED9C           (      exbasic.asm):03399                   JSR  LBB6A          ; MULTIPLY FPA0 BY 10
EFC3 3504             (      exbasic.asm):03400                   PULS B              ; GET NEW DIGIT BACK
EFC5 C030             (      exbasic.asm):03401                   SUBB #'0            ; MASK OFF ASCII
EFC7 8D02             (      exbasic.asm):03402                   BSR  LBD99          ; ADD ACCB TO FPA0
EFC9 2098             (      exbasic.asm):03403                   BRA  LBD31          ; GET ANOTHER CHARACTER FROM BASIC
EFCB BDEE61           (      exbasic.asm):03404         LBD99     JSR  LBC2F          ; PACK FPA0 AND SAVE IT IN FPA3
EFCE BDEEAE           (      exbasic.asm):03405                   JSR  LBC7C          ; CONVERT ACCB TO FP NUMBER IN FPA0
EFD1 8E0040           (      exbasic.asm):03406                   LDX  #V40           ; * ADD FPA0 TO
EFD4 7EEBF4           (      exbasic.asm):03407                   JMP  LB9C2          ; * FPA3
                      (      exbasic.asm):03408         
                      (      exbasic.asm):03409         
EFD7 D647             (      exbasic.asm):03410         LBDA5     LDB  V47
EFD9 58               (      exbasic.asm):03411                   ASLB                ; TIMES 2
EFDA 58               (      exbasic.asm):03412                   ASLB                ; TIMES 4
EFDB DB47             (      exbasic.asm):03413                   ADDB V47            ; ADD 1 = TIMES 5
EFDD 58               (      exbasic.asm):03414                   ASLB                ; TIMES 10
EFDE 8030             (      exbasic.asm):03415                   SUBA #'0            ; *MASK OFF ASCII FROM ACCA, PUSH
EFE0 3404             (      exbasic.asm):03416                   PSHS B              ; *RESULT ONTO THE STACK AND
EFE2 ABE0             (      exbasic.asm):03417                   ADDA ,S+            ; ADD lT TO ACCB
EFE4 9747             (      exbasic.asm):03418                   STA  V47            ; SAVE IN V47
EFE6 209F             (      exbasic.asm):03419                   BRA  LBD55          ; INTERPRET ANOTHER CHARACTER
                      (      exbasic.asm):03420         *
EFE8 9B3EBC1FFD       (      exbasic.asm):03421         LBDB6     FCB  $9B,$3E,$BC,$1F,$FD ; * 99999999.9
EFED 9E6E6B27FD       (      exbasic.asm):03422         LBDBB     FCB  $9E,$6E,$6B,$27,$FD ; * 999999999
EFF2 9E6E6B2800       (      exbasic.asm):03423         LBDC0     FCB  $9E,$6E,$6B,$28,$00 ; * 1E + 09
                      (      exbasic.asm):03424         *
EFF7 8EDE8D           (      exbasic.asm):03425         LBDC5     LDX  #LABE8-1       ; POINT X TO " IN " MESSAGE
EFFA 8D0C             (      exbasic.asm):03426                   BSR  LBDD6          ; COPY A STRING FROM (X) TO CONSOLE OUT
EFFC DC68             (      exbasic.asm):03427                   LDD  CURLIN         ; GET CURRENT BASIC LINE NUMBER TO ACCD
                      (      exbasic.asm):03428         * CONVERT VALUE IN ACCD INTO A DECIMAL NUMBER
                      (      exbasic.asm):03429         * AND PRINT IT TO CONSOLE OUT
EFFE DD50             (      exbasic.asm):03430         LBDCC     STD  FPA0           ; SAVE ACCD IN TOP HALF OF FPA0
F000 C690             (      exbasic.asm):03431                   LDB  #$90           ; REQ'D EXPONENT IF TOP HALF OF ACCD = INTEGER
F002 43               (      exbasic.asm):03432                   COMA                ; SET CARRY FLAG - FORCE POSITIVE MANTISSA
F003 BDEEB8           (      exbasic.asm):03433                   JSR  LBC86          ; ZERO BOTTOM HALF AND SIGN OF FPA0, THEN
                      (      exbasic.asm):03434         *         SAVE EXPONENT AND NORMALIZE IT
F006 8D03             (      exbasic.asm):03435                   BSR  LBDD9          ; CONVERT FP NUMBER TO ASCII STRING
F008 7EEBCE           (      exbasic.asm):03436         LBDD6     JMP  LB99C          ; COPY A STRING FROM (X) TO CONSOLE OUT
                      (      exbasic.asm):03437         
                      (      exbasic.asm):03438         * CONVERT FP NUMBER TO ASCII STRING
F00B CE01F1           (      exbasic.asm):03439         LBDD9     LDU  #STRBUF+3      ; POINT U TO BUFFER WHICH WILL NOT CAUSE
                      (      exbasic.asm):03440         *                             ; THE STRING TO BE STORED IN STRING SPACE
F00E 8620             (      exbasic.asm):03441         LBDDC     LDA  #SPACE         ; SPACE = DEFAULT SIGN FOR POSITIVE #
F010 D654             (      exbasic.asm):03442                   LDB  FP0SGN         ; GET SIGN OF FPA0
F012 2A02             (      exbasic.asm):03443                   BPL  LBDE4          ; BRANCH IF POSITIVE
F014 862D             (      exbasic.asm):03444                   LDA  #'-            ; ASCII MINUS SIGN
F016 A7C0             (      exbasic.asm):03445         LBDE4     STA  ,U+            ; STORE SIGN OF NUMBER
F018 DF64             (      exbasic.asm):03446                   STU  COEFPT         ; SAVE BUFFER POINTER
F01A 9754             (      exbasic.asm):03447                   STA  FP0SGN         ; SAVE SIGN (IN ASCII)
F01C 8630             (      exbasic.asm):03448                   LDA  #'0            ; ASCII ZERO IF EXPONENT = 0
F01E D64F             (      exbasic.asm):03449                   LDB  FP0EXP         ; GET FPA0 EXPONENT
F020 102700C6         (      exbasic.asm):03450                   LBEQ LBEB8          ; BRANCH IF FPA0 = 0
F024 4F               (      exbasic.asm):03451                   CLRA                ; BASE 10 EXPONENT=0 FOR FP NUMBER > 1
F025 C180             (      exbasic.asm):03452                   CMPB #$80           ; CHECK EXPONENT
F027 2208             (      exbasic.asm):03453                   BHI  LBDFF          ; BRANCH IF FP NUMBER > 1
                      (      exbasic.asm):03454         * IF FPA0 < 1.0, MULTIPLY IT BY 1E+09 TO SPEED UP THE CONVERSION PROCESS
F029 8EEFF2           (      exbasic.asm):03455                   LDX  #LBDC0         ; POINT X TO FP 1E+09
F02C BDECFC           (      exbasic.asm):03456                   JSR  LBACA          ; MULTIPLY FPA0 BY (X)
F02F 86F7             (      exbasic.asm):03457                   LDA  #-9            ; BASE 10 EXPONENT = -9
F031 9745             (      exbasic.asm):03458         LBDFF     STA  V45            ; BASE 10 EXPONENT
                      (      exbasic.asm):03459         * PSEUDO - NORMALIZE THE FP NUMBER TO A VALUE IN THE RANGE
                      (      exbasic.asm):03460         * OF 999,999,999 RO 99,999,999.9 - THIS IS THE LARGEST
                      (      exbasic.asm):03461         * NUMBER RANGE IN WHICH ALL OF THE DIGITS ARE
                      (      exbasic.asm):03462         * SIGNIFICANT WHICH CAN BE DISPLAYED WITHOUT USING
                      (      exbasic.asm):03463         * SCIENTIFIC NOTATION
F033 8EEFED           (      exbasic.asm):03464         LBE01     LDX  #LBDBB         ; POINT X TO FP 999,999,999
F036 BDEED2           (      exbasic.asm):03465                   JSR  LBCA0          ; COMPARE FPA0 TO 999,999,999
F039 2E0F             (      exbasic.asm):03466                   BGT  LBE18          ; BRANCH IF > 999,999,999
F03B 8EEFE8           (      exbasic.asm):03467         LBE09     LDX  #LBDB6         ; POINT X TO FP 99,999,999.9
F03E BDEED2           (      exbasic.asm):03468                   JSR  LBCA0          ; COMPARE FPA0 TO 99,999,999.9
F041 2E0E             (      exbasic.asm):03469                   BGT  LBE1F          ; BRANCH IF > 99,999,999.9 (IN RANGE)
F043 BDED9C           (      exbasic.asm):03470                   JSR  LBB6A          ; MULTIPLY FPA0 BY 10
F046 0A45             (      exbasic.asm):03471                   DEC  V45            ; SUBTRACT ONE FROM DECIMAL OFFSET
F048 20F1             (      exbasic.asm):03472                   BRA  LBE09          ; PSEUDO - NORMALIZE SOME MORE
F04A BDEDB4           (      exbasic.asm):03473         LBE18     JSR  LBB82          ; DIVIDE FPA0 BY 10
F04D 0C45             (      exbasic.asm):03474                   INC  V45            ; ADD ONE TO BASE 10 EXPONENT
F04F 20E2             (      exbasic.asm):03475                   BRA  LBE01          ; PSEUDO - NORMALIZE SOME MORE
F051 BDEBE6           (      exbasic.asm):03476         LBE1F     JSR  LB9B4          ; ADD .5 TO FPA0 (ROUND OFF)
F054 BDEEFA           (      exbasic.asm):03477                   JSR  LBCC8          ; CONVERT FPA0 TO AN INTEGER
F057 C601             (      exbasic.asm):03478                   LDB  #1             ; DEFAULT DECIMAL POINT FLAG (FORCE IMMED DECIMAL PT)
F059 9645             (      exbasic.asm):03479                   LDA  V45            ; * GET BASE 10 EXPONENT AND ADD TEN TO IT
F05B 8B0A             (      exbasic.asm):03480                   ADDA #9+1           ; * (NUMBER 'NORMALIZED' TO 9 PLACES & DECIMAL PT)
F05D 2B09             (      exbasic.asm):03481                   BMI  LBE36          ; BRANCH IF NUMBER < 1.0
F05F 810B             (      exbasic.asm):03482                   CMPA #9+2           ; NINE PLACES MAY BE DISPLAYED WITHOUT
                      (      exbasic.asm):03483         *         USING SCIENTIFIC NOTATION
F061 2405             (      exbasic.asm):03484                   BCC  LBE36          ; BRANCH IF SCIENTIFIC NOTATION REQUIRED
F063 4A               (      exbasic.asm):03485                   DECA                ; * SUBTRACT 1 FROM MODIFIED BASE 10 EXPONENT CTR
F064 1F89             (      exbasic.asm):03486                   TFR  A,B            ; * AND SAVE IT IN ACCB (DECiMAL POINT FLAG)
F066 8602             (      exbasic.asm):03487                   LDA  #2             ; FORCE EXPONENT = 0 - DON'T USE SCIENTIFIC NOTATION
F068 4A               (      exbasic.asm):03488         LBE36     DECA                ; * SUBTRACT TWO (WITHOUT AFFECTING CARRY)
F069 4A               (      exbasic.asm):03489                   DECA                ; * FROM BASE 10 EXPONENT
F06A 9747             (      exbasic.asm):03490                   STA  V47            ; SAVE EXPONENT - ZERO EXPONENT = DO NOT DISPLAY
                      (      exbasic.asm):03491         *         IN   SCIENTIFIC NOTATION
F06C D745             (      exbasic.asm):03492                   STB  V45            ; DECIMAL POINT FLAG - NUMBER OF PLACES TO
                      (      exbasic.asm):03493         *         LEFT OF DECIMAL POINT
F06E 2E0D             (      exbasic.asm):03494                   BGT  LBE4B          ; BRANCH IF >= 1
F070 DE64             (      exbasic.asm):03495                   LDU  COEFPT         ; POINT U TO THE STRING BUFFER
F072 862E             (      exbasic.asm):03496                   LDA  #'.            ; * STORE A PERIOD
F074 A7C0             (      exbasic.asm):03497                   STA  ,U+            ; * IN THE BUFFER
F076 5D               (      exbasic.asm):03498                   TSTB                ; CHECK DECIMAL POINT FLAG
F077 2704             (      exbasic.asm):03499                   BEQ  LBE4B          ; BRANCH IF NOTHING TO LEFT OF DECIMAL POINT
F079 8630             (      exbasic.asm):03500                   LDA  #'0            ; * STORE A ZERO
F07B A7C0             (      exbasic.asm):03501                   STA  ,U+            ; * IN THE BUFFER
                      (      exbasic.asm):03502         
                      (      exbasic.asm):03503         * CONVERT FPA0 INTO A STRING OF ASCII DIGITS
F07D 8EF0F7           (      exbasic.asm):03504         LBE4B     LDX  #LBEC5         ; POINT X TO FP POWER OF 10 MANTISSA
F080 C680             (      exbasic.asm):03505                   LDB  #0+$80         ; INITIALIZE DIGIT COUNTER TO 0+$80
                      (      exbasic.asm):03506         * BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA
                      (      exbasic.asm):03507         * IS NEGATIVE. WHEN YOU 'ADD' A NEGATIVE MANTISSA, IT IS
                      (      exbasic.asm):03508         * THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB IS HOW
                      (      exbasic.asm):03509         * THE ROUTINE KNOWS THAT A 'SUBTRACTION' IS OCCURING.
F082 9653             (      exbasic.asm):03510         LBE50     LDA  FPA0+3         ; * ADD MANTISSA LS
F084 AB03             (      exbasic.asm):03511                   ADDA 3,X            ; * BYTE OF FPA0
F086 9753             (      exbasic.asm):03512                   STA  FPA0+3         ; * AND (X)
F088 9652             (      exbasic.asm):03513                   LDA  FPA0+2         ; = ADD MANTISSA
F08A A902             (      exbasic.asm):03514                   ADCA 2,X            ; = NUMBER 3 BYTE OF
F08C 9752             (      exbasic.asm):03515                   STA  FPA0+2         ; = FPA0 AND (X)
F08E 9651             (      exbasic.asm):03516                   LDA  FPA0+1         ; * ADD MANTISSA
F090 A901             (      exbasic.asm):03517                   ADCA 1,X            ; * NUMBER 2 BYTE OF
F092 9751             (      exbasic.asm):03518                   STA  FPA0+1         ; * FPA0 AND (X)
F094 9650             (      exbasic.asm):03519                   LDA  FPA0           ; = ADD MANTISSA
F096 A984             (      exbasic.asm):03520                   ADCA ,X             ; = MS BYTE OF
F098 9750             (      exbasic.asm):03521                   STA  FPA0           ; = FPA0 AND (X)
F09A 5C               (      exbasic.asm):03522                   INCB                ; ADD ONE TO DIGIT COUNTER
F09B 56               (      exbasic.asm):03523                   RORB                ; ROTATE CARRY INTO BIT 7
F09C 59               (      exbasic.asm):03524                   ROLB                ; *SET OVERFLOW FLAG AND BRANCH IF CARRY = 1 AND
F09D 28E3             (      exbasic.asm):03525                   BVC  LBE50          ; *POSITIVE MANTISSA OR CARRY = 0 AND NEG MANTISSA
F09F 2403             (      exbasic.asm):03526                   BCC  LBE72          ; BRANCH IF NEGATIVE MANTISSA
F0A1 C00B             (      exbasic.asm):03527                   SUBB #10+1          ; * TAKE THE 9'S COMPLEMENT IF
F0A3 50               (      exbasic.asm):03528                   NEGB                ; * ADDING MANTISSA
F0A4 CB2F             (      exbasic.asm):03529         LBE72     ADDB #'0-1          ; ADD ASCII OFFSET TO DIGIT
F0A6 3004             (      exbasic.asm):03530                   LEAX 4,X            ; MOVE TO NEXT POWER OF 10 MANTISSA
F0A8 1F98             (      exbasic.asm):03531                   TFR  B,A            ; SAVE DIGIT IN ACCA
F0AA 847F             (      exbasic.asm):03532                   ANDA #$7F           ; MASK OFF BIT 7 (ADD/SUBTRACT FLAG)
F0AC A7C0             (      exbasic.asm):03533                   STA  ,U+            ; STORE DIGIT IN STRING BUFFER
F0AE 0A45             (      exbasic.asm):03534                   DEC  V45            ; DECREMENT DECIMAL POINT FLAG
F0B0 2604             (      exbasic.asm):03535                   BNE  LBE84          ; BRANCH IF NOT TIME FOR DECIMAL POINT
F0B2 862E             (      exbasic.asm):03536                   LDA  #'.            ; * STORE DECIMAL POINT IN
F0B4 A7C0             (      exbasic.asm):03537                   STA  ,U+            ; * STRING BUFFER
F0B6 53               (      exbasic.asm):03538         LBE84     COMB                ; TOGGLE BIT 7 (ADD/SUBTRACT FLAG)
F0B7 C480             (      exbasic.asm):03539                   ANDB #$80           ; MASK OFF ALL BUT ADD/SUBTRACT FLAG
F0B9 8CF11B           (      exbasic.asm):03540                   CMPX #LBEC5+36      ; COMPARE X TO END OF MANTISSA TABLE
F0BC 26C4             (      exbasic.asm):03541                   BNE  LBE50          ; BRANCH IF NOT AT END OF TABLE
                      (      exbasic.asm):03542         * BLANK TRAILING ZEROS AND STORE EXPONENT IF ANY
F0BE A6C2             (      exbasic.asm):03543         LBE8C     LDA  ,-U            ; GET THE LAST CHARACTER; MOVE POINTER BACK
F0C0 8130             (      exbasic.asm):03544                   CMPA #'0            ; WAS IT A ZERO?
F0C2 27FA             (      exbasic.asm):03545                   BEQ  LBE8C          ; IGNORE TRAILING ZEROS IF SO
F0C4 812E             (      exbasic.asm):03546                   CMPA #'.            ; CHECK FOR DECIMAL POINT
F0C6 2602             (      exbasic.asm):03547                   BNE  LBE98          ; BRANCH IF NOT DECIMAL POINT
F0C8 335F             (      exbasic.asm):03548                   LEAU -1,U           ; STEP OVER THE DECIMAL POINT
F0CA 862B             (      exbasic.asm):03549         LBE98     LDA  #'+            ; ASCII PLUS SIGN
F0CC D647             (      exbasic.asm):03550                   LDB  V47            ; GET SCIENTIFIC NOTATION EXPONENT
F0CE 271C             (      exbasic.asm):03551                   BEQ  LBEBA          ; BRANCH IF NOT SCIENTIFIC NOTATION
F0D0 2A03             (      exbasic.asm):03552                   BPL  LBEA3          ; BRANCH IF POSITIVE EXPONENT
F0D2 862D             (      exbasic.asm):03553                   LDA  #'-            ; ASCII MINUS SIGN
F0D4 50               (      exbasic.asm):03554                   NEGB                ; NEGATE EXPONENT IF NEGATIVE
F0D5 A742             (      exbasic.asm):03555         LBEA3     STA  2,U            ; STORE EXPONENT SIGN IN STRING
F0D7 8645             (      exbasic.asm):03556                   LDA  #'E            ; * GET ASCII 'E' (SCIENTIFIC NOTATION
F0D9 A741             (      exbasic.asm):03557                   STA  1,U            ; * FLAG) AND SAVE IT IN THE STRING
F0DB 862F             (      exbasic.asm):03558                   LDA  #'0-1          ; INITIALIZE ACCA TO ASCII ZERO
                      (      exbasic.asm):03559         
                      (      exbasic.asm):03560         
F0DD 4C               (      exbasic.asm):03561         LBEAB     INCA                ; ADD ONE TO 10'S DIGIT OF EXPONENT
F0DE C00A             (      exbasic.asm):03562                   SUBB #10            ; SUBTRACT 10 FROM ACCB
F0E0 24FB             (      exbasic.asm):03563                   BCC  LBEAB          ; ADD 1 TO 10'S DIGIT IF NO CARRY
F0E2 CB3A             (      exbasic.asm):03564                   ADDB #'9+1          ; CONVERT UNITS DIGIT TO ASCII
F0E4 ED43             (      exbasic.asm):03565                   STD  3,U            ; SAVE EXPONENT IN STRING
F0E6 6F45             (      exbasic.asm):03566                   CLR  5,U            ; CLEAR LAST BYTE (TERMINATOR)
F0E8 2004             (      exbasic.asm):03567                   BRA  LBEBC          ; GO RESET POINTER
F0EA A7C4             (      exbasic.asm):03568         LBEB8     STA  ,U             ; STORE LAST CHARACTER
F0EC 6F41             (      exbasic.asm):03569         LBEBA     CLR  1,U            ; CLEAR LAST BYTE (TERMINATOR - REQUIRED BY
                      (      exbasic.asm):03570         *         PRINT SUBROUTINES)
F0EE 8E01F1           (      exbasic.asm):03571         LBEBC     LDX  #STRBUF+3      ; RESET POINTER TO START OF BUFFER
F0F1 39               (      exbasic.asm):03572                   RTS
                      (      exbasic.asm):03573         *
F0F2 8000000000       (      exbasic.asm):03574         LBEC0     FCB  $80,$00,$00,$00,$00 ; FLOATING POINT .5
                      (      exbasic.asm):03575         *
                      (      exbasic.asm):03576         *** TABLE OF UNNORMALIZED POWERS OF 10
F0F7 FA0A1F00         (      exbasic.asm):03577         LBEC5     FCB  $FA,$0A,$1F,$00 ; -100000000
F0FB 00989680         (      exbasic.asm):03578         LBEC9     FCB  $00,$98,$96,$80 ; 10000000
F0FF FFF0BDC0         (      exbasic.asm):03579         LBECD     FCB  $FF,$F0,$BD,$C0 ; -1000000
F103 000186A0         (      exbasic.asm):03580         LBED1     FCB  $00,$01,$86,$A0 ; 100000
F107 FFFFD8F0         (      exbasic.asm):03581         LBED5     FCB  $FF,$FF,$D8,$F0 ; -10000
F10B 000003E8         (      exbasic.asm):03582         LBED9     FCB  $00,$00,$03,$E8 ; 1000
F10F FFFFFF9C         (      exbasic.asm):03583         LBEDD     FCB  $FF,$FF,$FF,$9C ; -100
F113 0000000A         (      exbasic.asm):03584         LBEE1     FCB  $00,$00,$00,$0A ; 10
F117 FFFFFFFF         (      exbasic.asm):03585         LBEE5     FCB  $FF,$FF,$FF,$FF ; -1
                      (      exbasic.asm):03586         *
                      (      exbasic.asm):03587         *
F11B 964F             (      exbasic.asm):03588         LBEE9     LDA  FP0EXP         ; GET EXPONENT OF FPA0
F11D 2702             (      exbasic.asm):03589                   BEQ  LBEEF          ; BRANCH IF FPA0 = 0
F11F 0354             (      exbasic.asm):03590                   COM  FP0SGN         ; TOGGLE MANTISSA SIGN OF FPA0
F121 39               (      exbasic.asm):03591         LBEEF     RTS
                      (      exbasic.asm):03592         * EXPAND A POLYNOMIAL OF THE FORM
                      (      exbasic.asm):03593         * AQ+BQ**3+CQ**5+DQ**7.... WHERE Q = FPA0
                      (      exbasic.asm):03594         * AND THE X REGISTER POINTS TO A TABLE OF
                      (      exbasic.asm):03595         * COEFFICIENTS A,B,C,D....
F122 9F64             (      exbasic.asm):03596         LBEF0     STX  COEFPT         ; SAVE COEFFICIENT TABLE POINTER
F124 BDEE61           (      exbasic.asm):03597                   JSR  LBC2F          ; MOVE FPA0 TO FPA3
F127 8D05             (      exbasic.asm):03598                   BSR  LBEFC          ; MULTIPLY FPA3 BY FPA0
F129 8D08             (      exbasic.asm):03599                   BSR  LBF01          ; EXPAND POLYNOMIAL
F12B 8E0040           (      exbasic.asm):03600                   LDX  #V40           ; POINT X TO FPA3
F12E 7EECFC           (      exbasic.asm):03601         LBEFC     JMP  LBACA          ; MULTIPLY (X) BY FPA0
                      (      exbasic.asm):03602         
                      (      exbasic.asm):03603         * CALCULATE THE VALUE OF AN EXPANDED POLYNOMIAL
                      (      exbasic.asm):03604         * EXPRESSION. ENTER WITH (X) POINTING TO A TABLE
                      (      exbasic.asm):03605         * OF COEFFICIENTS, THE FIRST BYTE OF WHICH IS THE
                      (      exbasic.asm):03606         * NUMBER OF (COEFFICIENTS-1) FOLLOWED BY THAT NUMBER
                      (      exbasic.asm):03607         * OF PACKED FLOATING POINT NUMBERS. THE
                      (      exbasic.asm):03608         * POLYNOMIAL IS EVALUATED AS FOLLOWS: VALUE =
                      (      exbasic.asm):03609         * (((FPA0*Y0+Y1)*FPA0+Y2)*FPA0...YN)
F131 9F64             (      exbasic.asm):03610         LBEFF     STX  COEFPT         ; SAVE COEFFICIENT TABLE POINTER
F133 BDEE5C           (      exbasic.asm):03611         LBF01     JSR  LBC2A          ; MOVE FPA0 TO FPA4
F136 9E64             (      exbasic.asm):03612                   LDX  COEFPT         ; GET THE COEFFICIENT POINTER
F138 E680             (      exbasic.asm):03613                   LDB  ,X+            ; GET THE TOP OF COEFFICIENT TABLE TO
F13A D755             (      exbasic.asm):03614                   STB  COEFCT         ; * USE AND STORE IT IN TEMPORARY COUNTER
F13C 9F64             (      exbasic.asm):03615                   STX  COEFPT         ; SAVE NEW COEFFICIENT POINTER
F13E 8DEE             (      exbasic.asm):03616         LBF0C     BSR  LBEFC          ; MULTIPLY (X) BY FPA0
F140 9E64             (      exbasic.asm):03617                   LDX  COEFPT         ; *GET COEFFICIENT POINTER
F142 3005             (      exbasic.asm):03618                   LEAX 5,X            ; *MOVE TO NEXT FP NUMBER
F144 9F64             (      exbasic.asm):03619                   STX  COEFPT         ; *SAVE NEW COEFFICIENT POINTER
F146 BDEBF4           (      exbasic.asm):03620                   JSR  LB9C2          ; ADD (X) AND FPA0
F149 8E0045           (      exbasic.asm):03621                   LDX  #V45           ; POINT (X) TO FPA4
F14C 0A55             (      exbasic.asm):03622                   DEC  COEFCT         ; DECREMENT TEMP COUNTER
F14E 26EE             (      exbasic.asm):03623                   BNE  LBF0C          ; BRANCH IF MORE COEFFICIENTS LEFT
F150 39               (      exbasic.asm):03624                   RTS
                      (      exbasic.asm):03625         
                      (      exbasic.asm):03626         * RND
F151 BDEE9F           (      exbasic.asm):03627         RND       JSR  LBC6D          ; TEST FPA0
F154 2B1F             (      exbasic.asm):03628                   BMI  LBF45          ; BRANCH IF FPA0 = NEGATIVE
F156 2715             (      exbasic.asm):03629                   BEQ  LBF3B          ; BRANCH IF FPA0 = 0
F158 8D10             (      exbasic.asm):03630                   BSR  LBF38          ; CONVERT FPA0 TO AN INTEGER
F15A BDEE61           (      exbasic.asm):03631                   JSR  LBC2F          ; PACK FPA0 TO FPA3
F15D 8D0E             (      exbasic.asm):03632                   BSR  LBF3B          ; GET A RANDOM NUMBER: FPA0 < 1.0
F15F 8E0040           (      exbasic.asm):03633                   LDX  #V40           ; POINT (X) TO FPA3
F162 8DCA             (      exbasic.asm):03634                   BSR  LBEFC          ; MULTIPLY (X) BY FPA0
F164 8EECF7           (      exbasic.asm):03635                   LDX  #LBAC5         ; POINT (X) TO FP VALUE OF 1.0
F167 BDEBF4           (      exbasic.asm):03636                   JSR  LB9C2          ; ADD 1.0 TO FPA0
F16A 7EEF20           (      exbasic.asm):03637         LBF38     JMP  INT            ; CONVERT FPA0 TO AN INTEGER
                      (      exbasic.asm):03638         * CALCULATE A RANDOM NUMBER IN THE RANGE 0.0 < X <= 1.0
F16D 9EB1             (      exbasic.asm):03639         LBF3B     LDX  RVSEED+1       ; * MOVE VARIABLE
F16F 9F50             (      exbasic.asm):03640                   STX  FPA0           ; * RANDOM NUMBER
F171 9EB3             (      exbasic.asm):03641                   LDX  RVSEED+3       ; * SEED TO
F173 9F52             (      exbasic.asm):03642                   STX  FPA0+2         ; * FPA0
F175 BEF1A2           (      exbasic.asm):03643         LBF45     LDX  RSEED          ; = MOVE FIXED
F178 9F5D             (      exbasic.asm):03644                   STX  FPA1           ; = RANDOM NUMBER
F17A BEF1A4           (      exbasic.asm):03645                   LDX  RSEED+2        ; = SEED TO
F17D 9F5F             (      exbasic.asm):03646                   STX  FPA1+2         ; = MANTISSA OF FPA0
F17F BDED02           (      exbasic.asm):03647                   JSR  LBAD0          ; MULTIPLY FPA0 X FPA1
F182 DC8A             (      exbasic.asm):03648                   LDD  VAD            ; GET THE TWO LOWEST ORDER PRODUCT BYTES
F184 C3658B           (      exbasic.asm):03649                   ADDD #$658B         ; ADD A CONSTANT
F187 DDB3             (      exbasic.asm):03650                   STD  RVSEED+3       ; SAVE NEW LOW ORDER VARIABLE RANDOM # SEED
F189 DD52             (      exbasic.asm):03651                   STD  FPA0+2         ; SAVE NEW LOW ORDER BYTES OF FPA0 MANTISSA
F18B DC88             (      exbasic.asm):03652                   LDD  VAB            ; GET 2 MORE LOW ORDER PRODUCT BYTES
F18D C9B0             (      exbasic.asm):03653                   ADCB #$B0           ; ADD A CONSTANT
F18F 8905             (      exbasic.asm):03654                   ADCA #5             ; ADD A CONSTANT
F191 DDB1             (      exbasic.asm):03655                   STD  RVSEED+1       ; SAVE NEW HIGH ORDER VARIABLE RANDOM # SEED
F193 DD50             (      exbasic.asm):03656                   STD  FPA0           ; SAVE NEW HIGH ORDER FPA0 MANTISSA
F195 0F54             (      exbasic.asm):03657                   CLR  FP0SGN         ; FORCE FPA0 MANTISSA = POSITIVE
F197 8680             (      exbasic.asm):03658                   LDA  #$80           ; * SET FPA0 BIASED EXPONENT
F199 974F             (      exbasic.asm):03659                   STA  FP0EXP         ; * TO 0 1 < FPA0 < 0
F19B 9615             (      exbasic.asm):03660                   LDA  FPA2+2         ; GET A BYTE FROM FPA2 (MORE RANDOMNESS)
F19D 9763             (      exbasic.asm):03661                   STA  FPSBYT         ; SAVE AS SUB BYTE
F19F 7EEC4E           (      exbasic.asm):03662                   JMP  LBA1C          ; NORMALIZE FPA0
                      (      exbasic.asm):03663         *
F1A2 40E6             (      exbasic.asm):03664         RSEED     FDB  $40E6          ; *CONSTANT RANDOM NUMBER GENERATOR SEED
F1A4 4DAB             (      exbasic.asm):03665                   FDB  $4DAB          ; *
                      (      exbasic.asm):03666         
                      (      exbasic.asm):03667         * SIN
                      (      exbasic.asm):03668         * THE SIN FUNCTION REQUIRES AN ARGUMENT IN RADIANS AND WILL REPEAT ITSELF EVERY
                      (      exbasic.asm):03669         * 2*PI RADIANS. THE ARGUMENT IS DIVIDED BY 2*PI AND ONLY THE FRACTIONAL PART IS
                      (      exbasic.asm):03670         * RETAINED. SINCE THE ARGUMENT WAS DIVIDED BY 2*P1, THE COEFFICIENTS MUST BE
                      (      exbasic.asm):03671         * MULTIPLIED BY THE APPROPRIATE POWER OF 2*PI.
                      (      exbasic.asm):03672         
                      (      exbasic.asm):03673         * SIN IS EVALUATED USING THE TRIGONOMETRIC IDENTITIES BELOW:
                      (      exbasic.asm):03674         * SIN(X)=SIN(PI-X) & -SIN(PI/2-X)=SIN((3*PI)/2+X)
F1A6 BDEE91           (      exbasic.asm):03675         SIN       JSR  LBC5F          ; COPY FPA0 TO FPA1
F1A9 8EF1EB           (      exbasic.asm):03676                   LDX  #LBFBD         ; POINT (X) TO 2*PI
F1AC D661             (      exbasic.asm):03677                   LDB  FP1SGN         ; *GET MANTISSA SIGN OF FPA1
F1AE BDEDBB           (      exbasic.asm):03678                   JSR  LBB89          ; *AND DIVIDE FPA0 BY 2*PI
F1B1 BDEE91           (      exbasic.asm):03679                   JSR  LBC5F          ; COPY FPA0 TO FPA1
F1B4 8DB4             (      exbasic.asm):03680                   BSR  LBF38          ; CONVERT FPA0 TO AN INTEGER
F1B6 0F62             (      exbasic.asm):03681                   CLR  RESSGN         ; SET RESULT SIGN = POSITIVE
F1B8 965C             (      exbasic.asm):03682                   LDA  FP1EXP         ; *GET EXPONENT OF FPA1
F1BA D64F             (      exbasic.asm):03683                   LDB  FP0EXP         ; *GET EXPONENT OF FPA0
F1BC BDEBEE           (      exbasic.asm):03684                   JSR  LB9BC          ; *SUBTRACT FPA0 FROM FPA1
                      (      exbasic.asm):03685         * NOW FPA0 CONTAINS ONLY THE FRACTIONAL PART OF ARGUMENT/2*PI
F1BF 8EF1F0           (      exbasic.asm):03686                   LDX  #LBFC2         ; POINT X TO FP (.25)
F1C2 BDEBEB           (      exbasic.asm):03687                   JSR  LB9B9          ; SUBTRACT FPA0 FROM .25 (PI/2)
F1C5 9654             (      exbasic.asm):03688                   LDA  FP0SGN         ; GET MANTISSA SIGN OF FPA0
F1C7 3402             (      exbasic.asm):03689                   PSHS A              ; SAVE IT ON STACK
F1C9 2A09             (      exbasic.asm):03690                   BPL  LBFA6          ; BRANCH IF MANTISSA POSITIVE
F1CB BDEBE6           (      exbasic.asm):03691                   JSR  LB9B4          ; ADD .5 (PI) TO FPA0
F1CE 9654             (      exbasic.asm):03692                   LDA  FP0SGN         ; GET SIGN OF FPA0
F1D0 2B05             (      exbasic.asm):03693                   BMI  LBFA9          ; BRANCH IF NEGATIVE
F1D2 030A             (      exbasic.asm):03694                   COM  RELFLG         ; COM IF +(3*PI)/2 >= ARGUMENT >+ PI/2 (QUADRANT FLAG)
F1D4 BDF11B           (      exbasic.asm):03695         LBFA6     JSR  LBEE9          ; TOGGLE MANTISSA SIGN OF FPA0
F1D7 8EF1F0           (      exbasic.asm):03696         LBFA9     LDX  #LBFC2         ; POINT X TO FP (.25)
F1DA BDEBF4           (      exbasic.asm):03697                   JSR  LB9C2          ; ADD .25 (PI/2) TO FPA0
F1DD 3502             (      exbasic.asm):03698                   PULS A              ; GET OLD MANTISSA SIGN
F1DF 4D               (      exbasic.asm):03699                   TSTA                ; * BRANCH IF OLD
F1E0 2A03             (      exbasic.asm):03700                   BPL  LBFB7          ; * SIGN WAS POSITIVE
F1E2 BDF11B           (      exbasic.asm):03701                   JSR  LBEE9          ; TOGGLE MANTISSA SIGN
F1E5 8EF1F5           (      exbasic.asm):03702         LBFB7     LDX  #LBFC7         ; POINT X TO TABLE OF COEFFICIENTS
F1E8 7EF122           (      exbasic.asm):03703                   JMP  LBEF0          ; GO CALCULATE POLYNOMIAL VALUE
                      (      exbasic.asm):03704         
F1EB 83490FDAA2       (      exbasic.asm):03705         LBFBD     FCB  $83,$49,$0F,$DA,$A2 ; 6.28318531 (2*PI)
F1F0 7F00000000       (      exbasic.asm):03706         LBFC2     FCB  $7F,$00,$00,$00,$00 ; .25
                      (      exbasic.asm):03707         
                      (      exbasic.asm):03708         
F1F5 05               (      exbasic.asm):03709         LBFC7     FCB  6-1            ; SIX COEFFICIENTS
F1F6 84E61A2D1B       (      exbasic.asm):03710         LBFC8     FCB  $84,$E6,$1A,$2D,$1B ; * -((2*PI)**11)/11!
F1FB 862807FBF8       (      exbasic.asm):03711         LBFCD     FCB  $86,$28,$07,$FB,$F8 ; * ((2*PI)**9)/9!
F200 8799688901       (      exbasic.asm):03712         LBFD2     FCB  $87,$99,$68,$89,$01 ; * -((2*PI)**7)/7!
F205 872335DFE1       (      exbasic.asm):03713         LBFD7     FCB  $87,$23,$35,$DF,$E1 ; * ((2*PI)**5)/5!
F20A 86A55DE728       (      exbasic.asm):03714         LBFDC     FCB  $86,$A5,$5D,$E7,$28 ; * -((2*PI)**3)/3!
F20F 83490FDAA2       (      exbasic.asm):03715         LBFE1     FCB  $83,$49,$0F,$DA,$A2 ; *
                      (      exbasic.asm):03716         
F214 A154468F13       (      exbasic.asm):03717                   FCB  $A1,$54,$46,$8F,$13 ; UNUSED GARBAGE BYTES
F219 8F524389CD       (      exbasic.asm):03718                   FCB  $8F,$52,$43,$89,$CD ; UNUSED GARBAGE BYTES
                      (      exbasic.asm):03719         * EXTENDED BASIC
                      (      exbasic.asm):03720         
                      (      exbasic.asm):03721         * COS
                      (      exbasic.asm):03722         * THE VALUE OF COS(X) IS DETERMINED BY THE TRIG IDENTITY COS(X)=SIN((PI/2)+X)
F21E 8EF251           (      exbasic.asm):03723         COS       LDX  #L83AB         ; POINT X TO FP CONSTANT (P1/2)
F221 BDEBF4           (      exbasic.asm):03724                   JSR  LB9C2          ; ADD FPA0 TO (X)
F224 7EF1A6           (      exbasic.asm):03725         L837E     JMP  SIN            ; JUMP TO SIN ROUTINE
                      (      exbasic.asm):03726         
                      (      exbasic.asm):03727         * TAN
                      (      exbasic.asm):03728         * THE VALUE OF TAN(X) IS DETERMINED BY THE TRIG IDENTITY TAN(X)=SIN(X)/COS(X)
F227 BDEE61           (      exbasic.asm):03729         TAN       JSR  LBC2F          ; PACK FPA0 AND MOVE IT TO FPA3
F22A 0F0A             (      exbasic.asm):03730                   CLR  RELFLG         ; RESET QUADRANT FLAG
F22C 8DF6             (      exbasic.asm):03731                   BSR  L837E          ; CALCULATE SIN OF ARGUMENT
F22E 8E004A           (      exbasic.asm):03732                   LDX  #V4A           ; POINT X TO FPA5
F231 BDEE67           (      exbasic.asm):03733                   JSR  LBC35          ; PACK FPA0 AND MOVE IT TO FPA5
F234 8E0040           (      exbasic.asm):03734                   LDX  #V40           ; POINT X TO FPA3
F237 BDEE46           (      exbasic.asm):03735                   JSR  LBC14          ; MOVE FPA3 TO FPA0
F23A 0F54             (      exbasic.asm):03736                   CLR  FP0SGN         ; FORCE FPA0 MANTISSA TO BE POSITIVE
F23C 960A             (      exbasic.asm):03737                   LDA  RELFLG         ; GET THE QUADRANT FLAG - COS NEGATIVE IN QUADS 2,3
F23E 8D0C             (      exbasic.asm):03738                   BSR  L83A6          ; CALCULATE VALUE OF COS(FPA0)
F240 0D4F             (      exbasic.asm):03739                   TST  FP0EXP         ; CHECK EXPONENT OF FPA0
F242 1027FA7E         (      exbasic.asm):03740                   LBEQ LBA92          ; ''OV' ERROR IF COS(X)=0
F246 8E004A           (      exbasic.asm):03741                   LDX  #V4A           ; POINT X TO FPA5
F249 7EEDC1           (      exbasic.asm):03742         L83A3     JMP  LBB8F          ; DIVIDE (X) BY FPA0 - SIN(X)/COS(X)
F24C 3402             (      exbasic.asm):03743         L83A6     PSHS A              ; SAVE SIGN FLAG ON STACK
F24E 7EF1D4           (      exbasic.asm):03744                   JMP  LBFA6          ; EXPAND POLYNOMIAL
                      (      exbasic.asm):03745         
F251 81490FDAA2       (      exbasic.asm):03746         L83AB     FCB  $81,$49,$0F,$DA,$A2 ; 1.57079633 (PI/2)
                      (      exbasic.asm):03747         
                      (      exbasic.asm):03748         * ATN
                      (      exbasic.asm):03749         * A 12 TERM TAYLOR SERIES IS USED TO EVALUATE THE
                      (      exbasic.asm):03750         * ARCTAN EXPRESSION. TWO  DIFFERENT FORMULI ARE USED
                      (      exbasic.asm):03751         * TO EVALUATE THE EXPRESSION DEPENDING UPON
                      (      exbasic.asm):03752         * WHETHER OR NOT THE ARGUMENT SQUARED IS > OR < 1.0
                      (      exbasic.asm):03753         
                      (      exbasic.asm):03754         * IF X**2<1 THEN ATN=X-(X**3)/3+(X**5)/5-(X**7)/7. . .
                      (      exbasic.asm):03755         * IF X**2>=1 THEN ATN=PI/2-(1/X-1/((X**3)*3)+(1/((X**5)*5)-. . .)
                      (      exbasic.asm):03756         
F256 9654             (      exbasic.asm):03757         ATN       LDA  FP0SGN         ; * GET THE SIGN OF THE MANTISSA AND
F258 3402             (      exbasic.asm):03758                   PSHS A              ; * SAVE IT ON THE STACK
F25A 2A02             (      exbasic.asm):03759                   BPL  L83B8          ; BRANCH IF POSITIVE MANTISSA
F25C 8D24             (      exbasic.asm):03760                   BSR  L83DC          ; CHANGE SIGN OF FPA0
F25E 964F             (      exbasic.asm):03761         L83B8     LDA  FP0EXP         ; * GET EXPONENT OF FPA0 AND
F260 3402             (      exbasic.asm):03762                   PSHS A              ; * SAVE IT ON THE STACK
F262 8181             (      exbasic.asm):03763                   CMPA #$81           ; IS FPAO < 1.0?
F264 2505             (      exbasic.asm):03764                   BLO  L83C5          ; YES
F266 8EECF7           (      exbasic.asm):03765                   LDX  #LBAC5         ; POINT X TO FP CONSTANT 1.0
F269 8DDE             (      exbasic.asm):03766                   BSR  L83A3          ; GET RECIPROCAL OF FPA0
F26B 8EF286           (      exbasic.asm):03767         L83C5     LDX  #L83E0         ; POINT (X) TO TAYLOR SERIES COEFFICIENTS
F26E BDF122           (      exbasic.asm):03768                   JSR  LBEF0          ; EXPAND POLYNOMIAL
F271 3502             (      exbasic.asm):03769                   PULS A              ; GET EXPONENT OF ARGUMENT
F273 8181             (      exbasic.asm):03770                   CMPA #$81           ; WAS ARGUMENT < 1.0?
F275 2506             (      exbasic.asm):03771                   BLO  L83D7          ; YES
F277 8EF251           (      exbasic.asm):03772                   LDX  #L83AB         ; POINT (X) TO FP NUMBER (PI/2)
F27A BDEBEB           (      exbasic.asm):03773                   JSR  LB9B9          ; SUBTRACT FPA0 FROM (PI/2)
F27D 3502             (      exbasic.asm):03774         L83D7     PULS A              ; * GET SIGN OF INITIAL ARGUMENT MANTISSA
F27F 4D               (      exbasic.asm):03775                   TSTA                ; * AND SET FLAGS ACCORDING TO IT
F280 2A03             (      exbasic.asm):03776                   BPL  L83DF          ; RETURN IF ARGUMENT WAS POSITIVE
F282 7EF11B           (      exbasic.asm):03777         L83DC     JMP  LBEE9          ; CHANGE MANTISSA SIGN OF FPA0
F285 39               (      exbasic.asm):03778         L83DF     RTS
                      (      exbasic.asm):03779         *
                      (      exbasic.asm):03780         * TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR ARCTANGENT
F286 0B               (      exbasic.asm):03781         L83E0     FCB  $0B            ; TWELVE COEFFICIENTS
F287 76B383BDD3       (      exbasic.asm):03782         L83E1     FCB  $76,$B3,$83,$BD,$D3 ; -6.84793912E-04 1/23
F28C 791EF4A6F5       (      exbasic.asm):03783         L83E6     FCB  $79,$1E,$F4,$A6,$F5 ; +4.85094216E-03 1/21
F291 7B83FCB010       (      exbasic.asm):03784         L83EB     FCB  $7B,$83,$FC,$B0,$10 ; -0.0161117018
F296 7C0C1F67CA       (      exbasic.asm):03785         L83F0     FCB  $7C,$0C,$1F,$67,$CA ; 0.0342096381
F29B 7CDE53CBC1       (      exbasic.asm):03786         L83F5     FCB  $7C,$DE,$53,$CB,$C1 ; -0.0542791328
F2A0 7D1464704C       (      exbasic.asm):03787         L83FA     FCB  $7D,$14,$64,$70,$4C ; 0.0724571965
F2A5 7DB7EA517A       (      exbasic.asm):03788         L83FF     FCB  $7D,$B7,$EA,$51,$7A ; -0.0898023954
F2AA 7D6330887E       (      exbasic.asm):03789         L8404     FCB  $7D,$63,$30,$88,$7E ; 0.110932413
F2AF 7E9244993A       (      exbasic.asm):03790         L8409     FCB  $7E,$92,$44,$99,$3A ; -0.142839808
F2B4 7E4CCC91C7       (      exbasic.asm):03791         L840E     FCB  $7E,$4C,$CC,$91,$C7 ; 0.199999121
F2B9 7FAAAAAA13       (      exbasic.asm):03792         L8413     FCB  $7F,$AA,$AA,$AA,$13 ; -0.333333316
F2BE 8100000000       (      exbasic.asm):03793         L8418     FCB  $81,$00,$00,$00,$00 ; 1
                      (      exbasic.asm):03794         *
                      (      exbasic.asm):03795         *** TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR LN(X)
                      (      exbasic.asm):03796         *
F2C3 03               (      exbasic.asm):03797         L841D     FCB  3              ; FOUR COEFFICIENTS
F2C4 7F5E56CB79       (      exbasic.asm):03798         L841E     FCB  $7F,$5E,$56,$CB,$79 ; 0.434255942
F2C9 80139B0B64       (      exbasic.asm):03799         L8423     FCB  $80,$13,$9B,$0B,$64 ; 0.576584541
F2CE 8076389316       (      exbasic.asm):03800         L8428     FCB  $80,$76,$38,$93,$16 ; 0.961800759
F2D3 8238AA3B20       (      exbasic.asm):03801         L842D     FCB  $82,$38,$AA,$3B,$20 ; 2.88539007
                      (      exbasic.asm):03802         
F2D8 803504F334       (      exbasic.asm):03803         L8432     FCB  $80,$35,$04,$F3,$34 ; 1/SQR(2)
                      (      exbasic.asm):03804         
F2DD 813504F334       (      exbasic.asm):03805         L8437     FCB  $81,$35,$04,$F3,$34 ; SQR(2)
                      (      exbasic.asm):03806         
F2E2 8080000000       (      exbasic.asm):03807         L843C     FCB  $80,$80,$00,$00,$00 ; -0.5
                      (      exbasic.asm):03808         
F2E7 80317217F8       (      exbasic.asm):03809         L8441     FCB  $80,$31,$72,$17,$F8 ; LN(2)
                      (      exbasic.asm):03810         *
                      (      exbasic.asm):03811         * LOG - NATURAL LOGARITHM (LN)
                      (      exbasic.asm):03812         
                      (      exbasic.asm):03813         * THE NATURAL OR NAPERIAN LOGARITHM IS CALCULATED USING
                      (      exbasic.asm):03814         * MATHEMATICAL IDENTITIES. FPA0 IS OF THE FORM FPA0=A*(2**B) (SCIENTIFIC
                      (      exbasic.asm):03815         * NOTATION). THEREFORE, THE LOG ROUTINE DETERMINES THE VALUE OF
                      (      exbasic.asm):03816         * LN(A*(2**B)). A SERIES OF MATHEMATICAL IDENTITIES WILL EXPAND THIS
                      (      exbasic.asm):03817         * TERM: LN(A*(2**B))=(-1/2+(1/LN(2))*(LN(A*SQR(2)))+B)*LN(2). ALL OF
                      (      exbasic.asm):03818         * THE TERMS OF THE LATTER EXPRESSION ARE CONSTANTS EXCEPT FOR THE
                      (      exbasic.asm):03819         * LN(A*SQR(2)) TERM WHICH IS EVALUATED USING THE TAYLOR SERIES EXPANSION
F2EC BDEE9F           (      exbasic.asm):03820         LOG       JSR  LBC6D          ; CHECK STATUS OF FPA0
F2EF 102FF3C4         (      exbasic.asm):03821                   LBLE LB44A          ; 'FC' ERROR IF NEGATIVE OR ZERO
F2F3 8EF2D8           (      exbasic.asm):03822                   LDX  #L8432         ; POINT (X) TO FP NUMBER (1/SQR(2))
F2F6 964F             (      exbasic.asm):03823                   LDA  FP0EXP         ; *GET EXPONENT OF ARGUMENT
F2F8 8080             (      exbasic.asm):03824                   SUBA #$80           ; *SUBTRACT OFF THE BIAS AND
F2FA 3402             (      exbasic.asm):03825                   PSHS A              ; *SAVE IT ON THE STACK
F2FC 8680             (      exbasic.asm):03826                   LDA  #$80
F2FE 974F             (      exbasic.asm):03827                   STA  FP0EXP
F300 BDEBF4           (      exbasic.asm):03828                   JSR  LB9C2          ; ADD FPA0 TO (X)
F303 8EF2DD           (      exbasic.asm):03829                   LDX  #L8437         ; POINT X TO SQR(2)
F306 BDEDC1           (      exbasic.asm):03830                   JSR  LBB8F          ; DIVIDE SQR(2) BY FPA0
F309 8EECF7           (      exbasic.asm):03831                   LDX  #LBAC5         ; POINT X TO FP VALUE OF 1.00
F30C BDEBEB           (      exbasic.asm):03832                   JSR  LB9B9          ; SUBTRACT FPA0 FROM (X)
                      (      exbasic.asm):03833         *         NOW  FPA0 = (1-SQR(2)*X)/(1+SQR(2)*X) WHERE X IS ARGUMENT
F30F 8EF2C3           (      exbasic.asm):03834                   LDX  #L841D         ; POINT X TO TABLE OF COEFFICIENTS
F312 BDF122           (      exbasic.asm):03835                   JSR  LBEF0          ; EXPAND POLYNOMIAL
F315 8EF2E2           (      exbasic.asm):03836                   LDX  #L843C         ; POINT X TO FP VALUE OF (-.5)
F318 BDEBF4           (      exbasic.asm):03837                   JSR  LB9C2          ; ADD FPA0 TO X
F31B 3504             (      exbasic.asm):03838                   PULS B              ; GET EXPONENT OF ARGUMENT BACK (WITHOUT BIAS)
F31D BDEFCB           (      exbasic.asm):03839                   JSR  LBD99          ; ADD ACCB TO FPA0
F320 8EF2E7           (      exbasic.asm):03840                   LDX  #L8441         ; POINT X TO LN(2)
F323 7EECFC           (      exbasic.asm):03841                   JMP  LBACA          ; MULTIPLY FPA0 * LN(2)
                      (      exbasic.asm):03842         
                      (      exbasic.asm):03843         * SQR
F326 BDEE91           (      exbasic.asm):03844         SQR       JSR  LBC5F          ; MOVE FPA0 TO FPA1
F329 8EF0F2           (      exbasic.asm):03845                   LDX  #LBEC0         ; POINT (X) TO FP NUMBER (.5)
F32C BDEE46           (      exbasic.asm):03846                   JSR  LBC14          ; COPY A PACKED NUMBER FROM (X) TO FPA0
                      (      exbasic.asm):03847         
                      (      exbasic.asm):03848         * ARITHMETIC OPERATOR FOR EXPONENTIATION JUMPS
                      (      exbasic.asm):03849         * HERE. THE FORMULA USED TO EVALUATE EXPONENTIATION
                      (      exbasic.asm):03850         * IS A**X=E**(X LN A) = E**(FPA0*LN(FPA1)), E=2.7182818
F32F 2767             (      exbasic.asm):03851         L8489     BEQ  EXP            ; DO A NATURAL EXPONENTIATION IF EXPONENT = 0
F331 4D               (      exbasic.asm):03852                   TSTA                ; *CHECK VALUE BEING EXPONENTIATED
F332 2603             (      exbasic.asm):03853                   BNE  L8491          ; *AND BRANCH IF IT IS <> 0
F334 7EEC6C           (      exbasic.asm):03854                   JMP  LBA3A          ; FPA0=0 IF RAISING ZERO TO A POWER
F337 8E004A           (      exbasic.asm):03855         L8491     LDX  #V4A           ; * PACK FPA0 AND SAVE
F33A BDEE67           (      exbasic.asm):03856                   JSR  LBC35          ; * IT IN FPA5 (ARGUMENT'S EXPONENT)
F33D 5F               (      exbasic.asm):03857                   CLRB                ; ACCB=DEFAULT RESULT SIGN FLAG; 0=POSITIVE
F33E 9661             (      exbasic.asm):03858                   LDA  FP1SGN         ; *CHECK THE SIGN OF ARGUMENT
F340 2A10             (      exbasic.asm):03859                   BPL  L84AC          ; *BRANCH IF POSITIVE
F342 BDEF20           (      exbasic.asm):03860                   JSR  INT            ; CONVERT EXPONENT INTO AN INTEGER
F345 8E004A           (      exbasic.asm):03861                   LDX  #V4A           ; POINT X TO FPA5 (ORIGINAL EXPONENT)
F348 9661             (      exbasic.asm):03862                   LDA  FP1SGN         ; GET MANTISSA SIGN OF FPA1 (ARGUMENT)
F34A BDEED2           (      exbasic.asm):03863                   JSR  LBCA0          ; *COMPARE FPA0 TO (X) AND
F34D 2603             (      exbasic.asm):03864                   BNE  L84AC          ; *BRANCH IF NOT EQUAL
F34F 43               (      exbasic.asm):03865                   COMA                ; TOGGLE FPA1 MANTISSA SIGN - FORCE POSITIVE
F350 D601             (      exbasic.asm):03866                   LDB  CHARAC         ; GET LS BYTE OF INTEGER VALUE OF EXPONENT (RESULT SIGN FLAG)
F352 BDEE7E           (      exbasic.asm):03867         L84AC     JSR  LBC4C          ; COPY FPA1 TO FPA0; ACCA = MANTISSA SIGN
F355 3404             (      exbasic.asm):03868                   PSHS B              ; PUT RESULT SIGN FLAG ON THE STACK
F357 BDF2EC           (      exbasic.asm):03869                   JSR  LOG
F35A 8E004A           (      exbasic.asm):03870                   LDX  #V4A           ; POINT (X) TO FPA5
F35D BDECFC           (      exbasic.asm):03871                   JSR  LBACA          ; MULTIPLY FPA0 BY FPA5
F360 8D36             (      exbasic.asm):03872                   BSR  EXP            ; CALCULATE E**(FPA0)
F362 3502             (      exbasic.asm):03873                   PULS A              ; * GET RESULT SIGN FLAG FROM THE STACK
F364 46               (      exbasic.asm):03874                   RORA                ; * AND BRANCH IF NEGATIVE
F365 1025FDB2         (      exbasic.asm):03875                   LBCS LBEE9          ; CHANGE SIGN OF FPA0 MANTISSA
F369 39               (      exbasic.asm):03876                   RTS
                      (      exbasic.asm):03877         
                      (      exbasic.asm):03878         * CORRECTION FACTOR FOR EXPONENTIAL FUNCTION
F36A 8138AA3B29       (      exbasic.asm):03879         L84C4     FCB  $81,$38,$AA,$3B,$29 ; 1.44269504 ( CF )
                      (      exbasic.asm):03880         *
                      (      exbasic.asm):03881         * TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR E**X
                      (      exbasic.asm):03882         *
F36F 07               (      exbasic.asm):03883         L84C9     FCB  7              ; EIGHT COEFFICIENTS
F370 7134583E56       (      exbasic.asm):03884         L84CA     FCB  $71,$34,$58,$3E,$56 ; 2.14987637E-05: 1/(7!*(CF**7))
F375 74167EB31B       (      exbasic.asm):03885         L84CF     FCB  $74,$16,$7E,$B3,$1B ; 1.4352314E-04 : 1/(6!*(CF**6))
F37A 772FEEE385       (      exbasic.asm):03886         L84D4     FCB  $77,$2F,$EE,$E3,$85 ; 1.34226348E-03: 1/(5!*(CF**5))
F37F 7A1D841C2A       (      exbasic.asm):03887         L84D9     FCB  $7A,$1D,$84,$1C,$2A ; 9.61401701E-03: 1/(4!*(CF**4))
F384 7C6359580A       (      exbasic.asm):03888         L84DE     FCB  $7C,$63,$59,$58,$0A ; 0.0555051269
F389 7E75FDE7C6       (      exbasic.asm):03889         L84E3     FCB  $7E,$75,$FD,$E7,$C6 ; 0.240226385
F38E 8031721810       (      exbasic.asm):03890         L84E8     FCB  $80,$31,$72,$18,$10 ; 0.693147186
F393 8100000000       (      exbasic.asm):03891         L84ED     FCB  $81,$00,$00,$00,$00 ; 1
                      (      exbasic.asm):03892         *
                      (      exbasic.asm):03893         * EXP ( E**X)
                      (      exbasic.asm):03894         * THE EXPONENTIAL FUNCTION IS EVALUATED BY FIRST MULTIPLYING THE
                      (      exbasic.asm):03895         * ARGUMENT BY A CORRECTION FACTOR (CF). AFTER THIS IS DONE, AN
                      (      exbasic.asm):03896         * ARGUMENT >= 127 WILL YIELD A ZERO RESULT (NO UNDERFLOW) FOR A
                      (      exbasic.asm):03897         * NEGATIVE ARGUMENT OR AN 'OV' (OVERFLOW) ERROR FOR A POSITIVE
                      (      exbasic.asm):03898         * ARGUMENT. THE POLYNOMIAL COEFFICIENTS ARE MODIFIED TO REFLECT
                      (      exbasic.asm):03899         * THE CF MULTIPLICATION AT THE START OF THE EVALUATION PROCESS.
                      (      exbasic.asm):03900         
F398 8EF36A           (      exbasic.asm):03901         EXP       LDX  #L84C4         ; POINT X TO THE CORRECTION FACTOR
F39B BDECFC           (      exbasic.asm):03902                   JSR  LBACA          ; MULTIPLY FPA0 BY (X)
F39E BDEE61           (      exbasic.asm):03903                   JSR  LBC2F          ; PACK FPA0 AND STORE IT IN FPA3
F3A1 964F             (      exbasic.asm):03904                   LDA  FP0EXP         ; *GET EXPONENT OF FPA0 AND
F3A3 8188             (      exbasic.asm):03905                   CMPA #$88           ; *COMPARE TO THE MAXIMUM VALUE
F3A5 2503             (      exbasic.asm):03906                   BLO  L8504          ; BRANCH IF FPA0 < 128
F3A7 7EED8E           (      exbasic.asm):03907         L8501     JMP  LBB5C          ; SET FPA0 = 0 OR 'OV' ERROR
F3AA BDEF20           (      exbasic.asm):03908         L8504     JSR  INT            ; CONVERT FPA0 TO INTEGER
F3AD 9601             (      exbasic.asm):03909                   LDA  CHARAC         ; GET LS BYTE OF INTEGER
F3AF 8B81             (      exbasic.asm):03910                   ADDA #$81           ; * WAS THE ARGUMENT =127, IF SO
F3B1 27F4             (      exbasic.asm):03911                   BEQ  L8501          ; * THEN 'OV' ERROR; THIS WILL ALSO ADD THE $80 BIAS
                      (      exbasic.asm):03912         *              ; * REQUIRED WHEN THE NEW EXPONENT IS CALCULATED BELOW
F3B3 4A               (      exbasic.asm):03913                   DECA                ; DECREMENT ONE FROM THE EXPONENT, BECAUSE $81, NOT $80 WAS USED ABOVE
F3B4 3402             (      exbasic.asm):03914                   PSHS A              ; SAVE EXPONENT OF INTEGER PORTION ON STACK
F3B6 8E0040           (      exbasic.asm):03915                   LDX  #V40           ; POINT (X) TO FPA3
F3B9 BDEBEB           (      exbasic.asm):03916                   JSR  LB9B9          ; SUBTRACT FPA0 FROM (X) - GET FRACTIONAL PART OF ARGUMENT
F3BC 8EF36F           (      exbasic.asm):03917                   LDX  #L84C9         ; POINT X TO COEFFICIENTS
F3BF BDF131           (      exbasic.asm):03918                   JSR  LBEFF          ; EVALUATE POLYNOMIAL FOR FRACTIONAL PART
F3C2 0F62             (      exbasic.asm):03919                   CLR  RESSGN         ; FORCE THE MANTISSA TO BE POSITIVE
F3C4 3502             (      exbasic.asm):03920                   PULS A              ; GET INTEGER EXPONENT FROM STACK
F3C6 BDED7A           (      exbasic.asm):03921                   JSR  LBB48          ; * CALCULATE EXPONENT OF NEW FPA0 BY ADDING THE EXPONENTS OF THE
                      (      exbasic.asm):03922         *              ; * INTEGER AND FRACTIONAL PARTS
F3C9 39               (      exbasic.asm):03923                   RTS
                      (      exbasic.asm):03924         
                      (      exbasic.asm):03925         * FIX
F3CA BDEE9F           (      exbasic.asm):03926         FIX       JSR  LBC6D          ; CHECK STATUS OF FPA0
F3CD 2B03             (      exbasic.asm):03927                   BMI  L852C          ; BRANCH IF FPA0 = NEGATIVE
F3CF 7EEF20           (      exbasic.asm):03928         L8529     JMP  INT            ; CONVERT FPA0 TO INTEGER
F3D2 0354             (      exbasic.asm):03929         L852C     COM  FP0SGN         ; TOGGLE SIGN OF FPA0 MANTISSA
F3D4 8DF9             (      exbasic.asm):03930                   BSR  L8529          ; CONVERT FPA0 TO INTEGER
F3D6 7EF11B           (      exbasic.asm):03931                   JMP  LBEE9          ; TOGGLE SIGN OF FPA0
                      (      exbasic.asm):03932         
                      (      exbasic.asm):03933         * EDIT
F3D9 BDF807           (      exbasic.asm):03934         EDIT      JSR  L89AE          ; GET LINE NUMBER FROM BASIC
F3DC 3262             (      exbasic.asm):03935                   LEAS $02,S          ; PURGE RETURN ADDRESS OFF OF THE STACK
F3DE 8601             (      exbasic.asm):03936         L8538     LDA  #$01           ; 'LIST' FLAG
F3E0 9798             (      exbasic.asm):03937                   STA  VD8            ; SET FLAG TO LIST LINE
F3E2 BDDF8B           (      exbasic.asm):03938                   JSR  LAD01          ; GO FIND THE LINE NUMBER IN PROGRAM
F3E5 1025ED7F         (      exbasic.asm):03939                   LBCS LAED2          ; ERROR #7 'UNDEFINED LINE #'
F3E9 BDEA24           (      exbasic.asm):03940                   JSR  LB7C2          ; GO UNCRUNCH LINE INTO BUFFER AT LINBUF+1
F3EC 1F20             (      exbasic.asm):03941                   TFR  Y,D            ; PUT ABSOLUTE ADDRESS OF END OF LINE TO ACCD
F3EE 8300F5           (      exbasic.asm):03942                   SUBD #LINBUF+2      ; SUBTRACT OUT THE START OF LINE
F3F1 D797             (      exbasic.asm):03943                   STB  VD7            ; SAVE LENGTH OF LINE
F3F3 DC2B             (      exbasic.asm):03944         L854D     LDD  BINVAL         ; GET THE HEX VALUE OF LINE NUMBER
F3F5 BDEFFE           (      exbasic.asm):03945                   JSR  LBDCC          ; LIST THE LINE NUMBER ON THE SCREEN
F3F8 BDEBDE           (      exbasic.asm):03946                   JSR  LB9AC          ; PRINT A SPACE
F3FB 8E00F4           (      exbasic.asm):03947                   LDX  #LINBUF+1      ; POINT X TO BUFFER
F3FE D698             (      exbasic.asm):03948                   LDB  VD8            ; * CHECK TO SEE IF LINE IS TO BE
F400 2625             (      exbasic.asm):03949                   BNE  L8581          ; * LISTED TO SCREEN - BRANCH IF IT IS
F402 5F               (      exbasic.asm):03950         L855C     CLRB                ; RESET DIGIT ACCUMULATOR - DEFAULT VALUE
F403 BDF52D           (      exbasic.asm):03951         L855D     JSR  L8687          ; GET KEY STROKE
F406 BDFCD2           (      exbasic.asm):03952                   JSR  L90AA          ; SET CARRY IF NOT NUMERIC
F409 250B             (      exbasic.asm):03953                   BLO  L8570          ; BRANCH IF NOT NUMERIC
F40B 8030             (      exbasic.asm):03954                   SUBA #'0            ; MASK OFF ASCII
F40D 3402             (      exbasic.asm):03955                   PSHS A              ; SAVE IT ON STACK
F40F 860A             (      exbasic.asm):03956                   LDA  #10            ; NUMBER BEING CONVERTED IS BASE 10
F411 3D               (      exbasic.asm):03957                   MUL                 ; MULTIPLY ACCUMULATED VALUE BY BASE (10)
F412 EBE0             (      exbasic.asm):03958                   ADDB ,S+            ; ADD DIGIT TO ACCUMULATED VALUE
F414 20ED             (      exbasic.asm):03959                   BRA  L855D          ; CHECK FOR ANOTHER DIGIT
F416 C001             (      exbasic.asm):03960         L8570     SUBB #$01           ; * REPEAT PARAMETER IN ACCB; IF IT
F418 C901             (      exbasic.asm):03961                   ADCB #$01           ; *IS 0, THEN MAKE IT '1'
F41A 8141             (      exbasic.asm):03962                   CMPA #'A            ; ABORT?
F41C 2605             (      exbasic.asm):03963                   BNE  L857D          ; NO
F41E BDEB8E           (      exbasic.asm):03964                   JSR  LB958          ; PRINT CARRIAGE RETURN TO SCREEN
F421 20BB             (      exbasic.asm):03965                   BRA  L8538          ; RESTART EDIT PROCESS - CANCEL ALL CHANGES
F423 814C             (      exbasic.asm):03966         L857D     CMPA #'L            ; LIST?
F425 260B             (      exbasic.asm):03967                   BNE  L858C          ; NO
F427 8D31             (      exbasic.asm):03968         L8581     BSR  L85B4          ; LIST THE LINE
F429 0F98             (      exbasic.asm):03969                   CLR  VD8            ; RESET THE LIST FLAG TO 'NO LIST'
F42B BDEB8E           (      exbasic.asm):03970                   JSR  LB958          ; PRINT CARRIAGE RETURN
F42E 20C3             (      exbasic.asm):03971                   BRA  L854D          ; GO INTERPRET ANOTHER EDIT COMMAND
F430 3262             (      exbasic.asm):03972         L858A     LEAS $02,S          ; PURGE RETURN ADDRESS OFF OF THE STACK
F432 810D             (      exbasic.asm):03973         L858C     CMPA #CR            ; ENTER KEY?
F434 260D             (      exbasic.asm):03974                   BNE  L859D          ; NO
F436 8D22             (      exbasic.asm):03975                   BSR  L85B4          ; ECHO THE LINE TO THE SCREEN
F438 BDEB8E           (      exbasic.asm):03976         L8592     JSR  LB958          ; PRINT CARRIAGE RETURN
F43B 8E00F4           (      exbasic.asm):03977                   LDX  #LINBUF+1      ; * RESET BASIC'S INPUT POINTER
F43E 9F83             (      exbasic.asm):03978                   STX  CHARAD         ; * TO THE LINE INPUT BUFFER
F440 7EDF34           (      exbasic.asm):03979                   JMP  LACA8          ; GO PUT LINE BACK IN PROGRAM
F443 8145             (      exbasic.asm):03980         L859D     CMPA #'E            ; EXIT?
F445 27F1             (      exbasic.asm):03981                   BEQ  L8592          ; YES - SAME AS ENTER EXCEPT NO ECHO
F447 8151             (      exbasic.asm):03982                   CMPA #'Q            ; QUIT?
F449 2606             (      exbasic.asm):03983                   BNE  L85AB          ; NO
F44B BDEB8E           (      exbasic.asm):03984                   JSR  LB958          ; PRINT CARRIAGE RETURN TO SCREEN
F44E 7EDF0B           (      exbasic.asm):03985                   JMP  LAC73          ; GO TO COMMAND LEVEL - MAKE NO CHANGES
F451 8D02             (      exbasic.asm):03986         L85AB     BSR  L85AF          ; INTERPRET THE REMAINING COMMANDS AS SUBROUTINES
F453 20AD             (      exbasic.asm):03987                   BRA  L855C          ; GO INTERPRET ANOTHER EDIT COMMAND
F455 8120             (      exbasic.asm):03988         L85AF     CMPA #SPACE         ; SPACE BAR?
F457 2610             (      exbasic.asm):03989                   BNE  L85C3          ; NO
F459 8C               (      exbasic.asm):03990         L85B3     FCB  SKP2           ; SKIP TWO BYTES
                      (      exbasic.asm):03991         * DISPLAY THE NEXT ACCB BYTES OF THE LINE IN THE BUFFER TO THE SCREEN
                      (      exbasic.asm):03992         *
F45A C6F9             (      exbasic.asm):03993         L85B4     LDB  #LBUFMX-1      ; 250 BYTES MAX IN BUFFER
F45C A684             (      exbasic.asm):03994         L85B6     LDA  ,X             ; GET A CHARACTER FROM BUFFER
F45E 2708             (      exbasic.asm):03995                   BEQ  L85C2          ; EXIT IF IT'S A 0
F460 BDDB10           (      exbasic.asm):03996                   JSR  PUTCHR         ; SEND CHAR TO CONSOLE OUT
F463 3001             (      exbasic.asm):03997                   LEAX $01,X          ; MOVE POINTER UP ONE
F465 5A               (      exbasic.asm):03998                   DECB                ; DECREMENT CHARACTER COUNTER
F466 26F4             (      exbasic.asm):03999                   BNE  L85B6          ; LOOP IF NOT DONE
F468 39               (      exbasic.asm):04000         L85C2     RTS
F469 8144             (      exbasic.asm):04001         L85C3     CMPA #'D            ; DELETE?
F46B 2648             (      exbasic.asm):04002                   BNE  L860F          ; NO
F46D 6D84             (      exbasic.asm):04003         L85C7     TST  ,X             ; * CHECK FOR END OF LINE
F46F 27F7             (      exbasic.asm):04004                   BEQ  L85C2          ; * AND BRANCH IF SO
F471 8D04             (      exbasic.asm):04005                   BSR  L85D1          ; REMOVE A CHARACTER
F473 5A               (      exbasic.asm):04006                   DECB                ; DECREMENT REPEAT PARAMETER
F474 26F7             (      exbasic.asm):04007                   BNE  L85C7          ; BRANCH IF NOT DONE
F476 39               (      exbasic.asm):04008                   RTS
                      (      exbasic.asm):04009         * REMOVE ONE CHARACTER FROM BUFFER
F477 0A97             (      exbasic.asm):04010         L85D1     DEC  VD7            ; DECREMENT LENGTH OF BUFFER
F479 311F             (      exbasic.asm):04011                   LEAY -1,X           ; POINT Y TO ONE BEFORE CURRENT BUFFER POINTER
F47B 3121             (      exbasic.asm):04012         L85D5     LEAY $01,Y          ; INCREMENT TEMPORARY BUFFER POINTER
F47D A621             (      exbasic.asm):04013                   LDA  $01,Y          ; GET NEXT CHARACTER
F47F A7A4             (      exbasic.asm):04014                   STA  ,Y             ; PUT IT IN CURRENT POSITION
F481 26F8             (      exbasic.asm):04015                   BNE  L85D5          ; BRANCH IF NOT END OF LINE
F483 39               (      exbasic.asm):04016                   RTS
F484 8149             (      exbasic.asm):04017         L85DE     CMPA #'I            ;  INSERT?
F486 2713             (      exbasic.asm):04018                   BEQ  L85F5          ; YES
F488 8158             (      exbasic.asm):04019                   CMPA #'X            ; EXTEND?
F48A 270D             (      exbasic.asm):04020                   BEQ  L85F3          ; YES
F48C 8148             (      exbasic.asm):04021                   CMPA #'H            ; HACK?
F48E 265C             (      exbasic.asm):04022                   BNE  L8646          ; NO
F490 6F84             (      exbasic.asm):04023                   CLR  ,X             ; TURN CURRENT BUFFER POINTER INTO END OF LINE FLAG
F492 1F10             (      exbasic.asm):04024                   TFR  X,D            ; PUT CURRENT BUFFER POINTER IN ACCD
F494 8300F5           (      exbasic.asm):04025                   SUBD #LINBUF+2      ; SUBTRACT INITIAL POINTER POSITION
F497 D797             (      exbasic.asm):04026                   STB  VD7            ; SAVE NEW BUFFER LENGTH
F499 8DBF             (      exbasic.asm):04027         L85F3     BSR  L85B4          ; DISPLAY THE LINE ON THE SCREEN
F49B BDF52D           (      exbasic.asm):04028         L85F5     JSR  L8687          ; GET A KEYSTROKE
F49E 810D             (      exbasic.asm):04029                   CMPA #CR            ; ENTER KEY?
F4A0 278E             (      exbasic.asm):04030                   BEQ  L858A          ; YES - INTERPRET ANOTHER COMMAND - PRINT LINE
F4A2 811B             (      exbasic.asm):04031                   CMPA #ESC           ; ESCAPE?
F4A4 2725             (      exbasic.asm):04032                   BEQ  L8625          ; YES - RETURN TO COMMAND LEVEL - DON'T PRINT LINE
F4A6 8108             (      exbasic.asm):04033                   CMPA #BS            ; BACK SPACE?
F4A8 2622             (      exbasic.asm):04034                   BNE  L8626          ; NO
F4AA 8C00F4           (      exbasic.asm):04035                   CMPX #LINBUF+1      ; COMPARE POINTER TO START OF BUFFER
F4AD 27EC             (      exbasic.asm):04036                   BEQ  L85F5          ; DO NOT ALLOW BS IF AT START
F4AF 8D45             (      exbasic.asm):04037                   BSR  L8650          ; MOVE POINTER BACK ONE, BS TO SCREEN
F4B1 8DC4             (      exbasic.asm):04038                   BSR  L85D1          ; REMOVE ONE CHARACTER FROM BUFFER
F4B3 20E6             (      exbasic.asm):04039                   BRA  L85F5          ; GET INSERT SUB COMMAND
F4B5 8143             (      exbasic.asm):04040         L860F     CMPA #'C            ; CHANGE?
F4B7 26CB             (      exbasic.asm):04041                   BNE  L85DE          ; NO
F4B9 6D84             (      exbasic.asm):04042         L8613     TST  ,X             ; CHECK CURRENT BUFFER CHARACTER
F4BB 270E             (      exbasic.asm):04043                   BEQ  L8625          ; BRANCH IF END OF LINE
F4BD BDF52D           (      exbasic.asm):04044                   JSR  L8687          ; GET A KEYSTROKE
F4C0 2502             (      exbasic.asm):04045                   BLO  L861E          ; BRANCH IF LEGITIMATE KEY
F4C2 20F5             (      exbasic.asm):04046                   BRA  L8613          ; TRY AGAIN IF ILLEGAL KEY
F4C4 A780             (      exbasic.asm):04047         L861E     STA  ,X+            ; INSERT NEW CHARACTER INTO BUFFER
F4C6 8D37             (      exbasic.asm):04048                   BSR  L8659          ; SEND NEW CHARACTER TO SCREEN
F4C8 5A               (      exbasic.asm):04049                   DECB                ; DECREMENT REPEAT PARAMETER
F4C9 26EE             (      exbasic.asm):04050                   BNE  L8613          ; BRANCH IF NOT DONE
F4CB 39               (      exbasic.asm):04051         L8625     RTS
F4CC D697             (      exbasic.asm):04052         L8626     LDB  VD7            ; GET LENGTH OF LINE
F4CE C1F9             (      exbasic.asm):04053                   CMPB #LBUFMX-1      ; COMPARE TO MAXIMUM LENGTH
F4D0 2602             (      exbasic.asm):04054                   BNE  L862E          ; BRANCH IF NOT AT MAXIMUM
F4D2 20C7             (      exbasic.asm):04055                   BRA  L85F5          ; IGNORE INPUT IF LINE AT MAXIMUM LENGTH
F4D4 3410             (      exbasic.asm):04056         L862E     PSHS X              ; SAVE CURRENT BUFFER POINTER
F4D6 6D80             (      exbasic.asm):04057         L8630     TST  ,X+            ; * SCAN THE LINE UNTIL END OF
F4D8 26FC             (      exbasic.asm):04058                   BNE  L8630          ; * LINE (0) IS FOUND
F4DA E682             (      exbasic.asm):04059         L8634     LDB  ,-X            ; DECR TEMP LINE POINTER AND GET A CHARACTER
F4DC E701             (      exbasic.asm):04060                   STB  $01,X          ; PUT CHARACTER BACK DOWN ONE SPOT
F4DE ACE4             (      exbasic.asm):04061                   CMPX ,S             ; HAVE WE REACHED STARTING POINT?
F4E0 26F8             (      exbasic.asm):04062                   BNE  L8634          ; NO - KEEP GOING
F4E2 3262             (      exbasic.asm):04063                   LEAS $02,S          ; PURGE BUFFER POINTER FROM STACK
F4E4 A780             (      exbasic.asm):04064                   STA  ,X+            ; INSERT NEW CHARACTER INTO THE LINE
F4E6 8D17             (      exbasic.asm):04065                   BSR  L8659          ; SEND A CHARACTER TO CONSOLE OUT
F4E8 0C97             (      exbasic.asm):04066                   INC  VD7            ; ADD ONE TO BUFFER LENGTH
F4EA 20AF             (      exbasic.asm):04067                   BRA  L85F5          ; GET INSERT SUB COMMAND
F4EC 8108             (      exbasic.asm):04068         L8646     CMPA #BS            ; BACKSPACE?
F4EE 2612             (      exbasic.asm):04069                   BNE  L865C          ; NO
F4F0 8D04             (      exbasic.asm):04070         L864A     BSR  L8650          ; MOVE POINTER BACK 1, SEND BS TO SCREEN
F4F2 5A               (      exbasic.asm):04071                   DECB                ; DECREMENT REPEAT PARAMETER
F4F3 26FB             (      exbasic.asm):04072                   BNE  L864A          ; LOOP UNTIL DONE
F4F5 39               (      exbasic.asm):04073                   RTS
F4F6 8C00F4           (      exbasic.asm):04074         L8650     CMPX #LINBUF+1      ; COMPARE POINTER TO START OF BUFFER
F4F9 27D0             (      exbasic.asm):04075                   BEQ  L8625          ; DO NOT ALLOW BS IF AT START
F4FB 301F             (      exbasic.asm):04076                   LEAX -1,X           ; MOVE POINTER BACK ONE
F4FD 8608             (      exbasic.asm):04077                   LDA  #BS            ; BACK SPACE
F4FF 7EDB10           (      exbasic.asm):04078         L8659     JMP  PUTCHR         ; SEND TO CONSOLE OUT
F502 814B             (      exbasic.asm):04079         L865C     CMPA #'K            ; KILL?
F504 2705             (      exbasic.asm):04080                   BEQ  L8665          ; YES
F506 8053             (      exbasic.asm):04081                   SUBA #'S            ; SEARCH?
F508 2701             (      exbasic.asm):04082                   BEQ  L8665          ; YES
F50A 39               (      exbasic.asm):04083                   RTS
F50B 3402             (      exbasic.asm):04084         L8665     PSHS A              ; SAVE KILL/SEARCH FLAG ON STACK
F50D 8D1E             (      exbasic.asm):04085                   BSR  L8687          ; * GET A KEYSTROKE (TARGET CHARACTER)
F50F 3402             (      exbasic.asm):04086                   PSHS A              ; * AND SAVE IT ON STACK
F511 A684             (      exbasic.asm):04087         L866B     LDA  ,X             ; GET CURRENT BUFFER CHARACTER
F513 2716             (      exbasic.asm):04088                   BEQ  L8685          ; AND RETURN IF END OF LINE
F515 6D61             (      exbasic.asm):04089                   TST  $01,S          ; CHECK KILL/SEARCH FLAG
F517 2606             (      exbasic.asm):04090                   BNE  L8679          ; BRANCH IF KILL
F519 8DE4             (      exbasic.asm):04091                   BSR  L8659          ; SEND A CHARACTER TO CONSOLE OUT
F51B 3001             (      exbasic.asm):04092                   LEAX $01,X          ; INCREMENT BUFFER POINTER
F51D 2003             (      exbasic.asm):04093                   BRA  L867C          ; CHECK NEXT INPUT CHARACTER
F51F BDF477           (      exbasic.asm):04094         L8679     JSR  L85D1          ; REMOVE ONE CHARACTER FROM BUFFER
F522 A684             (      exbasic.asm):04095         L867C     LDA  ,X             ; GET CURRENT INPUT CHARACTER
F524 A1E4             (      exbasic.asm):04096                   CMPA ,S             ; COMPARE TO TARGET CHARACTER
F526 26E9             (      exbasic.asm):04097                   BNE  L866B          ; BRANCH IF NO MATCH
F528 5A               (      exbasic.asm):04098                   DECB                ; DECREMENT REPEAT PARAMETER
F529 26E6             (      exbasic.asm):04099                   BNE  L866B          ; BRANCH IF NOT DONE
F52B 35A0             (      exbasic.asm):04100         L8685     PULS Y,PC           ; THE Y PULL WILL CLEAN UP THE STACK FOR THE 2 PSHS A
                      (      exbasic.asm):04101         *
                      (      exbasic.asm):04102         * GET A KEYSTRKE
F52D BDDB00           (      exbasic.asm):04103         L8687     JSR  LA171          ; CALL CONSOLE IN : DEV NBR=SCREEN
F530 817F             (      exbasic.asm):04104                   CMPA #$7F           ; GRAPHIC CHARACTER?
F532 24F9             (      exbasic.asm):04105                   BCC  L8687          ; YES - GET ANOTHER CHAR
F534 815F             (      exbasic.asm):04106                   CMPA #$5F           ; SHIFT UP ARROW (QUIT INSERT)
F536 2602             (      exbasic.asm):04107                   BNE  L8694          ; NO
F538 861B             (      exbasic.asm):04108                   LDA  #ESC           ; REPLACE W/ESCAPE CODE
F53A 810D             (      exbasic.asm):04109         L8694     CMPA #CR            ; ENTER KEY
F53C 270E             (      exbasic.asm):04110                   BEQ  L86A6          ; YES
F53E 811B             (      exbasic.asm):04111                   CMPA #ESC           ; ESCAPE?
F540 270A             (      exbasic.asm):04112                   BEQ  L86A6          ; YES
F542 8108             (      exbasic.asm):04113                   CMPA #BS            ; BACKSPACE?
F544 2706             (      exbasic.asm):04114                   BEQ  L86A6          ; YES
F546 8120             (      exbasic.asm):04115                   CMPA #SPACE         ; SPACE
F548 25E3             (      exbasic.asm):04116                   BLO  L8687          ; GET ANOTHER CHAR IF CONTROL CHAR
F54A 1A01             (      exbasic.asm):04117                   ORCC #$01           ; SET CARRY
F54C 39               (      exbasic.asm):04118         L86A6     RTS
                      (      exbasic.asm):04119         
                      (      exbasic.asm):04120         * TRON
F54D 86               (      exbasic.asm):04121         TRON      FCB  SKP1LD         ; SKIP ONE BYTE AND LDA #$4F
                      (      exbasic.asm):04122         
                      (      exbasic.asm):04123         * TROFF
F54E 4F               (      exbasic.asm):04124         TROFF     CLRA                ; TROFF FLAG
F54F 978C             (      exbasic.asm):04125                   STA  TRCFLG         ; TRON/TROFF FLAG:0=TROFF, <> 0=TRON
F551 39               (      exbasic.asm):04126                   RTS
                      (      exbasic.asm):04127         
                      (      exbasic.asm):04128         * POS
                      (      exbasic.asm):04129         
F552 8600             (      exbasic.asm):04130         POS       LDA  #0             ; GET DEVICE NUMBER
F554 D679             (      exbasic.asm):04131                   LDB  LPTPOS         ; GET PRINT POSITION
F556 1D               (      exbasic.asm):04132         LA5E8     SEX                 ; CONVERT ACCB TO 2 DIGIT SIGNED INTEGER
F557 7EE761           (      exbasic.asm):04133                   JMP  GIVABF         ; CONVERT ACCD TO FLOATING POINT
                      (      exbasic.asm):04134         
                      (      exbasic.asm):04135         
                      (      exbasic.asm):04136         * VARPTR
F55A BDE4DC           (      exbasic.asm):04137         VARPT     JSR  LB26A          ; SYNTAX CHECK FOR '('
F55D DC1F             (      exbasic.asm):04138                   LDD  ARYEND         ; GET ADDR OF END OF ARRAYS
F55F 3406             (      exbasic.asm):04139                   PSHS B,A            ; SAVE IT ON STACK
F561 BDE5C4           (      exbasic.asm):04140                   JSR  LB357          ; GET VARIABLE DESCRIPTOR
F564 BDE4D9           (      exbasic.asm):04141                   JSR  LB267          ; SYNTAX CHECK FOR ')'
F567 3506             (      exbasic.asm):04142                   PULS A,B            ; GET END OF ARRAYS ADDR BACK
F569 1E10             (      exbasic.asm):04143                   EXG  X,D            ; SWAP END OF ARRAYS AND VARIABLE DESCRIPTOR
F56B 9C1F             (      exbasic.asm):04144                   CMPX ARYEND         ; COMPARE TO NEW END OF ARRAYS
F56D 2651             (      exbasic.asm):04145                   BNE  L8724          ; 'FC' ERROR IF VARIABLE WAS NOT DEFINED PRIOR TO CALLING VARPTR
F56F 7EE761           (      exbasic.asm):04146                   JMP  GIVABF         ; CONVERT VARIABLE DESCRIPTOR INTO A FP NUMBER
                      (      exbasic.asm):04147         
                      (      exbasic.asm):04148         * MID$(OLDSTRING,POSITION,LENGTH)=REPLACEMENT
F572 9D7C             (      exbasic.asm):04149         L86D6     JSR  GETNCH         ; GET INPUT CHAR FROM BASIC
F574 BDE4DC           (      exbasic.asm):04150                   JSR  LB26A          ; SYNTAX CHECK FOR '('
F577 BDE5C4           (      exbasic.asm):04151                   JSR  LB357          ; * GET VARIABLE DESCRIPTOR ADDRESS AND
F57A 3410             (      exbasic.asm):04152                   PSHS X              ; * SAVE IT ON THE STACK
F57C EC02             (      exbasic.asm):04153                   LDD  $02,X          ; POINT ACCD TO START OF OLDSTRING
F57E 109321           (      exbasic.asm):04154                   CMPD FRETOP         ; COMPARE TO START OF CLEARED SPACE
F581 2304             (      exbasic.asm):04155                   BLS  L86EB          ; BRANCH IF <=
F583 9327             (      exbasic.asm):04156                   SUBD MEMSIZ         ; SUBTRACT OUT TOP OF CLEARED SPACE
F585 2312             (      exbasic.asm):04157                   BLS  L86FD          ; BRANCH IF STRING IN STRING SPACE
F587 E684             (      exbasic.asm):04158         L86EB     LDB  ,X             ; GET LENGTH OF OLDSTRING
F589 BDE7DA           (      exbasic.asm):04159                   JSR  LB56D          ; RESERVE ACCB BYTES IN STRING SPACE
F58C 3410             (      exbasic.asm):04160                   PSHS X              ; SAVE RESERVED SPACE STRING ADDRESS ON STACK
F58E AE62             (      exbasic.asm):04161                   LDX  $02,S          ; POINT X TO OLDSTRING DESCRIPTOR
F590 BDE8B0           (      exbasic.asm):04162                   JSR  LB643          ; MOVE OLDSTRING INTO STRING SPACE
F593 3550             (      exbasic.asm):04163                   PULS X,U            ; * GET OLDSTRING DESCRIPTOR ADDRESS AND RESERVED STRING
F595 AF42             (      exbasic.asm):04164                   STX  $02,U          ; * ADDRESS AND SAVE RESERVED ADDRESS AS OLDSTRING ADDRESS
F597 3440             (      exbasic.asm):04165                   PSHS U              ; SAVE OLDSTRING DESCRIPTOR ADDRESS
F599 BDE9A5           (      exbasic.asm):04166         L86FD     JSR  LB738          ; SYNTAX CHECK FOR COMMA AND EVALUATE LENGTH EXPRESSION
F59C 3404             (      exbasic.asm):04167                   PSHS B              ; SAVE POSITION PARAMETER ON STACK
F59E 5D               (      exbasic.asm):04168                   TSTB                ; * CHECK POSITION PARAMETER AND BRANCH
F59F 271F             (      exbasic.asm):04169                   BEQ  L8724          ; * IF START OF STRING
F5A1 C6FF             (      exbasic.asm):04170                   LDB  #$FF           ; DEFAULT REPLACEMENT LENGTH = $FF
F5A3 8129             (      exbasic.asm):04171                   CMPA #')            ; * CHECK FOR END OF MID$ STATEMENT AND
F5A5 2703             (      exbasic.asm):04172                   BEQ  L870E          ; * BRANCH IF AT END OF STATEMENT
F5A7 BDE9A5           (      exbasic.asm):04173                   JSR  LB738          ; SYNTAX CHECK FOR COMMA AND EVALUATE LENGTH EXPRESSION
F5AA 3404             (      exbasic.asm):04174         L870E     PSHS B              ; SAVE LENGTH PARAMETER ON STACK
F5AC BDE4D9           (      exbasic.asm):04175                   JSR  LB267          ; SYNTAX CHECK FOR ')'
F5AF C6AE             (      exbasic.asm):04176                   LDB  #TOK_EQUALS    ; TOKEN FOR =
F5B1 BDE4E1           (      exbasic.asm):04177                   JSR  LB26F          ; SYNTAX CHECK FOR '='
F5B4 8D2E             (      exbasic.asm):04178                   BSR  L8748          ; EVALUATE REPLACEMENT STRING
F5B6 1F13             (      exbasic.asm):04179                   TFR  X,U            ; SAVE REPLACEMENT STRING ADDRESS IN U
F5B8 AE62             (      exbasic.asm):04180                   LDX  $02,S          ; POINT X TO OLOSTRING DESCRIPTOR ADDRESS
F5BA A684             (      exbasic.asm):04181                   LDA  ,X             ; GET LENGTH OF OLDSTRING
F5BC A061             (      exbasic.asm):04182                   SUBA $01,S          ; SUBTRACT POSITION PARAMETER
F5BE 2403             (      exbasic.asm):04183                   BCC  L8727          ; INSERT REPLACEMENT STRING INTO OLDSTRING
F5C0 7EE6B7           (      exbasic.asm):04184         L8724     JMP  LB44A          ; 'FC' ERROR IF POSITION > LENGTH OF OLDSTRING
F5C3 4C               (      exbasic.asm):04185         L8727     INCA                ; * NOW ACCA = NUMBER OF CHARACTERS TO THE RIGHT
                      (      exbasic.asm):04186         *                             ; * (INCLUSIVE) OF THE POSITION PARAMETER
F5C4 A1E4             (      exbasic.asm):04187                   CMPA ,S
F5C6 2402             (      exbasic.asm):04188                   BCC  L872E          ; BRANCH IF NEW STRING WILL FIT IN OLDSTRING
F5C8 A7E4             (      exbasic.asm):04189                   STA  ,S             ; IF NOT, USE AS MUCH OF LENGTH PARAMETER AS WILL FIT
F5CA A661             (      exbasic.asm):04190         L872E     LDA  $01,S          ; GET POSITION PARAMETER
F5CC 1E89             (      exbasic.asm):04191                   EXG  A,B            ; ACCA=LENGTH OF REPL STRING, ACCB=POSITION PARAMETER
F5CE AE02             (      exbasic.asm):04192                   LDX  $02,X          ; POINT X TO OLDSTRING ADDRESS
F5D0 5A               (      exbasic.asm):04193                   DECB                ; * BASIC'S POSITION PARAMETER STARTS AT 1; THIS ROUTINE
                      (      exbasic.asm):04194         *                             ; * WANTS IT TO START AT ZERO
F5D1 3A               (      exbasic.asm):04195                   ABX                 ; POINT X TO POSITION IN OLDSTRING WHERE THE REPLACEMENT WILL GO
F5D2 4D               (      exbasic.asm):04196                   TSTA                ; * IF THE LENGTH OF THE REPLACEMENT STRING IS ZERO
F5D3 270D             (      exbasic.asm):04197                   BEQ  L8746          ; * THEN RETURN
F5D5 A1E4             (      exbasic.asm):04198                   CMPA ,S
F5D7 2302             (      exbasic.asm):04199                   BLS  L873F          ; ADJUSTED LENGTH PARAMETER, THEN BRANCH
F5D9 A6E4             (      exbasic.asm):04200                   LDA  ,S             ; OTHERWISE USE AS MUCH ROOM AS IS AVAILABLE
F5DB 1F89             (      exbasic.asm):04201         L873F     TFR  A,B            ; SAVE NUMBER OF BYTES TO MOVE IN ACCB
F5DD 1E31             (      exbasic.asm):04202                   EXG  U,X            ; SWAP SOURCE AND DESTINATION POINTERS
F5DF BDDC97           (      exbasic.asm):04203                   JSR  LA59A          ; MOVE (B) BYTES FROM (X) TO (U)
F5E2 3596             (      exbasic.asm):04204         L8746     PULS A,B,X,PC
F5E4 BDE3C8           (      exbasic.asm):04205         L8748     JSR  LB156          ; EVALUATE EXPRESSION
F5E7 7EE8C1           (      exbasic.asm):04206                   JMP  LB654          ; *'TM' ERROR IF NUMERIC; RETURN WITH X POINTING
                      (      exbasic.asm):04207         *                             ; *TO STRING, ACCB = LENGTH
                      (      exbasic.asm):04208         
                      (      exbasic.asm):04209         * STRING
F5EA BDE4DC           (      exbasic.asm):04210         STRING    JSR  LB26A          ; SYNTAX CHECK FOR '('
F5ED BDE978           (      exbasic.asm):04211                   JSR  LB70B          ; EVALUATE EXPRESSION; ERROR IF > 255
F5F0 3404             (      exbasic.asm):04212                   PSHS B              ; SAVE LENGTH OF STRING
F5F2 BDE4DF           (      exbasic.asm):04213                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
F5F5 BDE3C8           (      exbasic.asm):04214                   JSR  LB156          ; EVALUATE EXPRESSION
F5F8 BDE4D9           (      exbasic.asm):04215                   JSR  LB267          ; SYNTAX CHECK FOR ')'
F5FB 9606             (      exbasic.asm):04216                   LDA  VALTYP         ; GET VARIABLE TYPE
F5FD 2605             (      exbasic.asm):04217                   BNE  L8768          ; BRANCH IF STRING
F5FF BDE97B           (      exbasic.asm):04218                   JSR  LB70E          ; CONVERT FPA0 INTO AN INTEGER IN ACCB
F602 2003             (      exbasic.asm):04219                   BRA  L876B          ; SAVE THE STRING IN STRING SPACE
F604 BDE911           (      exbasic.asm):04220         L8768     JSR  LB6A4          ; GET FIRST BYTE OF STRING
F607 3404             (      exbasic.asm):04221         L876B     PSHS B              ; SAVE FIRST BYTE OF EXPRESSION
F609 E661             (      exbasic.asm):04222                   LDB  $01,S          ; GET LENGTH OF STRING
F60B BDE77C           (      exbasic.asm):04223                   JSR  LB50F          ; RESERVE ACCB BYTES IN STRING SPACE
F60E 3506             (      exbasic.asm):04224                   PULS A,B            ; GET LENGTH OF STRING AND CHARACTER
F610 2705             (      exbasic.asm):04225                   BEQ  L877B          ; BRANCH IF NULL STRING
F612 A780             (      exbasic.asm):04226         L8776     STA  ,X+            ; SAVE A CHARACTER IN STRING SPACE
F614 5A               (      exbasic.asm):04227                   DECB                ; DECREMENT LENGTH
F615 26FB             (      exbasic.asm):04228                   BNE  L8776          ; BRANCH IF NOT DONE
F617 7EE908           (      exbasic.asm):04229         L877B     JMP  LB69B          ; PUT STRING DESCRIPTOR ONTO STRING STACK
                      (      exbasic.asm):04230         
                      (      exbasic.asm):04231         * INSTR
F61A BDE4DC           (      exbasic.asm):04232         INSTR     JSR  LB26A          ; SYNTAX CHECK FOR '('
F61D BDE3C8           (      exbasic.asm):04233                   JSR  LB156          ; EVALUATE EXPRESSION
F620 C601             (      exbasic.asm):04234                   LDB  #$01           ; DEFAULT POSITION = 1 (SEARCH START)
F622 3404             (      exbasic.asm):04235                   PSHS B              ; SAVE START
F624 9606             (      exbasic.asm):04236                   LDA  VALTYP         ; GET VARIABLE TYPE
F626 2610             (      exbasic.asm):04237                   BNE  L879C          ; BRANCH IF STRING
F628 BDE97B           (      exbasic.asm):04238                   JSR  LB70E          ; CONVERT FPA0 TO INTEGER IN ACCB
F62B E7E4             (      exbasic.asm):04239                   STB  ,S             ; SAVE START SEARCH VALUE
F62D 2791             (      exbasic.asm):04240                   BEQ  L8724          ; BRANCH IF START SEARCH AT ZERO
F62F BDE4DF           (      exbasic.asm):04241                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
F632 BDE3C8           (      exbasic.asm):04242                   JSR  LB156          ; EVALUATE EXPRESSION - SEARCH STRING
F635 BDE3B8           (      exbasic.asm):04243                   JSR  LB146          ; 'TM' ERROR IF NUMERIC
F638 9E52             (      exbasic.asm):04244         L879C     LDX  FPA0+2         ; SEARCH STRING DESCRIPTOR ADDRESS
F63A 3410             (      exbasic.asm):04245                   PSHS X              ; SAVE ON THE STACK
F63C BDE4DF           (      exbasic.asm):04246                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
F63F BDF5E4           (      exbasic.asm):04247                   JSR  L8748          ; EVALUATE TARGET STRING EXPRESSION
F642 3414             (      exbasic.asm):04248                   PSHS X,B            ; SAVE ADDRESS AND LENGTH ON STACK
F644 BDE4D9           (      exbasic.asm):04249                   JSR  LB267          ; SYNTAX CHECK FOR ')'
F647 AE63             (      exbasic.asm):04250                   LDX  $03,S          ; * LOAD X WITH SEARCH STRING DESCRIPTOR ADDRESS
F649 BDE8C6           (      exbasic.asm):04251                   JSR  LB659          ; * AND GET THE LENGTH ANDADDRESS OF SEARCH STRING
F64C 3404             (      exbasic.asm):04252                   PSHS B              ; SAVE LENGTH ON STACK
                      (      exbasic.asm):04253         *
                      (      exbasic.asm):04254         * AT THIS POINT THE STACK HAS THE FOLLOWING INFORMATION
                      (      exbasic.asm):04255         * ON IT: 0,S-SEARCH LENGTH; 1,S-TARGET LENGTH; 2 3,S-TARGET
                      (      exbasic.asm):04256         * ADDRESS; 4 5,S-SEARCH DESCRIPTOR ADDRESS; 6,S-SEARCH POSITION
F64E E166             (      exbasic.asm):04257                   CMPB $06,S          ; COMPARE LENGTH OF SEARCH STRING TO START
F650 2523             (      exbasic.asm):04258                   BLO  L87D9          ; POSITION; RETURN 0 IF LENGTH < START
F652 A661             (      exbasic.asm):04259                   LDA  $01,S          ; GET LENGTH OF TARGET STRING
F654 271C             (      exbasic.asm):04260                   BEQ  L87D6          ; BRANCH IF TARGET STRING = NULL
F656 E666             (      exbasic.asm):04261                   LDB  $06,S          ; GET START POSITION
F658 5A               (      exbasic.asm):04262                   DECB                ; MOVE BACK ONE
F659 3A               (      exbasic.asm):04263                   ABX                 ; POINT X TO POSITION IN SEARCH STRING WHERE SEARCHING WILL START
F65A 3184             (      exbasic.asm):04264         L87BE     LEAY ,X             ; POINT Y TO SEARCH POSITION
F65C EE62             (      exbasic.asm):04265                   LDU  $02,S          ; POINT U TO START OF TARGET
F65E E661             (      exbasic.asm):04266                   LDB  $01,S          ; LOAD ACCB WITH LENGTH OF TARGET
F660 A6E4             (      exbasic.asm):04267                   LDA  ,S             ; LOAD ACCA WITH LENGTH OF SEARCH
F662 A066             (      exbasic.asm):04268                   SUBA $06,S          ; SUBTRACT SEARCH POSITION FROM SEARCH LENGTH
F664 4C               (      exbasic.asm):04269                   INCA                ; ADD ONE
F665 A161             (      exbasic.asm):04270                   CMPA $01,S          ; COMPARE TO TARGET LENGTH
F667 250C             (      exbasic.asm):04271                   BLO  L87D9          ; RETURN 0 IF TARGET LENGTH > WHAT'S LEFT OF SEARCH STRING
F669 A680             (      exbasic.asm):04272         L87CD     LDA  ,X+            ; GET A CHARACTER FROM SEARCH STRING
F66B A1C0             (      exbasic.asm):04273                   CMPA ,U+            ; COMPARE IT TO TARGET STRING
F66D 260C             (      exbasic.asm):04274                   BNE  L87DF          ; BRANCH IF NO MATCH
F66F 5A               (      exbasic.asm):04275                   DECB                ; DECREMENT TARGET LENGTH
F670 26F7             (      exbasic.asm):04276                   BNE  L87CD          ; CHECK ANOTHER CHARACTER
F672 E666             (      exbasic.asm):04277         L87D6     LDB  $06,S          ; GET MATCH POSITION
F674 21               (      exbasic.asm):04278         L87D8     FCB  SKP1           ; SKIP NEXT BYTE
F675 5F               (      exbasic.asm):04279         L87D9     CLRB                ; MATCH ADDRESS = 0
F676 3267             (      exbasic.asm):04280                   LEAS $07,S          ; CLEAN UP THE STACK
F678 7EE760           (      exbasic.asm):04281                   JMP  LB4F3          ; CONVERT ACCB TO FP NUMBER
F67B 6C66             (      exbasic.asm):04282         L87DF     INC  $06,S          ; INCREMENT SEARCH POSITION
F67D 3021             (      exbasic.asm):04283                   LEAX $01,Y          ; MOVE X TO NEXT SEARCH POSITION
F67F 20D9             (      exbasic.asm):04284                   BRA  L87BE          ; KEEP LOOKING FOR A MATCH
                      (      exbasic.asm):04285         
                      (      exbasic.asm):04286         * EXTENDED BASIC RVEC19 HOOK CODE
F681 8126             (      exbasic.asm):04287         XVEC19    CMPA #'&            ; *
F683 265C             (      exbasic.asm):04288                   BNE  L8845          ; * RETURN IF NOT HEX OR OCTAL VARIABLE
F685 3262             (      exbasic.asm):04289                   LEAS $02,S          ; PURGE RETURN ADDRESS FROM STACK
                      (      exbasic.asm):04290         * PROCESS A VARIABLE PRECEEDED BY A '&' (&H,&O)
F687 0F52             (      exbasic.asm):04291         L87EB     CLR  FPA0+2         ; * CLEAR BOTTOM TWO
F689 0F53             (      exbasic.asm):04292                   CLR  FPA0+3         ; * BYTES OF FPA0
F68B 8E0052           (      exbasic.asm):04293                   LDX  #FPA0+2        ; BYTES 2,3 OF FPA0 = (TEMPORARY ACCUMULATOR)
F68E 9D7C             (      exbasic.asm):04294                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F690 814F             (      exbasic.asm):04295                   CMPA #'O
F692 2712             (      exbasic.asm):04296                   BEQ  L880A          ; YES
F694 8148             (      exbasic.asm):04297                   CMPA #'H
F696 2723             (      exbasic.asm):04298                   BEQ  L881F          ; YES
F698 9D82             (      exbasic.asm):04299                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F69A 200C             (      exbasic.asm):04300                   BRA  L880C          ; DEFAULT TO OCTAL (&O)
F69C 8138             (      exbasic.asm):04301         L8800     CMPA #'8
F69E 1022EE47         (      exbasic.asm):04302                   LBHI LB277
F6A2 C603             (      exbasic.asm):04303                   LDB  #$03           ; BASE 8 MULTIPLIER
F6A4 8D2A             (      exbasic.asm):04304                   BSR  L8834          ; ADD DIGIT TO TEMPORARY ACCUMULATOR
                      (      exbasic.asm):04305         * EVALUATE AN &O VARIABLE
F6A6 9D7C             (      exbasic.asm):04306         L880A     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F6A8 25F2             (      exbasic.asm):04307         L880C     BLO  L8800          ; BRANCH IF NUMERIC
F6AA 0F50             (      exbasic.asm):04308         L880E     CLR  FPA0           ; * CLEAR 2 HIGH ORDER
F6AC 0F51             (      exbasic.asm):04309                   CLR  FPA0+1         ; * BYTES OF FPA0
F6AE 0F06             (      exbasic.asm):04310                   CLR  VALTYP         ; SET VARXABLE TYPE TO NUMERIC
F6B0 0F63             (      exbasic.asm):04311                   CLR  FPSBYT         ; ZERO OUT SUB BYTE OF FPA0
F6B2 0F54             (      exbasic.asm):04312                   CLR  FP0SGN         ; ZERO OUT MANTISSA SIGN OF FPA0
F6B4 C6A0             (      exbasic.asm):04313                   LDB  #$A0           ; * SET EXPONENT OF FPA0
F6B6 D74F             (      exbasic.asm):04314                   STB  FP0EXP         ; *
F6B8 7EEC4E           (      exbasic.asm):04315                   JMP  LBA1C          ; GO NORMALIZE FPA0
                      (      exbasic.asm):04316         * EVALUATE AN &H VARIABLE
F6BB 9D7C             (      exbasic.asm):04317         L881F     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F6BD 250B             (      exbasic.asm):04318                   BLO  L882E          ; BRANCH IF NUMERIC
F6BF BDE60F           (      exbasic.asm):04319                   JSR  LB3A2          ; SET CARRY IF NOT ALPHA
F6C2 25E6             (      exbasic.asm):04320                   BLO  L880E          ; BRANCH IF NOT ALPHA OR NUMERIC
F6C4 8147             (      exbasic.asm):04321                   CMPA #'G            ; CHECK FOR LETTERS A-F
F6C6 24E2             (      exbasic.asm):04322                   BCC  L880E          ; BRANCH IF >= G (ILLEGAL HEX LETTER)
F6C8 8007             (      exbasic.asm):04323                   SUBA #7             ; SUBTRACT ASCII DIFFERENCE BETWEEN A AND 9
F6CA C604             (      exbasic.asm):04324         L882E     LDB  #$04           ; BASE 16 DIGIT MULTIPLIER = 2**4
F6CC 8D02             (      exbasic.asm):04325                   BSR  L8834          ; ADD DIGIT TO TEMPORARY ACCUMULATOR
F6CE 20EB             (      exbasic.asm):04326                   BRA  L881F          ; KEEP EVALUATING VARIABLE
F6D0 6801             (      exbasic.asm):04327         L8834     ASL  $01,X          ; * MULTIPLY TEMPORARY
F6D2 6984             (      exbasic.asm):04328                   ROL  ,X             ; * ACCUMULATOR BY TWO
F6D4 1025F5EC         (      exbasic.asm):04329                   LBCS LBA92          ; 'OV' OVERFLOW ERROR
F6D8 5A               (      exbasic.asm):04330                   DECB                ; DECREMENT SHIFT COUNTER
F6D9 26F5             (      exbasic.asm):04331                   BNE  L8834          ; MULTIPLY TEMPORARY ACCUMULATOR AGAIN
F6DB 8030             (      exbasic.asm):04332                   SUBA #'0            ; MASK OFF ASCII
F6DD AB01             (      exbasic.asm):04333                   ADDA $01,X          ; * ADD DIGIT TO TEMPORARY
F6DF A701             (      exbasic.asm):04334                   STA  $01,X          ; * ACCUMULATOR AND SAVE IT
F6E1 39               (      exbasic.asm):04335         L8845     RTS
                      (      exbasic.asm):04336         
F6E2 3540             (      exbasic.asm):04337         XVEC15    PULS U              ; PULL RETURN ADDRESS AND SAVE IN U REGISTER
F6E4 0F06             (      exbasic.asm):04338                   CLR  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
F6E6 9E83             (      exbasic.asm):04339                   LDX  CHARAD         ; CURRENT INPUT POINTER TO X
F6E8 9D7C             (      exbasic.asm):04340                   JSR  GETNCH         ; GET CHARACTER FROM BASIC
F6EA 8126             (      exbasic.asm):04341                   CMPA #'&            ; HEX AND OCTAL VARIABLES ARE PRECEEDED BY &
F6EC 2799             (      exbasic.asm):04342                   BEQ  L87EB          ; PROCESS A '&' VARIABLE
F6EE 81B0             (      exbasic.asm):04343                   CMPA #TOK_FN        ; TOKEN FOR FN
F6F0 275E             (      exbasic.asm):04344                   BEQ  L88B4          ; PROCESS FN CALL
F6F2 81FF             (      exbasic.asm):04345                   CMPA #$FF           ; CHECK FOR SECONDARY TOKEN
F6F4 2608             (      exbasic.asm):04346                   BNE  L8862          ; NOT SECONDARY
F6F6 9D7C             (      exbasic.asm):04347                   JSR  GETNCH         ; GET CHARACTER FROM BASIC
F6F8 8183             (      exbasic.asm):04348                   CMPA #TOK_USR       ; TOKEN FOR USR
F6FA 102700AB         (      exbasic.asm):04349                   LBEQ L892C          ; PROCESS USR CALL
F6FE 9F83             (      exbasic.asm):04350         L8862     STX  CHARAD         ; RESTORE BASIC'S INPUT POINTER
F700 6EC4             (      exbasic.asm):04351                   JMP  ,U             ; RETURN TO CALLING ROUTINE
F702 9E68             (      exbasic.asm):04352         L8866     LDX  CURLIN         ; GET CURRENT LINE NUMBER
F704 3001             (      exbasic.asm):04353                   LEAX $01,X          ; IN DIRECT MODE?
F706 26D9             (      exbasic.asm):04354                   BNE  L8845          ; RETURN IF NOT IN DIRECT MODE
F708 C616             (      exbasic.asm):04355                   LDB  #2*11          ; 'ILLEGAL DIRECT STATEMENT' ERROR
F70A 7EDEEC           (      exbasic.asm):04356         L886E     JMP  LAC46          ; PROCESS ERROR
                      (      exbasic.asm):04357         
F70D AE9F0083         (      exbasic.asm):04358         DEF       LDX  [CHARAD]       ; GET TWO INPUT CHARS
F711 8CFF83           (      exbasic.asm):04359                   CMPX #TOK_FF_USR    ; TOKEN FOR USR
F714 10270074         (      exbasic.asm):04360                   LBEQ L890F          ; BRANCH IF DEF USR
F718 8D23             (      exbasic.asm):04361                   BSR  L88A1          ; GET DESCRIPTOR ADDRESS FOR FN VARIABLE NAME
F71A 8DE6             (      exbasic.asm):04362                   BSR  L8866          ; DON'T ALLOW DEF FN IF IN DIRECT MODE
F71C BDE4DC           (      exbasic.asm):04363                   JSR  LB26A          ; SYNTAX CHECK FOR '('
F71F C680             (      exbasic.asm):04364                   LDB  #$80           ; * GET THE FLAG TO INDICATE ARRAY VARIABLE SEARCH DISABLE
F721 D708             (      exbasic.asm):04365                   STB  ARYDIS         ; * AND SAVE IT IN THE ARRAY DISABLE FLAG
F723 BDE5C4           (      exbasic.asm):04366                   JSR  LB357          ; GET VARIABLE DESCRIPTOR
F726 8D25             (      exbasic.asm):04367                   BSR  L88B1          ; 'TM' ERROR IF STRING
F728 BDE4D9           (      exbasic.asm):04368                   JSR  LB267          ; SYNTAX CHECK FOR ')'
F72B C6AE             (      exbasic.asm):04369                   LDB  #TOK_EQUALS    ; TOKEN FOR '='
F72D BDE4E1           (      exbasic.asm):04370                   JSR  LB26F          ; DO A SYNTAX CHECK FOR =
F730 9E4B             (      exbasic.asm):04371                   LDX  V4B            ; GET THE ADDRESS OF THE FN NAME DESCRIPTOR
F732 DC83             (      exbasic.asm):04372                   LDD  CHARAD         ; * GET THE CURRENT INPUT POINTER ADDRESS AND
F734 ED84             (      exbasic.asm):04373                   STD  ,X             ; * SAVE IT IN FIRST 2 BYTES OF THE DESCRIPTOR
F736 DC39             (      exbasic.asm):04374                   LDD  VARPTR         ; = GET THE DESCRIPTOR ADDRESS OF THE ARGUMENT
F738 ED02             (      exbasic.asm):04375                   STD  $02,X          ; = VARIABLE AND SAVE IT IN THE DESCRIPTOR OF THE FN NAME
F73A 7EE176           (      exbasic.asm):04376                   JMP  DATA           ; MOVE INPUT POINTER TO END OF LINE OR SUBLINE
F73D C6B0             (      exbasic.asm):04377         L88A1     LDB  #TOK_FN        ; TOKEN FOR FN
F73F BDE4E1           (      exbasic.asm):04378                   JSR  LB26F          ; DO A SYNTAX CHECK FOR FN
F742 C680             (      exbasic.asm):04379                   LDB  #$80           ; * GET THE FLAG TO INDICATE ARRAY VARIABLE SEARCH DISABLE FLAG
F744 D708             (      exbasic.asm):04380                   STB  ARYDIS         ; * AND SAVE IT IN ARRAY VARIABLE FLAG
F746 8A80             (      exbasic.asm):04381                   ORA  #$80           ; SET BIT 7 OF CURRENT INPUT CHARACTER TO INDICATE AN FN VARIABLE
F748 BDE5C9           (      exbasic.asm):04382                   JSR  LB35C          ; * GET THE DESCRIPTOR ADDRESS OF THIS
F74B 9F4B             (      exbasic.asm):04383                   STX  V4B            ; * VARIABLE AND SAVE IT IN V4B
F74D 7EE3B5           (      exbasic.asm):04384         L88B1     JMP  LB143          ; 'TM' ERROR IF STRING VARIABLE
                      (      exbasic.asm):04385         * EVALUATE AN FN CALL
F750 8DEB             (      exbasic.asm):04386         L88B4     BSR  L88A1          ; * GET THE DESCRIPTOR OF THE FN NAME
F752 3410             (      exbasic.asm):04387                   PSHS X              ; * VARIABLE AND SAVE IT ON THE STACK
F754 BDE4D4           (      exbasic.asm):04388                   JSR  LB262          ; SYNTAX CHECK FOR '(' & EVALUATE EXPR
F757 8DF4             (      exbasic.asm):04389                   BSR  L88B1          ; 'TM' ERROR IF STRING VARIABLE
F759 3540             (      exbasic.asm):04390                   PULS U              ; POINT U TO FN NAME DESCRIPTOR
F75B C632             (      exbasic.asm):04391                   LDB  #2*25          ; 'UNDEFINED FUNCTION CALL' ERROR
F75D AE42             (      exbasic.asm):04392                   LDX  $02,U          ; POINT X TO ARGUMENT VARIABLE DESCRIPTOR
F75F 27A9             (      exbasic.asm):04393                   BEQ  L886E          ; BRANCH TO ERROR HANDLER
F761 109E83           (      exbasic.asm):04394                   LDY  CHARAD         ; SAVE CURRENT INPUT POINTER IN Y
F764 EEC4             (      exbasic.asm):04395                   LDU  ,U             ; * POINT U TO START OF FN FORMULA AND
F766 DF83             (      exbasic.asm):04396                   STU  CHARAD         ; * SAVE IT IN INPUT POINTER
F768 A604             (      exbasic.asm):04397                   LDA  $04,X          ; = GET FP VALUE OF
F76A 3402             (      exbasic.asm):04398                   PSHS A              ; = ARGUMENT VARIABLE, CURRENT INPUT
F76C EC84             (      exbasic.asm):04399                   LDD  ,X             ; = POINTER, AND ADDRESS OF START
F76E EE02             (      exbasic.asm):04400                   LDU  $02,X          ; = OF FN FORMULA AND SAVE
F770 3476             (      exbasic.asm):04401                   PSHS U,Y,X,B,A      ; = THEM ON THE STACK
F772 BDEE67           (      exbasic.asm):04402                   JSR  LBC35          ; PACK FPA0 AND SAVE IT IN (X)
F775 BDE3B3           (      exbasic.asm):04403         L88D9     JSR  LB141          ; EVALUATE FN EXPRESSION
F778 3576             (      exbasic.asm):04404                   PULS A,B,X,Y,U      ; RESTORE REGISTERS
F77A ED84             (      exbasic.asm):04405                   STD  ,X             ; * GET THE FP
F77C EF02             (      exbasic.asm):04406                   STU  $02,X          ; * VALUE OF THE ARGUMENT
F77E 3502             (      exbasic.asm):04407                   PULS A              ; * VARIABLE OFF OF THE
F780 A704             (      exbasic.asm):04408                   STA  $04,X          ; * STACK AND RE-SAVE IT
F782 9D82             (      exbasic.asm):04409                   JSR  GETCCH         ; GET FINAL CHARACTER OF THE FN FORMULA
F784 1026ED61         (      exbasic.asm):04410                   LBNE LB277          ; 'SYNTAX' ERROR IF NOT END OF LINE
F788 109F83           (      exbasic.asm):04411                   STY  CHARAD         ; RESTORE INPUT POINTER
F78B 39               (      exbasic.asm):04412         L88EF     RTS
                      (      exbasic.asm):04413         
                      (      exbasic.asm):04414         
                      (      exbasic.asm):04415         
                      (      exbasic.asm):04416         * DEF USR
F78C 9D7C             (      exbasic.asm):04417         L890F     JSR  GETNCH         ; SKIP PAST SECOND BYTE OF DEF USR TOKEN
F78E 8D09             (      exbasic.asm):04418                   BSR  L891C          ; GET FN NUMBER
F790 3410             (      exbasic.asm):04419                   PSHS X              ; SAVE FN EXEC ADDRESS STORAGE LOC
F792 8D2D             (      exbasic.asm):04420                   BSR  L8944          ; CALCULATE EXEC ADDRESS
F794 3540             (      exbasic.asm):04421                   PULS U              ; GET FN EXEC ADDRESS STORAGE LOC
F796 AFC4             (      exbasic.asm):04422                   STX  ,U             ; SAVE EXEC ADDRESS
F798 39               (      exbasic.asm):04423                   RTS
F799 5F               (      exbasic.asm):04424         L891C     CLRB                ; DEFAULT TO USR0 IF NO ARGUMENT
F79A 9D7C             (      exbasic.asm):04425                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F79C 2406             (      exbasic.asm):04426                   BCC  L8927          ; BRANCH IF NOT NUMERIC
F79E 8030             (      exbasic.asm):04427                   SUBA #'0            ; MASK OFF ASCII
F7A0 1F89             (      exbasic.asm):04428                   TFR  A,B            ; SAVE USR NUMBER IN ACCB
F7A2 9D7C             (      exbasic.asm):04429                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F7A4 9E8D             (      exbasic.asm):04430         L8927     LDX  USRADR         ; GET ADDRESS OF STORAGE LOCs FOR USR ADDRESS
F7A6 58               (      exbasic.asm):04431                   ASLB                ; X2 - 2 BYTES/USR ADDRESS
F7A7 3A               (      exbasic.asm):04432                   ABX                 ; ADD OFFSET TO START ADDRESS OF STORAGE LOCs
F7A8 39               (      exbasic.asm):04433                   RTS
                      (      exbasic.asm):04434         * PROCESS A USR CALL
F7A9 8DEE             (      exbasic.asm):04435         L892C     BSR  L891C          ; GET STORAGE LOC OF EXEC ADDRESS FOR USR N
F7AB AE84             (      exbasic.asm):04436                   LDX  ,X             ; * GET EXEC ADDRESS AND
F7AD 3410             (      exbasic.asm):04437                   PSHS X              ; * PUSH IT ONTO STACK
F7AF BDE4D4           (      exbasic.asm):04438                   JSR  LB262          ; SYNTAX CHECK FOR '(' & EVALUATE EXPR
F7B2 8E004F           (      exbasic.asm):04439                   LDX  #FP0EXP        ; POINT X TO FPA0
F7B5 9606             (      exbasic.asm):04440                   LDA  VALTYP         ; GET VARIABLE TYPE
F7B7 2707             (      exbasic.asm):04441                   BEQ  L8943          ; BRANCH IF NUMERIC, STRING IF <> 0
F7B9 BDE8C4           (      exbasic.asm):04442                   JSR  LB657          ; GET LENGTH & ADDRESS OF STRING VARIABLE
F7BC 9E52             (      exbasic.asm):04443                   LDX  FPA0+2         ; GET POINTER TO STRING DESCRIPTOR
F7BE 9606             (      exbasic.asm):04444                   LDA  VALTYP         ; GET VARIABLE TYPE
F7C0 39               (      exbasic.asm):04445         L8943     RTS                 ; JUMP TO USR ROUTINE (PSHS X ABOVE)
F7C1 C6AE             (      exbasic.asm):04446         L8944     LDB  #TOK_EQUALS    ; TOKEN FOR '='
F7C3 BDE4E1           (      exbasic.asm):04447                   JSR  LB26F          ; DO A SYNTAX CHECK FOR =
F7C6 7EE9AA           (      exbasic.asm):04448                   JMP  LB73D          ; EVALUATE EXPRESSION, RETURN VALUE IN X
                      (      exbasic.asm):04449         
                      (      exbasic.asm):04450         
                      (      exbasic.asm):04451         
                      (      exbasic.asm):04452         * DEL
F7C9 1027EEEA         (      exbasic.asm):04453         DEL       LBEQ LB44A          ; 'FC' ERROR IF NO ARGUMENT
F7CD BDE1FD           (      exbasic.asm):04454                   JSR  LAF67          ; CONVERT A DECIMAL BASiC NUMBER TO BINARY
F7D0 BDDF8B           (      exbasic.asm):04455                   JSR  LAD01          ; FIND RAM ADDRESS OF START OF A BASIC LINE
F7D3 9F93             (      exbasic.asm):04456                   STX  VD3            ; SAVE RAM ADDRESS OF STARTING LINE NUMBER
F7D5 9D82             (      exbasic.asm):04457                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F7D7 2710             (      exbasic.asm):04458                   BEQ  L8990          ; BRANCH IF END OF LINE
F7D9 81A7             (      exbasic.asm):04459                   CMPA #TOK_MINUS     ; TOKEN FOR '-'
F7DB 263B             (      exbasic.asm):04460                   BNE  L89BF          ; TERMINATE COMMAND IF LINE NUMBER NOT FOLLOWED BY '-'
F7DD 9D7C             (      exbasic.asm):04461                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F7DF 2704             (      exbasic.asm):04462                   BEQ  L898C          ; IF END OF LINE, USE DEFAULT ENDING LINE NUMBER
F7E1 8D24             (      exbasic.asm):04463                   BSR  L89AE          ; * CONVERT ENDING LINE NUMBER TO BINARY
F7E3 2004             (      exbasic.asm):04464                   BRA  L8990          ; * AND SAVE IT IN BINVAL
F7E5 86FF             (      exbasic.asm):04465         L898C     LDA  #$FF           ; = USE $FFXX AS DEFAULT ENDING
F7E7 972B             (      exbasic.asm):04466                   STA  BINVAL         ; = LINE NUMBER - SAVE IT IN BINVAL
F7E9 DE93             (      exbasic.asm):04467         L8990     LDU  VD3            ; POINT U TO STARTING LINE NUMBER ADDRESS
F7EB 8C               (      exbasic.asm):04468         L8992     FCB  SKP2           ; SKIP TWO BYTES
F7EC EEC4             (      exbasic.asm):04469         L8993     LDU  ,U             ; POINT U TO START OF NEXT LINE
F7EE ECC4             (      exbasic.asm):04470                   LDD  ,U             ; CHECK FOR END OF PROGRAM
F7F0 2706             (      exbasic.asm):04471                   BEQ  L899F          ; BRANCH IF END OF PROGRAM
F7F2 EC42             (      exbasic.asm):04472                   LDD  $02,U          ; LOAD ACCD WITH THIS LINE'S NUMBER
F7F4 932B             (      exbasic.asm):04473                   SUBD BINVAL         ; SUBTRACT ENDING LINE NUMBER ADDRESS
F7F6 23F4             (      exbasic.asm):04474                   BLS  L8993          ; BRANCH IF = < ENDING LINE NUMBER
F7F8 9E93             (      exbasic.asm):04475         L899F     LDX  VD3            ; GET STARTING LINE NUMBER
F7FA 8D15             (      exbasic.asm):04476                   BSR  L89B8          ; MOVE (U) TO (X) UNTIL END OF PROGRAM
F7FC BDDFAB           (      exbasic.asm):04477                   JSR  LAD21          ; RESET BASIC'S INPUT POINTER AND ERASE VARIABLES
F7FF 9E93             (      exbasic.asm):04478                   LDX  VD3            ; GET STARTING LINE NUMBER ADDRESS
F801 BDDF7B           (      exbasic.asm):04479                   JSR  LACF1          ; RECOMPUTE START OF NEXT LINE ADDRESSES
F804 7EDF0B           (      exbasic.asm):04480                   JMP  LAC73          ; JUMP TO BASIC'S MAIN COMMAND LOOP
F807 BDE1FD           (      exbasic.asm):04481         L89AE     JSR  LAF67          ; GO GET LINE NUMBER CONVERTED TO BINARY
F80A 7EDCA0           (      exbasic.asm):04482                   JMP  LA5C7          ; MAKE SURE THERE'S NO MORE ON THIS LINE
F80D A6C0             (      exbasic.asm):04483         L89B4     LDA  ,U+            ; GET A BYTE FROM (U)
F80F A780             (      exbasic.asm):04484                   STA  ,X+            ; MOVE THE BYTE TO (X)
F811 11931B           (      exbasic.asm):04485         L89B8     CMPU VARTAB         ; COMPARE TO END OF BASIC
F814 26F7             (      exbasic.asm):04486                   BNE  L89B4          ; BRANCH IF NOT AT END
F816 9F1B             (      exbasic.asm):04487                   STX  VARTAB         ; SAVE (X) AS NEW END OF BASIC
F818 39               (      exbasic.asm):04488         L89BF     RTS
                      (      exbasic.asm):04489         
                      (      exbasic.asm):04490         
F819 BDF702           (      exbasic.asm):04491         L89C0     JSR  L8866          ; 'BS' ERROR IF IN DIRECT MODE
F81C 9D7C             (      exbasic.asm):04492                   JSR  GETNCH         ; GET A CHAR FROM BASIC
F81E 8122             (      exbasic.asm):04493         L89D2     CMPA #'"            ; CHECK FOR PROMPT STRING
F820 260B             (      exbasic.asm):04494                   BNE  L89E1          ; BRANCH IF NO PROMPT STRING
F822 BDE4B6           (      exbasic.asm):04495                   JSR  LB244          ; STRIP OFF PROMPT STRING & PUT IT ON STRING STACK
F825 C63B             (      exbasic.asm):04496                   LDB  #';            ; *
F827 BDE4E1           (      exbasic.asm):04497                   JSR  LB26F          ; * DO A SYNTAX CHECK FOR;
F82A BDEBD1           (      exbasic.asm):04498                   JSR  LB99F          ; REMOVE PROMPT STRING FROM STRING STACK & SEND TO CONSOLE OUT
F82D 327E             (      exbasic.asm):04499         L89E1     LEAS -2,S           ; RESERVE TWO STORAGE SLOTS ON STACK
F82F BDE2B2           (      exbasic.asm):04500                   JSR  LB035          ; INPUT A LINE FROM CURRENT INPUT DEVICE
F832 3262             (      exbasic.asm):04501                   LEAS $02,S          ; CLEAN UP THE STACK
F834 BDE5C4           (      exbasic.asm):04502                   JSR  LB357          ; SEARCH FOR A VARIABLE
F837 9F3B             (      exbasic.asm):04503                   STX  VARDES         ; SAVE POINTER TO VARIABLE DESCRIPTOR
F839 BDE3B8           (      exbasic.asm):04504                   JSR  LB146          ; ''TM' ERROR IF VARIABLE TYPE = NUMERIC
F83C 8E00F3           (      exbasic.asm):04505                   LDX  #LINBUF        ; POINT X TO THE STRING BUFFER WHERE THE INPUT STRING WAS STORED
F83F 4F               (      exbasic.asm):04506                   CLRA                ; TERMINATOR CHARACTER 0 (END OF LINE)
F840 BDE789           (      exbasic.asm):04507                   JSR  LB51A          ; PARSE THE INPUT STRING AND STORE IT IN THE STRING SPACE
F843 7EE23A           (      exbasic.asm):04508                   JMP  LAFA4          ; REMOVE DESCRIPTOR FROM STRING STACK
F846 BDE1FD           (      exbasic.asm):04509         L89FC     JSR  LAF67          ; STRIP A DECIMAL NUMBER FROM BASIC INPUT LINE
F849 9E2B             (      exbasic.asm):04510                   LDX  BINVAL         ; GET BINARY VALUE
F84B 39               (      exbasic.asm):04511                   RTS
F84C 9E91             (      exbasic.asm):04512         L8A02     LDX  VD1            ; GET CURRENT OLD NUMBER BEING RENUMBERED
F84E 9F2B             (      exbasic.asm):04513         L8A04     STX  BINVAL         ; SAVE THE LINE NUMBER BEING SEARCHED FOR
F850 7EDF8B           (      exbasic.asm):04514                   JMP  LAD01          ; GO FIND THE LINE NUMBER IN BASIC PROGRAM
                      (      exbasic.asm):04515         
                      (      exbasic.asm):04516         * RENUM
F853 BDDFB0           (      exbasic.asm):04517         RENUM     JSR  LAD26          ; ERASE VARIABLES
F856 CC000A           (      exbasic.asm):04518                   LDD  #10            ; DEFAULT LINE NUMBER INTERVAL
F859 DD95             (      exbasic.asm):04519                   STD  VD5            ; SAVE DEFAULT RENUMBER START LINE NUMBER
F85B DD8F             (      exbasic.asm):04520                   STD  VCF            ; SAVE DEFAULT INTERVAL
F85D 5F               (      exbasic.asm):04521                   CLRB                ; NOW ACCD = 0
F85E DD91             (      exbasic.asm):04522                   STD  VD1            ; DEFAULT LINE NUMBER OF WHERE TO START RENUMBERING
F860 9D82             (      exbasic.asm):04523                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F862 2406             (      exbasic.asm):04524                   BCC  L8A20          ; BRANCH IF NOT NUMERIC
F864 8DE0             (      exbasic.asm):04525                   BSR  L89FC          ; CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY
F866 9F95             (      exbasic.asm):04526                   STX  VD5            ; SAVE LINE NUMBER WHERE RENUMBERING STARTS
F868 9D82             (      exbasic.asm):04527                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F86A 271B             (      exbasic.asm):04528         L8A20     BEQ  L8A3D          ; BRANCH IF END OF LINE
F86C BDE4DF           (      exbasic.asm):04529                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
F86F 2406             (      exbasic.asm):04530                   BCC  L8A2D          ; BRANCH IF NEXT CHARACTER NOT NUMERIC
F871 8DD3             (      exbasic.asm):04531                   BSR  L89FC          ; CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY
F873 9F91             (      exbasic.asm):04532                   STX  VD1            ; SAVE NEW RENUMBER LINE
F875 9D82             (      exbasic.asm):04533                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F877 270E             (      exbasic.asm):04534         L8A2D     BEQ  L8A3D          ; BRANCH IF END OF LINE
F879 BDE4DF           (      exbasic.asm):04535                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
F87C 2406             (      exbasic.asm):04536                   BCC  L8A3A          ; BRANCH IF NEXT CHARACTER NOT NUMERIC
F87E 8DC6             (      exbasic.asm):04537                   BSR  L89FC          ; CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY
F880 9F8F             (      exbasic.asm):04538                   STX  VCF            ; SAVE NEW INTERVAL
F882 2749             (      exbasic.asm):04539                   BEQ  L8A83          ; 'FC' ERROR
F884 BDDCA0           (      exbasic.asm):04540         L8A3A     JSR  LA5C7          ; CHECK FOR MORE CHARACTERS ON LINE - 'SYNTAX' ERROR IF ANY
F887 8DC3             (      exbasic.asm):04541         L8A3D     BSR  L8A02          ; GO GET ADDRESS OF OLD NUMBER BEING RENUMBERED
F889 9F93             (      exbasic.asm):04542                   STX  VD3            ; SAVE ADDRESS
F88B 9E95             (      exbasic.asm):04543                   LDX  VD5            ; GET NEXT RENUMBERED LINE NUMBER TO USE
F88D 8DBF             (      exbasic.asm):04544                   BSR  L8A04          ; FIND THE LINE NUMBER IN THE BASIC PROGRAM
F88F 9C93             (      exbasic.asm):04545                   CMPX VD3            ; COMPARE TO ADDRESS OF OLD LINE NUMBER
F891 253A             (      exbasic.asm):04546                   BLO  L8A83          ; 'FC' ERROR IF NEW ADDRESS < OLD ADDRESS
F893 8D1C             (      exbasic.asm):04547                   BSR  L8A67          ; MAKE SURE RENUMBERED LINE NUMBERS WILL BE IN RANGE
F895 BDF927           (      exbasic.asm):04548                   JSR  L8ADD          ; CONVERT ASCII LINE NUMBERS TO 'EXPANDED' BINARY
F898 BDDF79           (      exbasic.asm):04549                   JSR  LACEF          ; RECALCULATE NEXT LINE RAM ADDRESSES
F89B 8DAF             (      exbasic.asm):04550                   BSR  L8A02          ; GET RAM ADDRESS OF FIRST LINE TO BE RENUMBERED
F89D 9F93             (      exbasic.asm):04551                   STX  VD3            ; SAVE IT
F89F 8D3A             (      exbasic.asm):04552                   BSR  L8A91          ; MAKE SURE LINE NUMBERS EXIST
F8A1 8D0F             (      exbasic.asm):04553                   BSR  L8A68          ; INSERT NEW LINE NUMBERS IN LINE HEADERS
F8A3 8D36             (      exbasic.asm):04554                   BSR  L8A91          ; INSERT NEW LINE NUMBERS IN PROGRAM STATEMENTS
F8A5 BDF9C2           (      exbasic.asm):04555                   JSR  L8B7B          ; CONVERT PACKED BINARY LINE NUMBERS TO ASCII
F8A8 BDDFB0           (      exbasic.asm):04556                   JSR  LAD26          ; ERASE VARIABLES
F8AB BDDF79           (      exbasic.asm):04557                   JSR  LACEF          ; RECALCULATE NEXT LINE RAM ADDRESS
F8AE 7EDF0B           (      exbasic.asm):04558                   JMP  LAC73          ; GO BACK TO BASIC'S MAIN LOOP
F8B1 86               (      exbasic.asm):04559         L8A67     FCB  SKP1LD         ; SKIP ONE BYTE - LDA #$4F
F8B2 4F               (      exbasic.asm):04560         L8A68     CLRA                ; NEW LINE NUMBER FLAG - 0; INSERT NEW LINE NUMBERS
F8B3 9798             (      exbasic.asm):04561                   STA  VD8            ; SAVE NEW LINE NUMBER FLAG; 0 = INSERT NEW NUMBERS
F8B5 9E93             (      exbasic.asm):04562                   LDX  VD3            ; GET ADDRESS OF OLD LINE NUMBER BEING RENUMBERED
F8B7 DC95             (      exbasic.asm):04563                   LDD  VD5            ; GET THE CURRENT RENUMBERED LINE NUMBER
F8B9 8D15             (      exbasic.asm):04564                   BSR  L8A86          ; RETURN IF END OF PROGRAM
F8BB 0D98             (      exbasic.asm):04565         L8A71     TST  VD8            ; CHECK NEW LINE NUMBER FLAG
F8BD 2602             (      exbasic.asm):04566                   BNE  L8A77          ; BRANCH IF NOT INSERTING NEW LINE NUMBERS
F8BF ED02             (      exbasic.asm):04567                   STD  $02,X          ; STORE THE NEW LINE NUMBER IN THE BASIC PROGRAM
F8C1 AE84             (      exbasic.asm):04568         L8A77     LDX  ,X             ; POINT X TO THE NEXT LINE IN BASIC
F8C3 8D0B             (      exbasic.asm):04569                   BSR  L8A86          ; RETURN IF END OF PROGRAM
F8C5 D38F             (      exbasic.asm):04570                   ADDD VCF            ; ADD INTERVAL TO CURRENT RENUMBERED LINE NUMBER
F8C7 2504             (      exbasic.asm):04571                   BLO  L8A83          ; 'FC' ERROR IF LINE NUMBER > $FFFF
F8C9 81FA             (      exbasic.asm):04572                   CMPA #MAXLIN        ; LARGEST LINE NUMBER = $F9FF
F8CB 25EE             (      exbasic.asm):04573                   BLO  L8A71          ; BRANCH IF LEGAL LINE NUMBER
F8CD 7EE6B7           (      exbasic.asm):04574         L8A83     JMP  LB44A          ; 'FC' ERROR IF LINE NUMBER MS BYTE > $F9
                      (      exbasic.asm):04575         * TEST THE TWO BYTES POINTED TO BY (X).
                      (      exbasic.asm):04576         * NORMAL RETURN IF <> 0. IF = 0 (END OF
                      (      exbasic.asm):04577         * PROGRAM) RETURN IS PULLED OFF STACK AND
                      (      exbasic.asm):04578         * YOU RETURN TO PREVIOUS SUBROUTINE CALL.
F8D0 3406             (      exbasic.asm):04579         L8A86     PSHS B,A            ; SAVE ACCD
F8D2 EC84             (      exbasic.asm):04580                   LDD  ,X             ; TEST THE 2 BYTES POINTED TO BY X
F8D4 3506             (      exbasic.asm):04581                   PULS A,B            ; RESTORE ACCD
F8D6 2602             (      exbasic.asm):04582                   BNE  L8A90          ; BRANCH IF NOT END OF PROGRAM
F8D8 3262             (      exbasic.asm):04583                   LEAS $02,S          ; PURGE RETURN ADDRESS FROM STACK
F8DA 39               (      exbasic.asm):04584         L8A90     RTS
F8DB 9E19             (      exbasic.asm):04585         L8A91     LDX  TXTTAB         ; GET START OF BASIC PROGRAM
F8DD 301F             (      exbasic.asm):04586                   LEAX -1,X           ; MOVE POINTER BACK ONE
F8DF 3001             (      exbasic.asm):04587         L8A95     LEAX $01,X          ; MOVE POINTER UP ONE
F8E1 8DED             (      exbasic.asm):04588                   BSR  L8A86          ; RETURN IF END OF PROGRAM
F8E3 3003             (      exbasic.asm):04589         L8A99     LEAX $03,X          ; SKIP OVER NEXT LINE ADDRESS AND LINE NUMBER
F8E5 3001             (      exbasic.asm):04590         L8A9B     LEAX $01,X          ; MOVE POINTER TO NEXT CHARACTER
F8E7 A684             (      exbasic.asm):04591                   LDA  ,X             ; CHECK CURRENT CHARACTER
F8E9 27F4             (      exbasic.asm):04592                   BEQ  L8A95          ; BRANCH IF END OF LINE
F8EB 9F0F             (      exbasic.asm):04593                   STX  TEMPTR         ; SAVE CURRENT POINTER
F8ED 4A               (      exbasic.asm):04594                   DECA                ; =
F8EE 270C             (      exbasic.asm):04595                   BEQ  L8AB2          ; =BRANCH IF START OF PACKED NUMERIC LINE
F8F0 4A               (      exbasic.asm):04596                   DECA                ; *
F8F1 272A             (      exbasic.asm):04597                   BEQ  L8AD3          ; *BRANCH IF LINE NUMBER EXISTS
F8F3 4A               (      exbasic.asm):04598                   DECA                ; =
F8F4 26EF             (      exbasic.asm):04599                   BNE  L8A9B          ; =MOVE TO NEXT CHARACTER IF > 3
F8F6 8603             (      exbasic.asm):04600         L8AAC     LDA  #$03           ; * SET 1ST BYTE = 3 TO INDICATE LINE
F8F8 A780             (      exbasic.asm):04601                   STA  ,X+            ; * NUMBER DOESN'T CURRENTLY EXIST
F8FA 20E7             (      exbasic.asm):04602                   BRA  L8A99          ; GO GET ANOTHER CHARACTER
F8FC EC01             (      exbasic.asm):04603         L8AB2     LDD  $01,X          ; GET MS BYTE OF LINE NUMBER
F8FE 6A02             (      exbasic.asm):04604                   DEC  $02,X          ; DECREMENT ZERO CHECK BYTE
F900 2701             (      exbasic.asm):04605                   BEQ  L8AB9          ; BRANCH IF MS BYTE <> 0
F902 4F               (      exbasic.asm):04606                   CLRA                ; CLEAR MS BYTE
F903 E603             (      exbasic.asm):04607         L8AB9     LDB  $03,X          ; GET LS BYTE OF LINE NUMBER
F905 6A04             (      exbasic.asm):04608                   DEC  $04,X          ; DECREMENT ZERO CHECK FLAG
F907 2701             (      exbasic.asm):04609                   BEQ  L8AC0          ; BRANCH IF IS BYTE <> 0
F909 5F               (      exbasic.asm):04610                   CLRB                ; CLEAR LS BYTE
F90A ED01             (      exbasic.asm):04611         L8AC0     STD  $01,X          ; SAVE BINARY LINE NUMBER
F90C DD2B             (      exbasic.asm):04612                   STD  BINVAL         ; SAVE TRIAL LINE NUMBER
F90E BDDF8B           (      exbasic.asm):04613                   JSR  LAD01          ; FIND RAM ADDRESS OF A BASIC LINE NUMBER
F911 9E0F             (      exbasic.asm):04614         L8AC7     LDX  TEMPTR         ; GET BACK POINTER TO START OF PACKED LINE NUMBER
F913 25E1             (      exbasic.asm):04615                   BLO  L8AAC          ; BRANCH IF NO LINE NUMBER MATCH FOUND
F915 DC47             (      exbasic.asm):04616                   LDD  V47            ; GET START ADDRESS OF LINE NUMBER
F917 6C80             (      exbasic.asm):04617                   INC  ,X+            ; * SET 1ST BYTE = 2, TO INDICATE LINE NUMBER EXISTS IF CHECKING FOR
                      (      exbasic.asm):04618         *              ; * EXISTENCE OF LINE NUMBER, SET IT = 1 IF INSERTING LINE NUMBERS
                      (      exbasic.asm):04619         
F919 ED84             (      exbasic.asm):04620                   STD  ,X             ; SAVE RAM ADDRESS OF CORRECT LINE NUMBER
F91B 20C6             (      exbasic.asm):04621                   BRA  L8A99          ; GO GET ANOTHER CHARACTER
F91D 6F84             (      exbasic.asm):04622         L8AD3     CLR  ,X             ; CLEAR CARRY FLAG AND 1ST BYTE
F91F AE01             (      exbasic.asm):04623                   LDX  $01,X          ; POINT X TO RAM ADDRESS OF CORRECT LINE NUMBER
F921 AE02             (      exbasic.asm):04624                   LDX  $02,X          ; PUT CORRECT LINE NUMBER INTO (X)
F923 9F47             (      exbasic.asm):04625                   STX  V47            ; SAVE IT TEMPORARILY
F925 20EA             (      exbasic.asm):04626                   BRA  L8AC7          ; GO INSERT IT INTO BASIC LINE
F927 9E19             (      exbasic.asm):04627         L8ADD     LDX  TXTTAB         ; GET BEGINNING OF BASIC PROGRAM
F929 2004             (      exbasic.asm):04628                   BRA  L8AE5
F92B 9E83             (      exbasic.asm):04629         L8AE1     LDX  CHARAD         ; *GET CURRENT INPUT POINTER
F92D 3001             (      exbasic.asm):04630                   LEAX $01,X          ; *AND BUMP IT ONE
F92F 8D9F             (      exbasic.asm):04631         L8AE5     BSR  L8A86          ; RETURN IF END OF PROGRAM
F931 3002             (      exbasic.asm):04632                   LEAX $02,X          ; SKIP PAST NEXT LINE ADDRESS
F933 3001             (      exbasic.asm):04633         L8AE9     LEAX $01,X          ; ADVANCE POINTER BY ONE
F935 9F83             (      exbasic.asm):04634         L8AEB     STX  CHARAD         ; SAVE NEW BASIC INPUT POINTER
F937 9D7C             (      exbasic.asm):04635         L8AED     JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
F939 4D               (      exbasic.asm):04636         L8AEF     TSTA                ; CHECK THE CHARACTER
F93A 27EF             (      exbasic.asm):04637                   BEQ  L8AE1          ; BRANCH IF END OF LINE
F93C 2AF9             (      exbasic.asm):04638                   BPL  L8AED          ; BRANCH IF NOT A TOKEN
F93E 9E83             (      exbasic.asm):04639                   LDX  CHARAD         ; GET CURRENT INPUT POINTER
F940 81FF             (      exbasic.asm):04640                   CMPA #$FF           ; IS THIS A SECONDARY TOKEN?
F942 27EF             (      exbasic.asm):04641                   BEQ  L8AE9          ; YES - IGNORE IT
F944 81A2             (      exbasic.asm):04642                   CMPA #TOK_THEN      ; TOKEN FOR THEN?
F946 2712             (      exbasic.asm):04643                   BEQ  L8B13          ; YES
F948 8184             (      exbasic.asm):04644                   CMPA #TOK_ELSE      ; TOKEN FOR ELSE?
F94A 270E             (      exbasic.asm):04645                   BEQ  L8B13          ; YES
F94C 8181             (      exbasic.asm):04646                   CMPA #TOK_GO        ; TOKEN FOR GO?
F94E 26E7             (      exbasic.asm):04647                   BNE  L8AED          ; NO
F950 9D7C             (      exbasic.asm):04648                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F952 81A0             (      exbasic.asm):04649                   CMPA #TOK_TO        ; TOKEN FOR TO?
F954 2704             (      exbasic.asm):04650                   BEQ  L8B13          ; YES
F956 81A1             (      exbasic.asm):04651                   CMPA #TOK_SUB       ; TOKEN FOR SUB?
F958 26DB             (      exbasic.asm):04652                   BNE  L8AEB          ; NO
F95A 9D7C             (      exbasic.asm):04653         L8B13     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F95C 2504             (      exbasic.asm):04654                   BLO  L8B1B          ; BRANCH IF NUMERIC
F95E 9D82             (      exbasic.asm):04655         L8B17     JSR  GETCCH         ; GET CURRENT BASIC INPUT CHARRACTER
F960 20D7             (      exbasic.asm):04656                   BRA  L8AEF          ; KEEP CHECKING THE LINE
F962 9E83             (      exbasic.asm):04657         L8B1B     LDX  CHARAD         ; GET CURRENT INPUT ADDRESS
F964 3410             (      exbasic.asm):04658                   PSHS X              ; SAVE IT ON THE STACK
F966 BDE1FD           (      exbasic.asm):04659                   JSR  LAF67          ; CONVERT DECIMAL BASIC NUMBER TO BINARY
F969 9E83             (      exbasic.asm):04660                   LDX  CHARAD         ; GET CURRENT INPUT POINTER
F96B A682             (      exbasic.asm):04661         L8B24     LDA  ,-X            ; GET PREVIOUS INPUT CHARACTER
F96D BDFCD2           (      exbasic.asm):04662                   JSR  L90AA          ; CLEAR CARRY IF NUMERIC INPUT VALUE
F970 25F9             (      exbasic.asm):04663                   BLO  L8B24          ; BRANCH IF NON-NUMERIC
F972 3001             (      exbasic.asm):04664                   LEAX $01,X          ; MOVE POINTER UP ONE
F974 1F10             (      exbasic.asm):04665                   TFR  X,D            ; NOW ACCD POINTS TO ONE PAST END OF LINE NUMBER
F976 E061             (      exbasic.asm):04666                   SUBB $01,S          ; SUBTRACT PRE-NUMERIC POINTER LS BYTE
F978 C005             (      exbasic.asm):04667                   SUBB #$05           ; MAKE SURE THERE ARE AT LEAST 5 CHARACTERS IN THE NUMERIC LINE
                      (      exbasic.asm):04668         *
F97A 2720             (      exbasic.asm):04669                   BEQ  L8B55          ; BRANCH IF EXACTLY 5
F97C 250A             (      exbasic.asm):04670                   BLO  L8B41          ; BRANCH IF < 5
F97E 3384             (      exbasic.asm):04671                   LEAU ,X             ; TRANSFER X TO U
F980 50               (      exbasic.asm):04672                   NEGB                ; NEGATE B
F981 3085             (      exbasic.asm):04673                   LEAX B,X            ; MOVE X BACK B BYTES
F983 BDF811           (      exbasic.asm):04674                   JSR  L89B8          ; *MOVE BYTES FROM (U) TO (X) UNTIL
                      (      exbasic.asm):04675         *         *U   = END OF BASIC; (I) = NEW END OF BASIC
F986 2014             (      exbasic.asm):04676                   BRA  L8B55
                      (      exbasic.asm):04677         * FORCE FIVE BYTES OF SPACE FOR THE LINE NUMBER
F988 9F47             (      exbasic.asm):04678         L8B41     STX  V47            ; SAVE END OF NUMERIC VALUE
F98A 9E1B             (      exbasic.asm):04679                   LDX  VARTAB         ; GET END OF BASIC PROGRAM
F98C 9F43             (      exbasic.asm):04680                   STX  V43            ; SAVE IT
F98E 50               (      exbasic.asm):04681                   NEGB                ; NEGATE B
F98F 3085             (      exbasic.asm):04682                   LEAX B,X            ; ADD IT TO END OF NUMERIC POiNTER
F991 9F41             (      exbasic.asm):04683                   STX  V41            ; SAVE POINTER
F993 9F1B             (      exbasic.asm):04684                   STX  VARTAB         ; STORE END OF BASIC PROGRAM
F995 BDDEC4           (      exbasic.asm):04685                   JSR  LAC1E          ; ACCD = TOP OF ARRAYS - CHECK FOR ENOUGH ROOM
F998 9E45             (      exbasic.asm):04686                   LDX  V45            ; * GET AND SAVE THE
F99A 9F83             (      exbasic.asm):04687                   STX  CHARAD         ; * NEW CURRENT INPUT POINTER
F99C 3510             (      exbasic.asm):04688         L8B55     PULS X              ; RESTORE POINTER TO START OF NUMERIC VALUE
F99E 8601             (      exbasic.asm):04689                   LDA  #$01           ; NEW LINE NUMBER FLAG
F9A0 A784             (      exbasic.asm):04690                   STA  ,X             ; * SAVE NEW LINE FLAG
F9A2 A702             (      exbasic.asm):04691                   STA  $02,X          ; *
F9A4 A704             (      exbasic.asm):04692                   STA  $04,X          ; *
F9A6 D62B             (      exbasic.asm):04693                   LDB  BINVAL         ; GET MS BYTE OF BINARY LINE NUMBER
F9A8 2604             (      exbasic.asm):04694                   BNE  L8B67          ; BRANCH IF IT IS NOT ZERO
F9AA C601             (      exbasic.asm):04695                   LDB  #$01           ; ; SAVE A 1 IF BYTE IS 0; OTHERWISE, BASIC WILL
                      (      exbasic.asm):04696         *              ; THINK IT IS THE END OF A LINE
F9AC 6C02             (      exbasic.asm):04697                   INC  $02,X          ; IF 2,X = 2, THEN PREVIOUS BYTE WAS A ZERO
F9AE E701             (      exbasic.asm):04698         L8B67     STB  $01,X          ; SAVE MS BYTE OF BINARY LINE NUMBER
F9B0 D62C             (      exbasic.asm):04699                   LDB  BINVAL+1       ; GET IS BYTE OF BINARY LINE NUMBER
F9B2 2604             (      exbasic.asm):04700                   BNE  L8B71          ; BRANCH IF NOT A ZERO BYTE
F9B4 C601             (      exbasic.asm):04701                   LDB  #$01           ; SAVE A 1 IF BYTE IS A 0
F9B6 6C04             (      exbasic.asm):04702                   INC  $04,X          ; IF 4,X = 2, THEN PREVIOUS BYTE WAS A 0
F9B8 E703             (      exbasic.asm):04703         L8B71     STB  $03,X          ; SAVE LS BYTE OF BINARY LINE NUMBER
F9BA 9D82             (      exbasic.asm):04704                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F9BC 812C             (      exbasic.asm):04705                   CMPA #',            ; IS IT A COMMA?
F9BE 279A             (      exbasic.asm):04706                   BEQ  L8B13          ; YES - PROCESS ANOTHER NUMERIC VALUE
F9C0 209C             (      exbasic.asm):04707                   BRA  L8B17          ; NO - GO GET AND PROCESS AN INPUT CHARACTER
F9C2 9E19             (      exbasic.asm):04708         L8B7B     LDX  TXTTAB         ; POINT X TO START OF BASIC PROGRAM
F9C4 301F             (      exbasic.asm):04709                   LEAX -1,X           ; MOVE POINTER BACK ONE
F9C6 3001             (      exbasic.asm):04710         L8B7F     LEAX $01,X          ; MOVE POINTER UP ONE
F9C8 EC02             (      exbasic.asm):04711                   LDD  $02,X          ; GET ADDRESS OF NEXT LINE
F9CA DD68             (      exbasic.asm):04712                   STD  CURLIN         ; SAVE IT IN CURLIN
F9CC BDF8D0           (      exbasic.asm):04713                   JSR  L8A86          ; RETURN IF END OF PROGRAM
F9CF 3003             (      exbasic.asm):04714                   LEAX $03,X          ; SKIP OVER ADDRESS OF NEXT LINE AND 1ST BYTE OF LINE NUMBER
F9D1 3001             (      exbasic.asm):04715         L8B8A     LEAX $01,X          ; MOVE POINTER UP ONE
F9D3 A684             (      exbasic.asm):04716         L8B8C     LDA  ,X             ; GET CURRENT CHARACTER
F9D5 27EF             (      exbasic.asm):04717                   BEQ  L8B7F          ; BRANCH IF END OF LINE
F9D7 4A               (      exbasic.asm):04718                   DECA                ; INPUT CHARACTER = 1? - VALID LINE NUMBER
F9D8 271B             (      exbasic.asm):04719                   BEQ  L8BAE          ; YES
F9DA 8002             (      exbasic.asm):04720                   SUBA #$02           ; INPUT CHARACTER 3? - UL LINE NUMBER
F9DC 26F3             (      exbasic.asm):04721                   BNE  L8B8A          ; NO
F9DE 3410             (      exbasic.asm):04722                   PSHS X              ; SAVE CURRENT POSITION OF INPUT POINTER
F9E0 8EFA1F           (      exbasic.asm):04723                   LDX  #L8BD9-1       ; POINT X TO 'UL' MESSAGE
F9E3 BDEBCE           (      exbasic.asm):04724                   JSR  LB99C          ; PRINT STRING TO THE SCREEN
F9E6 AEE4             (      exbasic.asm):04725                   LDX  ,S             ; GET INPUT POINTER
F9E8 EC01             (      exbasic.asm):04726                   LDD  $01,X          ; GET THE UNDEFINED LINE NUMBER
F9EA BDEFFE           (      exbasic.asm):04727                   JSR  LBDCC          ; CONVERT NUMBER IN ACCD TO DECIMAL AND DISPLAY IT
F9ED BDEFF7           (      exbasic.asm):04728                   JSR  LBDC5          ; PRINT 'IN XXXX' XXXX = CURRENT LINE NUMBER
F9F0 BDEB8E           (      exbasic.asm):04729                   JSR  LB958          ; SEND A CR TO CONSOLE OUT
F9F3 3510             (      exbasic.asm):04730                   PULS X              ; GET INPUT POINTER BACK
F9F5 3410             (      exbasic.asm):04731         L8BAE     PSHS X              ; SAVE CURRENT POSITION OF INPUT POINTER
F9F7 EC01             (      exbasic.asm):04732                   LDD  $01,X          ; LOAD ACCD WITH BINARY VALUE OF LINE NUMBER
F9F9 DD52             (      exbasic.asm):04733                   STD  FPA0+2         ; SAVE IN BOTTOM 2 BYTES OF FPA0
F9FB BDF6AA           (      exbasic.asm):04734                   JSR  L880E          ; ADJUST REST OF FPA0 AS AN INTEGER
F9FE BDF00B           (      exbasic.asm):04735                   JSR  LBDD9          ; CONVERT FPA0 TO ASCII, STORE IN LINE NUMBER
FA01 3540             (      exbasic.asm):04736                   PULS U              ; LOAD U WITH PREVIOUS ADDRESS OF INPUT POINTER
FA03 C605             (      exbasic.asm):04737                   LDB  #$05           ; EACH EXPANDED LINE NUMBER USES 5 BYTES
FA05 3001             (      exbasic.asm):04738         L8BBE     LEAX $01,X          ; MOVE POINTER FORWARD ONE
FA07 A684             (      exbasic.asm):04739                   LDA  ,X             ; GET AN ASCII BYTE
FA09 2705             (      exbasic.asm):04740                   BEQ  L8BC9          ; BRANCH IF END OF NUMBER
FA0B 5A               (      exbasic.asm):04741                   DECB                ; DECREMENT BYTE COUNTER
FA0C A7C0             (      exbasic.asm):04742                   STA  ,U+            ; STORE ASCII NUMBER IN BASIC LINE
FA0E 20F5             (      exbasic.asm):04743                   BRA  L8BBE          ; CHECK FOR ANOTHER DIGIT
FA10 30C4             (      exbasic.asm):04744         L8BC9     LEAX ,U             ; TRANSFER NEW LINE POINTER TO (X)
FA12 5D               (      exbasic.asm):04745                   TSTB                ; DOES THE NEW LINE NUMBER REQUIRE 5 BYTES?
FA13 27BE             (      exbasic.asm):04746                   BEQ  L8B8C          ; YES - GO GET ANOTHER INPUT CHARACTER
FA15 31C4             (      exbasic.asm):04747                   LEAY ,U             ; SAVE NEW LINE POINTER IN Y
FA17 33C5             (      exbasic.asm):04748                   LEAU B,U            ; POINT U TO END OF 5 BYTE PACKED LINE NUMBER BLOCK
FA19 BDF811           (      exbasic.asm):04749                   JSR  L89B8          ; MOVE BYTES FROM (U) TO (X) UNTIL END OF PROGRAM
FA1C 30A4             (      exbasic.asm):04750                   LEAX ,Y             ; LOAD (X) WITH NEW LINE POINTER
FA1E 20B3             (      exbasic.asm):04751                   BRA  L8B8C          ; GO GET ANOTHER INPUT CHARACTER
                      (      exbasic.asm):04752         
FA20 554C20           (      exbasic.asm):04753         L8BD9     FCC  "UL "          ; UNKNOWN LINE NUMBER MESSAGE
FA23 00               (      exbasic.asm):04754                   FCB  0
                      (      exbasic.asm):04755         
                      (      exbasic.asm):04756         
FA24 BDE9AD           (      exbasic.asm):04757         HEXDOL    JSR  LB740          ; CONVERT FPA0 INTO A POSITIVE 2 BYTE INTEGER
FA27 8E01F0           (      exbasic.asm):04758                   LDX  #STRBUF+2      ; POINT TO TEMPORARY BUFFER
FA2A C604             (      exbasic.asm):04759                   LDB  #$04           ; CONVERT 4 NIBBLES
FA2C 3404             (      exbasic.asm):04760         L8BE5     PSHS B              ; SAVE NIBBLE COUNTER
FA2E 5F               (      exbasic.asm):04761                   CLRB                ; CLEAR CARRY FLAG
FA2F 8604             (      exbasic.asm):04762                   LDA  #$04           ; 4 SHIFTS
FA31 0853             (      exbasic.asm):04763         L8BEA     ASL  FPA0+3         ; * SHIFT BOTTOM TWO BYTES OF
FA33 0952             (      exbasic.asm):04764                   ROL  FPA0+2         ; * FPA0 LEFT ONE BIT (X2)
FA35 59               (      exbasic.asm):04765                   ROLB                ; IF OVERFLOW, ACCB <> 0
FA36 4A               (      exbasic.asm):04766                   DECA                ; * DECREMENT SHIFT COUNTER AND
FA37 26F8             (      exbasic.asm):04767                   BNE  L8BEA          ; * BRANCH IF NOT DONE
FA39 5D               (      exbasic.asm):04768                   TSTB                ; CHECK FOR OVERFLOW
FA3A 260A             (      exbasic.asm):04769                   BNE  L8BFF          ; BRANCH IF OVERFLOW
FA3C A6E4             (      exbasic.asm):04770                   LDA  ,S             ; * GET NIBBLE COUNTER,
FA3E 4A               (      exbasic.asm):04771                   DECA                ; * DECREMENT IT AND
FA3F 2705             (      exbasic.asm):04772                   BEQ  L8BFF          ; * BRANCH IF DONE
FA41 8C01F0           (      exbasic.asm):04773                   CMPX #STRBUF+2      ; DO NOT DO A CONVERSION UNTIL A NON-ZERO
FA44 270C             (      exbasic.asm):04774                   BEQ  L8C0B          ; BYTE IS FOUND - LEADING ZERO SUPPRESSION
FA46 CB30             (      exbasic.asm):04775         L8BFF     ADDB #'0            ; ADD IN ASCII ZERO
FA48 C139             (      exbasic.asm):04776                   CMPB #'9            ; COMPARE TO ASCII 9
FA4A 2302             (      exbasic.asm):04777                   BLS  L8C07          ; BRANCH IF < 9
FA4C CB07             (      exbasic.asm):04778                   ADDB #7             ; ADD ASCII OFFSET IF HEX LETTER
FA4E E780             (      exbasic.asm):04779         L8C07     STB  ,X+            ; STORE HEX VALUE AND ADVANCE POINTER
FA50 6F84             (      exbasic.asm):04780                   CLR  ,X             ; CLEAR NEXT BYTE - END OF STRING FLAG
FA52 3504             (      exbasic.asm):04781         L8C0B     PULS B              ; * GET NIBBLE COUNTER,
FA54 5A               (      exbasic.asm):04782                   DECB                ; * DECREMENT IT AND
FA55 26D5             (      exbasic.asm):04783                   BNE  L8BE5          ; * BRANCH IF NOT DONE
FA57 3262             (      exbasic.asm):04784                   LEAS $02,S          ; PURGE RETURN ADDRESS OFF OF STACK
FA59 8E01EF           (      exbasic.asm):04785                   LDX  #STRBUF+1      ; RESET POINTER
FA5C 7EE785           (      exbasic.asm):04786                   JMP  LB518          ; SAVE STRING ON STRING STACK
                      (      exbasic.asm):04787         * PROCESS EXCLAMATION POINT
FA5F 8601             (      exbasic.asm):04788         L8E37     LDA  #$01           ; * SET SPACES
FA61 9799             (      exbasic.asm):04789                   STA  VD9            ; * COUNTER = 1
                      (      exbasic.asm):04790         * PROCESS STRING ITEM - LIST
FA63 5A               (      exbasic.asm):04791         L8E3B     DECB                ; DECREMENT FORMAT STRING LENGTH COUNTER
FA64 BDFC00           (      exbasic.asm):04792                   JSR  L8FD8          ; SEND A '+' TO CONSOLE OUT IF VDA <>0
FA67 9D82             (      exbasic.asm):04793                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
FA69 10270093         (      exbasic.asm):04794                   LBEQ L8ED8          ; EXIT PRINT USING IF END OF LINE
FA6D D793             (      exbasic.asm):04795                   STB  VD3            ; SAVE REMAINDER FORMAT STRING LENGTH
FA6F BDE3C8           (      exbasic.asm):04796                   JSR  LB156          ; EVALUATE EXPRESSION
FA72 BDE3B8           (      exbasic.asm):04797                   JSR  LB146          ; 'TM' ERROR IF NUMERIC VARIABLE
FA75 9E52             (      exbasic.asm):04798                   LDX  FPA0+2         ; * GET ITEM - LIST DESCRIPTOR ADDRESS
FA77 9F4D             (      exbasic.asm):04799                   STX  V4D            ; * AND SAVE IT IN V4D
FA79 D699             (      exbasic.asm):04800                   LDB  VD9            ; GET SPACES COUNTER
FA7B BDE91A           (      exbasic.asm):04801                   JSR  LB6AD          ; PUT ACCB BYTES INTO STRING SPACE & PUT DESCRIPTOR ON STRING STACK
FA7E BDEBD1           (      exbasic.asm):04802                   JSR  LB99F          ; PRINT THE FORMATTED STRING TO CONSOLE OUT
                      (      exbasic.asm):04803         * PAD FORMAT STRING WITH SPACES IF ITEM - LIST STRING < FORMAT STRING LENGTH
FA81 9E52             (      exbasic.asm):04804                   LDX  FPA0+2         ; POINT X TO FORMATTED STRING DESCRIPTOR ADDRESS
FA83 D699             (      exbasic.asm):04805                   LDB  VD9            ; GET SPACES COUNTER
FA85 E084             (      exbasic.asm):04806                   SUBB ,X             ; SUBTRACT LENGTH OF FORMATTED STRING
FA87 5A               (      exbasic.asm):04807         L8E5F     DECB                ; DECREMENT DIFFERENCE
FA88 102B014F         (      exbasic.asm):04808                   LBMI L8FB3          ; GO INTERPRET ANOTHER ITEM - LIST
FA8C BDEBDE           (      exbasic.asm):04809                   JSR  LB9AC          ; PAD FORMAT STRING WITH A SPACE
FA8F 20F6             (      exbasic.asm):04810                   BRA  L8E5F          ; KEEP PADDING
                      (      exbasic.asm):04811         * PERCENT SIGN - PROCESS A %SPACES% COMMAND
FA91 D793             (      exbasic.asm):04812         L8E69     STB  VD3            ; * SAVE THE CURRENT FORMAT STRING
FA93 9F0F             (      exbasic.asm):04813                   STX  TEMPTR         ; * COUNTER AND POINTER
FA95 8602             (      exbasic.asm):04814                   LDA  #$02           ; INITIAL SPACES COUNTER = 2
FA97 9799             (      exbasic.asm):04815                   STA  VD9            ; SAVE IN SPACES COUNTER
FA99 A684             (      exbasic.asm):04816         L8E71     LDA  ,X             ; GET A CHARACTER FROM FORMAT STRING
FA9B 8125             (      exbasic.asm):04817                   CMPA #'%            ; COMPARE TO TERMINATOR CHARACTER
FA9D 27C4             (      exbasic.asm):04818                   BEQ  L8E3B          ; BRANCH IF END OF SPACES COMMAND
FA9F 8120             (      exbasic.asm):04819                   CMPA #'             ; BLANK
FAA1 2607             (      exbasic.asm):04820                   BNE  L8E82          ; BRANCH IF ILLEGAL CHARACTER
FAA3 0C99             (      exbasic.asm):04821                   INC  VD9            ; ADD ONE TO SPACES COUNTER
FAA5 3001             (      exbasic.asm):04822                   LEAX $01,X          ; MOVE FORMAT POINTER UP ONE
FAA7 5A               (      exbasic.asm):04823                   DECB                ; DECREMENT LENGTH COUNTER
FAA8 26EF             (      exbasic.asm):04824                   BNE  L8E71          ; BRANCH IF NOT END OF FORMAT STRING
FAAA 9E0F             (      exbasic.asm):04825         L8E82     LDX  TEMPTR         ; * RESTORE CURRENT FORMAT STRING COUNTER
FAAC D693             (      exbasic.asm):04826                   LDB  VD3            ; * AND POINTER TO POSITION BEFORE SPACES COMMAND
FAAE 8625             (      exbasic.asm):04827                   LDA  #'%            ; SEND A '%' TO CONSOLE OUT AS A DEBUGGING AID
                      (      exbasic.asm):04828         * ERROR PROCESSOR - ILLEGAL CHARACTER OR BAD SYNTAX IN FORMAT STRING
FAB0 BDFC00           (      exbasic.asm):04829         L8E88     JSR  L8FD8          ; SEND A '+' TO CONSOLE OUT IF VDA <> 0
FAB3 BDDB10           (      exbasic.asm):04830                   JSR  PUTCHR         ; SEND CHARACTER TO CONSOLE OUT
FAB6 2029             (      exbasic.asm):04831                   BRA  L8EB9          ; GET NEXT CHARACTER IN FORMAT STRING
                      (      exbasic.asm):04832         
                      (      exbasic.asm):04833         * PRINT RAM HOOK
FAB8 81B1             (      exbasic.asm):04834         XVEC9     CMPA #TOK_USING     ; USING TOKEN
FABA 2701             (      exbasic.asm):04835                   BEQ  L8E95          ; BRANCH IF PRINT USING
FABC 39               (      exbasic.asm):04836                   RTS
                      (      exbasic.asm):04837         
                      (      exbasic.asm):04838         * PRINT USING
                      (      exbasic.asm):04839         * VDA IS USED AS A STATUS BYTE: BIT 6 = COMMA FORCE
                      (      exbasic.asm):04840         * BIT 5=LEADING ASTERISK FORCE; BIT 4 = FLOATING $ FORCE
                      (      exbasic.asm):04841         * BIT 3 = PRE SIGN FORCE; BIT 2 = POST SIGN FORCE; BIT 0 = EXPONENTIAL FORCE
FABD 3262             (      exbasic.asm):04842         L8E95     LEAS $02,S          ; PURGE RETURN ADDRESS OFF THE STACK
FABF BDE3CA           (      exbasic.asm):04843                   JSR  LB158          ; EVALUATE FORMAT STRING
FAC2 BDE3B8           (      exbasic.asm):04844                   JSR  LB146          ; 'TM' ERROR IF VARIABLE TYPE = NUMERIC
FAC5 C63B             (      exbasic.asm):04845                   LDB  #';            ; CHECK FOR ITEM LIST SEPARATOR
FAC7 BDE4E1           (      exbasic.asm):04846                   JSR  LB26F          ; SYNTAX CHECK FOR ;
FACA 9E52             (      exbasic.asm):04847                   LDX  FPA0+2         ; * GET FORMAT STRING DESCRIPTOR ADDRESS
FACC 9F95             (      exbasic.asm):04848                   STX  VD5            ; * AND SAVE IT IN VD5
FACE 2006             (      exbasic.asm):04849                   BRA  L8EAE          ; GO PROCESS FORMAT STRING
FAD0 9697             (      exbasic.asm):04850         L8EA8     LDA  VD7            ; *CHECK NEXT PRINT ITEM FLAG AND
FAD2 2708             (      exbasic.asm):04851                   BEQ  L8EB4          ; *'FC' ERROR IF NO FURTHER PRINT ITEMS
FAD4 9E95             (      exbasic.asm):04852                   LDX  VD5            ; RESET FORMAT STRING POINTER TO START OF STRING
FAD6 0F97             (      exbasic.asm):04853         L8EAE     CLR  VD7            ; RESET NEXT PRINT ITEM FLAG
FAD8 E684             (      exbasic.asm):04854                   LDB  ,X             ; GET LENGTH OF FORMAT STRING
FADA 2603             (      exbasic.asm):04855                   BNE  L8EB7          ; INTERPRET FORMAT STRING IF LENGTH > 0
FADC 7EE6B7           (      exbasic.asm):04856         L8EB4     JMP  LB44A          ; 'FC' ERROR IF FORMAT STRING = NULL
FADF AE02             (      exbasic.asm):04857         L8EB7     LDX  $02,X          ; POINT X TO START OF FORMAT STRING
                      (      exbasic.asm):04858         * INTERPRET THE FORMAT STRING
FAE1 0F9A             (      exbasic.asm):04859         L8EB9     CLR  VDA            ; CLEAR THE STATUS BYTE
FAE3 0F99             (      exbasic.asm):04860         L8EBB     CLR  VD9            ; CLEAR LEFT DIGIT COUNTER
FAE5 A680             (      exbasic.asm):04861                   LDA  ,X+            ; GET A CHARACTER FROM FORMAT STRING
FAE7 8121             (      exbasic.asm):04862                   CMPA #'!            ; EXCLAMATION POINT?
FAE9 1027FF72         (      exbasic.asm):04863                   LBEQ L8E37          ; YES - STRING TYPE FORMAT
FAED 8123             (      exbasic.asm):04864                   CMPA #'#            ; NUMBER SIGN? (DIGIT LOCATOR)
FAEF 275B             (      exbasic.asm):04865                   BEQ  L8F24          ; YES - NUMERIC TYPE FORMAT
FAF1 5A               (      exbasic.asm):04866                   DECB                ; DECREMENT FORMAT STRING LENGTH
FAF2 2616             (      exbasic.asm):04867                   BNE  L8EE2          ; BRANCH IF NOT DONE
FAF4 BDFC00           (      exbasic.asm):04868                   JSR  L8FD8          ; SEND A '+' TO CONSOLE OUT IF VDA <> 0
FAF7 BDDB10           (      exbasic.asm):04869                   JSR  PUTCHR         ; SEND CHARACTER TO CONSOLE OUT
FAFA 9D82             (      exbasic.asm):04870         L8ED2     JSR  GETCCH         ; GET CURRENT CHARACTER FROM BASIC
FAFC 26D2             (      exbasic.asm):04871                   BNE  L8EA8          ; BRANCH IF NOT END OF LINE
FAFE 9697             (      exbasic.asm):04872                   LDA  VD7            ; GET NEXT PRINT ITEM FLAG
FB00 2603             (      exbasic.asm):04873         L8ED8     BNE  L8EDD          ; BRANCH IF MORE PRINT ITEMS
FB02 BDEB8E           (      exbasic.asm):04874                   JSR  LB958          ; SEND A CARRIAGE RETURN TO CONSOLE OUT
FB05 9E95             (      exbasic.asm):04875         L8EDD     LDX  VD5            ; POINT X TO FORMAT STRING DESCRIPTOR
FB07 7EE8C6           (      exbasic.asm):04876                   JMP  LB659          ; RETURN ADDRESS AND LENGTH OF FORMAT STRING - EXIT PRINT USING
FB0A 812B             (      exbasic.asm):04877         L8EE2     CMPA #'+            ; CHECK FOR '+' (PRE-SIGN FORCE)
FB0C 2609             (      exbasic.asm):04878                   BNE  L8EEF          ; NO PLUS
FB0E BDFC00           (      exbasic.asm):04879                   JSR  L8FD8          ; SEND A '+' TO CONSOLE OUT IF VDA <> 0
FB11 8608             (      exbasic.asm):04880                   LDA  #$08           ; * LOAD THE STATUS BYTE WITH 8;
FB13 979A             (      exbasic.asm):04881                   STA  VDA            ; * PRE-SIGN FORCE FLAG
FB15 20CC             (      exbasic.asm):04882                   BRA  L8EBB          ; INTERPRET THE REST OF THE FORMAT STRING
FB17 812E             (      exbasic.asm):04883         L8EEF     CMPA #'.            ; DECIMAL POINT?
FB19 274E             (      exbasic.asm):04884                   BEQ  L8F41          ; YES
FB1B 8125             (      exbasic.asm):04885                   CMPA #'%            ; PERCENT SIGN?
FB1D 1027FF70         (      exbasic.asm):04886                   LBEQ L8E69          ; YES
FB21 A184             (      exbasic.asm):04887                   CMPA ,X             ; COMPARE THE PRESENT FORMAT STRING INPUT
                      (      exbasic.asm):04888         *              ; CHARACTER TO THE NEXT ONE IN THE STRING
FB23 268B             (      exbasic.asm):04889         L8EFB     BNE  L8E88          ; NO MATCH - ILLEGAL CHARACTER
                      (      exbasic.asm):04890         * TWO CONSECUTIVE EQUAL CHARACTERS IN FORMAT STRING
FB25 8124             (      exbasic.asm):04891                   CMPA #'$            ; DOLLAR SIGN?
FB27 2719             (      exbasic.asm):04892                   BEQ  L8F1A          ; YES - MAKE THE DOLLAR SIGN FLOAT
FB29 812A             (      exbasic.asm):04893                   CMPA #'*            ; ASTERISK?
FB2B 26F6             (      exbasic.asm):04894                   BNE  L8EFB          ; NO - ILLEGAL CHARACTER
FB2D 969A             (      exbasic.asm):04895                   LDA  VDA            ; * GRAB THE STATUS BYTE AND BET BIT 5
FB2F 8A20             (      exbasic.asm):04896                   ORA  #$20           ; * TO INDICATE THAT THE OUTPUT WILL
FB31 979A             (      exbasic.asm):04897                   STA  VDA            ; * BE LEFT PADDED WITH ASTERISKS
FB33 C102             (      exbasic.asm):04898                   CMPB #2             ; * CHECK TO SEE IF THE $$ ARE THE LAST TWO
FB35 2511             (      exbasic.asm):04899                   BLO  L8F20          ; * CHARACTERS IN THE FORMAT STRING AND BRANCH IF SO
FB37 A601             (      exbasic.asm):04900                   LDA  $01,X          ; GET THE NEXT CHARACTER AFTER **
FB39 8124             (      exbasic.asm):04901                   CMPA #'$            ; CHECK FOR **$
FB3B 260B             (      exbasic.asm):04902                   BNE  L8F20          ; CHECK FOR MORE CHARACTERS
FB3D 5A               (      exbasic.asm):04903                   DECB                ; DECREMENT STRING LENGTH COUNTER
FB3E 3001             (      exbasic.asm):04904                   LEAX $01,X          ; MOVE FORMAT STRING POINTER UP ONE
FB40 0C99             (      exbasic.asm):04905                   INC  VD9            ; ADD ONE TO LEFT DIGIT COUNTER - FOR ASTERISK PAD AND
                      (      exbasic.asm):04906         *              ; FLOATING DOLLAR SIGN COMBINATION
FB42 969A             (      exbasic.asm):04907         L8F1A     LDA  VDA            ; * GET THE STATUS BYTE AND SET
FB44 8A10             (      exbasic.asm):04908                   ORA  #$10           ; * BIT 4 TO INDICATE A
FB46 979A             (      exbasic.asm):04909                   STA  VDA            ; * FLOATING DOLLAR SIGN
FB48 3001             (      exbasic.asm):04910         L8F20     LEAX $01,X          ; MOVE FORMAT STRING POINTER UP ONE
FB4A 0C99             (      exbasic.asm):04911                   INC  VD9            ; ADD ONE TO LEFT DIGIT (FLOATING $ OR ASTERISK PAD)
                      (      exbasic.asm):04912         * PROCESS CHARACTERS TO THE LEFT OF THE DECIMAL POINT IN THE FORMAT STRING
FB4C 0F98             (      exbasic.asm):04913         L8F24     CLR  VD8            ; CLEAR THE RIGHT DIGIT COUNTER
FB4E 0C99             (      exbasic.asm):04914         L8F26     INC  VD9            ; ADD ONE TO LEFT DIGIT COUNTER
FB50 5A               (      exbasic.asm):04915                   DECB                ; DECREMENT FORMAT STRING LENGTH COUNTER
FB51 2749             (      exbasic.asm):04916                   BEQ  L8F74          ; BRANCH IF END OF FORMAT STRING
FB53 A680             (      exbasic.asm):04917                   LDA  ,X+            ; GET THE NEXT FORMAT CHARACTER
FB55 812E             (      exbasic.asm):04918                   CMPA #'.            ; DECIMAL POINT?
FB57 271E             (      exbasic.asm):04919                   BEQ  L8F4F          ; YES
FB59 8123             (      exbasic.asm):04920                   CMPA #'#            ; NUMBER SIGN?
FB5B 27F1             (      exbasic.asm):04921                   BEQ  L8F26          ; YES
FB5D 812C             (      exbasic.asm):04922                   CMPA #',            ; COMMA?
FB5F 2621             (      exbasic.asm):04923                   BNE  L8F5A          ; NO
FB61 969A             (      exbasic.asm):04924                   LDA  VDA            ; * GET THE STATUS BYTE
FB63 8A40             (      exbasic.asm):04925                   ORA  #$40           ; * AND SET BIT 6 WHICH IS THE
FB65 979A             (      exbasic.asm):04926                   STA  VDA            ; * COMMA SEPARATOR FLAG
FB67 20E5             (      exbasic.asm):04927                   BRA  L8F26          ; PROCESS MORE CHARACTERS TO LEFT OF DECIMAL POINT
                      (      exbasic.asm):04928         * PROCESS DECIMAL POINT IF NO DIGITS TO LEFT OF IT
FB69 A684             (      exbasic.asm):04929         L8F41     LDA  ,X             ; GET NEXT FORMAT CHARACTER
FB6B 8123             (      exbasic.asm):04930                   CMPA #'#            ; IS IT A NUMBER SIGN?
FB6D 1026FF3F         (      exbasic.asm):04931                   LBNE L8E88          ; NO
FB71 8601             (      exbasic.asm):04932                   LDA  #1             ; * SET THE RIGHT DIGIT COUNTER TO 1 -
FB73 9798             (      exbasic.asm):04933                   STA  VD8            ; * ALLOW ONE SPOT FOR DECIMAL POINT
FB75 3001             (      exbasic.asm):04934                   LEAX $01,X          ; MOVE FORMAT POINTER UP ONE
                      (      exbasic.asm):04935         * PROCESS DIGITS TO RIGHT OF DECIMAL POINT
FB77 0C98             (      exbasic.asm):04936         L8F4F     INC  VD8            ; ADD ONE TO RIGHT DIGIT COUNTER
FB79 5A               (      exbasic.asm):04937                   DECB                ; DECREMENT FORMAT LENGTH COUNTER
FB7A 2720             (      exbasic.asm):04938                   BEQ  L8F74          ; BRANCH IF END OF FORMAT STRING
FB7C A680             (      exbasic.asm):04939                   LDA  ,X+            ; GET A CHARACTER FROM FORMAT STRING
FB7E 8123             (      exbasic.asm):04940                   CMPA #'#            ; IS IT NUMBER SIGN?
FB80 27F5             (      exbasic.asm):04941                   BEQ  L8F4F          ; YES - KEEP CHECKING
                      (      exbasic.asm):04942         * CHECK FOR EXPONENTIAL FORCE
FB82 815E             (      exbasic.asm):04943         L8F5A     CMPA #$5E           ; CHECK FOR UP ARROW
FB84 2616             (      exbasic.asm):04944                   BNE  L8F74          ; NO UP ARROW
FB86 A184             (      exbasic.asm):04945                   CMPA ,X             ; IS THE NEXT CHARACTER AN UP ARROW?
FB88 2612             (      exbasic.asm):04946                   BNE  L8F74          ; NO
FB8A A101             (      exbasic.asm):04947                   CMPA $01,X          ; AND THE NEXT CHARACTER?
FB8C 260E             (      exbasic.asm):04948                   BNE  L8F74          ; NO
FB8E A102             (      exbasic.asm):04949                   CMPA $02,X          ; HOW ABOUT THE 4TH CHARACTER?
FB90 260A             (      exbasic.asm):04950                   BNE  L8F74          ; NO, ALSO
FB92 C104             (      exbasic.asm):04951                   CMPB #4             ; * CHECK TO SEE IF THE 4 UP ARROWS ARE IN THE
FB94 2506             (      exbasic.asm):04952                   BLO  L8F74          ; * FORMAT STRING AND BRANCH IF NOT
FB96 C004             (      exbasic.asm):04953                   SUBB #4             ; * MOVE POINTER UP 4 AND SUBTRACT
FB98 3004             (      exbasic.asm):04954                   LEAX $04,X          ; * FOUR FROM LENGTH
FB9A 0C9A             (      exbasic.asm):04955                   INC  VDA            ; INCREMENT STATUS BYTE - EXPONENTIAL FORM
                      (      exbasic.asm):04956         
                      (      exbasic.asm):04957         * CHECK FOR A PRE OR POST - SIGN FORCE AT END OF FORMAT STRING
FB9C 301F             (      exbasic.asm):04958         L8F74     LEAX -1,X           ; MOVE POINTER BACK ONE
FB9E 0C99             (      exbasic.asm):04959                   INC  VD9            ; ADD ONE TO LEFT DIGIT COUNTER FOR PRE-SIGN FORCE
FBA0 969A             (      exbasic.asm):04960                   LDA  VDA            ; * PRE-SIGN
FBA2 8508             (      exbasic.asm):04961                   BITA #$08           ; * FORCE AND
FBA4 2618             (      exbasic.asm):04962                   BNE  L8F96          ; * BRANCH IF SET
FBA6 0A99             (      exbasic.asm):04963                   DEC  VD9            ; DECREMENT LEFT DIGIT - NO PRE-SIGN FORCE
FBA8 5D               (      exbasic.asm):04964                   TSTB                ; * CHECK LENGTH COUNTER AND BRANCH
FBA9 2713             (      exbasic.asm):04965                   BEQ  L8F96          ; * IF END OF FORMAT STRING
FBAB A684             (      exbasic.asm):04966                   LDA  ,X             ; GET NEXT FORMAT STRING CHARACTER
FBAD 802D             (      exbasic.asm):04967                   SUBA #'-            ; CHECK FOR MINUS SIGN
FBAF 2706             (      exbasic.asm):04968                   BEQ  L8F8F          ; BRANCH IF MINUS SIGN
FBB1 81FE             (      exbasic.asm):04969                   CMPA #$FE           ; * WAS CMPA #('+')-('-')
FBB3 2609             (      exbasic.asm):04970                   BNE  L8F96          ; BRANCH IF NO PLUS SIGN
FBB5 8608             (      exbasic.asm):04971                   LDA  #$08           ; GET THE PRE-SIGN FORCE FLAG
FBB7 8A04             (      exbasic.asm):04972         L8F8F     ORA  #$04           ; 'OR' IN POST-SIGN FORCE FLAG
FBB9 9A9A             (      exbasic.asm):04973                   ORA  VDA            ; 'OR' IN THE STATUS BYTE
FBBB 979A             (      exbasic.asm):04974                   STA  VDA            ; SAVE THE STATUS BYTE
FBBD 5A               (      exbasic.asm):04975                   DECB                ; DECREMENT FORMAT STRING LENGTH
                      (      exbasic.asm):04976         
                      (      exbasic.asm):04977         * EVALUATE NUMERIC ITEM-LIST
FBBE 9D82             (      exbasic.asm):04978         L8F96     JSR  GETCCH         ; GET CURRENT CHARACTER
FBC0 1027FF3C         (      exbasic.asm):04979                   LBEQ L8ED8          ; BRANCH IF END OF LINE
FBC4 D793             (      exbasic.asm):04980                   STB  VD3            ; SAVE FORMAT STRING LENGTH WHEN FORMAT EVALUATION ENDED
FBC6 BDE3B3           (      exbasic.asm):04981                   JSR  LB141          ; EVALUATE EXPRESSION
FBC9 9699             (      exbasic.asm):04982                   LDA  VD9            ; GET THE LEFT DIGIT COUNTER
FBCB 9B98             (      exbasic.asm):04983                   ADDA VD8            ; ADD IT TO THE RIGHT DIGIT COUNTER
FBCD 8111             (      exbasic.asm):04984                   CMPA #17            ; *
FBCF 1022EAE4         (      exbasic.asm):04985                   LBHI LB44A          ; *'FC' ERROR IF MORE THAN 16 DIGITS AND DECIMAL POiNT
FBD3 BDFC0D           (      exbasic.asm):04986                   JSR  L8FE5          ; CONVERT ITEM-LIST TO FORMATTED ASCII STRING
FBD6 301F             (      exbasic.asm):04987                   LEAX -1,X           ; MOVE BUFFER POINTER BACK ONE
FBD8 BDEBCE           (      exbasic.asm):04988                   JSR  LB99C          ; DISPLAY THE FORMATTED STRING TO CONSOLE OUT
FBDB 0F97             (      exbasic.asm):04989         L8FB3     CLR  VD7            ; RESET NEXT PRINT ITEM FLAG
FBDD 9D82             (      exbasic.asm):04990                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
FBDF 270D             (      exbasic.asm):04991                   BEQ  L8FC6          ; BRANCH IF END OF LINE
FBE1 9797             (      exbasic.asm):04992                   STA  VD7            ; SAVE CURRENT CHARACTER (<>0) IN NEXT PRINT ITEM FLAG
FBE3 813B             (      exbasic.asm):04993                   CMPA #';            ; * CHECK FOR ; - ITEM-LIST SEPARATOR AND
FBE5 2705             (      exbasic.asm):04994                   BEQ  L8FC4          ; * BRANCH IF SEMICOLON
FBE7 BDE4DF           (      exbasic.asm):04995                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
FBEA 2002             (      exbasic.asm):04996                   BRA  L8FC6          ; PROCESS NEXT PRINT ITEM
FBEC 9D7C             (      exbasic.asm):04997         L8FC4     JSR  GETNCH         ; GET NEXT INPUT CHARACTER
FBEE 9E95             (      exbasic.asm):04998         L8FC6     LDX  VD5            ; GET FORMAT STRING DESCRIPTOR ADDRESS
FBF0 E684             (      exbasic.asm):04999                   LDB  ,X             ; GET LENGTH OF FORMAT STRING
FBF2 D093             (      exbasic.asm):05000                   SUBB VD3            ; SUBTRACT AMOUNT OF FORMAT STRING LEFT AFTER LAST PRINT ITEM
FBF4 AE02             (      exbasic.asm):05001                   LDX  $02,X          ; *GET FORMAT STRING START ADDRESS AND ADVANCE
FBF6 3A               (      exbasic.asm):05002                   ABX                 ; *POINTER TO START OF UNUSED FORMAT STRING
FBF7 D693             (      exbasic.asm):05003                   LDB  VD3            ; * GET AMOUNT OF UNUSED FORMAT STRING
FBF9 1026FEE4         (      exbasic.asm):05004                   LBNE L8EB9          ; * REINTERPRET FORMAT STRING FROM THAT POINT
FBFD 7EFAFA           (      exbasic.asm):05005                   JMP  L8ED2          ; REINTERPRET FORMAT STRING FROM THE START IF ENTIRELY
                      (      exbasic.asm):05006         *         USED ON LAST PRINT ITEM
                      (      exbasic.asm):05007         
                      (      exbasic.asm):05008         * PRINT A '+' TO CONSOLE OUT IF THE STATUS BYTE <> 0
FC00 3402             (      exbasic.asm):05009         L8FD8     PSHS A              ; RESTORE ACCA AND RETURN
FC02 862B             (      exbasic.asm):05010                   LDA  #'+            ; GET ASCII PLUS SIGN
FC04 0D9A             (      exbasic.asm):05011                   TST  VDA            ; * CHECK THE STATUS BYTE AND
FC06 2703             (      exbasic.asm):05012                   BEQ  L8FE3          ; * RETURN IF = 0
FC08 BDDB10           (      exbasic.asm):05013                   JSR  PUTCHR         ; SEND A CHARACTER TO CONSOLE OUT
FC0B 3582             (      exbasic.asm):05014         L8FE3     PULS A,PC           ; RETURN ACCA AND RETURN
                      (      exbasic.asm):05015         
                      (      exbasic.asm):05016         * CONVERT ITEM-LIST TO DECIMAL ASCII STRING
FC0D CE01F2           (      exbasic.asm):05017         L8FE5     LDU  #STRBUF+4      ; POINT U TO STRING BUFFER
FC10 C620             (      exbasic.asm):05018                   LDB  #SPACE         ; BLANK
FC12 969A             (      exbasic.asm):05019                   LDA  VDA            ; * GET THE STATUS FLAG AND
FC14 8508             (      exbasic.asm):05020                   BITA #$08           ; * CHECK FOR A PRE-SIGN FORCE
FC16 2702             (      exbasic.asm):05021                   BEQ  L8FF2          ; * BRANCH IF NO PRE-SIGN FORCE
FC18 C62B             (      exbasic.asm):05022                   LDB  #'+            ; PLUS SIGN
FC1A 0D54             (      exbasic.asm):05023         L8FF2     TST  FP0SGN         ; CHECK THE SIGN OF FPA0
FC1C 2A04             (      exbasic.asm):05024                   BPL  L8FFA          ; BRANCH IF POSITIVE
FC1E 0F54             (      exbasic.asm):05025                   CLR  FP0SGN         ; FORCE FPA0 SIGN TO BE POSITIVE
FC20 C62D             (      exbasic.asm):05026                   LDB  #'-            ; MINUS SIGN
FC22 E7C0             (      exbasic.asm):05027         L8FFA     STB  ,U+            ; SAVE THE SIGN IN BUFFER
FC24 C630             (      exbasic.asm):05028                   LDB  #'0            ; * PUT A ZERO INTO THE BUFFER
FC26 E7C0             (      exbasic.asm):05029                   STB  ,U+            ; *
FC28 8401             (      exbasic.asm):05030                   ANDA #$01           ; * CHECK THE EXPONENTIAL FORCE FLAG IN
FC2A 10260107         (      exbasic.asm):05031                   LBNE L910D          ; * THE STATUS BYTE - BRANCH IF ACTIVE
FC2E 8EEFF2           (      exbasic.asm):05032                   LDX  #LBDC0         ; POINT X TO FLOATING POINT 1E + 09
FC31 BDEED2           (      exbasic.asm):05033                   JSR  LBCA0          ; COMPARE FPA0 TO (X)
FC34 2B15             (      exbasic.asm):05034                   BMI  L9023          ; BRANCH IF FPA0 < 1E+09
FC36 BDF00B           (      exbasic.asm):05035                   JSR  LBDD9          ; CONVERT FP NUMBER TO ASCII STRING
FC39 A680             (      exbasic.asm):05036         L9011     LDA  ,X+            ; * ADVANCE POINTER TO END OF
FC3B 26FC             (      exbasic.asm):05037                   BNE  L9011          ; * ASCII STRING (ZERO BYTE)
FC3D A682             (      exbasic.asm):05038         L9015     LDA  ,-X            ; MOVE THE
FC3F A701             (      exbasic.asm):05039                   STA  $01,X          ; ENTIRE STRING
FC41 8C01F1           (      exbasic.asm):05040                   CMPX #STRBUF+3      ; UP ONE
FC44 26F7             (      exbasic.asm):05041                   BNE  L9015          ; BYTE
FC46 8625             (      exbasic.asm):05042                   LDA  #'%            ; * INSERT A % SIGN AT START OF
FC48 A784             (      exbasic.asm):05043                   STA  ,X             ; * STRING - OVERFLOW ERROR
FC4A 39               (      exbasic.asm):05044                   RTS
                      (      exbasic.asm):05045         
FC4B 964F             (      exbasic.asm):05046         L9023     LDA  FP0EXP         ; GET EXPONENT OF FPA0
FC4D 9747             (      exbasic.asm):05047                   STA  V47            ; AND SAVE IT IN V74
FC4F 2703             (      exbasic.asm):05048                   BEQ  L902C          ; BRANCH IF FPA0 = 0
FC51 BDFDF5           (      exbasic.asm):05049                   JSR  L91CD          ; CONVERT FPA0 TO NUMBER WITH 9 SIGNIFICANT
                      (      exbasic.asm):05050         *              ; PLACES TO LEFT OF DECIMAL POINT
FC54 9647             (      exbasic.asm):05051         L902C     LDA  V47            ; GET BASE 10 EXPONENT OFFSET
FC56 102B0081         (      exbasic.asm):05052                   LBMI L90B3          ; BRANCH IF FPA0 < 100,000,000
FC5A 40               (      exbasic.asm):05053                   NEGA                ; * CALCULATE THE NUMBER OF LEADING ZEROES TO INSERT -
FC5B 9B99             (      exbasic.asm):05054                   ADDA VD9            ; * SUBTRACT BASE 10 EXPONENT OFFSET AND 9 (FPA0 HAS
FC5D 8009             (      exbasic.asm):05055                   SUBA #$09           ; * 9 PLACES TO LEFT OF EXPONENT) FROM LEFT DIGIT COUNTER
FC5F BDFD12           (      exbasic.asm):05056                   JSR  L90EA          ; PUT ACCA ZEROES IN STRING BUFFER
FC62 BDFE8B           (      exbasic.asm):05057                   JSR  L9263          ; INITIALIZE DECIMAL POINT AND COMMA COUNTERS
FC65 BDFE2A           (      exbasic.asm):05058                   JSR  L9202          ; CONVERT FPA0 TO DECIMAL ASCII IN THE STRING BUFFER
FC68 9647             (      exbasic.asm):05059                   LDA  V47            ; * GET BASE 10 EXPONENT AND PUT THAT MANY
FC6A BDFEA9           (      exbasic.asm):05060                   JSR  L9281          ; * ZEROES IN STRING BUFFER - STOP AT DECIMAL POINT
FC6D 9647             (      exbasic.asm):05061                   LDA  V47            ; WASTED INSTRUCTION - SERVES NO PURPOSE
FC6F BDFE71           (      exbasic.asm):05062                   JSR  L9249          ; CHECK FOR DECIMAL POINT
FC72 9698             (      exbasic.asm):05063                   LDA  VD8            ; GET THE RIGHT DIGIT COUNTER
FC74 2602             (      exbasic.asm):05064                   BNE  L9050          ; BRANCH IF RIGHT DIGlT COUNTER <> 0
FC76 335F             (      exbasic.asm):05065                   LEAU -1,U           ; * MOVE BUFFER POINTER BACK ONE - DELETE
                      (      exbasic.asm):05066         *                             ; * DECIMAL POINT IF NO RIGHT DIGITS SPECiFIED
FC78 4A               (      exbasic.asm):05067         L9050     DECA                ; SUBTRACT ONE (DECIMAL POINT)
FC79 BDFD12           (      exbasic.asm):05068                   JSR  L90EA          ; PUT ACCA ZEROES INTO BUFFER (TRAILING ZEROES)
FC7C BDFDAD           (      exbasic.asm):05069         L9054     JSR  L9185          ; INSERT ASTERISK PADDING, FLOATING $, AND POST-SIGN
FC7F 4D               (      exbasic.asm):05070                   TSTA                ; WAS THERE A POST-SIGN?
FC80 2706             (      exbasic.asm):05071                   BEQ  L9060          ; NO
FC82 C12A             (      exbasic.asm):05072                   CMPB #'*            ; IS THE FIRST CHARACTER AN $?
FC84 2702             (      exbasic.asm):05073                   BEQ  L9060          ; YES
FC86 E7C0             (      exbasic.asm):05074                   STB  ,U+            ; STORE THE POST-SIGN
FC88 6FC4             (      exbasic.asm):05075         L9060     CLR  ,U             ; CLEAR THE LAST CHARACTER IN THE BUFFER
                      (      exbasic.asm):05076         *
                      (      exbasic.asm):05077         * REMOVE ANY EXTRA BLANKS OR ASTERISKS FROM THE
                      (      exbasic.asm):05078         * STRING BUFFER TO THE LEFT OF THE DECIMAL POINT
FC8A 8E01F1           (      exbasic.asm):05079                   LDX  #STRBUF+3      ; POINT X TO THE START OF THE BUFFER
FC8D 3001             (      exbasic.asm):05080         L9065     LEAX $01,X          ; MOVE BUFFER POINTER UP ONE
FC8F 9F0F             (      exbasic.asm):05081                   STX  TEMPTR         ; SAVE BUFFER POINTER IN TEMPTR
FC91 963A             (      exbasic.asm):05082                   LDA  VARPTR+1       ; * GET ADDRESS OF DECIMAL POINT IN BUFFER, SUBTRACT
FC93 9010             (      exbasic.asm):05083                   SUBA TEMPTR+1       ; * CURRENT POSITION AND SUBTRACT LEFT DIGIT COUNTER -
FC95 9099             (      exbasic.asm):05084                   SUBA VD9            ; * THE RESULT WILL BE ZERO WHEN TEMPTR+1 IS POINTING
                      (      exbasic.asm):05085         *              ; * TO THE FIRST DIGIT OF THE FORMAT STRING
FC97 2738             (      exbasic.asm):05086                   BEQ  L90A9          ; RETURN IF NO DIGITS TO LEFT OF THE DECiMAL POINT
FC99 A684             (      exbasic.asm):05087                   LDA  ,X             ; GET THE CURRENT BUFFER CHARACTER
FC9B 8120             (      exbasic.asm):05088                   CMPA #SPACE         ; SPACE?
FC9D 27EE             (      exbasic.asm):05089                   BEQ  L9065          ; YES - ADVANCE POINTER
FC9F 812A             (      exbasic.asm):05090                   CMPA #'*            ; ASTERISK?
FCA1 27EA             (      exbasic.asm):05091                   BEQ  L9065          ; YES - ADVANCE POINTER
FCA3 4F               (      exbasic.asm):05092                   CLRA                ; A ZERO ON THE STACK IS END OF DATA POINTER
FCA4 3402             (      exbasic.asm):05093         L907C     PSHS A              ; PUSH A CHARACTER ONTO THE STACK
FCA6 A680             (      exbasic.asm):05094                   LDA  ,X+            ; GET NEXT CHARACTER FROM BUFFER
FCA8 812D             (      exbasic.asm):05095                   CMPA #'-            ; MINUS SIGN?
FCAA 27F8             (      exbasic.asm):05096                   BEQ  L907C          ; YES
FCAC 812B             (      exbasic.asm):05097                   CMPA #'+            ; PLUS SIGN?
FCAE 27F4             (      exbasic.asm):05098                   BEQ  L907C          ; YES
FCB0 8124             (      exbasic.asm):05099                   CMPA #'$            ; DOLLAR SIGN?
FCB2 27F0             (      exbasic.asm):05100                   BEQ  L907C          ; YES
FCB4 8130             (      exbasic.asm):05101                   CMPA #'0            ; ZERO?
FCB6 260E             (      exbasic.asm):05102                   BNE  L909E          ; NO - ERROR
FCB8 A601             (      exbasic.asm):05103                   LDA  $01,X          ; GET CHARACTER FOLLOWING ZERO
FCBA 8D16             (      exbasic.asm):05104                   BSR  L90AA          ; CLEAR CARRY IF NUMERIC
FCBC 2508             (      exbasic.asm):05105                   BLO  L909E          ; BRANCH IF NOT A NUMERIC CHARACTER - ERROR
FCBE 3502             (      exbasic.asm):05106         L9096     PULS A              ; * PULL A CHARACTER OFF OF THE STACK
FCC0 A782             (      exbasic.asm):05107                   STA  ,-X            ; * AND PUT IT BACK IN THE STRING BUFFER
FCC2 26FA             (      exbasic.asm):05108                   BNE  L9096          ; * KEEP GOING UNTIL ZERO FLAG
FCC4 20C7             (      exbasic.asm):05109                   BRA  L9065          ; KEEP CLEANING UP THE INPUT BUFFER
FCC6 3502             (      exbasic.asm):05110         L909E     PULS A              ;
FCC8 4D               (      exbasic.asm):05111                   TSTA                ; * THE STACK AND EXIT WHEN
FCC9 26FB             (      exbasic.asm):05112                   BNE  L909E          ; * ZERO FLAG FOUND
FCCB 9E0F             (      exbasic.asm):05113                   LDX  TEMPTR         ; GET THE STRING BUFFER START POINTER
FCCD 8625             (      exbasic.asm):05114                   LDA  #'%            ; * PUT A % SIGN BEFORE THE ERROR POSITION TO
FCCF A782             (      exbasic.asm):05115                   STA  ,-X            ; * INDICATE AN ERROR
FCD1 39               (      exbasic.asm):05116         L90A9     RTS
                      (      exbasic.asm):05117         *
                      (      exbasic.asm):05118         * CLEAR CARRY IF NUMERIC
FCD2 8130             (      exbasic.asm):05119         L90AA     CMPA #'0            ; ASCII ZERO
FCD4 2504             (      exbasic.asm):05120                   BLO  L90B2          ; RETURN IF ACCA < ASCII 0
FCD6 803A             (      exbasic.asm):05121                   SUBA #$3A           ; *  #'9'+1
FCD8 80C6             (      exbasic.asm):05122                   SUBA #$C6           ; * #-('9'+1)  CARRY CLEAR IF NUMERIC
FCDA 39               (      exbasic.asm):05123         L90B2     RTS
                      (      exbasic.asm):05124         *
                      (      exbasic.asm):05125         * PROCESS AN ITEM-LIST WHICH IS < 100,000,000
FCDB 9698             (      exbasic.asm):05126         L90B3     LDA  VD8            ; GET RIGHT DIGIT COUNTER
FCDD 2701             (      exbasic.asm):05127                   BEQ  L90B8          ; BRANCH IF NO FORMATTED DIGITS TO THE RIGHT OF DECIMAL PT
FCDF 4A               (      exbasic.asm):05128                   DECA                ; SUBTRACT ONE FOR DECIMAL POINT
FCE0 9B47             (      exbasic.asm):05129         L90B8     ADDA V47            ; *ADD THE BASE 10 EXPONENT OFFSET - ACCA CONTAINS THE
                      (      exbasic.asm):05130         *         *NUMBER OF SHIFTS REQUIRED TO ADJUST FPA0 TO THE SPECIFIED
                      (      exbasic.asm):05131         *         *NUMBER OF DlGITS TO THE RIGHT OF THE DECIMAL POINT
FCE2 2B01             (      exbasic.asm):05132                   BMI  L90BD          ; IF ACCA >= 0 THEN NO SHIFTS ARE REQUIRED
FCE4 4F               (      exbasic.asm):05133                   CLRA                ; FORCE SHIFT COUNTER = 0
FCE5 3402             (      exbasic.asm):05134         L90BD     PSHS A              ; SAVE INITIAL SHIFT COUNTER ON THE STACK
FCE7 2A0A             (      exbasic.asm):05135         L90BF     BPL  L90CB          ; EXIT ROUTINE IF POSITIVE
FCE9 3402             (      exbasic.asm):05136                   PSHS A              ; SAVE SHIFT COUNTER ON STACK
FCEB BDEDB4           (      exbasic.asm):05137                   JSR  LBB82          ; DIVIDE FPA0 BY 10 - SHIFT ONE DIGIT TO RIGHT
FCEE 3502             (      exbasic.asm):05138                   PULS A              ; GET SHIFT COUNTER FROM THE STACK
FCF0 4C               (      exbasic.asm):05139                   INCA                ; BUMP SHIFT COUNTER UP BY ONE
FCF1 20F4             (      exbasic.asm):05140                   BRA  L90BF          ; CHECK FOR FURTHER DIVISION
FCF3 9647             (      exbasic.asm):05141         L90CB     LDA  V47            ; * GET BASE 10 EXPONENT OFFSET, ADD INITIAL SHIFT COUNTER
FCF5 A0E0             (      exbasic.asm):05142                   SUBA ,S+            ; * AND SAVE NEW BASE 10 EXPONENT OFFSET - BECAUSE
FCF7 9747             (      exbasic.asm):05143                   STA  V47            ; * FPA0 WAS SHIFTED ABOVE
FCF9 8B09             (      exbasic.asm):05144                   ADDA #$09           ; * ADD NINE (SIGNIFICANT PLACES) AND BRANCH IF THERE ARE NO
FCFB 2B19             (      exbasic.asm):05145                   BMI  L90EE          ; * ZEROES TO THE LEFT OF THE DECIMAL POINT IN THIS PRINT ITEM
FCFD 9699             (      exbasic.asm):05146                   LDA  VD9            ; *DETERMINE HOW MANY FILLER ZEROES TO THE LEFT OF THE DECIMAL
FCFF 8009             (      exbasic.asm):05147                   SUBA #$09           ; *POINT. GET THE NUMBER OF FORMAT PLACES TO LEFT OF DECIMAL
FD01 9047             (      exbasic.asm):05148                   SUBA V47            ; *POINT, SUBTRACT THE BASE 10 EXPONENT OFFSET AND THE CONSTANT 9
FD03 8D0D             (      exbasic.asm):05149                   BSR  L90EA          ; *(UNNORMALIZATION)-THEN OUTPUT THAT MANY ZEROES TO THE BUFFER
FD05 BDFE8B           (      exbasic.asm):05150                   JSR  L9263          ; INITIALIZE DECIMAL POINT AND COMMA COUNTERS
FD08 201D             (      exbasic.asm):05151                   BRA  L90FF          ; PROCESS THE REMAINDER OF THE PRINT ITEM
                      (      exbasic.asm):05152         *
                      (      exbasic.asm):05153         * PUT (ACCA+1) ASCII ZEROES IN BUFFER
FD0A 3402             (      exbasic.asm):05154         L90E2     PSHS A              ; SAVE ZERO COUNTER
FD0C 8630             (      exbasic.asm):05155                   LDA  #'0            ; * INSERT A ZERO INTO
FD0E A7C0             (      exbasic.asm):05156                   STA  ,U+            ; * THE BUFFER
FD10 3502             (      exbasic.asm):05157                   PULS A              ; RESTORE ZERO COUNTER
                      (      exbasic.asm):05158         
                      (      exbasic.asm):05159         * PUT ACCA ASCII ZEROES INTO THE BUFFER
FD12 4A               (      exbasic.asm):05160         L90EA     DECA                ; DECREMENT ZERO COUNTER
FD13 2AF5             (      exbasic.asm):05161                   BPL  L90E2          ; BRANCH IF NOT DONE
FD15 39               (      exbasic.asm):05162                   RTS
                      (      exbasic.asm):05163         
FD16 9699             (      exbasic.asm):05164         L90EE     LDA  VD9            ; * GET THE LEFT DIGIT COUNTER AND PUT
FD18 8DF8             (      exbasic.asm):05165                   BSR  L90EA          ; * THAT MANY ZEROES IN THE STRiNG BUFFER
FD1A BDFE75           (      exbasic.asm):05166                   JSR  L924D          ; PUT THE DECIMAL POINT IN THE STRING BUFFER
FD1D 86F7             (      exbasic.asm):05167                   LDA  #-9            ; *DETERMINE HOW MANY FILLER ZEROES BETWEEN THE DECIMAL POINT
FD1F 9047             (      exbasic.asm):05168                   SUBA V47            ; *AND SIGNIFICANT DATA. SUBTRACT BASE 10 EXPONENT FROM -9
FD21 8DEF             (      exbasic.asm):05169                   BSR  L90EA          ; *(UNNORMALIZATION) AND OUTPUT THAT MANY ZEROES TO BUFFER
FD23 0F45             (      exbasic.asm):05170                   CLR  V45            ; CLEAR THE DECIMAL POINT COUNTER - SUPPRESS THE DECIMAL POINT
FD25 0F97             (      exbasic.asm):05171                   CLR  VD7            ; CLEAR THE COMMA COUNTER - SUPPRESS COMMAS
FD27 BDFE2A           (      exbasic.asm):05172         L90FF     JSR  L9202          ; DECODE FPA0 INTO A DECIMAL ASCII STRING
FD2A 9698             (      exbasic.asm):05173                   LDA  VD8            ; GET THE RIGHT DIGIT COUNTER
FD2C 2602             (      exbasic.asm):05174                   BNE  L9108          ; BRANCH IF RIGHT DIGIT COUNTER <> 0
FD2E DE39             (      exbasic.asm):05175                   LDU  VARPTR         ; RESET BUFFER PTR TO THE DECIMAL POINT IF NO DIGITS TO RIGHT
FD30 9B47             (      exbasic.asm):05176         L9108     ADDA V47            ; *ADD BASE 10 EXPONENT - A POSITIVE ACCA WILL CAUSE THAT MANY
                      (      exbasic.asm):05177         * *FILLER ZEROES TO BE OUTPUT ; TO THE RIGHT OF LAST SIGNIFICANT DATA
                      (      exbasic.asm):05178         *         *SIGNIFICANT DATA
FD32 16FF43           (      exbasic.asm):05179                   LBRA L9050          ; INSERT LEADING ASTERISKS, FLOATING DOLLAR SIGN, ETC
                      (      exbasic.asm):05180         *
                      (      exbasic.asm):05181         * FORCE THE NUMERIC OUTPUT FORMAT TO BE EXPONENTIAL FORMAT
FD35 964F             (      exbasic.asm):05182         L910D     LDA  FP0EXP         ; * GET EXPONENT OF FPA0 AND
FD37 3402             (      exbasic.asm):05183                   PSHS A              ; * SAVE IT ON THE STACK
FD39 2703             (      exbasic.asm):05184                   BEQ  L9116          ; BRANCH IF FPA0 = 0
FD3B BDFDF5           (      exbasic.asm):05185                   JSR  L91CD          ; *CONVERT FPA0 INTO A NUMBER WITH 9 SIGNIFICANT
                      (      exbasic.asm):05186         *         *DIGITS TO THE LEFT OF THE DECIMAL POINT
FD3E 9698             (      exbasic.asm):05187         L9116     LDA  VD8            ; GET THE RIGHT DIGIT COUNTER
FD40 2701             (      exbasic.asm):05188                   BEQ  L911B          ; BRANCH IF NO FORMATTED DIGITS TO THE RIGHT
FD42 4A               (      exbasic.asm):05189                   DECA                ; SUBTRACT ONE FOR THE DECIMAL POINT
FD43 9B99             (      exbasic.asm):05190         L911B     ADDA VD9            ; ADD TO THE LEFT DIGIT COUNTER
FD45 7F01F1           (      exbasic.asm):05191                   CLR  STRBUF+3       ; CLEAR BUFFER BYTE AS TEMPORARY STORAGE LOCATION
FD48 D69A             (      exbasic.asm):05192                   LDB  VDA            ; * GET THE STATUS BYTE FOR A
FD4A C404             (      exbasic.asm):05193                   ANDB #$04           ; * POST-BYTE FORCE; BRANCH IF
FD4C 2603             (      exbasic.asm):05194                   BNE  L9129          ; * A POST-BYTE FORCE
FD4E 7301F1           (      exbasic.asm):05195                   COM  STRBUF+3       ; TOGGLE BUFFER BYTE TO -1 IF NO POST-BYTE FORCE
FD51 BB01F1           (      exbasic.asm):05196         L9129     ADDA STRBUF+3       ; SUBTRACT 1 IF NO POST BYTE FORCE
FD54 8009             (      exbasic.asm):05197                   SUBA #$09           ; *SUBTRACT 9 (DUE TO THE CONVERSION TO 9
                      (      exbasic.asm):05198         *         *SIGNIFICANT DIGITS TO LEFT OF DECIMAL POINT)
FD56 3402             (      exbasic.asm):05199                   PSHS A              ; * SAVE SHIFT COUNTER ON THE STACK - ACCA CONTAINS THE NUMBER
                      (      exbasic.asm):05200         *         OF   SHIFTS REQUIRED TO ADJUST FPA0 FOR THE NUMBER OF
                      (      exbasic.asm):05201         *         FORMATTED PLACES TO THE RIGHT OF THE DECIMAL POINT.
FD58 2A0A             (      exbasic.asm):05202         L9130     BPL  L913C          ; NO MORE SHIFTS WHEN ACCA >= 0
FD5A 3402             (      exbasic.asm):05203                   PSHS A              ; SAVE SHIFT COUNTER
FD5C BDEDB4           (      exbasic.asm):05204                   JSR  LBB82          ; DIVIDE FPA0 BY 10 - SHIFT TO RIGHT ONE
FD5F 3502             (      exbasic.asm):05205                   PULS A              ; RESTORE THE SHIFT COUNTER
FD61 4C               (      exbasic.asm):05206                   INCA                ; ADD 1 TO SHIFT COUNTER
FD62 20F4             (      exbasic.asm):05207                   BRA  L9130          ; CHECK FOR FURTHER SHIFTING (DIVISION)
FD64 A6E4             (      exbasic.asm):05208         L913C     LDA  ,S             ; *GET THE INITIAL VALUE OF THE SHIFT COUNTER
FD66 2B01             (      exbasic.asm):05209                   BMI  L9141          ; *AND BRANCH IF SHIFTING HAS TAKEN PLACE
FD68 4F               (      exbasic.asm):05210                   CLRA                ; RESET ACCA IF NO SHIFTING HAS TAKEN PLACE
FD69 40               (      exbasic.asm):05211         L9141     NEGA                ; *CALCULATE THE POSITION OF THE DECIMAL POINT BY
FD6A 9B99             (      exbasic.asm):05212                   ADDA VD9            ; *NEGATING SHIFT COUNTER, ADDING THE LEFT DIGIT COUNTER
FD6C 4C               (      exbasic.asm):05213                   INCA                ; *PLUS ONE AND THE POST-BYTE POSlTION, IF USED
FD6D BB01F1           (      exbasic.asm):05214                   ADDA STRBUF+3       ; *
FD70 9745             (      exbasic.asm):05215                   STA  V45            ; SAVE DECIMAL POINT COUNTER
FD72 0F97             (      exbasic.asm):05216                   CLR  VD7            ; CLEAR COMMA COUNTER - NO COMMAS INSERTED
FD74 BDFE2A           (      exbasic.asm):05217                   JSR  L9202          ; CONVERT FPA0 INTO ASCII DECIMAL STRING
FD77 3502             (      exbasic.asm):05218                   PULS A              ; * GET THE INITIAL VALUE OF SHIFT COUNTER AND
FD79 BDFEA9           (      exbasic.asm):05219                   JSR  L9281          ; * INSERT THAT MANY ZEROES INTO THE BUFFER
FD7C 9698             (      exbasic.asm):05220                   LDA  VD8            ; *GET THE RIGHT DIGIT COUNTER AND BRANCH
FD7E 2602             (      exbasic.asm):05221                   BNE  L915A          ; *IF NOT ZERO
FD80 335F             (      exbasic.asm):05222                   LEAU -1,U           ; MOVE BUFFER POINTER BACK ONE
                      (      exbasic.asm):05223         
                      (      exbasic.asm):05224         * CALCULATE VALUE OF EXPONENT AND PUT IN STRING BUFFER
FD82 E6E0             (      exbasic.asm):05225         L915A     LDB  ,S+            ; GET ORIGINAL EXPONENT OF FPA0
FD84 2709             (      exbasic.asm):05226                   BEQ  L9167          ; BRANCH IF EXPONENT = 0
FD86 D647             (      exbasic.asm):05227                   LDB  V47            ; GET BASE 10 EXPONENT
FD88 CB09             (      exbasic.asm):05228                   ADDB #$09           ; ADD 9 FOR 9 SIGNIFICANT DIGIT CONVERSION
FD8A D099             (      exbasic.asm):05229                   SUBB VD9            ; SUBTRACT LEFT DIGIT COUNTER
FD8C F001F1           (      exbasic.asm):05230                   SUBB STRBUF+3       ; ADD ONE TO EXPONENT IF POST-SIGN FORCE
FD8F 862B             (      exbasic.asm):05231         L9167     LDA  #'+            ; PLUS SIGN
FD91 5D               (      exbasic.asm):05232                   TSTB                ; TEST EXPONENT
FD92 2A03             (      exbasic.asm):05233                   BPL  L916F          ; BRANCH IF POSITIVE EXPONENT
FD94 862D             (      exbasic.asm):05234                   LDA  #'-            ; MINUS SIGN
FD96 50               (      exbasic.asm):05235                   NEGB                ; CONVERT EXPONENT TO POSITIVE NUMBER
FD97 A741             (      exbasic.asm):05236         L916F     STA  $01,U          ; PUT SIGN OF EXPONENT IN STRING BUFFER
FD99 8645             (      exbasic.asm):05237                   LDA  #'E            ; * PUT AN 'E' (EXPONENTIATION FLAG) IN
FD9B A7C1             (      exbasic.asm):05238                   STA  ,U++           ; * BUFFER AND SKIP OVER THE SIGN
FD9D 862F             (      exbasic.asm):05239                   LDA  #$2F           ; * WAS LDA #'0'-1
                      (      exbasic.asm):05240         *CONVERT BINARY EXPONENT IN ACCB TO ASCII VALUE IN ACCA
FD9F 4C               (      exbasic.asm):05241         L9177     INCA                ; ADD ONE TO TENS DIGIT COUNTER
FDA0 C00A             (      exbasic.asm):05242                   SUBB #10            ; *SUBTRACT 10 FROM EXPONENT AND ADD ONE TO TENS
FDA2 24FB             (      exbasic.asm):05243                   BCC  L9177          ; * DIGIT IF NO CARRY. TENS DIGIT DONE IF THERE IS A CARRY
FDA4 CB3A             (      exbasic.asm):05244                   ADDB #$3A           ; WAS ADDB #'9'+1
FDA6 EDC1             (      exbasic.asm):05245                   STD  ,U++           ; SAVE EXPONENT IN BUFFER
FDA8 6FC4             (      exbasic.asm):05246                   CLR  ,U             ; CLEAR FINAL BYTE IN BUFFER - PRINT TERMINATOR
FDAA 7EFC7C           (      exbasic.asm):05247                   JMP  L9054          ; INSERT ASTERISK PADDING, FLOATING DOLLAR SIGN, ETC.
                      (      exbasic.asm):05248         
                      (      exbasic.asm):05249         * INSERT ASTERISK PADDING, FLOATING $ AND PRE-SIGN
FDAD 8E01F2           (      exbasic.asm):05250         L9185     LDX  #STRBUF+4      ; POINT X TO START OF PRINT ITEM BUFFER
FDB0 E684             (      exbasic.asm):05251                   LDB  ,X             ; * GET SIGN BYTE OF ITEM-LIST BUFFER
FDB2 3404             (      exbasic.asm):05252                   PSHS B              ; * AND SAVE IT ON THE STACK
FDB4 8620             (      exbasic.asm):05253                   LDA  #SPACE         ; DEFAULT PAD WITH BLANKS
FDB6 D69A             (      exbasic.asm):05254                   LDB  VDA            ; * GET STATUS BYTE AND CHECK FOR
FDB8 C520             (      exbasic.asm):05255                   BITB #$20           ; * ASTERISK LEFT PADDING
FDBA 3504             (      exbasic.asm):05256                   PULS B              ; GET SIGN BYTE AGAIN
FDBC 2708             (      exbasic.asm):05257                   BEQ  L919E          ; BRANCH IF NO PADDING
FDBE 862A             (      exbasic.asm):05258                   LDA  #'*            ; PAD WITH ASTERISK
FDC0 C120             (      exbasic.asm):05259                   CMPB #SPACE         ; WAS THE FIRST BYTE A BLANK (POSITIVE)?
FDC2 2602             (      exbasic.asm):05260                   BNE  L919E          ; NO
FDC4 1F89             (      exbasic.asm):05261                   TFR  A,B            ; TRANSFER PAD CHARACTER TO ACCB
FDC6 3404             (      exbasic.asm):05262         L919E     PSHS B              ; SAVE FIRST CHARACTER ON STACK
FDC8 A780             (      exbasic.asm):05263         L91A0     STA  ,X+            ; STORE PAD CHARACTER IN BUFFER
FDCA E684             (      exbasic.asm):05264                   LDB  ,X             ; GET NEXT CHARACTER IN BUFFER
FDCC 2710             (      exbasic.asm):05265                   BEQ  L91B6          ; INSERT A ZERO IF END OF BUFFER
FDCE C145             (      exbasic.asm):05266                   CMPB #'E            ; * CHECK FOR AN 'E' AND
FDD0 270C             (      exbasic.asm):05267                   BEQ  L91B6          ; * PUT A ZERO BEFORE IT
FDD2 C130             (      exbasic.asm):05268                   CMPB #'0            ; * REPLACE LEADING ZEROES WITH
FDD4 27F2             (      exbasic.asm):05269                   BEQ  L91A0          ; * PAD CHARACTERS
FDD6 C12C             (      exbasic.asm):05270                   CMPB #',            ; * REPLACE LEADING COMMAS
FDD8 27EE             (      exbasic.asm):05271                   BEQ  L91A0          ; * WITH PAD CHARACTERS
FDDA C12E             (      exbasic.asm):05272                   CMPB #'.            ; * CHECK FOR DECIMAL POINT
FDDC 2604             (      exbasic.asm):05273                   BNE  L91BA          ; * AND DON'T PUT A ZERO BEFORE IT
FDDE 8630             (      exbasic.asm):05274         L91B6     LDA  #'0            ; * REPLACE PREVIOUS CHARACTER
FDE0 A782             (      exbasic.asm):05275                   STA  ,-X            ; * WITH A ZERO
FDE2 969A             (      exbasic.asm):05276         L91BA     LDA  VDA            ; * GET STATUS BYTE, CHECK
FDE4 8510             (      exbasic.asm):05277                   BITA #$10           ; * FOR FLOATING $
FDE6 2704             (      exbasic.asm):05278                   BEQ  L91C4          ; * BRANCH IF NO FLOATING $
FDE8 C624             (      exbasic.asm):05279                   LDB  #'$            ; * STORE A $ IN
FDEA E782             (      exbasic.asm):05280                   STB  ,-X            ; * BUFFER
FDEC 8404             (      exbasic.asm):05281         L91C4     ANDA #$04           ; CHECK PRE-SIGN FLAG
FDEE 3504             (      exbasic.asm):05282                   PULS B              ; GET SIGN CHARACTER
FDF0 2602             (      exbasic.asm):05283                   BNE  L91CC          ; RETURN IF POST-SIGN REQUIRED
FDF2 E782             (      exbasic.asm):05284                   STB  ,-X            ; STORE FIRST CHARACTER
FDF4 39               (      exbasic.asm):05285         L91CC     RTS
                      (      exbasic.asm):05286         *
                      (      exbasic.asm):05287         * CONVERT FPA0 INTO A NUMBER OF THE FORM - NNN,NNN,NNN X 10**M.
                      (      exbasic.asm):05288         * THE EXPONENT M WILL BE RETURNED IN V47 (BASE 10 EXPONENT).
FDF5 3440             (      exbasic.asm):05289         L91CD     PSHS U              ; SAVE BUFFER POINTER
FDF7 4F               (      exbasic.asm):05290                   CLRA                ; INITIAL EXPONENT OFFSET = 0
FDF8 9747             (      exbasic.asm):05291         L91D0     STA  V47            ; SAVE EXPONENT OFFSET
FDFA D64F             (      exbasic.asm):05292                   LDB  FP0EXP         ; GET EXPONENT OF FPA0
FDFC C180             (      exbasic.asm):05293                   CMPB #$80           ; * COMPARE TO EXPONENT OF .5
FDFE 2211             (      exbasic.asm):05294                   BHI  L91E9          ; * AND BRANCH IF FPA0 > = 1.0
                      (      exbasic.asm):05295         
                      (      exbasic.asm):05296         * IF FPA0 < 1.0, MULTIPLY IT BY 1E+09 UNTIL IT IS >= 1
FE00 8EEFF2           (      exbasic.asm):05297                   LDX  #LBDC0         ; POINT X TO FP NUMBER (1E+09)
FE03 BDECFC           (      exbasic.asm):05298                   JSR  LBACA          ; MULTIPLY FPA0 BY 1E+09
FE06 9647             (      exbasic.asm):05299                   LDA  V47            ; GET EXPONENT OFFSET
FE08 8009             (      exbasic.asm):05300                   SUBA #$09           ; SUBTRACT 9 (BECAUSE WE MULTIPLIED BY 1E+09 ABOVE)
FE0A 20EC             (      exbasic.asm):05301                   BRA  L91D0          ; CHECK TO SEE IF > 1.0
FE0C BDEDB4           (      exbasic.asm):05302         L91E4     JSR  LBB82          ; DIVIDE FPA0 BY 10
FE0F 0C47             (      exbasic.asm):05303                   INC  V47            ; INCREMENT EXPONENT OFFSET
FE11 8EEFED           (      exbasic.asm):05304         L91E9     LDX  #LBDBB         ; POINT X TO FP NUMBER (999,999,999)
FE14 BDEED2           (      exbasic.asm):05305                   JSR  LBCA0          ; COMPARE FPA0 TO X
FE17 2EF3             (      exbasic.asm):05306                   BGT  L91E4          ; BRANCH IF FPA0 > 999,999,999
FE19 8EEFE8           (      exbasic.asm):05307         L91F1     LDX  #LBDB6         ; POINT X TO FP NUMBER (99,999,999.9)
FE1C BDEED2           (      exbasic.asm):05308                   JSR  LBCA0          ; COMPARE FPA0 TO X
FE1F 2E07             (      exbasic.asm):05309                   BGT  L9200          ; RETURN IF 999,999,999 > FPA0 > 99,999,999.9
FE21 BDED9C           (      exbasic.asm):05310                   JSR  LBB6A          ; MULTIPLY FPA0 BY 10
FE24 0A47             (      exbasic.asm):05311                   DEC  V47            ; DECREMENT EXPONENT OFFSET
FE26 20F1             (      exbasic.asm):05312                   BRA  L91F1          ; KEEP UNNORMALIZING
FE28 35C0             (      exbasic.asm):05313         L9200     PULS U,PC           ; RESTORE BUFFER POINTER AND RETURN
                      (      exbasic.asm):05314         *
                      (      exbasic.asm):05315         * CONVERT FPA0 INTO AN INTEGER, THEN DECODE IT
                      (      exbasic.asm):05316         * INTO A DECIMAL ASCII STRING IN THE BUFFER
FE2A 3440             (      exbasic.asm):05317         L9202     PSHS U              ; SAVE BUFFER POINTER
FE2C BDEBE6           (      exbasic.asm):05318                   JSR  LB9B4          ; ADD .5 TO FPA0 (ROUND OFF)
FE2F BDEEFA           (      exbasic.asm):05319                   JSR  LBCC8          ; CONVERT FPA0 TO INTEGER FORMAT
FE32 3540             (      exbasic.asm):05320                   PULS U              ; RESTORE BUFFER POINTER
                      (      exbasic.asm):05321         *
                      (      exbasic.asm):05322         * CONVERT FPA0 INTO A DECIMAL ASCII STRING
FE34 8EF0F7           (      exbasic.asm):05323                   LDX  #LBEC5         ; POINT X TO UNNORMALIZED POWERS OF 10
FE37 C680             (      exbasic.asm):05324                   LDB  #$80           ; INITIALIZE DIGIT COUNTER TO 0 + $80.
                      (      exbasic.asm):05325         * BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA
                      (      exbasic.asm):05326         * IS NEGATIVE. WHEN YOU 'ADD' A NEGATIVE MANTISSA, IT IS
                      (      exbasic.asm):05327         * THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB
                      (      exbasic.asm):05328         * IS HOW THIS ROUTINE KNOWS THAT A 'SUBTRACTION' IS OCCURRING.
FE39 8D36             (      exbasic.asm):05329         L9211     BSR  L9249          ; CHECK FOR COMMA INSERTION
FE3B 9653             (      exbasic.asm):05330         L9213     LDA  FPA0+3         ; * 'ADD' A POWER OF 10 MANTISSA TO FPA0.
FE3D AB03             (      exbasic.asm):05331                   ADDA $03,X          ; * IF THE MANTISSA IS NEGATIVE, A SUBTRACTION
FE3F 9753             (      exbasic.asm):05332                   STA  FPA0+3         ; * WILL BE WHAT REALLY TAKES PLACE.
FE41 9652             (      exbasic.asm):05333                   LDA  FPA0+2         ; *
FE43 A902             (      exbasic.asm):05334                   ADCA $02,X          ; *
FE45 9752             (      exbasic.asm):05335                   STA  FPA0+2         ; *
FE47 9651             (      exbasic.asm):05336                   LDA  FPA0+1         ; *
FE49 A901             (      exbasic.asm):05337                   ADCA $01,X          ; *
FE4B 9751             (      exbasic.asm):05338                   STA  FPA0+1         ; *
FE4D 9650             (      exbasic.asm):05339                   LDA  FPA0           ; *
FE4F A984             (      exbasic.asm):05340                   ADCA ,X             ; *
FE51 9750             (      exbasic.asm):05341                   STA  FPA0           ; *
FE53 5C               (      exbasic.asm):05342                   INCB                ; ADD ONE TO DIGIT COUNTER
FE54 56               (      exbasic.asm):05343                   RORB                ; ROTATE CARRY INTO BIT 7
FE55 59               (      exbasic.asm):05344                   ROLB                ; * SET OVERFLOW FLAG - BRANCH IF CARRY SET AND
FE56 28E3             (      exbasic.asm):05345                   BVC  L9213          ; * ADDING MANTISSA OR CARRY CLEAR AND SUBTRACTING MANTISSA
FE58 2403             (      exbasic.asm):05346                   BCC  L9235          ; BRANCH IF SUBTRACTING MANTISSA
FE5A C00B             (      exbasic.asm):05347                   SUBB #10+1          ; WAS SUBB #10+1
FE5C 50               (      exbasic.asm):05348                   NEGB                ; * IF ADDING MANTISSA
FE5D CB2F             (      exbasic.asm):05349         L9235     ADDB #$2F           ; WAS ADDB #'0'-1
FE5F 3004             (      exbasic.asm):05350                   LEAX $04,X          ; MOVE TO NEXT POWER OF 10 MANTISSA
FE61 1F98             (      exbasic.asm):05351                   TFR  B,A            ; SAVE DIGIT IN ACCA
FE63 847F             (      exbasic.asm):05352                   ANDA #$7F           ; MASK OFF ADD/SUBTRACT FLAG (BIT 7)
FE65 A7C0             (      exbasic.asm):05353                   STA  ,U+            ; STORE DIGIT IN BUFFER
FE67 53               (      exbasic.asm):05354                   COMB                ; TOGGLE ADD/SUBTRACT FLAG
FE68 C480             (      exbasic.asm):05355                   ANDB #$80           ; MASK OFF EVERYTHING BUT ADD/SUB FLAG
FE6A 8CF11B           (      exbasic.asm):05356                   CMPX #LBEE9         ; COMPARE TO END OF UNNORMALIZED POWERS OF 10
FE6D 26CA             (      exbasic.asm):05357                   BNE  L9211          ; BRANCH IF NOT DONE
FE6F 6FC4             (      exbasic.asm):05358                   CLR  ,U             ; PUT A ZERO AT END OF INTEGER
                      (      exbasic.asm):05359         
                      (      exbasic.asm):05360         * DECREMENT DECIMAL POINT COUNTER AND CHECK FOR COMMA INSERTION
FE71 0A45             (      exbasic.asm):05361         L9249     DEC  V45            ; DECREMENT DECIMAL POINT COUNTER
FE73 2609             (      exbasic.asm):05362                   BNE  L9256          ; NOT TIME FOR DECIMAL POINT
FE75 DF39             (      exbasic.asm):05363         L924D     STU  VARPTR         ; SAVE BUFFER POINTER-POSITION OF THE DECIMAL POINT
FE77 862E             (      exbasic.asm):05364                   LDA  #'.            ; * STORE A DECIMAL
FE79 A7C0             (      exbasic.asm):05365                   STA  ,U+            ; * POINT IN THE OUTPUT BUFFER
FE7B 0F97             (      exbasic.asm):05366                   CLR  VD7            ; * CLEAR COMMA COUNTER - NOW IT WILL TAKE 255
                      (      exbasic.asm):05367         *                             ; * DECREMENTS BEFORE ANOTHER COMMA WILL BE INSERTED
FE7D 39               (      exbasic.asm):05368                   RTS
FE7E 0A97             (      exbasic.asm):05369         L9256     DEC  VD7            ; DECREMENT COMMA COUNTER
FE80 2608             (      exbasic.asm):05370                   BNE  L9262          ; RETURN IF NOT TIME FOR COMMA
FE82 8603             (      exbasic.asm):05371                   LDA  #$03           ; * RESET COMMA COUNTER TO 3; THREE
FE84 9797             (      exbasic.asm):05372                   STA  VD7            ; * DIGITS BETWEEN COMMAS
FE86 862C             (      exbasic.asm):05373                   LDA  #',            ; * PUT A COMMA INTO
FE88 A7C0             (      exbasic.asm):05374                   STA  ,U+            ; * THE BUFFER
FE8A 39               (      exbasic.asm):05375         L9262     RTS
                      (      exbasic.asm):05376         
                      (      exbasic.asm):05377         * INITIALIZE DECIMAL POINT AND COMMA COUNTERS
FE8B 9647             (      exbasic.asm):05378         L9263     LDA  V47            ; GET THE BASE 10 EXPONENT OFFSET
FE8D 8B0A             (      exbasic.asm):05379                   ADDA #10            ; * ADD 10 (FPA0 WAS 'NORMALIZED' TO 9 PLACES LEFT
FE8F 9745             (      exbasic.asm):05380                   STA  V45            ; * OF DECIMAL POINT) - SAVE IN DECIMAL POINT COUNTER
FE91 4C               (      exbasic.asm):05381                   INCA                ; ADD ONE FOR THE DECIMAL POINT
FE92 8003             (      exbasic.asm):05382         L926A     SUBA #$03           ; * DIVIDE DECIMAL POINT COUNTER BY 3; LEAVE
FE94 24FC             (      exbasic.asm):05383                   BCC  L926A          ; * THE REMAINDER IN ACCA
FE96 8B05             (      exbasic.asm):05384                   ADDA #$05           ; CONVERT REMAINDER INTO A NUMBER FROM 1-3
FE98 9797             (      exbasic.asm):05385                   STA  VD7            ; SAVE COMMA COUNTER
FE9A 969A             (      exbasic.asm):05386                   LDA  VDA            ; GET STATUS BYTE
FE9C 8440             (      exbasic.asm):05387                   ANDA #$40           ; CHECK FOR COMMA FLAG
FE9E 2602             (      exbasic.asm):05388                   BNE  L927A          ; BRANCH IF COMMA FLAG ACTIVE
FEA0 9797             (      exbasic.asm):05389                   STA  VD7            ; CLEAR COMMA COUNTER - 255 DIGITS OUTPUT BEFORE A COMMA
FEA2 39               (      exbasic.asm):05390         L927A     RTS
                      (      exbasic.asm):05391         *
                      (      exbasic.asm):05392         * INSERT ACCA ZEROES INTO THE BUFFER
FEA3 3402             (      exbasic.asm):05393         L927B     PSHS A              ; SAVE ZEROES COUNTER
FEA5 8DCA             (      exbasic.asm):05394                   BSR  L9249          ; CHECK FOR DECIMAL POINT
FEA7 3502             (      exbasic.asm):05395                   PULS A              ; RESTORE ZEROES COUNTER
FEA9 4A               (      exbasic.asm):05396         L9281     DECA                ; * DECREMENT ZEROES COUNTER AND
FEAA 2B0A             (      exbasic.asm):05397                   BMI  L928E          ; * RETURN IF < 0
FEAC 3402             (      exbasic.asm):05398                   PSHS A              ; SAVE ZEROES COUNTER
FEAE 8630             (      exbasic.asm):05399                   LDA  #'0            ; * PUT A ZERO INTO
FEB0 A7C0             (      exbasic.asm):05400                   STA  ,U+            ; * THE BUFFER
FEB2 A6E0             (      exbasic.asm):05401                   LDA  ,S+            ; RESTORE THE ZEROES COUNTER
FEB4 26ED             (      exbasic.asm):05402                   BNE  L927B          ; BRANCH IF NOT DONE
FEB6 39               (      exbasic.asm):05403         L928E     RTS
                      (      exbasic.asm):05404         
                      (      exbasic.asm):05405         
                      (      exbasic.asm):05406         * LINE
FEB7 8189             (      exbasic.asm):05407         LINE      CMPA #TOK_INPUT     ; 'INPUT' TOKEN
FEB9 1027F95C         (      exbasic.asm):05408                   LBEQ L89C0          ; GO DO 'LINE INPUT' COMMAND
FEBD 7EE4E9           (      exbasic.asm):05409                   JMP  LB277          ; 'SYNTAX ERROR' IF NOT "LINE INPUT"
                      (      exbasic.asm):05410         
FEC0 FFFFFFFFFFFFFFFF (      exbasic.asm):05411                   FILL $FF,$FFF0-*   ; Fill ROM with FFs until vector table
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
                      (      exbasic.asm):05412         
                      (      exbasic.asm):05413         * END OF EXTENDED BASIC
                      (      exbasic.asm):05414         * INTERRUPT VECTORS
                      (      exbasic.asm):05415                   ORG  $FFF0
FFF0 0000             (      exbasic.asm):05416         LBFF0     FDB  $0000          ; RESERVED
FFF2 009B             (      exbasic.asm):05417         LBFF2     FDB  SW3VEC         ; SWI3
FFF4 009E             (      exbasic.asm):05418         LBFF4     FDB  SW2VEC         ; SWI2
FFF6 00AA             (      exbasic.asm):05419         LBFF6     FDB  FRQVEC         ; FIRQ
FFF8 00A7             (      exbasic.asm):05420         LBFF8     FDB  IRQVEC         ; IRQ
FFFA 00A1             (      exbasic.asm):05421         LBFFA     FDB  SWIVEC         ; SWI
FFFC 00A4             (      exbasic.asm):05422         LBFFC     FDB  NMIVEC         ; NMI
FFFE DB3E             (      exbasic.asm):05423         LBFFE     FDB  RESVEC         ; RESET
                      (      exbasic.asm):05424         
                      (      exbasic.asm):05425                 END RESVEC
