     A000             (      exbasic.asm):00001         UART      EQU  $A000
     A001             (      exbasic.asm):00002         RECEV     EQU  UART+1
     A001             (      exbasic.asm):00003         TRANS     EQU  UART+1
     A000             (      exbasic.asm):00004         USTAT     EQU  UART
     A000             (      exbasic.asm):00005         UCTRL     EQU  UART
                      (      exbasic.asm):00006         
     0008             (      exbasic.asm):00007         BS        EQU  8              ; BACKSPACE
     000D             (      exbasic.asm):00008         CR        EQU  $D             ; ENTER KEY
     001B             (      exbasic.asm):00009         ESC       EQU  $1B            ; ESCAPE CODE
     0020             (      exbasic.asm):00010         SPACE     EQU  $20            ; SPACE (BLANK)
     003A             (      exbasic.asm):00011         STKBUF    EQU  58             ; STACK BUFFER ROOM
     00FA             (      exbasic.asm):00012         LBUFMX    EQU  250            ; MAX NUMBER OF CHARS IN A BASIC LINE
     00FA             (      exbasic.asm):00013         MAXLIN    EQU  $FA            ; MAXIMUM MS BYTE OF LINE NUMBER
                      (      exbasic.asm):00014         * PSEUDO OPS
     0021             (      exbasic.asm):00015         SKP1      EQU  $21            ; OP CODE OF BRN - SKIP ONE BYTE
     008C             (      exbasic.asm):00016         SKP2      EQU  $8C            ; OP CODE OF CMPX # - SKIP TWO BYTES
     0086             (      exbasic.asm):00017         SKP1LD    EQU  $86            ; OP CODE OF LDA # - SKIP THE NEXT BYTE
                      (      exbasic.asm):00018         *                             ; AND LOAD THE VALUE OF THAT BYTE INTO ACCA - THIS
                      (      exbasic.asm):00019         *                             ; IS USUALLY USED TO LOAD ACCA WITH A NON ZERO VALUE
     0015             (      exbasic.asm):00020         RTS_LOW   EQU  $15            ; 6850 ACIA CONTROL REGISTER: RX INT DISABLED, RTS LOW, TX INT DISABLED, 8N1, CLK/16
                      (      exbasic.asm):00021                   ORG  0
0000                  (      exbasic.asm):00022         ENDFLG    RMB  1              ; STOP/END FLAG: POSITIVE=STOP, NEG=END
0001                  (      exbasic.asm):00023         CHARAC    RMB  1              ; TERMINATOR FLAG 1
0002                  (      exbasic.asm):00024         ENDCHR    RMB  1              ; TERMINATOR FLAG 2
0003                  (      exbasic.asm):00025         TMPLOC    RMB  1              ; SCRATCH VARIABLE
0004                  (      exbasic.asm):00026         IFCTR     RMB  1              ; IF COUNTER - HOW MANY IF STATEMENTS IN A LINE
0005                  (      exbasic.asm):00027         DIMFLG    RMB  1              ; *DV* ARRAY FLAG 0=EVALUATE, 1=DIMENSIONING
0006                  (      exbasic.asm):00028         VALTYP    RMB  1              ; *DV* *PV TYPE FLAG: 0=NUMERIC, $FF=STRING
0007                  (      exbasic.asm):00029         GARBFL    RMB  1              ; *TV STRING SPACE HOUSEKEEPING FLAG
0008                  (      exbasic.asm):00030         ARYDIS    RMB  1              ; DISABLE ARRAY SEARCH: 00=ALLOW SEARCH
0009                  (      exbasic.asm):00031         INPFLG    RMB  1              ; *TV INPUT FLAG: READ=0, INPUT<>0
000A                  (      exbasic.asm):00032         RELFLG    RMB  1              ; *TV RELATIONAL OPERATOR FLAG
000B                  (      exbasic.asm):00033         TEMPPT    RMB  2              ; *PV TEMPORARY STRING STACK POINTER
000D                  (      exbasic.asm):00034         LASTPT    RMB  2              ; *PV ADDR OF LAST USED STRING STACK ADDRESS
000F                  (      exbasic.asm):00035         TEMPTR    RMB  2              ; TEMPORARY POINTER
0011                  (      exbasic.asm):00036         TMPTR1    RMB  2              ; TEMPORARY DESCRIPTOR STORAGE (STACK SEARCH)
0013                  (      exbasic.asm):00037         FPA2      RMB  4              ; FLOATING POINT ACCUMULATOR #2 MANTISSA
0017                  (      exbasic.asm):00038         BOTSTK    RMB  2              ; BOTTOM OF STACK AT LAST CHECK
0019                  (      exbasic.asm):00039         TXTTAB    RMB  2              ; *PV BEGINNING OF BASIC PROGRAM
001B                  (      exbasic.asm):00040         VARTAB    RMB  2              ; *PV START OF VARIABLES
001D                  (      exbasic.asm):00041         ARYTAB    RMB  2              ; *PV START OF ARRAYS
001F                  (      exbasic.asm):00042         ARYEND    RMB  2              ; *PV END OF ARRAYS (+1)
0021                  (      exbasic.asm):00043         FRETOP    RMB  2              ; *PV START OF STRING STORAGE (TOP OF FREE RAM)
0023                  (      exbasic.asm):00044         STRTAB    RMB  2              ; *PV START OF STRING VARIABLES
0025                  (      exbasic.asm):00045         FRESPC    RMB  2              ; UTILITY STRING POINTER
0027                  (      exbasic.asm):00046         MEMSIZ    RMB  2              ; *PV TOP OF STRING SPACE
0029                  (      exbasic.asm):00047         OLDTXT    RMB  2              ; SAVED LINE NUMBER DURING A "STOP"
002B                  (      exbasic.asm):00048         BINVAL    RMB  2              ; BINARY VALUE OF A CONVERTED LINE NUMBER
002D                  (      exbasic.asm):00049         OLDPTR    RMB  2              ; SAVED INPUT PTR DURING A "STOP"
002F                  (      exbasic.asm):00050         TINPTR    RMB  2              ; TEMPORARY INPUT POINTER STORAGE
0031                  (      exbasic.asm):00051         DATTXT    RMB  2              ; *PV 'DATA' STATEMENT LINE NUMBER POINTER
0033                  (      exbasic.asm):00052         DATPTR    RMB  2              ; *PV 'DATA' STATEMENT ADDRESS POINTER
0035                  (      exbasic.asm):00053         DATTMP    RMB  2              ; DATA POINTER FOR 'INPUT' & 'READ'
0037                  (      exbasic.asm):00054         VARNAM    RMB  2              ; *TV TEMP STORAGE FOR A VARIABLE NAME
0039                  (      exbasic.asm):00055         VARPTR    RMB  2              ; *TV POINTER TO A VARIABLE DESCRIPTOR
003B                  (      exbasic.asm):00056         VARDES    RMB  2              ; TEMP POINTER TO A VARIABLE DESCRIPTOR
003D                  (      exbasic.asm):00057         RELPTR    RMB  2              ; POINTER TO RELATIONAL OPERATOR PROCESSING ROUTINE
003F                  (      exbasic.asm):00058         TRELFL    RMB  1              ; TEMPORARY RELATIONAL OPERATOR FLAG BYTE
                      (      exbasic.asm):00059         * FLOATING POINT ACCUMULATORS #3,4 & 5 ARE MOSTLY
                      (      exbasic.asm):00060         * USED AS SCRATCH PAD VARIABLES.
                      (      exbasic.asm):00061         ** FLOATING POINT ACCUMULATOR #3 :PACKED: ($40-$44)
0040                  (      exbasic.asm):00062         V40       RMB  1
0041                  (      exbasic.asm):00063         V41       RMB  1
0042                  (      exbasic.asm):00064         V42       RMB  1
0043                  (      exbasic.asm):00065         V43       RMB  1
0044                  (      exbasic.asm):00066         V44       RMB  1
                      (      exbasic.asm):00067         ** FLOATING POINT ACCUMULATOR #4 :PACKED: ($45-$49)
0045                  (      exbasic.asm):00068         V45       RMB  1
0046                  (      exbasic.asm):00069         V46       RMB  1
0047                  (      exbasic.asm):00070         V47       RMB  1
0048                  (      exbasic.asm):00071         V48       RMB  2
                      (      exbasic.asm):00072         ** FLOATING POINT ACCUMULATOR #5 :PACKED: ($4A-$4E)
004A                  (      exbasic.asm):00073         V4A       RMB  1
004B                  (      exbasic.asm):00074         V4B       RMB  2
004D                  (      exbasic.asm):00075         V4D       RMB  2
                      (      exbasic.asm):00076         ** FLOATING POINT ACCUMULATOR #0
004F                  (      exbasic.asm):00077         FP0EXP    RMB  1              ; *PV FLOATING POINT ACCUMULATOR #0 EXPONENT
0050                  (      exbasic.asm):00078         FPA0      RMB  4              ; *PV FLOATING POINT ACCUMULATOR #0 MANTISSA
0054                  (      exbasic.asm):00079         FP0SGN    RMB  1              ; *PV FLOATING POINT ACCUMULATOR #0 SIGN
0055                  (      exbasic.asm):00080         COEFCT    RMB  1              ; POLYNOMIAL COEFFICIENT COUNTER
0056                  (      exbasic.asm):00081         STRDES    RMB  5              ; TEMPORARY STRING DESCRIPTOR
005B                  (      exbasic.asm):00082         FPCARY    RMB  1              ; FLOATING POINT CARRY BYTE
                      (      exbasic.asm):00083         ** FLOATING POINT ACCUMULATOR #1
005C                  (      exbasic.asm):00084         FP1EXP    RMB  1              ; *PV FLOATING POINT ACCUMULATOR #1 EXPONENT
005D                  (      exbasic.asm):00085         FPA1      RMB  4              ; *PV FLOATING POINT ACCUMULATOR #1 MANTISSA
0061                  (      exbasic.asm):00086         FP1SGN    RMB  1              ; *PV FLOATING POINT ACCUMULATOR #1 SIGN
0062                  (      exbasic.asm):00087         RESSGN    RMB  1              ; SIGN OF RESULT OF FLOATING POINT OPERATION
0063                  (      exbasic.asm):00088         FPSBYT    RMB  1              ; FLOATING POINT SUB BYTE (FIFTH BYTE)
0064                  (      exbasic.asm):00089         COEFPT    RMB  2              ; POLYNOMIAL COEFFICIENT POINTER
0066                  (      exbasic.asm):00090         LSTTXT    RMB  2              ; CURRENT LINE POINTER DURING LIST
0068                  (      exbasic.asm):00091         CURLIN    RMB  2              ; *PV CURRENT LINE # OF BASIC PROGRAM, $FFFF = DIRECT
006A                  (      exbasic.asm):00092         DEVCFW    RMB  1              ; *TV TAB FIELD WIDTH
006B                  (      exbasic.asm):00093         DEVLCF    RMB  1              ; *TV TAB ZONE
006C                  (      exbasic.asm):00094         DEVPOS    RMB  1              ; *TV PRINT POSITION
006D                  (      exbasic.asm):00095         DEVWID    RMB  1              ; *TV PRINT WIDTH
006E                  (      exbasic.asm):00096         RSTFLG    RMB  1              ; *PV WARM START FLAG: $55=WARM, OTHER=COLD
006F                  (      exbasic.asm):00097         RSTVEC    RMB  2              ; *PV WARM START VECTOR - JUMP ADDRESS FOR WARM START
0071                  (      exbasic.asm):00098         TOPRAM    RMB  2              ; *PV TOP OF RAM
0073                  (      exbasic.asm):00099         IKEYIM    RMB  1              ; *TV INKEY$ RAM IMAGE
0074                  (      exbasic.asm):00100         ZERO      RMB  2              ; *PV DUMMY - THESE TWO BYTES ARE ALWAYS ZERO
                      (      exbasic.asm):00101         * THE FOLLOWING BYTES ARE MOVED DOWN FROM ROM
0076                  (      exbasic.asm):00102         LPTCFW    RMB  1              ; 16
0077                  (      exbasic.asm):00103         LPTLCF    RMB  1              ; 112
0078                  (      exbasic.asm):00104         LPTWID    RMB  1              ; 132
0079                  (      exbasic.asm):00105         LPTPOS    RMB  1              ; 0
007A                  (      exbasic.asm):00106         EXECJP    RMB  2              ; LB4AA
                      (      exbasic.asm):00107         
                      (      exbasic.asm):00108         * THIS ROUTINE PICKS UP THE NEXT INPUT CHARACTER FROM
                      (      exbasic.asm):00109         * BASIC. THE ADDRESS OF THE NEXT BASIC BYTE TO BE
                      (      exbasic.asm):00110         * INTERPRETED IS STORED AT CHARAD.
007C 0C84             (      exbasic.asm):00111         GETNCH    INC  <CHARAD+1      ; *PV INCREMENT LS BYTE OF INPUT POINTER
007E 2602             (      exbasic.asm):00112                   BNE  GETCCH         ; *PV BRANCH IF NOT ZERO (NO CARRY)
0080 0C83             (      exbasic.asm):00113                   INC  <CHARAD        ; *PV INCREMENT MS BYTE OF INPUT POINTER
0082 B6               (      exbasic.asm):00114         GETCCH    FCB  $B6            ; *PV OP CODE OF LDA EXTENDED
0083                  (      exbasic.asm):00115         CHARAD    RMB  2              ; *PV THESE 2 BYTES CONTAIN ADDRESS OF THE CURRENT
                      (      exbasic.asm):00116         *         *    CHARACTER WHICH THE BASIC INTERPRETER IS
                      (      exbasic.asm):00117         *         *    PROCESSING
0085 7EDCB3           (      exbasic.asm):00118                   JMP  BROMHK         ; JUMP BACK INTO THE BASIC RUM
                      (      exbasic.asm):00119         
0088                  (      exbasic.asm):00120         VAB       RMB  1              ; = LOW ORDER FOUR BYTES OF THE PRODUCT
0089                  (      exbasic.asm):00121         VAC       RMB  1              ; = OF A FLOATING POINT MULTIPLICATION
008A                  (      exbasic.asm):00122         VAD       RMB  1              ; = THESE BYTES ARE USE AS RANDOM DATA
008B                  (      exbasic.asm):00123         VAE       RMB  1              ; = BY THE RND STATEMENT
                      (      exbasic.asm):00124         
                      (      exbasic.asm):00125         * EXTENDED BASIC VARIABLES
008C                  (      exbasic.asm):00126         TRCFLG    RMB  1              ; *PV TRACE FLAG 0=OFF ELSE=ON
008D                  (      exbasic.asm):00127         USRADR    RMB  2              ; *PV ADDRESS OF THE START OF USR VECTORS
                      (      exbasic.asm):00128         
                      (      exbasic.asm):00129         * EXTENDED BASIC SCRATCH PAD VARIABLES
008F                  (      exbasic.asm):00130         VCF       RMB  2
0091                  (      exbasic.asm):00131         VD1       RMB  2
0093                  (      exbasic.asm):00132         VD3       RMB  2
0095                  (      exbasic.asm):00133         VD5       RMB  2
0097                  (      exbasic.asm):00134         VD7       RMB  1
0098                  (      exbasic.asm):00135         VD8       RMB  1
0099                  (      exbasic.asm):00136         VD9       RMB  1
009A                  (      exbasic.asm):00137         VDA       RMB  1
009B                  (      exbasic.asm):00138         SW3VEC    RMB  3
009E                  (      exbasic.asm):00139         SW2VEC    RMB  3
00A1                  (      exbasic.asm):00140         SWIVEC    RMB  3
00A4                  (      exbasic.asm):00141         NMIVEC    RMB  3
00A7                  (      exbasic.asm):00142         IRQVEC    RMB  3
00AA                  (      exbasic.asm):00143         FRQVEC    RMB  3
00AD                  (      exbasic.asm):00144         USRJMP    RMB  3              ; JUMP ADDRESS FOR BASIC'S USR FUNCTION
00B0                  (      exbasic.asm):00145         RVSEED    RMB  1              ; * FLOATING POINT RANDOM NUMBER SEED EXPONENT
00B1                  (      exbasic.asm):00146                   RMB  4              ; * MANTISSA: INITIALLY SET TO $804FC75259
                      (      exbasic.asm):00147         
                      (      exbasic.asm):00148         **** USR FUNCTION VECTOR ADDRESSES (EX BASIC ONLY)
00B5                  (      exbasic.asm):00149         USR0      RMB  2              ; USR 0 VECTOR
00B7                  (      exbasic.asm):00150                   RMB  2              ; USR 1
00B9                  (      exbasic.asm):00151                   RMB  2              ; USR 2
00BB                  (      exbasic.asm):00152                   RMB  2              ; USR 3
00BD                  (      exbasic.asm):00153                   RMB  2              ; USR 4
00BF                  (      exbasic.asm):00154                   RMB  2              ; USR 5
00C1                  (      exbasic.asm):00155                   RMB  2              ; USR 6
00C3                  (      exbasic.asm):00156                   RMB  2              ; USR 7
00C5                  (      exbasic.asm):00157                   RMB  2              ; USR 8
00C7                  (      exbasic.asm):00158                   RMB  2              ; USR 9
                      (      exbasic.asm):00159         
00C9                  (      exbasic.asm):00160         STRSTK    RMB  8*5            ; STRING DESCRIPTOR STACK
00F1                  (      exbasic.asm):00161         LINHDR    RMB  2              ; LINE INPUT BUFFER HEADER
00F3                  (      exbasic.asm):00162         LINBUF    RMB  LBUFMX+1       ; BASIC LINE INPUT BUFFER
01EE                  (      exbasic.asm):00163         STRBUF    RMB  41             ; STRING BUFFER
                      (      exbasic.asm):00164         
                      (      exbasic.asm):00165         * CFM - This is the memory for the Basic program. In the original
                      (      exbasic.asm):00166         * code we search up from here and test whether we have valid RAM
                      (      exbasic.asm):00167         * by reading the location, complementing the value, writing it
                      (      exbasic.asm):00168         * back out and then comparing it to see if it's writable memory.
                      (      exbasic.asm):00169         * since all our memory is RAM, that won't work and we'll
                      (      exbasic.asm):00170         * overwrite the code. So make it a fixed size here
                      (      exbasic.asm):00171         
     4E20             (      exbasic.asm):00172         PROGSZ      EQU     20000
0217                  (      exbasic.asm):00173         PROGST      RMB     PROGSZ              ; START OF PROGRAM SPACE
     4E20             (      exbasic.asm):00174         PROGEND     EQU     *-PROGST
                      (      exbasic.asm):00175         
                      (      exbasic.asm):00176         *         INTERRUPT VECTORS
                      (      exbasic.asm):00177                   ORG  $FFF2
FFF2                  (      exbasic.asm):00178         SWI3      RMB  2
FFF4                  (      exbasic.asm):00179         SWI2      RMB  2
FFF6                  (      exbasic.asm):00180         FIRQ      RMB  2
FFF8                  (      exbasic.asm):00181         IRQ       RMB  2
FFFA                  (      exbasic.asm):00182         SWI       RMB  2
FFFC                  (      exbasic.asm):00183         NMI       RMB  2
FFFE                  (      exbasic.asm):00184         RESETV    RMB  2
                      (      exbasic.asm):00185         
                      (      exbasic.asm):00186         
                      (      exbasic.asm):00187         
                      (      exbasic.asm):00188                   ORG  $C000
C000 FFFFFFFFFFFFFFFF (      exbasic.asm):00189                   FILL $FF,$DB00-*   ; Fill ROM with FFs until $DB00
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
                      (      exbasic.asm):00190         
                      (      exbasic.asm):00191         * CONSOLE IN
DB00 8D03             (      exbasic.asm):00192         LA171     BSR  KEYIN          ; GET A CHARACTER FROM CONSOLE IN
DB02 27FC             (      exbasic.asm):00193                   BEQ  LA171          ; LOOP IF NO KEY DOWN
DB04 39               (      exbasic.asm):00194                   RTS
                      (      exbasic.asm):00195         
                      (      exbasic.asm):00196         *
                      (      exbasic.asm):00197         * THIS ROUTINE GETS A KEYSTROKE FROM THE KEYBOARD IF A KEY
                      (      exbasic.asm):00198         * IS DOWN. IT RETURNS ZERO TRUE IF THERE WAS NO KEY DOWN.
                      (      exbasic.asm):00199         *
                      (      exbasic.asm):00200         *
DB05                  (      exbasic.asm):00201         LA1C1
DB05 B6A000           (      exbasic.asm):00202         KEYIN     LDA  USTAT
DB08 8501             (      exbasic.asm):00203                   BITA #1
DB0A 2706             (      exbasic.asm):00204                   BEQ  NOCHAR
DB0C B6A001           (      exbasic.asm):00205                   LDA  RECEV
DB0F 847F             (      exbasic.asm):00206                   ANDA #$7F
DB11 39               (      exbasic.asm):00207                   RTS
DB12 4F               (      exbasic.asm):00208         NOCHAR    CLRA
DB13 39               (      exbasic.asm):00209                   RTS
                      (      exbasic.asm):00210         
                      (      exbasic.asm):00211         
                      (      exbasic.asm):00212         
                      (      exbasic.asm):00213         * CONSOLE OUT
DB14 8D24             (      exbasic.asm):00214         PUTCHR    BSR  WAITACIA
DB16 3402             (      exbasic.asm):00215                   PSHS A              ;
DB18 810D             (      exbasic.asm):00216                   CMPA #CR            ; IS IT CARRIAGE RETURN?
DB1A 270B             (      exbasic.asm):00217                   BEQ  NEWLINE        ; YES
DB1C B7A001           (      exbasic.asm):00218                   STA  TRANS
DB1F 0C79             (      exbasic.asm):00219                   INC  LPTPOS         ; INCREMENT CHARACTER COUNTER
DB21 9679             (      exbasic.asm):00220                   LDA  LPTPOS         ; CHECK FOR END OF LINE PRINTER LINE
DB23 9178             (      exbasic.asm):00221                   CMPA LPTWID         ; AT END OF LINE PRINTER LINE?
DB25 2510             (      exbasic.asm):00222                   BLO  PUTEND         ; NO
DB27 0F79             (      exbasic.asm):00223         NEWLINE   CLR  LPTPOS         ; RESET CHARACTER COUNTER
DB29 8D0F             (      exbasic.asm):00224                   BSR  WAITACIA
DB2B 860D             (      exbasic.asm):00225                   LDA  #13
DB2D B7A001           (      exbasic.asm):00226                   STA  TRANS
DB30 8D08             (      exbasic.asm):00227                   BSR  WAITACIA
DB32 860A             (      exbasic.asm):00228                   LDA  #10            ; DO LINEFEED AFTER CR
DB34 B7A001           (      exbasic.asm):00229                   STA  TRANS
DB37 3502             (      exbasic.asm):00230         PUTEND    PULS A              ;
DB39 39               (      exbasic.asm):00231                   RTS
                      (      exbasic.asm):00232         
DB3A 3402             (      exbasic.asm):00233         WAITACIA  PSHS A
DB3C B6A000           (      exbasic.asm):00234         WRWAIT    LDA  USTAT
DB3F 8502             (      exbasic.asm):00235                   BITA #2
DB41 27F9             (      exbasic.asm):00236                   BEQ  WRWAIT
DB43 3502             (      exbasic.asm):00237                   PULS A              ;
DB45 39               (      exbasic.asm):00238                   RTS
                      (      exbasic.asm):00239         
                      (      exbasic.asm):00240         *
DB46                  (      exbasic.asm):00241         RESVEC
DB46 10CE01EE         (      exbasic.asm):00242         LA00E     LDS  #LINBUF+LBUFMX+1 ; SET STACK TO TOP OF LINE INPUT BUFFER
DB4A 966E             (      exbasic.asm):00243                   LDA  RSTFLG         ; GET WARM START FLAG
DB4C 8155             (      exbasic.asm):00244                   CMPA #$55           ; IS IT A WARM START?
DB4E 260A             (      exbasic.asm):00245                   BNE  BACDST         ; NO - D0 A COLD START
DB50 9E6F             (      exbasic.asm):00246                   LDX  RSTVEC         ; WARM START VECTOR
DB52 A684             (      exbasic.asm):00247                   LDA  ,X             ; GET FIRST BYTE OF WARM START ADDR
DB54 8112             (      exbasic.asm):00248                   CMPA #$12           ; IS IT NOP?
DB56 2602             (      exbasic.asm):00249                   BNE  BACDST         ; NO - DO A COLD START
DB58 6E84             (      exbasic.asm):00250                   JMP  ,X             ; YES, G0 THERE
                      (      exbasic.asm):00251         
                      (      exbasic.asm):00252         * COLD START ENTRY
                      (      exbasic.asm):00253         
                      (      exbasic.asm):00254         * CFM - Clear memory down to 0. This used to clear the byte at $ffff
                      (      exbasic.asm):00255         * which didn't matter because it was ROM. It's illegal memory for
                      (      exbasic.asm):00256         * us so don't do that
                      (      exbasic.asm):00257         *
DB5A 8E0218           (      exbasic.asm):00258         BACDST    LDX  #PROGST+1      ; POINT X TO CLEAR 1ST 1K OF RAM
DB5D 6F83             (      exbasic.asm):00259         LA077     CLR  ,--X           ; MOVE POINTER DOWN AND CLEAR BYTE
DB5F 3084             (      exbasic.asm):00260                   LEAX ,X             ; See if we are done
DB61 26FA             (      exbasic.asm):00261                   BNE  LA077          ; KEEP GOING IF NOT AT BOTTOM OF PAGE 0
                      (      exbasic.asm):00262         
                      (      exbasic.asm):00263         * CFM - Setup Basic program memory. See comment at PROGST.
                      (      exbasic.asm):00264         * End of memory is PROGEND-1.
                      (      exbasic.asm):00265         *
DB63 8E0217           (      exbasic.asm):00266                   LDX  #PROGST        ; SET TO START OF PROGRAM SPACE
DB66 6F80             (      exbasic.asm):00267                   CLR  ,X+            ; CLEAR 1ST BYTE OF BASIC PROGRAM
DB68 9F19             (      exbasic.asm):00268                   STX  TXTTAB         ; BEGINNING OF BASIC PROGRAM
                      (      exbasic.asm):00269                   
DB6A 8E4E1F           (      exbasic.asm):00270                   LDX  #PROGEND-1
                      (      exbasic.asm):00271             
DB6D 9F71             (      exbasic.asm):00272                   STX  TOPRAM         ; SAVE ABSOLUTE TOP OF RAM
DB6F 9F27             (      exbasic.asm):00273                   STX  MEMSIZ         ; SAVE TOP OF STRING SPACE
DB71 9F23             (      exbasic.asm):00274                   STX  STRTAB         ; SAVE START OF STRING VARIABLES
DB73 3089FF38         (      exbasic.asm):00275                   LEAX -200,X         ; CLEAR 200 - DEFAULT STRING SPACE TO 200 BYTES
DB77 9F21             (      exbasic.asm):00276                   STX  FRETOP         ; SAVE START OF STRING SPACE
DB79 1F14             (      exbasic.asm):00277                   TFR  X,S            ; PUT STACK THERE
DB7B 8EDBC2           (      exbasic.asm):00278                   LDX  #LA10D         ; POINT X TO ROM SOURCE DATA
DB7E CE0076           (      exbasic.asm):00279                   LDU  #LPTCFW        ; POINT U TO RAM DESTINATION
DB81 C612             (      exbasic.asm):00280                   LDB  #18            ; MOVE 18 BYTES
DB83 BDDCA2           (      exbasic.asm):00281                   JSR  LA59A          ; MOVE 18 BYTES FROM ROM TO RAM
DB86 CE00A7           (      exbasic.asm):00282                   LDU  #IRQVEC        ; POINT U TO NEXT RAM DESTINATION
DB89 C604             (      exbasic.asm):00283                   LDB  #4             ; MOVE 4 MORE BYTES
DB8B BDDCA2           (      exbasic.asm):00284                   JSR  LA59A          ; MOVE 4 BYTES FROM ROM TO RAM
DB8E 8639             (      exbasic.asm):00285                   LDA  #$39
DB90 97F0             (      exbasic.asm):00286                   STA  LINHDR-1       ; PUT RTS IN LINHDR-1
DB92 BDDFAE           (      exbasic.asm):00287                   JSR  LAD19          ; G0 DO A 'NEW'
                      (      exbasic.asm):00288         * EXTENDED BASIC INITIALISATION
DB95 8E00B5           (      exbasic.asm):00289                   LDX  #USR0          ; INITIALIZE ADDRESS OF START OF
DB98 9F8D             (      exbasic.asm):00290                   STX  USRADR         ; USR JUMP TABLE
                      (      exbasic.asm):00291         * INITIALIZE THE USR CALLS TO 'FC ERROR'
DB9A CEE6C2           (      exbasic.asm):00292                   LDU  #LB44A         ; ADDRESS OF 'FC ERROR' ROUTINE
DB9D C60A             (      exbasic.asm):00293                   LDB  #10            ; 10 USR CALLS IN EX BASIC
DB9F EF81             (      exbasic.asm):00294         L8031     STU  ,X++           ; STORE 'FC' ERROR AT USR ADDRESSES
DBA1 5A               (      exbasic.asm):00295                   DECB                ; FINISHED ALL 10?
DBA2 26FB             (      exbasic.asm):00296                   BNE  L8031          ; NO
                      (      exbasic.asm):00297         
                      (      exbasic.asm):00298         * INITIALISE ACIA
DBA4 8615             (      exbasic.asm):00299                   LDA  #RTS_LOW       ; DIV16 CLOCK -> 7372800 / 4 / 16 = 115200
DBA6 B7A000           (      exbasic.asm):00300                   STA  UCTRL
DBA9 8EDBF7           (      exbasic.asm):00301                   LDX  #LA147-1       ; POINT X TO COLOR BASIC COPYRIGHT MESSAGE
DBAC BDEBD9           (      exbasic.asm):00302                   JSR  LB99C          ; PRINT 'COLOR BASIC'
DBAF 8EDBBA           (      exbasic.asm):00303                   LDX  #BAWMST        ; WARM START ADDRESS
DBB2 9F6F             (      exbasic.asm):00304                   STX  RSTVEC         ; SAVE IT
DBB4 8655             (      exbasic.asm):00305                   LDA  #$55           ; WARM START FLAG
DBB6 976E             (      exbasic.asm):00306                   STA  RSTFLG         ; SAVE IT
DBB8 2004             (      exbasic.asm):00307                   BRA  LA0F3          ; GO TO BASIC'S MAIN LOOP
DBBA 12               (      exbasic.asm):00308         BAWMST    NOP                 ; NOP REQ'D FOR WARM START
DBBB BDDFC8           (      exbasic.asm):00309                   JSR  LAD33          ; DO PART OF A NEW
DBBE 7EDF16           (      exbasic.asm):00310         LA0F3     JMP  LAC73          ; GO TO MAIN LOOP OF BASIC
                      (      exbasic.asm):00311         *
                      (      exbasic.asm):00312         * FIRQ SERVICE ROUTINE
DBC1                  (      exbasic.asm):00313         BFRQSV
DBC1 3B               (      exbasic.asm):00314                   RTI
                      (      exbasic.asm):00315         *
                      (      exbasic.asm):00316         * THESE BYTES ARE MOVED TO ADDRESSES $76 - $85 THE DIRECT PAGE
DBC2 10               (      exbasic.asm):00317         LA10D     FCB  16             ; TAB FIELD WIDTH
DBC3 40               (      exbasic.asm):00318                   FCB  64             ; LAST TAB ZONE
DBC4 50               (      exbasic.asm):00319                   FCB  80             ; PRINTER WIDTH
DBC5 00               (      exbasic.asm):00320                   FCB  0              ; LINE PRINTER POSITION
DBC6 E6C2             (      exbasic.asm):00321                   FDB  LB44A          ; ARGUMENT OF EXEC COMMAND - SET TO 'FC' ERROR
                      (      exbasic.asm):00322         * LINE INPUT ROUTINE
DBC8 0C84             (      exbasic.asm):00323                   INC  CHARAD+1
DBCA 2602             (      exbasic.asm):00324                   BNE  LA123
DBCC 0C83             (      exbasic.asm):00325                   INC  CHARAD
DBCE B60000           (      exbasic.asm):00326         LA123     LDA  >0000
DBD1 7EDCB3           (      exbasic.asm):00327                   JMP  BROMHK
                      (      exbasic.asm):00328         *
                      (      exbasic.asm):00329         * THESE BYTES ARE MOVED TO ADDRESSES $A7-$B1
DBD4 7EDCB2           (      exbasic.asm):00330                   JMP  BIRQSV         ; IRQ SERVICE
DBD7 7EDBC1           (      exbasic.asm):00331                   JMP  BFRQSV         ; FIRQ SERVICE
DBDA 7EE6C2           (      exbasic.asm):00332                   JMP  LB44A          ; USR ADDRESS FOR 8K BASIC (INITIALIZED TO 'FC' ERROR)
DBDD 80               (      exbasic.asm):00333                   FCB  $80            ; *RANDOM SEED
DBDE 4FC7             (      exbasic.asm):00334                   FDB  $4FC7          ; *RANDON SEED OF MANTISSA
DBE0 5259             (      exbasic.asm):00335                   FDB  $5259          ; *.811635157
                      (      exbasic.asm):00336         * BASIC COMMAND INTERPRETATION TABLE ROM IMAGE
DBE2 32               (      exbasic.asm):00337         COMVEC    FCB  50             ; 50 BASIC COMMANDS
DBE3 DD11             (      exbasic.asm):00338                   FDB  LAA66          ; POINTS TO RESERVED WORDS
DBE5 DE1E             (      exbasic.asm):00339                   FDB  LAB67          ; POINTS TO JUMP TABLE FOR COMMANDS
DBE7 1D               (      exbasic.asm):00340                   FCB  29             ; 29 BASIC SECONDARY COMMANDS
DBE8 DDB1             (      exbasic.asm):00341                   FDB  LAB1A          ; POINTS TO SECONDARY FUNCTION RESERVED WORDS
DBEA DCC2             (      exbasic.asm):00342                   FDB  LAA29          ; POINTS TO SECONDARY FUNCTION JUMP TABLE
DBEC 0000             (      exbasic.asm):00343                   FDB  0              ; NO MORE TABLES (RES WORDS=0)
DBEE 0000             (      exbasic.asm):00344                   FDB  0              ; NO MORE TABLES
DBF0 0000             (      exbasic.asm):00345                   FDB  0              ; NO MORE TABLES
DBF2 0000             (      exbasic.asm):00346                   FDB  0              ; NO MORE TABLES
DBF4 0000             (      exbasic.asm):00347                   FDB  0              ; NO MORE TABLES
DBF6 0000             (      exbasic.asm):00348                   FDB  0              ; NO MORE TABLES (SECONDARY FNS =0)
                      (      exbasic.asm):00349         
                      (      exbasic.asm):00350         * COPYRIGHT MESSAGES
DBF8 3638303920455854 (      exbasic.asm):00351         LA147     FCC  "6809 EXTENDED BASIC"
     454E444544204241
     534943
DC0B 0D               (      exbasic.asm):00352                   FCB  CR
DC0C 2843292031393832 (      exbasic.asm):00353                   FCC  "(C) 1982 BY MICROSOFT"
     204259204D494352
     4F534F4654
DC21 0D0D             (      exbasic.asm):00354         LA156     FCB  CR,CR
DC23 00               (      exbasic.asm):00355         LA165     FCB  $00
                      (      exbasic.asm):00356         
                      (      exbasic.asm):00357         
DC24 3416             (      exbasic.asm):00358         LA35F     PSHS X,B,A          ; SAVE REGISTERS
DC26 9E76             (      exbasic.asm):00359                   LDX  LPTCFW         ; TAB FIELD WIDTH AND TAB ZONE
DC28 DC78             (      exbasic.asm):00360                   LDD  LPTWID         ; PRINTER WIDTH AND POSITION
DC2A 9F6A             (      exbasic.asm):00361         LA37C     STX  DEVCFW         ; SAVE TAB FIELD WIDTH AND ZONE
DC2C D76C             (      exbasic.asm):00362                   STB  DEVPOS         ; SAVE PRINT POSITION
DC2E 976D             (      exbasic.asm):00363                   STA  DEVWID         ; SAVE PRINT WIDTH
DC30 3596             (      exbasic.asm):00364                   PULS A,B,X,PC       ; RESTORE REGISTERS
                      (      exbasic.asm):00365         
                      (      exbasic.asm):00366         * THIS IS THE ROUTINE THAT GETS AN INPUT LINE FOR BASIC
                      (      exbasic.asm):00367         * EXIT WITH BREAK KEY: CARRY = 1
                      (      exbasic.asm):00368         * EXIT WITH ENTER KEY: CARRY = 0
DC32                  (      exbasic.asm):00369         LA38D
DC32 0F73             (      exbasic.asm):00370         LA390     CLR  IKEYIM         ; RESET BREAK CHECK KEY TEMP KEY STORAGE
DC34 8E00F4           (      exbasic.asm):00371                   LDX  #LINBUF+1      ; INPUT LINE BUFFER
DC37 C601             (      exbasic.asm):00372                   LDB  #1             ; ACCB CHAR COUNTER: SET TO 1 TO ALLOW A
                      (      exbasic.asm):00373         *         BACKSPACE AS FIRST CHARACTER
DC39 BDDB00           (      exbasic.asm):00374         LA39A     JSR  LA171          ; GO GET A CHARACTER FROM CONSOLE IN
DC3C 8108             (      exbasic.asm):00375                   CMPA #BS            ; BACKSPACE
DC3E 2607             (      exbasic.asm):00376                   BNE  LA3B4          ; NO
DC40 5A               (      exbasic.asm):00377                   DECB                ; YES - DECREMENT CHAR COUNTER
DC41 27EF             (      exbasic.asm):00378                   BEQ  LA390          ; BRANCH IF BACK AT START OF LINE AGAIN
DC43 301F             (      exbasic.asm):00379                   LEAX -1,X           ; DECREMENT BUFFER POINTER
DC45 2034             (      exbasic.asm):00380                   BRA  LA3E8          ; ECHO CHAR TO SCREEN
DC47 8115             (      exbasic.asm):00381         LA3B4     CMPA #$15           ; SHIFT RIGHT ARROW?
DC49 260A             (      exbasic.asm):00382                   BNE  LA3C2          ; NO
                      (      exbasic.asm):00383         * YES, RESET BUFFER TO BEGINNING AND ERASE CURRENT LINE
DC4B 5A               (      exbasic.asm):00384         LA3B8     DECB                ; DEC CHAR CTR
DC4C 27E4             (      exbasic.asm):00385                   BEQ  LA390          ; GO BACK TO START IF CHAR CTR = 0
DC4E 8608             (      exbasic.asm):00386                   LDA  #BS            ; BACKSPACE?
DC50 BDDB14           (      exbasic.asm):00387                   JSR  PUTCHR         ; SEND TO CONSOLE OUT (SCREEN)
DC53 20F6             (      exbasic.asm):00388                   BRA  LA3B8          ; KEEP GOING
DC55 8103             (      exbasic.asm):00389         LA3C2     CMPA #3             ; BREAK KEY?
DC57 1A01             (      exbasic.asm):00390                   ORCC #1             ; SET CARRY FLAG
DC59 2705             (      exbasic.asm):00391                   BEQ  LA3CD          ; BRANCH IF BREAK KEY DOWN
DC5B 810D             (      exbasic.asm):00392         LA3C8     CMPA #CR            ; ENTER KEY?
DC5D 260D             (      exbasic.asm):00393                   BNE  LA3D9          ; NO
DC5F 4F               (      exbasic.asm):00394         LA3CC     CLRA                ; CLEAR CARRY FLAG IF ENTER KEY - END LINE ENTRY
DC60 3401             (      exbasic.asm):00395         LA3CD     PSHS CC             ; SAVE CARRY FLAG
DC62 BDEB99           (      exbasic.asm):00396                   JSR  LB958          ; SEND CR TO SCREEN
DC65 6F84             (      exbasic.asm):00397                   CLR  ,X             ; MAKE LAST BYTE IN INPUT BUFFER = 0
DC67 8E00F3           (      exbasic.asm):00398                   LDX  #LINBUF        ; RESET INPUT BUFFER POINTER
DC6A 3581             (      exbasic.asm):00399                   PULS CC,PC          ; RESTORE CARRY FLAG
                      (      exbasic.asm):00400         
                      (      exbasic.asm):00401         * INSERT A CHARACTER INTO THE BASIC LINE INPUT BUFFER
DC6C 8120             (      exbasic.asm):00402         LA3D9     CMPA #$20           ; IS IT CONTROL CHAR?
DC6E 25C9             (      exbasic.asm):00403                   BLO  LA39A          ; BRANCH IF CONTROL CHARACTER
DC70 817B             (      exbasic.asm):00404                   CMPA #'z+1          ; *
DC72 24C5             (      exbasic.asm):00405                   BCC  LA39A          ; * IGNORE IF > LOWER CASE Z
DC74 C1FA             (      exbasic.asm):00406                   CMPB #LBUFMX        ; HAVE 250 OR MORE CHARACTERS BEEN ENTERED?
DC76 24C1             (      exbasic.asm):00407                   BCC  LA39A          ; YES, IGNORE ANY MORE
DC78 A780             (      exbasic.asm):00408                   STA  ,X+            ; PUT IT IN INPUT BUFFER
DC7A 5C               (      exbasic.asm):00409                   INCB                ; INCREMENT CHARACTER COUNTER
DC7B BDDB14           (      exbasic.asm):00410         LA3E8     JSR  PUTCHR         ; ECHO IT TO SCREEN
DC7E 20B9             (      exbasic.asm):00411                   BRA  LA39A          ; GO SET SOME MORE
                      (      exbasic.asm):00412         
                      (      exbasic.asm):00413         
                      (      exbasic.asm):00414         * EXEC
DC80 2705             (      exbasic.asm):00415         EXEC      BEQ  LA545          ; BRANCH IF NO ARGUMENT
DC82 BDE9B5           (      exbasic.asm):00416                   JSR  LB73D          ; EVALUATE ARGUMENT - ARGUMENT RETURNED IN X
DC85 9F7A             (      exbasic.asm):00417                   STX  EXECJP         ; STORE X TO EXEC JUMP ADDRESS
DC87 6E9F007A         (      exbasic.asm):00418         LA545     JMP  [EXECJP]       ; GO DO IT
                      (      exbasic.asm):00419         
                      (      exbasic.asm):00420         * BREAK CHECK
DC8B 7EE097           (      exbasic.asm):00421         LA549     JMP  LADEB          ; GO DO BREAK KEY CHECK
                      (      exbasic.asm):00422         
                      (      exbasic.asm):00423         * INKEY$
DC8E 9673             (      exbasic.asm):00424         INKEY     LDA  IKEYIM         ; WAS A KEY DOWN IN THE BREAK CHECK?
DC90 2603             (      exbasic.asm):00425                   BNE  LA56B          ; YES
DC92 BDDB05           (      exbasic.asm):00426                   JSR  KEYIN          ; GO GET A KEY
DC95 0F73             (      exbasic.asm):00427         LA56B     CLR  IKEYIM         ; CLEAR INKEY RAM IMAGE
DC97 9753             (      exbasic.asm):00428                   STA  FPA0+3         ; STORE THE KEY IN FPA0
DC99 10260C6A         (      exbasic.asm):00429                   LBNE LB68F          ; CONVERT FPA0+3 TO A STRING
DC9D 9756             (      exbasic.asm):00430                   STA  STRDES         ; SET LENGTH OF STRING = 0 IF NO KEY DOWN
DC9F 7EE913           (      exbasic.asm):00431                   JMP  LB69B          ; PUT A NULL STRING ONTO THE STRING STACK
                      (      exbasic.asm):00432         
                      (      exbasic.asm):00433         * MOVE ACCB BYTES FROM (X) TO (U)
DCA2 A680             (      exbasic.asm):00434         LA59A     LDA  ,X+            ; GET BYTE FROM X
DCA4 A7C0             (      exbasic.asm):00435                   STA  ,U+            ; STORE IT AT U
DCA6 5A               (      exbasic.asm):00436                   DECB                ; MOVED ALL BYTES?
DCA7 26F9             (      exbasic.asm):00437                   BNE  LA59A          ; NO
DCA9 39               (      exbasic.asm):00438         LA5A1     RTS
                      (      exbasic.asm):00439         
DCAA 39               (      exbasic.asm):00440         LA5C4     RTS
                      (      exbasic.asm):00441         
                      (      exbasic.asm):00442         ** THIS ROUTINE WILL SCAN OFF THE FILE NAME FROM A BASIC LINE
                      (      exbasic.asm):00443         ** AND RETURN A SYNTAX ERROR IF THERE ARE ANY CHARACTERS
                      (      exbasic.asm):00444         ** FOLLOWING THE END OF THE NAME
DCAB 9D82             (      exbasic.asm):00445         LA5C7     JSR  GETCCH         ; GET CURRENT INPUT CHAR FROM BASIC LINE
DCAD 27FB             (      exbasic.asm):00446         LA5C9     BEQ  LA5C4          ; RETURN IF END OF LINE
DCAF 7EE4F4           (      exbasic.asm):00447                   JMP  LB277          ; SYNTAX ERROR IF ANY MORE CHARACTERS
                      (      exbasic.asm):00448         * IRQ SERVICE
DCB2                  (      exbasic.asm):00449         BIRQSV
DCB2 3B               (      exbasic.asm):00450         LA9C5     RTI                 ; RETURN FROM INTERRUPT
                      (      exbasic.asm):00451         
                      (      exbasic.asm):00452         * SET CARRY IF NUMERIC - RETURN WITH
                      (      exbasic.asm):00453         * ZERO FLAG SET IF ACCA = 0 OR 3A(:) - END
                      (      exbasic.asm):00454         * OF BASIC LINE OR SUB LINE
DCB3 813A             (      exbasic.asm):00455         BROMHK    CMPA #'9+1          ; IS THIS CHARACTER >=(ASCII 9)+1?
DCB5 240A             (      exbasic.asm):00456                   BHS  LAA28          ; BRANCH IF > 9; Z SET IF = COLON
DCB7 8120             (      exbasic.asm):00457                   CMPA #SPACE         ; SPACE?
DCB9 2602             (      exbasic.asm):00458                   BNE  LAA24          ; NO - SET CARRY IF NUMERIC
DCBB 0E7C             (      exbasic.asm):00459                   JMP  GETNCH         ; IF SPACE, GET NECT CHAR (IGNORE SPACES)
DCBD 8030             (      exbasic.asm):00460         LAA24     SUBA #'0            ; * SET CARRY IF
DCBF 80D0             (      exbasic.asm):00461                   SUBA #-'0           ; * CHARACTER > ASCII 0
DCC1 39               (      exbasic.asm):00462         LAA28     RTS
                      (      exbasic.asm):00463         
                      (      exbasic.asm):00464         * DISPATCH TABLE FOR SECONDARY FUNCTIONS
                      (      exbasic.asm):00465         * TOKENS ARE PRECEEDED BY $FF
                      (      exbasic.asm):00466         * FIRST SET ALWAYS HAS ONE PARAMETER
DCC2                  (      exbasic.asm):00467         FUNC_TAB
DCC2 EEB7             (      exbasic.asm):00468         LAA29     FDB  SGN            ; SGN
DCC4 EF2B             (      exbasic.asm):00469                   FDB  INT            ; INT
DCC6 EED0             (      exbasic.asm):00470                   FDB  ABS            ; ABS
DCC8 00AD             (      exbasic.asm):00471                   FDB  USRJMP         ; USR
     0083             (      exbasic.asm):00472         TOK_USR   EQU  (*-FUNC_TAB)/2+$7F
     FF83             (      exbasic.asm):00473         TOK_FF_USR EQU  (*-FUNC_TAB)/2+$FF7F
DCCA F15C             (      exbasic.asm):00474                   FDB  RND            ; RND
DCCC F1B1             (      exbasic.asm):00475                   FDB  SIN            ; SIN
DCCE E9C8             (      exbasic.asm):00476                   FDB  PEEK           ; PEEK
DCD0 E8F9             (      exbasic.asm):00477                   FDB  LEN            ; LEN
DCD2 E775             (      exbasic.asm):00478                   FDB  STR            ; STR$
DCD4 E98E             (      exbasic.asm):00479                   FDB  VAL            ; VAL
DCD6 E918             (      exbasic.asm):00480                   FDB  ASC            ; ASC
DCD8 E904             (      exbasic.asm):00481                   FDB  CHR            ; CHR$
DCDA F261             (      exbasic.asm):00482                   FDB  ATN            ; ATN
DCDC F229             (      exbasic.asm):00483                   FDB  COS            ; COS
DCDE F232             (      exbasic.asm):00484                   FDB  TAN            ; TAN
DCE0 F3A3             (      exbasic.asm):00485                   FDB  EXP            ; EXP
DCE2 F3D5             (      exbasic.asm):00486                   FDB  FIX            ; FIX
DCE4 F2F7             (      exbasic.asm):00487                   FDB  LOG            ; LOG
DCE6 F55D             (      exbasic.asm):00488                   FDB  POS            ; POS
DCE8 F331             (      exbasic.asm):00489                   FDB  SQR            ; SQR
DCEA FA2F             (      exbasic.asm):00490                   FDB  HEXDOL         ; HEX$
                      (      exbasic.asm):00491         * LEFT, RIGHT AND MID ARE TREATED SEPARATELY
DCEC E923             (      exbasic.asm):00492                   FDB  LEFT           ; LEFT$
     0095             (      exbasic.asm):00493         TOK_LEFT  EQU  (*-FUNC_TAB)/2+$7F
DCEE E940             (      exbasic.asm):00494                   FDB  RIGHT          ; RIGHT$
DCF0 E947             (      exbasic.asm):00495                   FDB  MID            ; MID$
     0097             (      exbasic.asm):00496         TOK_MID   EQU  (*-FUNC_TAB)/2+$7F
                      (      exbasic.asm):00497         * REMAINING FUNCTIONS
DCF2 DC8E             (      exbasic.asm):00498                   FDB  INKEY          ; INKEY$
     0098             (      exbasic.asm):00499         TOK_INKEY EQU  (*-FUNC_TAB)/2+$7F
DCF4 E766             (      exbasic.asm):00500                   FDB  MEM            ; MEM
DCF6 F565             (      exbasic.asm):00501                   FDB  VARPT          ; VARPTR
DCF8 F625             (      exbasic.asm):00502                   FDB  INSTR          ; INSTR
DCFA F5F5             (      exbasic.asm):00503                   FDB  STRING         ; STRING$
     001D             (      exbasic.asm):00504         NUM_SEC_FNS EQU  (*-FUNC_TAB)/2
                      (      exbasic.asm):00505         
                      (      exbasic.asm):00506         * THIS TABLE CONTAINS PRECEDENCES AND DISPATCH ADDRESSES FOR ARITHMETIC
                      (      exbasic.asm):00507         * AND LOGICAL OPERATORS - THE NEGATION OPERATORS DO NOT ACT ON TWO OPERANDS
                      (      exbasic.asm):00508         * S0 THEY ARE NOT LISTED IN THIS TABLE. THEY ARE TREATED SEPARATELY IN THE
                      (      exbasic.asm):00509         * EXPRESSION EVALUATION ROUTINE. THEY ARE:
                      (      exbasic.asm):00510         * UNARY NEGATION (-), PRECEDENCE &7D AND LOGICAL NEGATION (NOT), PRECEDENCE $5A
                      (      exbasic.asm):00511         * THE RELATIONAL OPERATORS < > = ARE ALSO NOT LISTED, PRECEDENCE $64.
                      (      exbasic.asm):00512         * A PRECEDENCE VALUE OF ZERO INDICATES END OF EXPRESSION OR PARENTHESES
                      (      exbasic.asm):00513         *
DCFC 79               (      exbasic.asm):00514         LAA51     FCB  $79
DCFD EC02             (      exbasic.asm):00515                   FDB  LB9C5          ; +
DCFF 79               (      exbasic.asm):00516                   FCB  $79
DD00 EBF9             (      exbasic.asm):00517                   FDB  LB9BC          ; -
DD02 7B               (      exbasic.asm):00518                   FCB  $7B
DD03 ED09             (      exbasic.asm):00519                   FDB  LBACC          ; *
DD05 7B               (      exbasic.asm):00520                   FCB  $7B
DD06 EDCE             (      exbasic.asm):00521                   FDB  LBB91          ; /
DD08 7F               (      exbasic.asm):00522                   FCB  $7F
DD09 F33A             (      exbasic.asm):00523                   FDB  L8489          ; EXPONENTIATION
DD0B 50               (      exbasic.asm):00524                   FCB  $50
DD0C E54D             (      exbasic.asm):00525                   FDB  LB2D5          ; AND
DD0E 46               (      exbasic.asm):00526                   FCB  $46
DD0F E54C             (      exbasic.asm):00527                   FDB  LB2D4          ; OR
                      (      exbasic.asm):00528         
                      (      exbasic.asm):00529         * THIS IS THE RESERVED WORD TABLE
                      (      exbasic.asm):00530         * FIRST PART OF THE TABLE CONTAINS EXECUTABLE COMMANDS
DD11 464F             (      exbasic.asm):00531         LAA66     FCC  "FO"           ; 80
DD13 D2               (      exbasic.asm):00532                   FCB  $80+'R
DD14 47               (      exbasic.asm):00533                   FCC  "G"            ; 81
DD15 CF               (      exbasic.asm):00534                   FCB  $80+'O
     0081             (      exbasic.asm):00535         TOK_GO    EQU  $81
DD16 5245             (      exbasic.asm):00536                   FCC  "RE"           ; 82
DD18 CD               (      exbasic.asm):00537                   FCB  $80+'M
DD19 A7               (      exbasic.asm):00538                   FCB  ''+$80         ; 83
DD1A 454C53           (      exbasic.asm):00539                   FCC  "ELS"          ; 84
DD1D C5               (      exbasic.asm):00540                   FCB  $80+'E
DD1E 49               (      exbasic.asm):00541                   FCC  "I"            ; 85
DD1F C6               (      exbasic.asm):00542                   FCB  $80+'F
DD20 444154           (      exbasic.asm):00543                   FCC  "DAT"          ; 86
DD23 C1               (      exbasic.asm):00544                   FCB  $80+'A
DD24 5052494E         (      exbasic.asm):00545                   FCC  "PRIN"         ; 87
DD28 D4               (      exbasic.asm):00546                   FCB  $80+'T
DD29 4F               (      exbasic.asm):00547                   FCC  "O"            ; 88
DD2A CE               (      exbasic.asm):00548                   FCB  $80+'N
DD2B 494E5055         (      exbasic.asm):00549                   FCC  "INPU"         ; 89
DD2F D4               (      exbasic.asm):00550                   FCB  $80+'T
DD30 454E             (      exbasic.asm):00551                   FCC  "EN"           ; 8A
DD32 C4               (      exbasic.asm):00552                   FCB  $80+'D
DD33 4E4558           (      exbasic.asm):00553                   FCC  "NEX"          ; 8B
DD36 D4               (      exbasic.asm):00554                   FCB  $80+'T
DD37 4449             (      exbasic.asm):00555                   FCC  "DI"           ; 8C
DD39 CD               (      exbasic.asm):00556                   FCB  $80+'M
DD3A 524541           (      exbasic.asm):00557                   FCC  "REA"          ; 8D
DD3D C4               (      exbasic.asm):00558                   FCB  $80+'D
DD3E 5255             (      exbasic.asm):00559                   FCC  "RU"           ; 8E
DD40 CE               (      exbasic.asm):00560                   FCB  $80+'N
DD41 524553544F52     (      exbasic.asm):00561                   FCC  "RESTOR"       ; 8F
DD47 C5               (      exbasic.asm):00562                   FCB  $80+'E
DD48 5245545552       (      exbasic.asm):00563                   FCC  "RETUR"        ; 90
DD4D CE               (      exbasic.asm):00564                   FCB  $80+'N
DD4E 53544F           (      exbasic.asm):00565                   FCC  "STO"          ; 91
DD51 D0               (      exbasic.asm):00566                   FCB  $80+'P
DD52 504F4B           (      exbasic.asm):00567                   FCC  "POK"          ; 92
DD55 C5               (      exbasic.asm):00568                   FCB  $80+'E
DD56 434F4E           (      exbasic.asm):00569                   FCC  "CON"          ; 93
DD59 D4               (      exbasic.asm):00570                   FCB  $80+'T
DD5A 4C4953           (      exbasic.asm):00571                   FCC  "LIS"          ; 94
DD5D D4               (      exbasic.asm):00572                   FCB  $80+'T
DD5E 434C4541         (      exbasic.asm):00573                   FCC  "CLEA"         ; 95
DD62 D2               (      exbasic.asm):00574                   FCB  $80+'R
DD63 4E45             (      exbasic.asm):00575                   FCC  "NE"           ; 96
DD65 D7               (      exbasic.asm):00576                   FCB  $80+'W
DD66 455845           (      exbasic.asm):00577                   FCC  "EXE"          ; 97
DD69 C3               (      exbasic.asm):00578                   FCB  $80+'C
DD6A 54524F           (      exbasic.asm):00579                   FCC  "TRO"          ; 98
DD6D CE               (      exbasic.asm):00580                   FCB  $80+'N
DD6E 54524F46         (      exbasic.asm):00581                   FCC  "TROF"         ; 99
DD72 C6               (      exbasic.asm):00582                   FCB  $80+'F
DD73 4445             (      exbasic.asm):00583                   FCC  "DE"           ; 9A
DD75 CC               (      exbasic.asm):00584                   FCB  $80+'L
DD76 4445             (      exbasic.asm):00585                   FCC  "DE"           ; 9B
DD78 C6               (      exbasic.asm):00586                   FCB  $80+'F
DD79 4C494E           (      exbasic.asm):00587                   FCC  "LIN"          ; 9C
DD7C C5               (      exbasic.asm):00588                   FCB  $80+'E
DD7D 52454E55         (      exbasic.asm):00589                   FCC  "RENU"         ; 9D
DD81 CD               (      exbasic.asm):00590                   FCB  $80+'M
DD82 454449           (      exbasic.asm):00591                   FCC  "EDI"          ; 9E
DD85 D4               (      exbasic.asm):00592                   FCB  $80+'T
                      (      exbasic.asm):00593         * END OF EXECUTABLE COMMANDS. THE REMAINDER OF THE TABLE ARE NON-EXECUTABLE TOKENS
DD86 544142           (      exbasic.asm):00594                   FCC  "TAB"          ; 9F
DD89 A8               (      exbasic.asm):00595                   FCB  $80+'(
     009F             (      exbasic.asm):00596         TOK_TAB   EQU  $9F
DD8A 54               (      exbasic.asm):00597                   FCC  "T"            ; A0
DD8B CF               (      exbasic.asm):00598                   FCB  $80+'O
     00A0             (      exbasic.asm):00599         TOK_TO    EQU  $A0
DD8C 5355             (      exbasic.asm):00600                   FCC  "SU"           ; A1
DD8E C2               (      exbasic.asm):00601                   FCB  $80+'B
     00A1             (      exbasic.asm):00602         TOK_SUB   EQU  $A1
DD8F 544845           (      exbasic.asm):00603                   FCC  "THE"          ; A2
DD92 CE               (      exbasic.asm):00604                   FCB  $80+'N
     00A2             (      exbasic.asm):00605         TOK_THEN  EQU  $A2
DD93 4E4F             (      exbasic.asm):00606                   FCC  "NO"           ; A3
DD95 D4               (      exbasic.asm):00607                   FCB  $80+'T
     00A3             (      exbasic.asm):00608         TOK_NOT   EQU  $A3
DD96 535445           (      exbasic.asm):00609                   FCC  "STE"          ; A4
DD99 D0               (      exbasic.asm):00610                   FCB  $80+'P
     00A4             (      exbasic.asm):00611         TOK_STEP  EQU  $A4
DD9A 4F46             (      exbasic.asm):00612                   FCC  "OF"           ; A5
DD9C C6               (      exbasic.asm):00613                   FCB  $80+'F
DD9D AB               (      exbasic.asm):00614                   FCB  '++$80         ; A6
     00A6             (      exbasic.asm):00615         TOK_PLUS  EQU  $A6
DD9E AD               (      exbasic.asm):00616                   FCB  '-+$80         ; A7
     00A7             (      exbasic.asm):00617         TOK_MINUS EQU  $A7
DD9F AA               (      exbasic.asm):00618                   FCB  '*+$80         ; A8
DDA0 AF               (      exbasic.asm):00619                   FCB  '/+$80         ; A9
DDA1 DE               (      exbasic.asm):00620                   FCB  '^+$80         ; AA
DDA2 414E             (      exbasic.asm):00621                   FCC  "AN"           ; AB
DDA4 C4               (      exbasic.asm):00622                   FCB  $80+'D
DDA5 4F               (      exbasic.asm):00623                   FCC  "O"            ; AC
DDA6 D2               (      exbasic.asm):00624                   FCB  $80+'R
DDA7 BE               (      exbasic.asm):00625                   FCB  '>+$80         ; AD
     00AD             (      exbasic.asm):00626         TOK_GREATER EQU  $AD
DDA8 BD               (      exbasic.asm):00627                   FCB  '=+$80         ; AE
     00AE             (      exbasic.asm):00628         TOK_EQUALS EQU  $AE
DDA9 BC               (      exbasic.asm):00629                   FCB  '<+$80         ; AF
DDAA 46               (      exbasic.asm):00630                   FCC  "F"            ; B0
DDAB CE               (      exbasic.asm):00631                   FCB  $80+'N
     00B0             (      exbasic.asm):00632         TOK_FN    EQU  $B0
DDAC 5553494E         (      exbasic.asm):00633                   FCC  "USIN"         ; B1
DDB0 C7               (      exbasic.asm):00634                   FCB  $80+'G
     00B1             (      exbasic.asm):00635         TOK_USING EQU  $B1
                      (      exbasic.asm):00636         *
                      (      exbasic.asm):00637         
                      (      exbasic.asm):00638         * FIRST SET ALWAYS HAS ONE PARAMETER
DDB1 5347             (      exbasic.asm):00639         LAB1A     FCC  "SG"           ; 80
DDB3 CE               (      exbasic.asm):00640                   FCB  $80+'N
DDB4 494E             (      exbasic.asm):00641                   FCC  "IN"           ; 81
DDB6 D4               (      exbasic.asm):00642                   FCB  $80+'T
DDB7 4142             (      exbasic.asm):00643                   FCC  "AB"           ; 82
DDB9 D3               (      exbasic.asm):00644                   FCB  $80+'S
DDBA 5553             (      exbasic.asm):00645                   FCC  "US"           ; 83
DDBC D2               (      exbasic.asm):00646                   FCB  $80+'R
DDBD 524E             (      exbasic.asm):00647                   FCC  "RN"           ; 84
DDBF C4               (      exbasic.asm):00648                   FCB  $80+'D
DDC0 5349             (      exbasic.asm):00649                   FCC  "SI"           ; 85
DDC2 CE               (      exbasic.asm):00650                   FCB  $80+'N
DDC3 504545           (      exbasic.asm):00651                   FCC  "PEE"          ; 86
DDC6 CB               (      exbasic.asm):00652                   FCB  $80+'K
DDC7 4C45             (      exbasic.asm):00653                   FCC  "LE"           ; 87
DDC9 CE               (      exbasic.asm):00654                   FCB  $80+'N
DDCA 535452           (      exbasic.asm):00655                   FCC  "STR"          ; 88
DDCD A4               (      exbasic.asm):00656                   FCB  $80+'$
DDCE 5641             (      exbasic.asm):00657                   FCC  "VA"           ; 89
DDD0 CC               (      exbasic.asm):00658                   FCB  $80+'L
DDD1 4153             (      exbasic.asm):00659                   FCC  "AS"           ; 8A
DDD3 C3               (      exbasic.asm):00660                   FCB  $80+'C
DDD4 434852           (      exbasic.asm):00661                   FCC  "CHR"          ; 8B
DDD7 A4               (      exbasic.asm):00662                   FCB  $80+'$
DDD8 4154             (      exbasic.asm):00663                   FCC  "AT"           ; 8C
DDDA CE               (      exbasic.asm):00664                   FCB  $80+'N
DDDB 434F             (      exbasic.asm):00665                   FCC  "CO"           ; 8D
DDDD D3               (      exbasic.asm):00666                   FCB  $80+'S
DDDE 5441             (      exbasic.asm):00667                   FCC  "TA"           ; 8E
DDE0 CE               (      exbasic.asm):00668                   FCB  $80+'N
DDE1 4558             (      exbasic.asm):00669                   FCC  "EX"           ; 8F
DDE3 D0               (      exbasic.asm):00670                   FCB  $80+'P
DDE4 4649             (      exbasic.asm):00671                   FCC  "FI"           ; 90
DDE6 D8               (      exbasic.asm):00672                   FCB  $80+'X
DDE7 4C4F             (      exbasic.asm):00673                   FCC  "LO"           ; 91
DDE9 C7               (      exbasic.asm):00674                   FCB  $80+'G
DDEA 504F             (      exbasic.asm):00675                   FCC  "PO"           ; 92
DDEC D3               (      exbasic.asm):00676                   FCB  $80+'S
DDED 5351             (      exbasic.asm):00677                   FCC  "SQ"           ; 93
DDEF D2               (      exbasic.asm):00678                   FCB  $80+'R
DDF0 484558           (      exbasic.asm):00679                   FCC  "HEX"          ; 94
DDF3 A4               (      exbasic.asm):00680                   FCB  $80+'$
                      (      exbasic.asm):00681         * LEFT, RIGHT AND MID ARE TREATED SEPARATELY
DDF4 4C454654         (      exbasic.asm):00682                   FCC  "LEFT"         ; 95
DDF8 A4               (      exbasic.asm):00683                   FCB  $80+'$
DDF9 5249474854       (      exbasic.asm):00684                   FCC  "RIGHT"        ; 96
DDFE A4               (      exbasic.asm):00685                   FCB  $80+'$
DDFF 4D4944           (      exbasic.asm):00686                   FCC  "MID"          ; 97
DE02 A4               (      exbasic.asm):00687                   FCB  $80+'$
                      (      exbasic.asm):00688         * REMAINING FUNCTIONS
DE03 494E4B4559       (      exbasic.asm):00689                   FCC  "INKEY"        ; 98
DE08 A4               (      exbasic.asm):00690                   FCB  $80+'$
DE09 4D45             (      exbasic.asm):00691                   FCC  "ME"           ; 99
DE0B CD               (      exbasic.asm):00692                   FCB  $80+'M
DE0C 5641525054       (      exbasic.asm):00693                   FCC  "VARPT"        ; 9A
DE11 D2               (      exbasic.asm):00694                   FCB  $80+'R
DE12 494E5354         (      exbasic.asm):00695                   FCC  "INST"         ; 9B
DE16 D2               (      exbasic.asm):00696                   FCB  $80+'R
DE17 535452494E47     (      exbasic.asm):00697                   FCC  "STRING"       ; 9C
DE1D A4               (      exbasic.asm):00698                   FCB  $80+'$
                      (      exbasic.asm):00699         
                      (      exbasic.asm):00700         *
                      (      exbasic.asm):00701         * DISPATCH TABLE FOR COMMANDS TOKEN #
DE1E                  (      exbasic.asm):00702         CMD_TAB
DE1E DFDC             (      exbasic.asm):00703         LAB67     FDB  FOR            ; 80
DE20 E127             (      exbasic.asm):00704                   FDB  GO             ; 81
DE22 E184             (      exbasic.asm):00705                   FDB  REM            ; 82
     0082             (      exbasic.asm):00706         TOK_REM   EQU  (*-CMD_TAB)/2+$7F
DE24 E184             (      exbasic.asm):00707                   FDB  REM            ; 83 (')
     0083             (      exbasic.asm):00708         TOK_SNGL_Q EQU  (*-CMD_TAB)/2+$7F
DE26 E184             (      exbasic.asm):00709                   FDB  REM            ; 84 (ELSE)
     0084             (      exbasic.asm):00710         TOK_ELSE  EQU  (*-CMD_TAB)/2+$7F
DE28 E1B5             (      exbasic.asm):00711                   FDB  IF             ; 85
     0085             (      exbasic.asm):00712         TOK_IF    EQU  (*-CMD_TAB)/2+$7F
DE2A E181             (      exbasic.asm):00713                   FDB  DATA           ; 86
     0086             (      exbasic.asm):00714         TOK_DATA  EQU  (*-CMD_TAB)/2+$7F
DE2C EB5E             (      exbasic.asm):00715                   FDB  PRINT          ; 87
     0087             (      exbasic.asm):00716         TOK_PRINT EQU  (*-CMD_TAB)/2+$7F
DE2E E1E3             (      exbasic.asm):00717                   FDB  ON             ; 88
DE30 E290             (      exbasic.asm):00718                   FDB  INPUT          ; 89
     0089             (      exbasic.asm):00719         TOK_INPUT EQU  (*-CMD_TAB)/2+$7F
DE32 E0AE             (      exbasic.asm):00720                   FDB  END            ; 8A
DE34 E375             (      exbasic.asm):00721                   FDB  NEXT           ; 8B
DE36 E5C6             (      exbasic.asm):00722                   FDB  DIM            ; 8C
DE38 E2CA             (      exbasic.asm):00723                   FDB  READ           ; 8D
DE3A E11C             (      exbasic.asm):00724                   FDB  RUN            ; 8E
DE3C E090             (      exbasic.asm):00725                   FDB  RESTOR         ; 8F
DE3E E161             (      exbasic.asm):00726                   FDB  RETURN         ; 90
DE40 E0B2             (      exbasic.asm):00727                   FDB  STOP           ; 91
DE42 E9CF             (      exbasic.asm):00728                   FDB  POKE           ; 92
DE44 E0D7             (      exbasic.asm):00729                   FDB  CONT           ; 93
DE46 E9D6             (      exbasic.asm):00730                   FDB  LIST           ; 94
DE48 E0E8             (      exbasic.asm):00731                   FDB  CLEAR          ; 95
DE4A DFAC             (      exbasic.asm):00732                   FDB  NEW            ; 96
DE4C DC80             (      exbasic.asm):00733                   FDB  EXEC           ; 97
DE4E F558             (      exbasic.asm):00734                   FDB  TRON           ; 98
DE50 F559             (      exbasic.asm):00735                   FDB  TROFF          ; 99
DE52 F7D4             (      exbasic.asm):00736                   FDB  DEL            ; 9A
DE54 F718             (      exbasic.asm):00737                   FDB  DEF            ; 9B
DE56 FEC2             (      exbasic.asm):00738                   FDB  LINE           ; 9C
DE58 F85E             (      exbasic.asm):00739                   FDB  RENUM          ; 9D
DE5A F3E4             (      exbasic.asm):00740                   FDB  EDIT           ; 9E
     009E             (      exbasic.asm):00741         TOK_HIGH_EXEC EQU  (*-CMD_TAB)/2+$7F
                      (      exbasic.asm):00742         
                      (      exbasic.asm):00743         * ERROR MESSAGES AND THEIR NUMBERS AS USED INTERNALLY
DE5C 4E46             (      exbasic.asm):00744         LABAF     FCC  "NF"           ; 0 NEXT WITHOUT FOR
DE5E 534E             (      exbasic.asm):00745                   FCC  "SN"           ; 1 SYNTAX ERROR
DE60 5247             (      exbasic.asm):00746                   FCC  "RG"           ; 2 RETURN WITHOUT GOSUB
DE62 4F44             (      exbasic.asm):00747                   FCC  "OD"           ; 3 OUT OF DATA
DE64 4643             (      exbasic.asm):00748                   FCC  "FC"           ; 4 ILLEGAL FUNCTION CALL
DE66 4F56             (      exbasic.asm):00749                   FCC  "OV"           ; 5 OVERFLOW
DE68 4F4D             (      exbasic.asm):00750                   FCC  "OM"           ; 6 OUT OF MEMORY
DE6A 554C             (      exbasic.asm):00751                   FCC  "UL"           ; 7 UNDEFINED LINE NUMBER
DE6C 4253             (      exbasic.asm):00752                   FCC  "BS"           ; 8 BAD SUBSCRIPT
DE6E 4444             (      exbasic.asm):00753                   FCC  "DD"           ; 9 REDIMENSIONED ARRAY
DE70 2F30             (      exbasic.asm):00754                   FCC  "/0"           ; 10 DIVISION BY ZERO
DE72 4944             (      exbasic.asm):00755                   FCC  "ID"           ; 11 ILLEGAL DIRECT STATEMENT
DE74 544D             (      exbasic.asm):00756                   FCC  "TM"           ; 12 TYPE MISMATCH
DE76 4F53             (      exbasic.asm):00757                   FCC  "OS"           ; 13 OUT OF STRING SPACE
DE78 4C53             (      exbasic.asm):00758                   FCC  "LS"           ; 14 STRING TOO LONG
DE7A 5354             (      exbasic.asm):00759                   FCC  "ST"           ; 15 STRING FORMULA TOO COMPLEX
DE7C 434E             (      exbasic.asm):00760                   FCC  "CN"           ; 16 CAN'T CONTINUE
DE7E 4644             (      exbasic.asm):00761                   FCC  "FD"           ; 17 BAD FILE DATA
DE80 414F             (      exbasic.asm):00762                   FCC  "AO"           ; 18 FILE ALREADY OPEN
DE82 444E             (      exbasic.asm):00763                   FCC  "DN"           ; 19 DEVICE NUMBER ERROR
DE84 494F             (      exbasic.asm):00764                   FCC  "IO"           ; 20 I/O ERROR
DE86 464D             (      exbasic.asm):00765                   FCC  "FM"           ; 21 BAD FILE MODE
DE88 4E4F             (      exbasic.asm):00766                   FCC  "NO"           ; 22 FILE NOT OPEN
DE8A 4945             (      exbasic.asm):00767                   FCC  "IE"           ; 23 INPUT PAST END OF FILE
DE8C 4453             (      exbasic.asm):00768                   FCC  "DS"           ; 24 DIRECT STATEMENT IN FILE
                      (      exbasic.asm):00769         * ADDITIONAL ERROR MESSAGES ADDED BY EXTENDED BASIC
DE8E 5546             (      exbasic.asm):00770         L890B     FCC  "UF"           ; 25 UNDEFINED FUNCTION (FN) CALL
DE90 4E45             (      exbasic.asm):00771         L890D     FCC  "NE"           ; 26 FILE NOT FOUND
                      (      exbasic.asm):00772         
DE92 204552524F52     (      exbasic.asm):00773         LABE1     FCC  " ERROR"
DE98 00               (      exbasic.asm):00774                   FCB  $00
DE99 20494E20         (      exbasic.asm):00775         LABE8     FCC  " IN "
DE9D 00               (      exbasic.asm):00776                   FCB  $00
DE9E 0D               (      exbasic.asm):00777         LABED     FCB  CR
DE9F 4F4B             (      exbasic.asm):00778         LABEE     FCC  "OK"
DEA1 0D00             (      exbasic.asm):00779                   FCB  CR,$00
DEA3 0D               (      exbasic.asm):00780         LABF2     FCB  CR
DEA4 425245414B       (      exbasic.asm):00781                   FCC  "BREAK"
DEA9 00               (      exbasic.asm):00782                   FCB  $00
                      (      exbasic.asm):00783         
                      (      exbasic.asm):00784         * SEARCH THE STACK FOR 'GOSUB/RETURN' OR 'FOR/NEXT' DATA.
                      (      exbasic.asm):00785         * THE 'FOR/NEXT' INDEX VARIABLE DESCRIPTOR ADDRESS BEING
                      (      exbasic.asm):00786         * SOUGHT IS STORED IN VARDES. EACH BLOCK OF FOR/NEXT DATA IS 18
                      (      exbasic.asm):00787         * BYTES WITH A $80 LEADER BYTE AND THE GOSUB/RETURN DATA IS 5 BYTES
                      (      exbasic.asm):00788         * WITH AN $A6 LEADER BYTE. THE FIRST NON "FOR/NEXT" DATA
                      (      exbasic.asm):00789         * IS CONSIDERED 'GOSUB/RETURN'
DEAA 3064             (      exbasic.asm):00790         LABF9     LEAX 4,S            ; POINT X TO 3RD ADDRESS ON STACK - IGNORE THE
                      (      exbasic.asm):00791         *         FIRST TWO RETURN ADDRESSES ON THE STACK
DEAC C612             (      exbasic.asm):00792         LABFB     LDB  #18            ; 18 BYTES SAVED ON STACK FOR EACH 'FOR' LOOP
DEAE 9F0F             (      exbasic.asm):00793                   STX  TEMPTR         ; SAVE POINTER
DEB0 A684             (      exbasic.asm):00794                   LDA  ,X             ; GET 1ST BYTE
DEB2 8080             (      exbasic.asm):00795                   SUBA #$80           ; * CHECK FOR TYPE OF STACK JUMP FOUND
DEB4 2615             (      exbasic.asm):00796                   BNE  LAC1A          ; * BRANCH IF NOT 'FOR/NEXT'
DEB6 AE01             (      exbasic.asm):00797                   LDX  1,X            ; = GET INDEX VARIABLE DESCRIPTOR
DEB8 9F11             (      exbasic.asm):00798                   STX  TMPTR1         ; = POINTER AND SAVE IT IN TMPTR1
DEBA 9E3B             (      exbasic.asm):00799                   LDX  VARDES         ; GET INDEX VARIABLE BEING SEARCHED FOR
DEBC 2709             (      exbasic.asm):00800                   BEQ  LAC16          ; BRANCH IF DEFAULT INDEX VARIABLE - USE THE
                      (      exbasic.asm):00801         *                             ; FIRST 'FOR/NEXT' DATA FOUND ON STACK
                      (      exbasic.asm):00802         *                             ; IF NO INDEX VARIABLE AFTER 'NEXT'
DEBE 9C11             (      exbasic.asm):00803                   CMPX TMPTR1         ; DOES THE STACK INDEX MATCH THE ONE
                      (      exbasic.asm):00804         *                             ; BEING SEARCHED FOR?
DEC0 2709             (      exbasic.asm):00805                   BEQ  LAC1A          ; YES
DEC2 9E0F             (      exbasic.asm):00806                   LDX  TEMPTR         ; * RESTORE INITIAL POINTER, ADD
DEC4 3A               (      exbasic.asm):00807                   ABX                 ; * 18 TO IT AND LOOK FOR
DEC5 20E5             (      exbasic.asm):00808                   BRA  LABFB          ; * NEXT BLOCK OF DATA
DEC7 9E11             (      exbasic.asm):00809         LAC16     LDX  TMPTR1         ; = GET 1ST INDEX VARIABLE FOUND AND
DEC9 9F3B             (      exbasic.asm):00810                   STX  VARDES         ; = SAVE AS 'NEXT' INDEX
DECB 9E0F             (      exbasic.asm):00811         LAC1A     LDX  TEMPTR         ; POINT X TO START OF 'FOR/NEXT' DATA
DECD 4D               (      exbasic.asm):00812                   TSTA                ; SET ZERO FLAG IF 'FOR/NEXT' DATA
DECE 39               (      exbasic.asm):00813                   RTS
                      (      exbasic.asm):00814         * CHECK FOR MEMORY SPACE FOR NEW TOP OF
                      (      exbasic.asm):00815         * ARRAYS AND MOVE ARRAYS TO NEW LOCATION
DECF 8D17             (      exbasic.asm):00816         LAC1E     BSR  LAC37          ; ACCD = NEW BOTTOM OF FREE RAM - IS THERE
                      (      exbasic.asm):00817         *                             ; ROOM FOR THE STACK?
                      (      exbasic.asm):00818         * MOVE BYTES FROM V43(X) TO V41(U) UNTIL (X) = V47 AND
                      (      exbasic.asm):00819         * SAVE FINAL VALUE OF U IN V45
DED1 DE41             (      exbasic.asm):00820         LAC20     LDU  V41            ; POINT U TO DESTINATION ADDRESS (V41)
DED3 3341             (      exbasic.asm):00821                   LEAU 1,U            ; ADD ONE TO U - COMPENSATE FOR FIRST PSHU
DED5 9E43             (      exbasic.asm):00822                   LDX  V43            ; POINT X TO SOURCE ADDRESS (V43)
DED7 3001             (      exbasic.asm):00823                   LEAX 1,X            ; ADD ONE - COMPENSATE FOR FIRST LDA ,X
DED9 A682             (      exbasic.asm):00824         LAC28     LDA  ,-X            ; GRAB A BYTE FROM SOURCE
DEDB 3602             (      exbasic.asm):00825                   PSHU A              ; MOVE IT TO DESTINATION
DEDD 9C47             (      exbasic.asm):00826                   CMPX V47            ; DONE?
DEDF 26F8             (      exbasic.asm):00827                   BNE  LAC28          ; NO - KEEP MOVING BYTES
DEE1 DF45             (      exbasic.asm):00828                   STU  V45            ; SAVE FINAL DESTINATION ADDRESS
DEE3 39               (      exbasic.asm):00829         LAC32     RTS
                      (      exbasic.asm):00830         * CHECK TO SEE IF THERE IS ROOM TO STORE 2*ACCB
                      (      exbasic.asm):00831         * BYTES IN FREE RAM - OM ERROR IF NOT
DEE4 4F               (      exbasic.asm):00832         LAC33     CLRA                ; * ACCD CONTAINS NUMBER OF EXTRA
DEE5 58               (      exbasic.asm):00833                   ASLB                ; * BYTES TO PUT ON STACK
DEE6 D31F             (      exbasic.asm):00834                   ADDD ARYEND         ; END OF PROGRAM AND VARIABLES
DEE8 C3003A           (      exbasic.asm):00835         LAC37     ADDD #STKBUF        ; ADD STACK BUFFER - ROOM FOR STACK?
DEEB 2508             (      exbasic.asm):00836                   BCS  LAC44          ; BRANCH IF GREATER THAN $FFFF
DEED 10DF17           (      exbasic.asm):00837                   STS  BOTSTK         ; CURRENT NEW BOTTOM OF STACK STACK POINTER
DEF0 109317           (      exbasic.asm):00838                   CMPD BOTSTK         ; ARE WE GOING TO BE BELOW STACK?
DEF3 25EE             (      exbasic.asm):00839                   BCS  LAC32          ; YES - NO ERROR
DEF5 C60C             (      exbasic.asm):00840         LAC44     LDB  #6*2           ; OUT OF MEMORY ERROR
                      (      exbasic.asm):00841         
                      (      exbasic.asm):00842         * ERROR SERVICING ROUTINE
DEF7 BDDFC8           (      exbasic.asm):00843         LAC46     JSR  LAD33          ; RESET STACK, STRING STACK, CONTINUE POINTER
DEFA BDEB9D           (      exbasic.asm):00844                   JSR  LB95C          ; SEND A CR TO SCREEN
DEFD BDEBEC           (      exbasic.asm):00845                   JSR  LB9AF          ; SEND A '?' TO SCREEN
DF00 8EDE5C           (      exbasic.asm):00846                   LDX  #LABAF         ; POINT TO ERROR TABLE
DF03 3A               (      exbasic.asm):00847         LAC60     ABX                 ; ADD MESSAGE NUMBER OFFSET
DF04 8D31             (      exbasic.asm):00848                   BSR  LACA0          ; * GET TWO CHARACTERS FROM X AND
DF06 8D2F             (      exbasic.asm):00849                   BSR  LACA0          ; * SEND TO CONSOLE OUT (SCREEN)
DF08 8EDE91           (      exbasic.asm):00850                   LDX  #LABE1-1       ; POINT TO "ERROR" MESSAGE
DF0B BDEBD9           (      exbasic.asm):00851         LAC68     JSR  LB99C          ; PRINT MESSAGE POINTED TO BY X
DF0E 9668             (      exbasic.asm):00852                   LDA  CURLIN         ; GET CURRENT LINE NUMBER (CURL IN)
DF10 4C               (      exbasic.asm):00853                   INCA                ; TEST FOR DIRECT MODE
DF11 2703             (      exbasic.asm):00854                   BEQ  LAC73          ; BRANCH IF DIRECT MODE
DF13 BDF002           (      exbasic.asm):00855                   JSR  LBDC5          ; PRINT 'IN ****'
                      (      exbasic.asm):00856         
                      (      exbasic.asm):00857         * THIS IS THE MAIN LOOP OF BASIC WHEN IN DIRECT MODE
DF16 BDEB9D           (      exbasic.asm):00858         LAC73     JSR  LB95C          ; MOVE CURSOR TO START OF LINE
DF19 8EDE9E           (      exbasic.asm):00859                   LDX  #LABED         ; POINT X TO 'OK', CR MESSAGE
DF1C BDEBD9           (      exbasic.asm):00860                   JSR  LB99C          ; PRINT 'OK', CR
DF1F BDDC32           (      exbasic.asm):00861         LAC7C     JSR  LA390          ; GO GET AN INPUT LINE
DF22 CEFFFF           (      exbasic.asm):00862                   LDU  #$FFFF         ; THE LINE NUMBER FOR DIRECT MODE IS $FFFF
DF25 DF68             (      exbasic.asm):00863                   STU  CURLIN         ; SAVE IT IN CURLIN
DF27 25F6             (      exbasic.asm):00864                   BCS  LAC7C          ; BRANCH IF LINE INPUT TERMINATED BY BREAK
DF29 9F83             (      exbasic.asm):00865                   STX  CHARAD         ; SAVE (X) AS CURRENT INPUT POINTER - THIS WILL
                      (      exbasic.asm):00866         *         ENABLE THE 'LIVE KEYBOARD' (DIRECT) MODE. THE
                      (      exbasic.asm):00867         *         LINE JUST ENTERED WILL BE INTERPRETED
DF2B 9D7C             (      exbasic.asm):00868                   JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
DF2D 27F0             (      exbasic.asm):00869                   BEQ  LAC7C          ; NO LINE INPUT - GET ANOTHER LINE
DF2F 250B             (      exbasic.asm):00870                   BCS  LACA5          ; BRANCH IF NUMER1C - THERE WAS A LINE NUMBER BEFORE
                      (      exbasic.asm):00871         *         THE  STATEMENT ENTERED, SO THIS STATEMENT
                      (      exbasic.asm):00872         *         WILL BE MERGED INTO THE BASIC PROGRAM
DF31 BDEA8B           (      exbasic.asm):00873                   JSR  LB821          ; GO CRUNCH LINE
DF34 7EE065           (      exbasic.asm):00874                   JMP  LADC0          ; GO EXECUTE THE STATEMENT (LIVE KEYBOARD)
                      (      exbasic.asm):00875         *
DF37 A680             (      exbasic.asm):00876         LACA0     LDA  ,X+            ; GET A CHARACTER
DF39 7EEBEE           (      exbasic.asm):00877                   JMP  LB9B1          ; SEND TO CONSOLE OUT
                      (      exbasic.asm):00878         * TAKE A LINE FROM THE LINE INPUT BUFFER
                      (      exbasic.asm):00879         * AND INSERT IT INTO THE BASIC PROGRAM
DF3C BDE208           (      exbasic.asm):00880         LACA5     JSR  LAF67          ; CONVERT LINE NUMBER TO BINARY
DF3F 9E2B             (      exbasic.asm):00881         LACA8     LDX  BINVAL         ; GET CONVERTED LINE NUMBER
DF41 9FF1             (      exbasic.asm):00882                   STX  LINHDR         ; STORE IT IN LINE INPUT HEADER
DF43 BDEA8B           (      exbasic.asm):00883                   JSR  LB821          ; GO CRUNCH THE LINE
DF46 D703             (      exbasic.asm):00884                   STB  TMPLOC         ; SAVE LINE LENGTH
DF48 8D4C             (      exbasic.asm):00885                   BSR  LAD01          ; FIND OUT WHERE TO INSERT LINE
DF4A 2512             (      exbasic.asm):00886                   BCS  LACC8          ; RANCH IF LINE NUMBER DOES NOT ALREADY EXIST
DF4C DC47             (      exbasic.asm):00887                   LDD  V47            ; GET ABSOLUTE ADDRESS OF LINE NUMBER
DF4E A384             (      exbasic.asm):00888                   SUBD ,X             ; SUBTRACT ADDRESS OF NEXT LINE NUMBER
DF50 D31B             (      exbasic.asm):00889                   ADDD VARTAB         ; * ADD TO CURRENT END OF PROGRAM - THIS WILL REMOVE
DF52 DD1B             (      exbasic.asm):00890                   STD  VARTAB         ; * THE LENGTH OF THIS LINE NUMBER FROM THE PROGRAM
DF54 EE84             (      exbasic.asm):00891                   LDU  ,X             ; POINT U TO ADDRESS OF NEXT LINE NUMBER
                      (      exbasic.asm):00892         * DELETE OLD LINE FROM BASIC PROGRAM
DF56 3702             (      exbasic.asm):00893         LACC0     PULU A              ; GET A BYTE FROM WHAT'S LEFT OF PROGRAM
DF58 A780             (      exbasic.asm):00894                   STA  ,X+            ; MOVE IT DOWN
DF5A 9C1B             (      exbasic.asm):00895                   CMPX VARTAB         ; COMPARE TO END OF BASIC PROGRAM
DF5C 26F8             (      exbasic.asm):00896                   BNE  LACC0          ; BRANCH IF NOT AT END
DF5E 96F3             (      exbasic.asm):00897         LACC8     LDA  LINBUF         ; * CHECK TO SEE IF THERE IS A LINE IN
DF60 271C             (      exbasic.asm):00898                   BEQ  LACE9          ; * THE BUFFER AND BRANCH IF NONE
DF62 DC1B             (      exbasic.asm):00899                   LDD  VARTAB         ; = SAVE CURRENT END OF
DF64 DD43             (      exbasic.asm):00900                   STD  V43            ; = PROGRAM IN V43
DF66 DB03             (      exbasic.asm):00901                   ADDB TMPLOC         ; * ADD LENGTH OF CRUNCHED LINE,
DF68 8900             (      exbasic.asm):00902                   ADCA #0             ; * PROPOGATE CARRY AND SAVE NEW END
DF6A DD41             (      exbasic.asm):00903                   STD  V41            ; * OF PROGRAM IN V41
DF6C BDDECF           (      exbasic.asm):00904                   JSR  LAC1E          ; = MAKE SURE THERE'S ENOUGH RAM FOR THIS
                      (      exbasic.asm):00905         *         =    LINE & MAKE A HOLE IN BASIC FOR NEW LINE
DF6F CE00EF           (      exbasic.asm):00906                   LDU  #LINHDR-2      ; POINT U TO LINE TO BE INSERTED
DF72 3702             (      exbasic.asm):00907         LACDD     PULU A              ; GET A BYTE FROM NEW LINE
DF74 A780             (      exbasic.asm):00908                   STA  ,X+            ; INSERT IT IN PROGRAM
DF76 9C45             (      exbasic.asm):00909                   CMPX V45            ; * COMPARE TO ADDRESS OF END OF INSERTED
DF78 26F8             (      exbasic.asm):00910                   BNE  LACDD          ; * LINE AND BRANCH IF NOT DONE
DF7A 9E41             (      exbasic.asm):00911                   LDX  V41            ; = GET AND SAVE
DF7C 9F1B             (      exbasic.asm):00912                   STX  VARTAB         ; = END OF PROGRAM
DF7E 8D36             (      exbasic.asm):00913         LACE9     BSR  LAD21          ; RESET INPUT POINTER, CLEAR VARIABLES, INITIALIZE
DF80 8D02             (      exbasic.asm):00914                   BSR  LACEF          ; ADJUST START OF NEXT LINE ADDRESSES
DF82 209B             (      exbasic.asm):00915                   BRA  LAC7C          ; EENTER BASIC'S INPUT LOOP
                      (      exbasic.asm):00916         * COMPUTE THE START OF NEXT LINE ADDRESSES FOR THE BASIC PROGRAM
DF84 9E19             (      exbasic.asm):00917         LACEF     LDX  TXTTAB         ; POINT X TO START OF PROGRAM
DF86 EC84             (      exbasic.asm):00918         LACF1     LDD  ,X             ; GET ADDRESS OF NEXT LINE
DF88 2721             (      exbasic.asm):00919                   BEQ  LAD16          ; RETURN IF END OF PROGRAM
DF8A 3304             (      exbasic.asm):00920                   LEAU 4,X            ; POINT U TO START OF BASIC TEXT IN LINE
DF8C A6C0             (      exbasic.asm):00921         LACF7     LDA  ,U+            ; * SKIP THROUGH THE LINE UNTIL A
DF8E 26FC             (      exbasic.asm):00922                   BNE  LACF7          ; * ZERO (END OF LINE) IS FOUND
DF90 EF84             (      exbasic.asm):00923                   STU  ,X             ; SAVE THE NEW START OF NEXT LINE ADDRESS
DF92 AE84             (      exbasic.asm):00924                   LDX  ,X             ; POINT X TO START OF NEXT LINE
DF94 20F0             (      exbasic.asm):00925                   BRA  LACF1          ; KEEP GOING
                      (      exbasic.asm):00926         *
                      (      exbasic.asm):00927         * FIND A LINE NUMBER IN THE BASIC PROGRAM
                      (      exbasic.asm):00928         * RETURN WITH CARRY SET IF NO MATCH FOUND
DF96 DC2B             (      exbasic.asm):00929         LAD01     LDD  BINVAL         ; GET THE LINE NUMBER TO FIND
DF98 9E19             (      exbasic.asm):00930                   LDX  TXTTAB         ; BEGINNING OF PROGRAM
DF9A EE84             (      exbasic.asm):00931         LAD05     LDU  ,X             ; GET ADDRESS OF NEXT LINE NUMBER
DF9C 2709             (      exbasic.asm):00932                   BEQ  LAD12          ; BRANCH IF END OF PROG
DF9E 10A302           (      exbasic.asm):00933                   CMPD 2,X            ; IS IT A MATCH?
DFA1 2306             (      exbasic.asm):00934                   BLS  LAD14          ; CARRY SET IF LOWER; CARRY CLEAR IF MATCH
DFA3 AE84             (      exbasic.asm):00935                   LDX  ,X             ; X = ADDRESS OF NEXT LINE
DFA5 20F3             (      exbasic.asm):00936                   BRA  LAD05          ; KEEP LOOPING FOR LINE NUMBER
DFA7 1A01             (      exbasic.asm):00937         LAD12     ORCC #1             ; SET CARRY FLAG
DFA9 9F47             (      exbasic.asm):00938         LAD14     STX  V47            ; SAVE MATCH LINE NUMBER OR NUMBER OF LINE JUST AFTER
                      (      exbasic.asm):00939         *                             ; WHERE IT SHOULD HAVE BEEN
DFAB 39               (      exbasic.asm):00940         LAD16     RTS
                      (      exbasic.asm):00941         
                      (      exbasic.asm):00942         * NEW
DFAC 26FB             (      exbasic.asm):00943         NEW       BNE  LAD14          ; BRANCH IF ARGUMENT GIVEN
DFAE 9E19             (      exbasic.asm):00944         LAD19     LDX  TXTTAB         ; GET START OF BASIC
DFB0 6F80             (      exbasic.asm):00945                   CLR  ,X+            ; * PUT 2 ZERO BYTES THERE - ERASE
DFB2 6F80             (      exbasic.asm):00946                   CLR  ,X+            ; * THE BASIC PROGRAM
DFB4 9F1B             (      exbasic.asm):00947                   STX  VARTAB         ; AND THE NEXT ADDRESS IS NOW THE END OF PROGRAM
DFB6 9E19             (      exbasic.asm):00948         LAD21     LDX  TXTTAB         ; GET START OF BASIC
DFB8 BDE15C           (      exbasic.asm):00949                   JSR  LAEBB          ; PUT INPUT POINTER ONE BEFORE START OF BASIC
                      (      exbasic.asm):00950         * ERASE ALL VARIABLES
DFBB 9E27             (      exbasic.asm):00951         LAD26     LDX  MEMSIZ         ; * RESET START OF STRING VARIABLES
DFBD 9F23             (      exbasic.asm):00952                   STX  STRTAB         ; * TO TOP OF STRING SPACE
DFBF BDE090           (      exbasic.asm):00953                   JSR  RESTOR         ; RESET 'DATA' POINTER TO START OF BASIC
DFC2 9E1B             (      exbasic.asm):00954                   LDX  VARTAB         ; * GET START OF VARIABLES AND USE IT
DFC4 9F1D             (      exbasic.asm):00955                   STX  ARYTAB         ; * TO RESET START OF ARRAYS
DFC6 9F1F             (      exbasic.asm):00956                   STX  ARYEND         ; RESET END OF ARRAYS
DFC8 8E00C9           (      exbasic.asm):00957         LAD33     LDX  #STRSTK        ; * RESET STRING STACK POINTER TO
DFCB 9F0B             (      exbasic.asm):00958                   STX  TEMPPT         ; * BOTTOM OF STRING STACK
DFCD AEE4             (      exbasic.asm):00959                   LDX  ,S             ; GET RETURN ADDRESS OFF STACK
DFCF 10DE21           (      exbasic.asm):00960                   LDS  FRETOP         ; RESTORE STACK POINTER
DFD2 6FE2             (      exbasic.asm):00961                   CLR  ,-S            ; PUT A ZERO BYTE ON STACK - TO CLEAR ANY RETURN OF
                      (      exbasic.asm):00962         *                             ; FOR/NEXT DATA FROM THE STACK
DFD4 0F2D             (      exbasic.asm):00963                   CLR  OLDPTR         ; RESET 'CONT' ADDRESS SO YOU
DFD6 0F2E             (      exbasic.asm):00964                   CLR  OLDPTR+1       ; 'CAN'T CONTINUE'
DFD8 0F08             (      exbasic.asm):00965                   CLR  ARYDIS         ; CLEAR THE ARRAY DISABLE FLAG
DFDA 6E84             (      exbasic.asm):00966                   JMP  ,X             ; RETURN TO CALLING ROUTINE - THIS IS NECESSARY
                      (      exbasic.asm):00967         *                             ; SINCE THE STACK WAS RESET
                      (      exbasic.asm):00968         *
                      (      exbasic.asm):00969         * FOR
                      (      exbasic.asm):00970         *
                      (      exbasic.asm):00971         * THE FOR COMMAND WILL STORE 18 BYTES ON THE STACK FOR
                      (      exbasic.asm):00972         * EACH FOR-NEXT LOOP WHICH IS BEING PROCESSED. THESE
                      (      exbasic.asm):00973         * BYTES ARE DEFINED AS FOLLOWS: 0- $80 (FOR FLAG);
                      (      exbasic.asm):00974         *         1,2=INDEX VARIABLE DESCRIPTOR POINTER; 3-7=FP VALUE OF STEP;
                      (      exbasic.asm):00975         *         8=STEP DIRECTION: $FF IF NEGATIVE; 0 IF ZERO; 1 IF POSITIVE;
                      (      exbasic.asm):00976         * 9-13=FP VALUE OF 'TO' PARAMETER;
                      (      exbasic.asm):00977         * 14,15=CURRENT LINE NUMBER; 16,17=RAM ADDRESS OF THE END
                      (      exbasic.asm):00978         *         OF   THE LINE CONTAINING THE 'FOR' STATEMENT
DFDC 8680             (      exbasic.asm):00979         FOR       LDA  #$80           ; * SAVE THE DISABLE ARRAY FLAG IN VO8
DFDE 9708             (      exbasic.asm):00980                   STA  ARYDIS         ; * DO NOT ALLOW THE INDEX VARIABLE TO BE AN ARRAY
DFE0 BDE22A           (      exbasic.asm):00981                   JSR  LET            ; SET INDEX VARIABLE TO INITIAL VALUE
DFE3 BDDEAA           (      exbasic.asm):00982                   JSR  LABF9          ; SEARCH THE STACK FOR 'FOR/NEXT' DATA
DFE6 3262             (      exbasic.asm):00983                   LEAS 2,S            ; PURGE RETURN ADDRESS OFF OF THE STACK
DFE8 2604             (      exbasic.asm):00984                   BNE  LAD59          ; BRANCH IF INDEX VARIABLE NOT ALREADY BEING USED
DFEA 9E0F             (      exbasic.asm):00985                   LDX  TEMPTR         ; GET (ADDRESS + 18) OF MATCHED 'FOR/NEXT' DATA
DFEC 3285             (      exbasic.asm):00986                   LEAS B,X            ; MOVE THE STACK POINTER TO THE BEGINNING OF THE
                      (      exbasic.asm):00987         * MATCHED 'FOR/NEXT' DATA SO THE NEW DATA WILL
                      (      exbasic.asm):00988         * OVERLAY THE OLD DATA. THIS WILL ALSO DESTROY
                      (      exbasic.asm):00989         * ALL OF THE 'RETURN' AND 'FOR/NEXT' DATA BELOW
                      (      exbasic.asm):00990         * THIS POINT ON THE STACK
DFEE C609             (      exbasic.asm):00991         LAD59     LDB  #$09           ; * CHECK FOR ROOM FOR 18 BYTES
DFF0 BDDEE4           (      exbasic.asm):00992                   JSR  LAC33          ; * IN FREE RAM
DFF3 BDE189           (      exbasic.asm):00993                   JSR  LAEE8          ; GET ADDR OF END OF SUBLINE IN X
DFF6 DC68             (      exbasic.asm):00994                   LDD  CURLIN         ; GET CURRENT LINE NUMBER
DFF8 3416             (      exbasic.asm):00995                   PSHS X,B,A          ; SAVE LINE ADDR AND LINE NUMBER ON STACK
DFFA C6A0             (      exbasic.asm):00996                   LDB  #TOK_TO        ; TOKEN FOR 'TO'
DFFC BDE4EC           (      exbasic.asm):00997                   JSR  LB26F          ; SYNTAX CHECK FOR 'TO'
DFFF BDE3C0           (      exbasic.asm):00998                   JSR  LB143          ; 'TM' ERROR IF INDEX VARIABLE SET TO STRING
E002 BDE3BE           (      exbasic.asm):00999                   JSR  LB141          ; EVALUATE EXPRESSION
                      (      exbasic.asm):01000         *
E005 D654             (      exbasic.asm):01001                   LDB  FP0SGN         ; GET FPA0 MANTISSA SIGN
E007 CA7F             (      exbasic.asm):01002                   ORB  #$7F           ; FORM A MASK TO SAVE DATA BITS OF HIGH ORDER MANTISSA
E009 D450             (      exbasic.asm):01003                   ANDB FPA0           ; PUT THE MANTISSA SIGN IN BIT 7 OF HIGH ORDER MANTISSA
E00B D750             (      exbasic.asm):01004                   STB  FPA0           ; SAVE THE PACKED HIGH ORDER MANTISSA
E00D 108EE014         (      exbasic.asm):01005                   LDY  #LAD7F         ; LOAD FOLLOWING ADDRESS INTO Y AS A RETURN
E011 7EE467           (      exbasic.asm):01006                   JMP  LB1EA          ; ADDRESS - PUSH FPA0 ONTO THE STACK
E014 8EED02           (      exbasic.asm):01007         LAD7F     LDX  #LBAC5         ; POINT X TO FLOATING POINT NUMBER 1.0 (DEFAULT STEP VALUE)
E017 BDEE51           (      exbasic.asm):01008                   JSR  LBC14          ; MOVE (X) TO FPA0
E01A 9D82             (      exbasic.asm):01009                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E01C 81A4             (      exbasic.asm):01010                   CMPA #TOK_STEP      ; STEP TOKEN
E01E 2605             (      exbasic.asm):01011                   BNE  LAD90          ; BRANCH IF NO 'STEP' VALUE
E020 9D7C             (      exbasic.asm):01012                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
E022 BDE3BE           (      exbasic.asm):01013                   JSR  LB141          ; EVALUATE NUMERIC EXPRESSION
E025 BDEEAA           (      exbasic.asm):01014         LAD90     JSR  LBC6D          ; CHECK STATUS OF FPA0
E028 BDE463           (      exbasic.asm):01015                   JSR  LB1E6          ; SAVE STATUS AND FPA0 ON THE STACK
E02B DC3B             (      exbasic.asm):01016                   LDD  VARDES         ; * GET DESCRIPTOR POINTER FOR THE 'STEP'
E02D 3406             (      exbasic.asm):01017                   PSHS B,A            ; * VARIABLE AND SAVE IT ON THE STACK
E02F 8680             (      exbasic.asm):01018                   LDA  #$80           ; = GET THE 'FOR' FLAG AND
E031 3402             (      exbasic.asm):01019                   PSHS A              ; = SAVE IT ON THE STACK
                      (      exbasic.asm):01020         *
                      (      exbasic.asm):01021         * MAIN COMMAND INTERPRETATION LOOP
E033 1CAF             (      exbasic.asm):01022         LAD9E     ANDCC #$AF          ; ENABLE IRQ,FIRQ
E035 8D60             (      exbasic.asm):01023                   BSR  LADEB          ; CHECK FOR KEYBOARD BREAK
E037 9E83             (      exbasic.asm):01024                   LDX  CHARAD         ; GET BASIC'S INPUT POINTER
E039 9F2F             (      exbasic.asm):01025                   STX  TINPTR         ; SAVE IT
E03B A680             (      exbasic.asm):01026                   LDA  ,X+            ; GET CURRENT INPUT CHAR & MOVE POINTER
E03D 2707             (      exbasic.asm):01027                   BEQ  LADB4          ; BRANCH IF END OF LINE
E03F 813A             (      exbasic.asm):01028                   CMPA #':            ; CHECK FOR LINE SEPARATOR
E041 2722             (      exbasic.asm):01029                   BEQ  LADC0          ; BRANCH IF COLON
E043 7EE4F4           (      exbasic.asm):01030         LADB1     JMP  LB277          ; 'SYNTAX ERROR'-IF NOT LINE SEPARATOR
E046 A681             (      exbasic.asm):01031         LADB4     LDA  ,X++           ; GET MS BYTE OF ADDRESS OF NEXT BASIC LINE
E048 9700             (      exbasic.asm):01032                   STA  ENDFLG         ; SAVE IN STOP/END FLAG - CAUSE A STOP IF
                      (      exbasic.asm):01033         *                             ; NEXT LINE ADDRESS IS < $8000; CAUSE
                      (      exbasic.asm):01034         *                             ; AN END IF ADDRESS > $8000
E04A 2772             (      exbasic.asm):01035                   BEQ  LAE15          ; BRANCH TO 'STOP' - END OF PROGRAM
E04C EC80             (      exbasic.asm):01036                   LDD  ,X+            ; GET CURRENT LINE NUMBER
E04E DD68             (      exbasic.asm):01037                   STD  CURLIN         ; SAVE IN CURLIN
E050 9F83             (      exbasic.asm):01038                   STX  CHARAD         ; SAVE ADDRESS OF FIRST BYTE OF LINE
                      (      exbasic.asm):01039         * EXTENDED BASIC TRACE
E052 968C             (      exbasic.asm):01040                   LDA  TRCFLG         ; TEST THE TRACE FLAG
E054 270F             (      exbasic.asm):01041                   BEQ  LADC0          ; BRANCH IF TRACE OFF
E056 865B             (      exbasic.asm):01042                   LDA  #$5B           ; <LEFT HAND MARKER FOR TRON LINE NUMBER
E058 BDDB14           (      exbasic.asm):01043                   JSR  PUTCHR         ; OUTPUT A CHARACTER
E05B 9668             (      exbasic.asm):01044                   LDA  CURLIN         ; GET MS BYTE OF LINE NUMBER
E05D BDF009           (      exbasic.asm):01045                   JSR  LBDCC          ; CONVERT ACCD TO DECIMAL AND PRINT ON SCREEN
E060 865D             (      exbasic.asm):01046                   LDA  #$5D           ; > RIGHT HAND MARKER FOR TRON LINE NUMBER
E062 BDDB14           (      exbasic.asm):01047                   JSR  PUTCHR         ; OUTPUT A CHARACTER
                      (      exbasic.asm):01048         * END OF EXTENDED BASIC TRACE
E065 9D7C             (      exbasic.asm):01049         LADC0     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
E067 8D02             (      exbasic.asm):01050                   BSR  LADC6          ; GO PROCESS COMMAND
E069 20C8             (      exbasic.asm):01051                   BRA  LAD9E          ; GO BACK TO MAIN LOOP
E06B 2729             (      exbasic.asm):01052         LADC6     BEQ  LADEA          ; RETURN IF END OF LINE (RTS - was BEQ LAE40)
E06D 4D               (      exbasic.asm):01053                   TSTA                ; CHECK FOR TOKEN - BIT 7 SET (NEGATIVE)
E06E 102A01B8         (      exbasic.asm):01054                   LBPL LET            ; BRANCH IF NOT A TOKEN - GO DO A 'LET' WHICH
                      (      exbasic.asm):01055         *                             ; IS THE 'DEFAULT' TOKEN FOR MICROSOFT BASIC
E072 81FF             (      exbasic.asm):01056                   CMPA #$FF           ; SECONDARY TOKEN
E074 270F             (      exbasic.asm):01057                   BEQ  SECTOK
E076 819E             (      exbasic.asm):01058                   CMPA #TOK_HIGH_EXEC ; SKIPF TOKEN - HIGHEST EXECUTABLE COMMAND IN BASIC
E078 22C9             (      exbasic.asm):01059                   BHI  LADB1          ; 'SYNTAX ERROR' IF NON-EXECUTABLE TOKEN
E07A BEDBE5           (      exbasic.asm):01060                   LDX  COMVEC+3       ; GET ADDRESS OF BASIC'S COMMAND TABLE
E07D 48               (      exbasic.asm):01061         LADD4     ASLA                ; X2 (2 BYTE/JUMP ADDRESS) & DISCARD BIT 7
E07E 1F89             (      exbasic.asm):01062                   TFR  A,B            ; SAVE COMMAND OFFSET IN ACCB
E080 3A               (      exbasic.asm):01063                   ABX                 ; NON X POINTS TO COMMAND JUMP ADDR
E081 9D7C             (      exbasic.asm):01064                   JSR  GETNCH         ; GET AN INPUT CHAR
                      (      exbasic.asm):01065         *
                      (      exbasic.asm):01066         * HERE IS WHERE WE BRANCH TO DO A 'COMMAND'
E083 6E94             (      exbasic.asm):01067                   JMP  [,X]           ; GO DO A COMMAND
E085                  (      exbasic.asm):01068         SECTOK
                      (      exbasic.asm):01069         * THE ONLY SECONDARY TOKEN THAT CAN ALSO BE AN EXECUTABLE IS
                      (      exbasic.asm):01070         * THE MID$ REPLACEMENT STATEMENT. SO SPECIAL-CASE CHECK DONE HERE
E085 9D7C             (      exbasic.asm):01071                   JSR  GETNCH         ; GET AN INPUT CHAR
E087 8197             (      exbasic.asm):01072                   CMPA #TOK_MID       ; TOKEN FOR "MID$"
E089 102714F0         (      exbasic.asm):01073                   LBEQ L86D6          ; PROCESS MID$ REPLACEMENT
E08D 7EE4F4           (      exbasic.asm):01074                   JMP  LB277          ; SYNTAX ERROR
                      (      exbasic.asm):01075         
                      (      exbasic.asm):01076         *
                      (      exbasic.asm):01077         * RESTORE
E090 9E19             (      exbasic.asm):01078         RESTOR    LDX  TXTTAB         ; BEGINNING OF PROGRAM ADDRESS
E092 301F             (      exbasic.asm):01079                   LEAX -1,X           ; MOVE TO ONE BYTE BEFORE PROGRAM
E094 9F33             (      exbasic.asm):01080         LADE8     STX  DATPTR         ; SAVE NEW DATA POINTER
E096 39               (      exbasic.asm):01081         LADEA     RTS
                      (      exbasic.asm):01082         *
                      (      exbasic.asm):01083         * BREAK CHECK
E097 BDDB05           (      exbasic.asm):01084         LADEB     JSR  LA1C1          ; GET A KEYSTROKE ENTRY
E09A 270A             (      exbasic.asm):01085                   BEQ  LADFA          ; RETURN IF NO INPUT
E09C 8103             (      exbasic.asm):01086         LADF0     CMPA #3             ; CONTROL C? (BREAK)
E09E 2712             (      exbasic.asm):01087                   BEQ  STOP           ; YES
E0A0 8113             (      exbasic.asm):01088                   CMPA #$13           ; CONTROL S? (PAUSE)
E0A2 2703             (      exbasic.asm):01089                   BEQ  LADFB          ; YES
E0A4 9773             (      exbasic.asm):01090                   STA  IKEYIM         ; SAVE KEYSTROKE IN INKEY IMAGE
E0A6 39               (      exbasic.asm):01091         LADFA     RTS
E0A7 BDDB05           (      exbasic.asm):01092         LADFB     JSR  KEYIN          ; GET A KEY
E0AA 27FB             (      exbasic.asm):01093                   BEQ  LADFB          ; BRANCH IF NO KEY DOWN
E0AC 20EE             (      exbasic.asm):01094                   BRA  LADF0          ; CONTINUE - DO A BREAK CHECK
                      (      exbasic.asm):01095         *
                      (      exbasic.asm):01096         * END
E0AE 9D82             (      exbasic.asm):01097         END       JSR  GETCCH         ; GET CURRENT INPUT CHAR
E0B0 2002             (      exbasic.asm):01098                   BRA  LAE0B
                      (      exbasic.asm):01099         *
                      (      exbasic.asm):01100         * STOP
E0B2 1A01             (      exbasic.asm):01101         STOP      ORCC #$01           ; SET CARRY FLAG
E0B4 2631             (      exbasic.asm):01102         LAE0B     BNE  LAE40          ; BRANCH IF ARGUMENT EXISTS
E0B6 9E83             (      exbasic.asm):01103                   LDX  CHARAD         ; * SAVE CURRENT POSITION OF
E0B8 9F2F             (      exbasic.asm):01104                   STX  TINPTR         ; * BASIC'S INPUT POINTER
E0BA 0600             (      exbasic.asm):01105         LAE11     ROR  ENDFLG         ; ROTATE CARRY INTO BIT 7 OF STOP/END FLAG
E0BC 3262             (      exbasic.asm):01106                   LEAS 2,S            ; PURGE RETURN ADDRESS OFF STACK
E0BE 9E68             (      exbasic.asm):01107         LAE15     LDX  CURLIN         ; GET CURRENT LINE NUMBER
E0C0 8CFFFF           (      exbasic.asm):01108                   CMPX #$FFFF         ; DIRECT MODE?
E0C3 2706             (      exbasic.asm):01109                   BEQ  LAE22          ; YES
E0C5 9F29             (      exbasic.asm):01110                   STX  OLDTXT         ; SAVE CURRENT LINE NUMBER
E0C7 9E2F             (      exbasic.asm):01111                   LDX  TINPTR         ; * GET AND SAVE CURRENT POSITION
E0C9 9F2D             (      exbasic.asm):01112                   STX  OLDPTR         ; * OF BASIC'S INPUT POINTER
E0CB                  (      exbasic.asm):01113         LAE22
E0CB 8EDEA2           (      exbasic.asm):01114                   LDX  #LABF2-1       ; POINT TO CR, 'BREAK' MESSAGE
E0CE 0D00             (      exbasic.asm):01115                   TST  ENDFLG         ; CHECK STOP/END FLAG
E0D0 102AFE42         (      exbasic.asm):01116                   LBPL LAC73          ; BRANCH TO MAIN LOOP OF BASIC IF END
E0D4 7EDF0B           (      exbasic.asm):01117                   JMP  LAC68          ; PRINT 'BREAK AT ####' AND GO TO
                      (      exbasic.asm):01118         *                             ; BASIC'S MAIN LOOP IF 'STOP'
                      (      exbasic.asm):01119         
                      (      exbasic.asm):01120         * CONT
E0D7 260E             (      exbasic.asm):01121         CONT      BNE  LAE40          ; RETURN IF ARGUMENT GIVEN
E0D9 C620             (      exbasic.asm):01122                   LDB  #2*16          ; 'CAN'T CONTINUE' ERROR
E0DB 9E2D             (      exbasic.asm):01123                   LDX  OLDPTR         ; GET CONTINUE ADDRESS (INPUT POINTER)
E0DD 1027FE16         (      exbasic.asm):01124                   LBEQ LAC46          ; 'CN' ERROR IF CONTINUE ADDRESS = 0
E0E1 9F83             (      exbasic.asm):01125                   STX  CHARAD         ; RESET BASIC'S INPUT POINTER
E0E3 9E29             (      exbasic.asm):01126                   LDX  OLDTXT         ; GET LINE NUMBER
E0E5 9F68             (      exbasic.asm):01127                   STX  CURLIN         ; RESET CURRENT LINE NUMBER
E0E7 39               (      exbasic.asm):01128         LAE40     RTS
                      (      exbasic.asm):01129         *
                      (      exbasic.asm):01130         * CLEAR
E0E8 272C             (      exbasic.asm):01131         CLEAR     BEQ  LAE6F          ; BRANCH IF NO ARGUMENT
E0EA BDE65E           (      exbasic.asm):01132                   JSR  LB3E6          ; EVALUATE ARGUMENT
E0ED 3406             (      exbasic.asm):01133                   PSHS B,A            ; SAVE AMOUNT OF STRING SPACE ON STACK
E0EF 9E27             (      exbasic.asm):01134                   LDX  MEMSIZ         ; GET CURRENT TOP OF CLEARED SPACE
E0F1 9D82             (      exbasic.asm):01135                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E0F3 270C             (      exbasic.asm):01136                   BEQ  LAE5A          ; BRANCH IF NO NEW TOP OF CLEARED SPACE
E0F5 BDE4EA           (      exbasic.asm):01137                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
E0F8 BDE9B5           (      exbasic.asm):01138                   JSR  LB73D          ; EVALUATE EXPRESSlON; RETURN VALUE IN X
E0FB 301F             (      exbasic.asm):01139                   LEAX -1,X           ; X = TOP OF CLEARED SPACE
E0FD 9C71             (      exbasic.asm):01140                   CMPX TOPRAM         ; COMPARE TO TOP OF RAM
E0FF 2218             (      exbasic.asm):01141                   BHI  LAE72          ; 'OM' ERROR IF > TOP OF RAM
E101 1F10             (      exbasic.asm):01142         LAE5A     TFR  X,D            ; ACCD = TOP OF CLEARED SPACE
E103 A3E1             (      exbasic.asm):01143                   SUBD ,S++           ; SUBTRACT OUT AMOUNT OF CLEARED SPACE
E105 2512             (      exbasic.asm):01144                   BCS  LAE72          ; 'OM' ERROR IF FREE MEM < 0
E107 1F03             (      exbasic.asm):01145                   TFR  D,U            ; U = BOTTOM OF CLEARED SPACE
E109 83003A           (      exbasic.asm):01146                   SUBD #STKBUF        ; SUBTRACT OUT STACK BUFFER
E10C 250B             (      exbasic.asm):01147                   BCS  LAE72          ; 'OM' ERROR IF FREE MEM < 0
E10E 931B             (      exbasic.asm):01148                   SUBD VARTAB         ; SUBTRACT OUT START OF VARIABLES
E110 2507             (      exbasic.asm):01149                   BCS  LAE72          ; 'OM' ERROR IF FREE MEM < 0
E112 DF21             (      exbasic.asm):01150                   STU  FRETOP         ; SAVE NEW BOTTOM OF CLEARED SPACE
E114 9F27             (      exbasic.asm):01151                   STX  MEMSIZ         ; SAVE NEW TOP OF CLEARED SPACE
E116 7EDFBB           (      exbasic.asm):01152         LAE6F     JMP  LAD26          ; ERASE ALL VARIABLES, INITIALIZE POINTERS, ETC
E119 7EDEF5           (      exbasic.asm):01153         LAE72     JMP  LAC44          ; 'OM' ERROR
                      (      exbasic.asm):01154         *
                      (      exbasic.asm):01155         * RUN
E11C 9D82             (      exbasic.asm):01156         RUN       JSR  GETCCH         ; * GET CURRENT INPUT CHARACTER
E11E 1027FE94         (      exbasic.asm):01157                   LBEQ LAD21          ; * IF NO LINE NUMBER
E122 BDDFBB           (      exbasic.asm):01158                   JSR  LAD26          ; ERASE ALL VARIABLES
E125 2019             (      exbasic.asm):01159                   BRA  LAE9F          ; 'GOTO' THE RUN ADDRESS
                      (      exbasic.asm):01160         *
                      (      exbasic.asm):01161         * GO
E127 1F89             (      exbasic.asm):01162         GO        TFR  A,B            ; SAVE INPUT CHARACTER IN ACCB
E129 9D7C             (      exbasic.asm):01163         LAE88     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
E12B C1A0             (      exbasic.asm):01164                   CMPB #TOK_TO        ; 'TO' TOKEN
E12D 2716             (      exbasic.asm):01165                   BEQ  LAEA4          ; BRANCH IF GOTO
E12F C1A1             (      exbasic.asm):01166                   CMPB #TOK_SUB       ; 'SUB' TOKEN
E131 2645             (      exbasic.asm):01167                   BNE  LAED7          ; 'SYNTAX ERROR' IF NEITHER
E133 C603             (      exbasic.asm):01168                   LDB  #3             ; =ROOM FOR 6
E135 BDDEE4           (      exbasic.asm):01169                   JSR  LAC33          ; =BYTES ON STACK?
E138 DE83             (      exbasic.asm):01170                   LDU  CHARAD         ; * SAVE CURRENT BASIC INPUT POINTER, LINE
E13A 9E68             (      exbasic.asm):01171                   LDX  CURLIN         ; * NUMBER AND SUB TOKEN ON STACK
E13C 86A1             (      exbasic.asm):01172                   LDA  #TOK_SUB       ; *
E13E 3452             (      exbasic.asm):01173                   PSHS U,X,A          ; *
E140 8D03             (      exbasic.asm):01174         LAE9F     BSR  LAEA4          ; GO DO A 'GOTO'
E142 7EE033           (      exbasic.asm):01175                   JMP  LAD9E          ; JUMP BACK TO BASIC'S MAIN LOOP
                      (      exbasic.asm):01176         * GOTO
E145 9D82             (      exbasic.asm):01177         LAEA4     JSR  GETCCH         ; GET CURRENT INPUT CHAR
E147 BDE208           (      exbasic.asm):01178                   JSR  LAF67          ; GET LINE NUMBER TO BINARY IN BINVAL
E14A 8D40             (      exbasic.asm):01179                   BSR  LAEEB          ; ADVANCE BASIC'S POINTER TO END OF LINE
E14C 3001             (      exbasic.asm):01180                   LEAX $01,X          ; POINT TO START OF NEXT LINE
E14E DC2B             (      exbasic.asm):01181                   LDD  BINVAL         ; GET THE LINE NUMBER TO RUN
E150 109368           (      exbasic.asm):01182                   CMPD CURLIN         ; COMPARE TO CURRENT LINE NUMBER
E153 2202             (      exbasic.asm):01183                   BHI  LAEB6          ; IF REO'D LINE NUMBER IS > CURRENT LINE NUMBER,
                      (      exbasic.asm):01184         *              ; DON'T START LOOKING FROM
                      (      exbasic.asm):01185         *              ; START OF PROGRAM
E155 9E19             (      exbasic.asm):01186                   LDX  TXTTAB         ; BEGINNING OF PROGRAM
E157 BDDF9A           (      exbasic.asm):01187         LAEB6     JSR  LAD05          ; GO FIND A LINE NUMBER
E15A 2517             (      exbasic.asm):01188                   BCS  LAED2          ; 'UNDEFINED LINE NUMBER'
E15C 301F             (      exbasic.asm):01189         LAEBB     LEAX -1,X           ; MOVE BACK TO JUST BEFORE START OF LINE
E15E 9F83             (      exbasic.asm):01190                   STX  CHARAD         ; RESET BASIC'S INPUT POINTER
E160 39               (      exbasic.asm):01191         LAEBF     RTS
                      (      exbasic.asm):01192         *
                      (      exbasic.asm):01193         * RETURN
E161 26FD             (      exbasic.asm):01194         RETURN    BNE  LAEBF          ; EXIT ROUTINE IF ARGUMENT GIVEN
E163 86FF             (      exbasic.asm):01195                   LDA  #$FF           ; * PUT AN ILLEGAL VARIABLE NAME IN FIRST BYTE OF
E165 973B             (      exbasic.asm):01196                   STA  VARDES         ; * VARDES WHICH WILL CAUSE 'FOR/NEXT' DATA ON THE
                      (      exbasic.asm):01197         *              ; STACK TO BE IGNORED
E167 BDDEAA           (      exbasic.asm):01198                   JSR  LABF9          ; CHECK FOR RETURN DATA ON THE STACK
E16A 1F14             (      exbasic.asm):01199                   TFR  X,S            ; RESET STACK POINTER - PURGE TWO RETURN ADDRESSES
                      (      exbasic.asm):01200         *              ; FROM THE STACK
E16C 8121             (      exbasic.asm):01201                   CMPA #TOK_SUB-$80   ; SUB TOKEN - $80
E16E 270B             (      exbasic.asm):01202                   BEQ  LAEDA          ; BRANCH IF 'RETURN' FROM SUBROUTINE
E170 C604             (      exbasic.asm):01203                   LDB  #2*2           ; ERROR #2 'RETURN WITHOUT GOSUB'
E172 8C               (      exbasic.asm):01204                   FCB  SKP2           ; SKIP TWO BYTES
E173 C60E             (      exbasic.asm):01205         LAED2     LDB  #7*2           ; ERROR #7 'UNDEFINED LINE NUMBER'
E175 7EDEF7           (      exbasic.asm):01206                   JMP  LAC46          ; JUMP TO ERROR HANDLER
E178 7EE4F4           (      exbasic.asm):01207         LAED7     JMP  LB277          ; 'SYNTAX ERROR'
E17B 3552             (      exbasic.asm):01208         LAEDA     PULS A,X,U          ; * RESTORE VALUES OF CURRENT LINE NUMBER AND
E17D 9F68             (      exbasic.asm):01209                   STX  CURLIN         ; * BASIC'S INPUT POINTER FOR THIS SUBROUTINE
E17F DF83             (      exbasic.asm):01210                   STU  CHARAD         ; * AND LOAD ACCA WITH SUB TOKEN ($A6)
                      (      exbasic.asm):01211         *
                      (      exbasic.asm):01212         * DATA
E181 8D06             (      exbasic.asm):01213         DATA      BSR  LAEE8          ; MOVE INPUT POINTER TO END OF SUBLINE OR LINE
E183 8C               (      exbasic.asm):01214                   FCB  SKP2           ; SKIP 2 BYTES
                      (      exbasic.asm):01215         
                      (      exbasic.asm):01216         * REM, ELSE
E184                  (      exbasic.asm):01217         ELSE
E184 8D06             (      exbasic.asm):01218         REM       BSR  LAEEB          ; MOVE INPUT POINTER TO END OF LINE
E186 9F83             (      exbasic.asm):01219                   STX  CHARAD         ; RESET BASIC'S INPUT POINTER
E188 39               (      exbasic.asm):01220         LAEE7     RTS
                      (      exbasic.asm):01221         * ADVANCE INPUT POINTER TO END OF SUBLINE OR LINE
E189 C63A             (      exbasic.asm):01222         LAEE8     LDB  #':            ; COLON = SUBLINE TERMINATOR CHARACTER
E18B 86               (      exbasic.asm):01223         LAEEA     FCB  SKP1LD         ; SKPILD SKIP ONE BYTE; LDA #$5F
                      (      exbasic.asm):01224         * ADVANCE BASIC'S INPUT POINTER TO END OF
                      (      exbasic.asm):01225         * LINE - RETURN ADDRESS OF END OF LINE+1 IN X
E18C 5F               (      exbasic.asm):01226         LAEEB     CLRB                ; 0 = LINE TERMINATOR CHARACTER
E18D D701             (      exbasic.asm):01227                   STB  CHARAC         ; TEMP STORE PRIMARY TERMINATOR CHARACTER
E18F 5F               (      exbasic.asm):01228                   CLRB                ; 0 (END OF LINE) = ALTERNATE TERM. CHAR.
E190 9E83             (      exbasic.asm):01229                   LDX  CHARAD         ; LOAD X W/BASIC'S INPUT POINTER
E192 1F98             (      exbasic.asm):01230         LAEF1     TFR  B,A            ; * CHANGE TERMINATOR CHARACTER
E194 D601             (      exbasic.asm):01231                   LDB  CHARAC         ; * FROM ACCB TO CHARAC - SAVE OLD TERMINATOR
                      (      exbasic.asm):01232         *         IN   CHARAC
E196 9701             (      exbasic.asm):01233                   STA  CHARAC         ; SWAP PRIMARY AND SECONDARY TERMINATORS
E198 A684             (      exbasic.asm):01234         LAEF7     LDA  ,X             ; GET NEXT INPUT CHARACTER
E19A 27EC             (      exbasic.asm):01235                   BEQ  LAEE7          ; RETURN IF 0 (END OF LINE)
E19C 3404             (      exbasic.asm):01236                   PSHS B              ; SAVE TERMINATOR ON STACK
E19E A1E0             (      exbasic.asm):01237                   CMPA ,S+            ; COMPARE TO INPUT CHARACTER
E1A0 27E6             (      exbasic.asm):01238                   BEQ  LAEE7          ; RETURN IF EQUAL
E1A2 3001             (      exbasic.asm):01239                   LEAX 1,X            ; MOVE POINTER UP ONE
E1A4 8122             (      exbasic.asm):01240                   CMPA #'"            ; CHECK FOR DOUBLE QUOTES
E1A6 27EA             (      exbasic.asm):01241                   BEQ  LAEF1          ; BRANCH IF " - TOGGLE TERMINATOR CHARACTERS
E1A8 4C               (      exbasic.asm):01242                   INCA                ; * CHECK FOR $FF AND BRANCH IF
E1A9 2602             (      exbasic.asm):01243                   BNE  LAF0C          ; * NOT SECONDARY TOKEN
E1AB 3001             (      exbasic.asm):01244                   LEAX 1,X            ; MOVE INPUT POINTER 1 MORE IF SECONDARY
E1AD 8186             (      exbasic.asm):01245         LAF0C     CMPA #TOK_IF+1      ; TOKEN FOR IF?
E1AF 26E7             (      exbasic.asm):01246                   BNE  LAEF7          ; NO - GET ANOTHER INPUT CHARACTER
E1B1 0C04             (      exbasic.asm):01247                   INC  IFCTR          ; INCREMENT IF COUNTER - KEEP TRACK OF HOW MANY
                      (      exbasic.asm):01248         *                             ; 'IF' STATEMENTS ARE NESTED IN ONE LINE
E1B3 20E3             (      exbasic.asm):01249                   BRA  LAEF7          ; GET ANOTHER INPUT CHARACTER
                      (      exbasic.asm):01250         
                      (      exbasic.asm):01251         * IF
E1B5 BDE3BE           (      exbasic.asm):01252         IF        JSR  LB141          ; EVALUATE NUMERIC EXPRESSION
E1B8 9D82             (      exbasic.asm):01253                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E1BA 8181             (      exbasic.asm):01254                   CMPA #TOK_GO        ; TOKEN FOR GO
E1BC 2705             (      exbasic.asm):01255                   BEQ  LAF22          ; TREAT 'GO' THE SAME AS 'THEN'
E1BE C6A2             (      exbasic.asm):01256                   LDB  #TOK_THEN      ; TOKEN FOR THEN
E1C0 BDE4EC           (      exbasic.asm):01257                   JSR  LB26F          ; DO A SYNTAX CHECK ON ACCB
E1C3 964F             (      exbasic.asm):01258         LAF22     LDA  FP0EXP         ; CHECK FOR TRUE/FALSE - FALSE IF FPA0 EXPONENT = ZERO
E1C5 2613             (      exbasic.asm):01259                   BNE  LAF39          ; BRANCH IF CONDITION TRUE
E1C7 0F04             (      exbasic.asm):01260                   CLR  IFCTR          ; CLEAR FLAG - KEEP TRACK OF WHICH NESTED ELSE STATEMENT
                      (      exbasic.asm):01261         *                             ; TO SEARCH FOR IN NESTED 'IF' LOOPS
E1C9 8DB6             (      exbasic.asm):01262         LAF28     BSR  DATA           ; MOVE BASIC'S POINTER TO END OF SUBLINE
E1CB 4D               (      exbasic.asm):01263                   TSTA                ; * CHECK TO SEE IF END OF LINE OR SUBLINE
E1CC 27BA             (      exbasic.asm):01264                   BEQ  LAEE7          ; * AND RETURN IF END OF LINE
E1CE 9D7C             (      exbasic.asm):01265                   JSR  GETNCH         ; GET AN INPUT CHARACTER FROM BASIC
E1D0 8184             (      exbasic.asm):01266                   CMPA #TOK_ELSE      ; TOKEN FOR ELSE
E1D2 26F5             (      exbasic.asm):01267                   BNE  LAF28          ; IGNORE ALL DATA EXCEPT 'ELSE' UNTIL
                      (      exbasic.asm):01268         *                             ; END OF LINE (ZERO BYTE)
E1D4 0A04             (      exbasic.asm):01269                   DEC  IFCTR          ; CHECK TO SEE IF YOU MUST SEARCH ANOTHER SUBLINE
E1D6 2AF1             (      exbasic.asm):01270                   BPL  LAF28          ; BRANCH TO SEARCH ANOTHER SUBLINE FOR 'ELSE'
E1D8 9D7C             (      exbasic.asm):01271                   JSR  GETNCH         ; GET AN INPUT CHARACTER FROM BASIC
E1DA 9D82             (      exbasic.asm):01272         LAF39     JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E1DC 1025FF65         (      exbasic.asm):01273                   LBCS LAEA4          ; BRANCH TO 'GOTO' IF NUMERIC CHARACTER
E1E0 7EE06B           (      exbasic.asm):01274                   JMP  LADC6          ; RETURN TO MAIN INTERPRETATION LOOP
                      (      exbasic.asm):01275         
                      (      exbasic.asm):01276         * ON
E1E3 BDE983           (      exbasic.asm):01277         ON        JSR  LB70B          ; EVALUATE EXPRESSION
E1E6 C681             (      exbasic.asm):01278                   LDB  #TOK_GO        ; TOKEN FOR GO
E1E8 BDE4EC           (      exbasic.asm):01279                   JSR  LB26F          ; SYNTAX CHECK FOR GO
E1EB 3402             (      exbasic.asm):01280                   PSHS A              ; SAVE NEW TOKEN (TO,SUB)
E1ED 81A1             (      exbasic.asm):01281                   CMPA #TOK_SUB       ; TOKEN FOR SUB?
E1EF 2704             (      exbasic.asm):01282                   BEQ  LAF54          ; YES
E1F1 81A0             (      exbasic.asm):01283                   CMPA #TOK_TO        ; TOKEN FOR TO?
E1F3 2683             (      exbasic.asm):01284         LAF52     BNE  LAED7          ; 'SYNTAX' ERROR IF NOT 'SUB' OR 'TO'
E1F5 0A53             (      exbasic.asm):01285         LAF54     DEC  FPA0+3         ; DECREMENT IS BYTE OF MANTISSA OF FPA0 - THIS
                      (      exbasic.asm):01286         *                             ; IS THE ARGUMENT OF THE 'ON' STATEMENT
E1F7 2605             (      exbasic.asm):01287                   BNE  LAF5D          ; BRANCH IF NOT AT THE PROPER GOTO OR GOSUB LINE NUMBER
E1F9 3504             (      exbasic.asm):01288                   PULS B              ; GET BACK THE TOKEN FOLLOWING 'GO'
E1FB 7EE129           (      exbasic.asm):01289                   JMP  LAE88          ; GO DO A 'GOTO' OR 'GOSUB'
E1FE 9D7C             (      exbasic.asm):01290         LAF5D     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
E200 8D06             (      exbasic.asm):01291                   BSR  LAF67          ; CONVERT BASIC LINE NUMBER TO BINARY
E202 812C             (      exbasic.asm):01292                   CMPA #',            ; IS CHARACTER FOLLOWING LINE NUMBER A COMMA?
E204 27EF             (      exbasic.asm):01293                   BEQ  LAF54          ; YES
E206 3584             (      exbasic.asm):01294                   PULS B,PC           ; IF NOT, FALL THROUGH TO NEXT COMMAND
E208 9E74             (      exbasic.asm):01295         LAF67     LDX  ZERO           ; DEFAULT LINE NUMBER OF ZERO
E20A 9F2B             (      exbasic.asm):01296                   STX  BINVAL         ; SAVE IT IN BINVAL
                      (      exbasic.asm):01297         *
                      (      exbasic.asm):01298         * CONVERT LINE NUMBER TO BINARY - RETURN VALUE IN BINVAL
                      (      exbasic.asm):01299         *
E20C 2461             (      exbasic.asm):01300         LAF6B     BCC  LAFCE          ; RETURN IF NOT NUMERIC CHARACTER
E20E 8030             (      exbasic.asm):01301                   SUBA #'0            ; MASK OFF ASCII
E210 9701             (      exbasic.asm):01302                   STA  CHARAC         ; SAVE DIGIT IN VO1
E212 DC2B             (      exbasic.asm):01303                   LDD  BINVAL         ; GET ACCUMULATED LINE NUMBER VALUE
E214 8118             (      exbasic.asm):01304                   CMPA #24            ; LARGEST LINE NUMBER IS $F9FF (63999) -
                      (      exbasic.asm):01305         *         (24*256+255)*10+9
E216 22DB             (      exbasic.asm):01306                   BHI  LAF52          ; 'SYNTAX' ERROR IF TOO BIG
                      (      exbasic.asm):01307         * MULT ACCD X 10
E218 58               (      exbasic.asm):01308                   ASLB                ; *
E219 49               (      exbasic.asm):01309                   ROLA                ; * TIMES 2
E21A 58               (      exbasic.asm):01310                   ASLB                ; =
E21B 49               (      exbasic.asm):01311                   ROLA                ; = TIMES 4
E21C D32B             (      exbasic.asm):01312                   ADDD BINVAL         ; ADD 1 = TIMES 5
E21E 58               (      exbasic.asm):01313                   ASLB                ; *
E21F 49               (      exbasic.asm):01314                   ROLA                ; * TIMES 10
E220 DB01             (      exbasic.asm):01315                   ADDB CHARAC         ; ADD NEXT DIGIT
E222 8900             (      exbasic.asm):01316                   ADCA #0             ; PROPAGATE CARRY
E224 DD2B             (      exbasic.asm):01317                   STD  BINVAL         ; SAVE NEW ACCUMULATED LINE NUMBER
E226 9D7C             (      exbasic.asm):01318                   JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
E228 20E2             (      exbasic.asm):01319                   BRA  LAF6B          ; LOOP- PROCESS NEXT DIGIT
                      (      exbasic.asm):01320         *
                      (      exbasic.asm):01321         * LET (EXBAS)
                      (      exbasic.asm):01322         * EVALUATE A NON-TOKEN EXPRESSION
                      (      exbasic.asm):01323         * TARGET = REPLACEMENT
E22A BDE5CF           (      exbasic.asm):01324         LET       JSR  LB357          ; FIND TARGET VARIABLE DESCRIPTOR
E22D 9F3B             (      exbasic.asm):01325                   STX  VARDES         ; SAVE DESCRIPTOR ADDRESS OF 1ST EXPRESSION
E22F C6AE             (      exbasic.asm):01326                   LDB  #TOK_EQUALS    ; TOKEN FOR "="
E231 BDE4EC           (      exbasic.asm):01327                   JSR  LB26F          ; DO A SYNTAX CHECK FOR '='
E234 9606             (      exbasic.asm):01328                   LDA  VALTYP         ; * GET VARIABLE TYPE AND
E236 3402             (      exbasic.asm):01329                   PSHS A              ; * SAVE ON THE STACK
E238 BDE3D3           (      exbasic.asm):01330                   JSR  LB156          ; EVALUATE EXPRESSION
E23B 3502             (      exbasic.asm):01331                   PULS A              ; * REGET VARIABLE TYPE OF 1ST EXPRESSION AND
E23D 46               (      exbasic.asm):01332                   RORA                ; * SET CARRY IF STRING
E23E BDE3C5           (      exbasic.asm):01333                   JSR  LB148          ; TYPE CHECK-TM ERROR IF VARIABLE TYPES ON
                      (      exbasic.asm):01334         *                             ; BOTH SIDES OF EQUALS SIGN NOT THE SAME
E241 10270C2B         (      exbasic.asm):01335                   LBEQ LBC33          ; GO PUT FPA0 INTO VARIABLE DESCRIPTOR IF NUMERIC
                      (      exbasic.asm):01336         * MOVE A STRING WHOSE DESCRIPTOR IS LOCATED AT
                      (      exbasic.asm):01337         * FPA0+2 INTO THE STRING SPACE. TRANSFER THE
                      (      exbasic.asm):01338         * DESCRIPTOR ADDRESS TO THE ADDRESS IN VARDES
                      (      exbasic.asm):01339         * DON'T MOVE THE STRING IF IT IS ALREADY IN THE
                      (      exbasic.asm):01340         * STRING SPACE. REMOVE DESCRIPTOR FROM STRING
                      (      exbasic.asm):01341         * STACK IF IT IS LAST ONE ON THE STACK
E245 9E52             (      exbasic.asm):01342         LAFA4     LDX  FPA0+2         ; POINT X TO DESCRIPTOR OF REPLACEMENT STRING
E247 DC21             (      exbasic.asm):01343                   LDD  FRETOP         ; LOAD ACCD WITH START OF STRING SPACE
E249 10A302           (      exbasic.asm):01344                   CMPD 2,X            ; IS THE STRING IN STRING SPACE?
E24C 2411             (      exbasic.asm):01345                   BCC  LAFBE          ; BRANCH IF IT'S NOT IN THE STRING SPACE
E24E 9C1B             (      exbasic.asm):01346                   CMPX VARTAB         ; COMPARE DESCRIPTOR ADDRESS TO START OF VARIABLES
E250 250D             (      exbasic.asm):01347                   BCS  LAFBE          ; BRANCH IF DESCRIPTOR ADDRESS NOT IN VARIABLES
E252 E684             (      exbasic.asm):01348         LAFB1     LDB  ,X             ; GET LENGTH OF REPLACEMENT STRING
E254 BDE785           (      exbasic.asm):01349                   JSR  LB50D          ; RESERVE ACCB BYTES OF STRING SPACE
E257 9E4D             (      exbasic.asm):01350                   LDX  V4D            ; GET DESCRIPTOR ADDRESS BACK
E259 BDE8BB           (      exbasic.asm):01351                   JSR  LB643          ; MOVE STRING INTO STRING SPACE
E25C 8E0056           (      exbasic.asm):01352                   LDX  #STRDES        ; POINT X TO TEMP STRING DESCRIPTOR ADDRESS
E25F 9F4D             (      exbasic.asm):01353         LAFBE     STX  V4D            ; SAVE STRING DESCRIPTOR ADDRESS IN V4D
E261 BDE8ED           (      exbasic.asm):01354                   JSR  LB675          ; REMOVE STRING DESCRIPTOR IF LAST ONE
                      (      exbasic.asm):01355         *              ; ON STRING STACK
E264 DE4D             (      exbasic.asm):01356                   LDU  V4D            ; POINT U TO REPLACEMENT DESCRIPTOR ADDRESS
E266 9E3B             (      exbasic.asm):01357                   LDX  VARDES         ; GET TARGET DESCRIPTOR ADDRESS
E268 3726             (      exbasic.asm):01358                   PULU A,B,Y          ; GET LENGTH AND START OF REPLACEMENT STRING
E26A A784             (      exbasic.asm):01359                   STA  ,X             ; * SAVE STRING LENGTH AND START IN
E26C 10AF02           (      exbasic.asm):01360                   STY  2,X            ; * TARGET DESCRIPTOR LOCATION
E26F 39               (      exbasic.asm):01361         LAFCE     RTS
                      (      exbasic.asm):01362         
E270 3F5245444F       (      exbasic.asm):01363         LAFCF     FCC  "?REDO"        ; ?REDO MESSAGE
E275 0D00             (      exbasic.asm):01364                   FCB  CR,$00
                      (      exbasic.asm):01365         
E277                  (      exbasic.asm):01366         LAFD6
E277 7EDEF7           (      exbasic.asm):01367         LAFDC     JMP  LAC46          ; JMP TO ERROR HANDLER
E27A 9609             (      exbasic.asm):01368         LAFDF     LDA  INPFLG         ; = GET THE INPUT FLAG AND BRANCH
E27C 2707             (      exbasic.asm):01369                   BEQ  LAFEA          ; = IF 'INPUT'
E27E 9E31             (      exbasic.asm):01370                   LDX  DATTXT         ; * GET LINE NUMBER WHERE THE ERROR OCCURRED
E280 9F68             (      exbasic.asm):01371                   STX  CURLIN         ; * AND USE IT AS THE CURRENT LINE NUMBER
E282 7EE4F4           (      exbasic.asm):01372                   JMP  LB277          ; 'SYNTAX ERROR'
E285 8EE26F           (      exbasic.asm):01373         LAFEA     LDX  #LAFCF-1       ; * POINT X TO '?REDO' AND PRINT
E288 BDEBD9           (      exbasic.asm):01374                   JSR  LB99C          ; * IT ON THE SCREEN
E28B 9E2F             (      exbasic.asm):01375                   LDX  TINPTR         ; = GET THE SAVED ABSOLUTE ADDRESS OF
E28D 9F83             (      exbasic.asm):01376                   STX  CHARAD         ; = INPUT POINTER AND RESTORE IT
E28F 39               (      exbasic.asm):01377                   RTS
                      (      exbasic.asm):01378         *
                      (      exbasic.asm):01379         * INPUT
E290 C616             (      exbasic.asm):01380         INPUT     LDB  #11*2          ; 'ID' ERROR
E292 9E68             (      exbasic.asm):01381                   LDX  CURLIN         ; GET CURRENT LINE NUMBER
E294 3001             (      exbasic.asm):01382                   LEAX 1,X            ; ADD ONE
E296 27DF             (      exbasic.asm):01383                   BEQ  LAFDC          ; 'ID' ERROR BRANCH IF DIRECT MODE
E298 8D01             (      exbasic.asm):01384                   BSR  LB00F          ; GET SOME INPUT DATA - WAS LB002
E29A 39               (      exbasic.asm):01385                   RTS
E29B 8122             (      exbasic.asm):01386         LB00F     CMPA #'"            ; CHECK FOR PROMPT STRING DELIMITER
E29D 260B             (      exbasic.asm):01387                   BNE  LB01E          ; BRANCH IF NO PROMPT STRING
E29F BDE4C1           (      exbasic.asm):01388                   JSR  LB244          ; PUT PROMPT STRING ON STRING STACK
E2A2 C63B             (      exbasic.asm):01389                   LDB  #';            ; *
E2A4 BDE4EC           (      exbasic.asm):01390                   JSR  LB26F          ; * DO A SYNTAX CHECK FOR SEMICOLON
E2A7 BDEBDC           (      exbasic.asm):01391                   JSR  LB99F          ; PRINT MESSAGE TO CONSOLE OUT
E2AA 8E00F3           (      exbasic.asm):01392         LB01E     LDX  #LINBUF        ; POINT TO BASIC'S LINE BUFFER
E2AD 6F84             (      exbasic.asm):01393                   CLR  ,X             ; CLEAR 1ST BYTE - FLAG TO INDICATE NO DATA
                      (      exbasic.asm):01394         *              ; IN LINE BUFFER
E2AF 8D06             (      exbasic.asm):01395                   BSR  LB02F          ; INPUT A STRING TO LINE BUFFER
E2B1 C62C             (      exbasic.asm):01396                   LDB  #',            ; * INSERT A COMMA AT THE END
E2B3 E784             (      exbasic.asm):01397                   STB  ,X             ; * OF THE LINE INPUT BUFFER
E2B5 2016             (      exbasic.asm):01398                   BRA  LB049
                      (      exbasic.asm):01399         * FILL BASIC'S LINE INPUT BUFFER CONSOLE IN
E2B7 BDEBEC           (      exbasic.asm):01400         LB02F     JSR  LB9AF          ; SEND A "?" TO CONSOLE OUT
E2BA BDEBE9           (      exbasic.asm):01401                   JSR  LB9AC          ; SEND A 'SPACE' TO CONSOLE OUT
E2BD BDDC32           (      exbasic.asm):01402         LB035     JSR  LA390          ; GO READ IN A BASIC LINE
E2C0 2405             (      exbasic.asm):01403                   BCC  LB03F          ; BRANCH IF ENTER KEY ENDED ENTRY
E2C2 3264             (      exbasic.asm):01404                   LEAS 4,S            ; PURGE TWO RETURN ADDRESSES OFF THE STACK
E2C4 7EE0BA           (      exbasic.asm):01405                   JMP  LAE11          ; GO DO A 'STOP' IF BREAK KEY ENDED LINE ENTRY
E2C7 C62E             (      exbasic.asm):01406         LB03F     LDB  #2*23          ; 'INPUT PAST END OF FILE' ERROR
E2C9 39               (      exbasic.asm):01407                   RTS
                      (      exbasic.asm):01408         *
                      (      exbasic.asm):01409         * READ
E2CA 9E33             (      exbasic.asm):01410         READ      LDX  DATPTR         ; GET 'READ' START ADDRESS
E2CC 86               (      exbasic.asm):01411                   FCB  SKP1LD         ; SKIP ONE BYTE - LDA #*$4F
E2CD 4F               (      exbasic.asm):01412         LB049     CLRA                ; 'INPUT' ENTRY POINT: INPUT FLAG = 0
E2CE 9709             (      exbasic.asm):01413                   STA  INPFLG         ; SET INPUT FLAG; 0 = INPUT: <> 0 = READ
E2D0 9F35             (      exbasic.asm):01414                   STX  DATTMP         ; SAVE 'READ' START ADDRESS/'INPUT' BUFFER START
E2D2 BDE5CF           (      exbasic.asm):01415         LB04E     JSR  LB357          ; EVALUATE A VARIABLE
E2D5 9F3B             (      exbasic.asm):01416                   STX  VARDES         ; SAVE DESCRIPTOR ADDRESS
E2D7 9E83             (      exbasic.asm):01417                   LDX  CHARAD         ; * GET BASIC'S INPUT POINTER
E2D9 9F2B             (      exbasic.asm):01418                   STX  BINVAL         ; * AND SAVE IT
E2DB 9E35             (      exbasic.asm):01419                   LDX  DATTMP         ; GET 'READ' ADDRESS START/'INPUT' BUFFER POINTER
E2DD A684             (      exbasic.asm):01420                   LDA  ,X             ; GET A CHARACTER FROM THE BASIC PROGRAM
E2DF 2609             (      exbasic.asm):01421                   BNE  LB069          ; BRANCH IF NOT END OF LINE
E2E1 9609             (      exbasic.asm):01422                   LDA  INPFLG         ; * CHECK INPUT FLAG AND BRANCH
E2E3 2651             (      exbasic.asm):01423                   BNE  LB0B9          ; * IF LOOKING FOR DATA (READ)
                      (      exbasic.asm):01424         * NO DATA IN 'INPUT' LINE BUFFER AND/OR INPUT
                      (      exbasic.asm):01425         * NOT COMING FROM SCREEN
E2E5 BDEBEC           (      exbasic.asm):01426                   JSR  LB9AF          ; SEND A '?' TO CONSOLE OUT
E2E8 8DCD             (      exbasic.asm):01427                   BSR  LB02F          ; FILL INPUT BUFFER FROM CONSOLE IN
E2EA 9F83             (      exbasic.asm):01428         LB069     STX  CHARAD         ; RESET BASIC'S INPUT POINTER
E2EC 9D7C             (      exbasic.asm):01429                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
E2EE D606             (      exbasic.asm):01430                   LDB  VALTYP         ; * CHECK VARIABLE TYPE AND
E2F0 2723             (      exbasic.asm):01431                   BEQ  LB098          ; * BRANCH IF NUMERIC
                      (      exbasic.asm):01432         * READ/INPUT A STRING VARIABLE
E2F2 9E83             (      exbasic.asm):01433                   LDX  CHARAD         ; LOAD X WITH CURRENT BASIC INPUT POINTER
E2F4 9701             (      exbasic.asm):01434                   STA  CHARAC         ; SAVE CURRENT INPUT CHARACTER
E2F6 8122             (      exbasic.asm):01435                   CMPA #'"            ; CHECK FOR STRING DELIMITER
E2F8 270E             (      exbasic.asm):01436                   BEQ  LB08B          ; BRANCH IF STRING DELIMITER
E2FA 301F             (      exbasic.asm):01437                   LEAX -1,X           ; BACK UP POINTER
E2FC 4F               (      exbasic.asm):01438                   CLRA                ; * ZERO = END OF LINE CHARACTER
E2FD 9701             (      exbasic.asm):01439                   STA  CHARAC         ; * SAVE AS TERMINATOR
E2FF BDDC24           (      exbasic.asm):01440                   JSR  LA35F          ; SET UP PRINT PARAMETERS
E302 863A             (      exbasic.asm):01441                   LDA  #':            ; END OF SUBLINE CHARACTER
E304 9701             (      exbasic.asm):01442                   STA  CHARAC         ; SAVE AS TERMINATOR I
E306 862C             (      exbasic.asm):01443                   LDA  #',            ; COMMA
E308 9702             (      exbasic.asm):01444         LB08B     STA  ENDCHR         ; SAVE AS TERMINATOR 2
E30A BDE796           (      exbasic.asm):01445                   JSR  LB51E          ; STRIP A STRING FROM THE INPUT BUFFER
E30D BDE4C6           (      exbasic.asm):01446                   JSR  LB249          ; MOVE INPUT POINTER TO END OF STRING
E310 BDE245           (      exbasic.asm):01447                   JSR  LAFA4          ; PUT A STRING INTO THE STRING SPACE IF NECESSARY
E313 2006             (      exbasic.asm):01448                   BRA  LB09E          ; CHECK FOR ANOTHER DATA ITEM
                      (      exbasic.asm):01449         * SAVE A NUMERIC VALUE IN A READ OR INPUT DATA ITEM
E315 BDEF4F           (      exbasic.asm):01450         LB098     JSR  LBD12          ; CONVERT AN ASCII STRING TO FP NUMBER
E318 BDEE70           (      exbasic.asm):01451                   JSR  LBC33          ; PACK FPA0 AND STORE IT IN ADDRESS IN VARDES -
                      (      exbasic.asm):01452         *                             ; INPUT OR READ DATA ITEM
E31B 9D82             (      exbasic.asm):01453         LB09E     JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E31D 2706             (      exbasic.asm):01454                   BEQ  LB0A8          ; BRANCH IF END OF LINE
E31F 812C             (      exbasic.asm):01455                   CMPA #',            ; CHECK FOR A COMMA
E321 1026FF52         (      exbasic.asm):01456                   LBNE LAFD6          ; BAD FILE DATA' ERROR OR RETRY
E325 9E83             (      exbasic.asm):01457         LB0A8     LDX  CHARAD         ; * GET CURRENT INPUT
E327 9F35             (      exbasic.asm):01458                   STX  DATTMP         ; * POINTER (USED AS A DATA POINTER) AND SAVE IT
E329 9E2B             (      exbasic.asm):01459                   LDX  BINVAL         ; * RESET INPUT POINTER TO INPUT OR
E32B 9F83             (      exbasic.asm):01460                   STX  CHARAD         ; * READ STATEMENT
E32D 9D82             (      exbasic.asm):01461                   JSR  GETCCH         ; GET CURRENT CHARACTER FROM BASIC
E32F 2721             (      exbasic.asm):01462                   BEQ  LB0D5          ; BRANCH IF END OF LINE - EXIT COMMAND
E331 BDE4EA           (      exbasic.asm):01463                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
E334 209C             (      exbasic.asm):01464                   BRA  LB04E          ; GET ANOTHER INPUT OR READ ITEM
                      (      exbasic.asm):01465         * SEARCH FROM ADDRESS IN X FOR
                      (      exbasic.asm):01466         * 1ST OCCURENCE OF THE TOKEN FOR DATA
E336 9F83             (      exbasic.asm):01467         LB0B9     STX  CHARAD         ; RESET BASIC'S INPUT POINTER
E338 BDE189           (      exbasic.asm):01468                   JSR  LAEE8          ; SEARCH FOR END OF CURRENT LINE OR SUBLINE
E33B 3001             (      exbasic.asm):01469                   LEAX 1,X            ; MOVE X ONE PAST END OF LINE
E33D 4D               (      exbasic.asm):01470                   TSTA                ; CHECK FOR END OF LINE
E33E 260A             (      exbasic.asm):01471                   BNE  LB0CD          ; BRANCH IF END OF SUBLINE
E340 C606             (      exbasic.asm):01472                   LDB  #2*3           ; 'OUT OF DATA' ERROR
E342 EE81             (      exbasic.asm):01473                   LDU  ,X++           ; GET NEXT 2 CHARACTERS
E344 2741             (      exbasic.asm):01474                   BEQ  LB10A          ; 'OD' ERROR IF END OF PROGRAM
E346 EC81             (      exbasic.asm):01475                   LDD  ,X++           ; GET BASIC LINE NUMBER AND
E348 DD31             (      exbasic.asm):01476                   STD  DATTXT         ; SAVE IT IN DATTXT
E34A A684             (      exbasic.asm):01477         LB0CD     LDA  ,X             ; GET AN INPUT CHARACTER
E34C 8186             (      exbasic.asm):01478                   CMPA #TOK_DATA      ; DATA TOKEN?
E34E 26E6             (      exbasic.asm):01479                   BNE  LB0B9          ; NO - KEEP LOOKING
E350 2098             (      exbasic.asm):01480                   BRA  LB069          ; YES
                      (      exbasic.asm):01481         * EXIT READ AND INPUT COMMANDS
E352 9E35             (      exbasic.asm):01482         LB0D5     LDX  DATTMP         ; GET DATA POINTER
E354 D609             (      exbasic.asm):01483                   LDB  INPFLG         ; * CHECK INPUT FLAG
E356 1026FD3A         (      exbasic.asm):01484                   LBNE LADE8          ; * SAVE NEW DATA POINTER IF READ
E35A A684             (      exbasic.asm):01485                   LDA  ,X             ; = CHECK NEXT CHARACTER IN 'INPUT' BUFFER
E35C 2706             (      exbasic.asm):01486                   BEQ  LB0E7          ; =
E35E 8EE364           (      exbasic.asm):01487                   LDX  #LB0E8-1       ; POINT X TO '?EXTRA IGNORED'
E361 7EEBD9           (      exbasic.asm):01488                   JMP  LB99C          ; PRINT THE MESSAGE
E364 39               (      exbasic.asm):01489         LB0E7     RTS
                      (      exbasic.asm):01490         
E365 3F45585452412049 (      exbasic.asm):01491         LB0E8     FCC  "?EXTRA IGNORED" ; ?EXTRA IGNORED MESSAGE
     474E4F524544
                      (      exbasic.asm):01492         
                      (      exbasic.asm):01493         
E373 0D00             (      exbasic.asm):01494                   FCB  CR,$00
                      (      exbasic.asm):01495         
                      (      exbasic.asm):01496         * NEXT
E375 2604             (      exbasic.asm):01497         NEXT      BNE  LB0FE          ; BRANCH IF ARGUMENT GIVEN
E377 9E74             (      exbasic.asm):01498                   LDX  ZERO           ; X = 0: DEFAULT FOR NO ARGUMENT
E379 2003             (      exbasic.asm):01499                   BRA  LB101
E37B BDE5CF           (      exbasic.asm):01500         LB0FE     JSR  LB357          ; EVALUATE AN ALPHA EXPRESSION
E37E 9F3B             (      exbasic.asm):01501         LB101     STX  VARDES         ; SAVE VARIABLE DESCRIPTOR POINTER
E380 BDDEAA           (      exbasic.asm):01502                   JSR  LABF9          ; GO SCAN FOR 'FOR/NEXT' DATA ON STACK
E383 2704             (      exbasic.asm):01503                   BEQ  LB10C          ; BRANCH IF DATA FOUND
E385 C600             (      exbasic.asm):01504                   LDB  #0             ; 'NEXT WITHOUT FOR' ERROR (SHOULD BE CLRB)
E387 2047             (      exbasic.asm):01505         LB10A     BRA  LB153          ; PROCESS ERROR
E389 1F14             (      exbasic.asm):01506         LB10C     TFR  X,S            ; POINT S TO START OF 'FOR/NEXT' DATA
E38B 3003             (      exbasic.asm):01507                   LEAX 3,X            ; POINT X TO FP VALUE OF STEP
E38D BDEE51           (      exbasic.asm):01508                   JSR  LBC14          ; COPY A FP NUMBER FROM (X) TO FPA0
E390 A668             (      exbasic.asm):01509                   LDA  8,S            ; GET THE DIRECTION OF STEP
E392 9754             (      exbasic.asm):01510                   STA  FP0SGN         ; SAVE IT AS THE SIGN OF FPA0
E394 9E3B             (      exbasic.asm):01511                   LDX  VARDES         ; POINT (X) TO INDEX VARIABLE DESCRIPTOR
E396 BDEBFF           (      exbasic.asm):01512                   JSR  LB9C2          ; ADD (X) TO FPA0 (STEP TO INDEX)
E399 BDEE70           (      exbasic.asm):01513                   JSR  LBC33          ; PACK FPA0 AND STORE IT IN ADDRESS
                      (      exbasic.asm):01514         *                             ; CONTAINED IN VARDES
E39C 3069             (      exbasic.asm):01515                   LEAX 9,S            ; POINT (X) TO TERMINAL VALUE OF INDEX
E39E BDEED3           (      exbasic.asm):01516                   JSR  LBC96          ; COMPARE CURRENT INDEX VALUE TO TERMINAL VALUE OF INDEX
E3A1 E068             (      exbasic.asm):01517                   SUBB 8,S            ; ACCB = 0 IF TERMINAL VALUE=CURRENT VALUE AND STEP=0 OR IF
                      (      exbasic.asm):01518         *                             ; STEP IS POSITIVE AND CURRENT VALUE>TERMINAL VALUE OR
                      (      exbasic.asm):01519         *                             ; STEP IS NEGATIVE AND CURRENT VALUE<TERMINAL VALUE
E3A3 270C             (      exbasic.asm):01520                   BEQ  LB134          ; BRANCH IF 'FOR/NEXT' LOOP DONE
E3A5 AE6E             (      exbasic.asm):01521                   LDX  14,S           ; * GET LINE NUMBER AND
E3A7 9F68             (      exbasic.asm):01522                   STX  CURLIN         ; * BASIC POINTER OF
E3A9 AEE810           (      exbasic.asm):01523                   LDX  16,S           ; * STATEMENT FOLLOWING THE
E3AC 9F83             (      exbasic.asm):01524                   STX  CHARAD         ; * PROPER FOR STATEMENT
E3AE 7EE033           (      exbasic.asm):01525         LB131     JMP  LAD9E          ; JUMP BACK TO COMMAND INTEPR. LOOP
E3B1 32E812           (      exbasic.asm):01526         LB134     LEAS 18,S           ; PULL THE 'FOR-NEXT' DATA OFF THE STACK
E3B4 9D82             (      exbasic.asm):01527                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E3B6 812C             (      exbasic.asm):01528                   CMPA #',            ; CHECK FOR ANOTHER ARGUMENT
E3B8 26F4             (      exbasic.asm):01529                   BNE  LB131          ; RETURN IF NONE
E3BA 9D7C             (      exbasic.asm):01530                   JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
E3BC 8DBD             (      exbasic.asm):01531                   BSR  LB0FE          ; BSR SIMULATES A CALL TO 'NEXT' FROM COMMAND LOOP
                      (      exbasic.asm):01532         
                      (      exbasic.asm):01533         
E3BE 8D13             (      exbasic.asm):01534         LB141     BSR  LB156          ; EVALUATE EXPRESSION AND DO A TYPE CHECK FOR NUMERIC
E3C0 1CFE             (      exbasic.asm):01535         LB143     ANDCC #$FE          ; CLEAR CARRY FLAG
E3C2 7D               (      exbasic.asm):01536         LB145     FCB  $7D            ; OP CODE OF TST $1A01 - SKIP TWO BYTES (DO
                      (      exbasic.asm):01537         *              ; NOT CHANGE CARRY FLAG)
E3C3 1A01             (      exbasic.asm):01538         LB146     ORCC #1             ; SET CARRY
                      (      exbasic.asm):01539         
                      (      exbasic.asm):01540         * STRING TYPE MODE CHECK - IF ENTERED AT LB146 THEN VALTYP PLUS IS 'TM' ERROR
                      (      exbasic.asm):01541         * NUMERIC TYPE MODE CHECK - IF ENTERED AT LB143 THEN VALTYP MINUS IS 'TM' ERROR
                      (      exbasic.asm):01542         * IF ENTERED AT LB148, A TYPE CHECK IS DONE ON VALTYP
                      (      exbasic.asm):01543         * IF ENTERED WITH CARRY SET, THEN 'TM' ERROR IF NUMERIC
                      (      exbasic.asm):01544         * IF ENTERED WITH CARRY CLEAR, THEN 'TM' ERROR IF STRING.
E3C5 0D06             (      exbasic.asm):01545         LB148     TST  VALTYP         ; TEST TYPE FLAG; DO NOT CHANGE CARRY
E3C7 2503             (      exbasic.asm):01546                   BCS  LB14F          ; BRANCH IF STRING
E3C9 2A99             (      exbasic.asm):01547                   BPL  LB0E7          ; RETURN ON PLUS
E3CB 8C               (      exbasic.asm):01548                   FCB  SKP2           ; SKIP 2 BYTES - 'TM' ERROR
E3CC 2B96             (      exbasic.asm):01549         LB14F     BMI  LB0E7          ; RETURN ON MINUS
E3CE C618             (      exbasic.asm):01550                   LDB  #12*2          ; 'TYPE M1SMATCH' ERROR
E3D0 7EDEF7           (      exbasic.asm):01551         LB153     JMP  LAC46          ; PROCESS ERROR
                      (      exbasic.asm):01552         * EVALUATE EXPRESSION
E3D3 8D6E             (      exbasic.asm):01553         LB156     BSR  LB1C6          ; BACK UP INPUT POINTER
E3D5 4F               (      exbasic.asm):01554         LB158     CLRA                ; END OF OPERATION PRECEDENCE FLAG
E3D6 8C               (      exbasic.asm):01555                   FCB  SKP2           ; SKIP TWO BYTES
E3D7 3404             (      exbasic.asm):01556         LB15A     PSHS B              ; SAVE FLAG (RELATIONAL OPERATOR FLAG)
E3D9 3402             (      exbasic.asm):01557                   PSHS A              ; SAVE FLAG (PRECEDENCE FLAG)
E3DB C601             (      exbasic.asm):01558                   LDB  #1             ; *
E3DD BDDEE4           (      exbasic.asm):01559                   JSR  LAC33          ; * SEE IF ROOM IN FREE RAM FOR (B) WORDS
E3E0 BDE4A0           (      exbasic.asm):01560                   JSR  LB223          ; GO EVALUATE AN EXPRESSION
E3E3 0F3F             (      exbasic.asm):01561                   CLR  TRELFL         ; RESET RELATIONAL OPERATOR FLAG
E3E5 9D82             (      exbasic.asm):01562         LB168     JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
                      (      exbasic.asm):01563         * CHECK FOR RELATIONAL OPERATORS
E3E7 80AD             (      exbasic.asm):01564         LB16A     SUBA #TOK_GREATER   ; TOKEN FOR >
E3E9 2513             (      exbasic.asm):01565                   BCS  LB181          ; BRANCH IF LESS THAN RELATIONAL OPERATORS
E3EB 8103             (      exbasic.asm):01566                   CMPA #3             ; *
E3ED 240F             (      exbasic.asm):01567                   BCC  LB181          ; * BRANCH IF GREATER THAN RELATIONAL OPERATORS
E3EF 8101             (      exbasic.asm):01568                   CMPA #1             ; SET CARRY IF '>'
E3F1 49               (      exbasic.asm):01569                   ROLA                ; CARRY TO BIT 0
E3F2 983F             (      exbasic.asm):01570                   EORA TRELFL         ; * CARRY SET IF
E3F4 913F             (      exbasic.asm):01571                   CMPA TRELFL         ; * TRELFL = ACCA
E3F6 2564             (      exbasic.asm):01572                   BCS  LB1DF          ; BRANCH IF SYNTAX ERROR : == << OR >>
E3F8 973F             (      exbasic.asm):01573                   STA  TRELFL         ; BIT 0: >, BIT 1 =, BIT 2: <
E3FA 9D7C             (      exbasic.asm):01574                   JSR  GETNCH         ; GET AN INPUT CHARACTER
E3FC 20E9             (      exbasic.asm):01575                   BRA  LB16A          ; CHECK FOR ANOTHER RELATIONAL OPERATOR
                      (      exbasic.asm):01576         *
E3FE D63F             (      exbasic.asm):01577         LB181     LDB  TRELFL         ; GET RELATIONAL OPERATOR FLAG
E400 2633             (      exbasic.asm):01578                   BNE  LB1B8          ; BRANCH IF RELATIONAL COMPARISON
E402 1024006B         (      exbasic.asm):01579                   LBCC LB1F4          ; BRANCH IF > RELATIONAL OPERATOR
E406 8B07             (      exbasic.asm):01580                   ADDA #7             ; SEVEN ARITHMETIC/LOGICAL OPERATORS
E408 2467             (      exbasic.asm):01581                   BCC  LB1F4          ; BRANCH IF NOT ARITHMETIC/LOGICAL OPERATOR
E40A 9906             (      exbasic.asm):01582                   ADCA VALTYP         ; ADD CARRY, NUMERIC FLAG AND MODIFIED TOKEN NUMBER
E40C 10270477         (      exbasic.asm):01583                   LBEQ LB60F          ; BRANCH IF VALTYP = FF, AND ACCA = '+' TOKEN -
                      (      exbasic.asm):01584         *                             ; CONCATENATE TWO STRINGS
E410 89FF             (      exbasic.asm):01585                   ADCA #-1            ; RESTORE ARITHMETIC/LOGICAL OPERATOR NUMBER
E412 3402             (      exbasic.asm):01586                   PSHS A              ; * STORE OPERATOR NUMBER ON STACK; MULTIPLY IT BY 2
E414 48               (      exbasic.asm):01587                   ASLA                ; * THEN ADD THE STORED STACK DATA = MULTIPLY
E415 ABE0             (      exbasic.asm):01588                   ADDA ,S+            ; * X 3; 3 BYTE/TABLE ENTRY
E417 8EDCFC           (      exbasic.asm):01589                   LDX  #LAA51         ; JUMP TABLE FOR ARITHMETIC & LOGICAL OPERATORS
E41A 3086             (      exbasic.asm):01590                   LEAX A,X            ; POINT X TO PROPER TABLE
E41C 3502             (      exbasic.asm):01591         LB19F     PULS A              ; GET PRECEDENCE FLAG FROM STACK
E41E A184             (      exbasic.asm):01592                   CMPA ,X             ; COMPARE TO CURRENT OPERATOR
E420 2455             (      exbasic.asm):01593                   BCC  LB1FA          ; BRANCH IF STACK OPERATOR > CURRENT OPERATOR
E422 8D9C             (      exbasic.asm):01594                   BSR  LB143          ; 'TM' ERROR IF VARIABLE TYPE = STRING
                      (      exbasic.asm):01595         
                      (      exbasic.asm):01596         * OPERATION BEING PROCESSED IS OF HIGHER PRECEDENCE THAN THE PREVIOUS OPERATION.
E424 3402             (      exbasic.asm):01597         LB1A7     PSHS A              ; SAVE PRECEDENCE FLAG
E426 8D29             (      exbasic.asm):01598                   BSR  LB1D4          ; PUSH OPERATOR ROUTINE ADDRESS AND FPA0 ONTO STACK
E428 9E3D             (      exbasic.asm):01599                   LDX  RELPTR         ; GET POINTER TO ARITHMETIC/LOGICAL TABLE ENTRY FOR
                      (      exbasic.asm):01600         *                             ; LAST CALCULATED OPERATION
E42A 3502             (      exbasic.asm):01601                   PULS A              ; GET PRECEDENCE FLAG OF PREVIOUS OPERATION
E42C 261D             (      exbasic.asm):01602                   BNE  LB1CE          ; BRANCH IF NOT END OF OPERATION
E42E 4D               (      exbasic.asm):01603                   TSTA                ; CHECK TYPE OF PRECEDENCE FLAG
E42F 1027006A         (      exbasic.asm):01604                   LBEQ LB220          ; BRANCH IF END OF EXPRESSION OR SUB-EXPRESSION
E433 204B             (      exbasic.asm):01605                   BRA  LB203          ; EVALUATE AN OPERATION
                      (      exbasic.asm):01606         
E435 0806             (      exbasic.asm):01607         LB1B8     ASL  VALTYP         ; BIT 7 OF TYPE FLAG TO CARRY
E437 59               (      exbasic.asm):01608                   ROLB                ; SHIFT RELATIONAL FLAG LEFT - VALTYP TO BIT 0
E438 8D09             (      exbasic.asm):01609                   BSR  LB1C6          ; MOVE THE INPUT POINTER BACK ONE
E43A 8EE448           (      exbasic.asm):01610                   LDX  #LB1CB         ; POINT X TO RELATIONAL COMPARISON JUMP TABLE
E43D D73F             (      exbasic.asm):01611                   STB  TRELFL         ; SAVE RELATIONAL COMPARISON DATA
E43F 0F06             (      exbasic.asm):01612                   CLR  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
E441 20D9             (      exbasic.asm):01613                   BRA  LB19F          ; PERFORM OPERATION OR SAVE ON STACK
                      (      exbasic.asm):01614         
E443 9E83             (      exbasic.asm):01615         LB1C6     LDX  CHARAD         ; * GET BASIC'S INPUT POINTER AND
E445 7EE15C           (      exbasic.asm):01616                   JMP  LAEBB          ; * MOVE IT BACK ONE
                      (      exbasic.asm):01617         * RELATIONAL COMPARISON JUMP TABLE
E448 64               (      exbasic.asm):01618         LB1CB     FCB  $64            ; RELATIONAL COMPARISON FLAG
E449 E56C             (      exbasic.asm):01619         LB1CC     FDB  LB2F4          ; JUMP ADDRESS
                      (      exbasic.asm):01620         
E44B A184             (      exbasic.asm):01621         LB1CE     CMPA ,X             ; COMPARE PRECEDENCE OF LAST DONE OPERATION TO
                      (      exbasic.asm):01622         *         NEXT TO BE DONE OPERATION
E44D 2431             (      exbasic.asm):01623                   BCC  LB203          ; EVALUATE OPERATION IF LOWER PRECEDENCE
E44F 20D3             (      exbasic.asm):01624                   BRA  LB1A7          ; PUSH OPERATION DATA ON STACK IF HIGHER PRECEDENCE
                      (      exbasic.asm):01625         
                      (      exbasic.asm):01626         * PUSH OPERATOR EVALUATION ADDRESS AND FPA0 ONTO STACK AND EVALUATE ANOTHER EXPR
E451 EC01             (      exbasic.asm):01627         LB1D4     LDD  1,X            ; GET ADDRESS OF OPERATOR ROUTINE
E453 3406             (      exbasic.asm):01628                   PSHS B,A            ; SAVE IT ON THE STACK
E455 8D08             (      exbasic.asm):01629                   BSR  LB1E2          ; PUSH FPA0 ONTO STACK
E457 D63F             (      exbasic.asm):01630                   LDB  TRELFL         ; GET BACK RELATIONAL OPERATOR FLAG
E459 16FF7B           (      exbasic.asm):01631                   LBRA LB15A          ; EVALUATE ANOTHER EXPRESSION
E45C 7EE4F4           (      exbasic.asm):01632         LB1DF     JMP  LB277          ; 'SYNTAX ERROR'
                      (      exbasic.asm):01633         * PUSH FPA0 ONTO THE STACK. ,S   = EXPONENT
                      (      exbasic.asm):01634         * 1-2,S =HIGH ORDER MANTISSA 3-4,S = LOW ORDER MANTISSA
                      (      exbasic.asm):01635         * 5,S = SIGN RETURN WITH PRECEDENCE CODE IN ACCA
E45F D654             (      exbasic.asm):01636         LB1E2     LDB  FP0SGN         ; GET SIGN OF FPA0 MANTISSA
E461 A684             (      exbasic.asm):01637                   LDA  ,X             ; GET PRECEDENCE CODE TO ACCA
E463 3520             (      exbasic.asm):01638         LB1E6     PULS Y              ; GET RETURN ADDRESS FROM STACK & PUT IT IN Y
E465 3404             (      exbasic.asm):01639                   PSHS B              ; SAVE ACCB ON STACK
E467 D64F             (      exbasic.asm):01640         LB1EA     LDB  FP0EXP         ; * PUSH FPA0 ONTO THE STACK
E469 9E50             (      exbasic.asm):01641                   LDX  FPA0           ; *
E46B DE52             (      exbasic.asm):01642                   LDU  FPA0+2         ; *
E46D 3454             (      exbasic.asm):01643                   PSHS U,X,B          ; *
E46F 6EA4             (      exbasic.asm):01644                   JMP  ,Y             ; JUMP TO ADDRESS IN Y
                      (      exbasic.asm):01645         
                      (      exbasic.asm):01646         * BRANCH HERE IF NON-OPERATOR CHARACTER FOUND - USUALLY ')' OR END OF LINE
E471 9E74             (      exbasic.asm):01647         LB1F4     LDX  ZERO           ; POINT X TO DUMMY VALUE (ZERO)
E473 A6E0             (      exbasic.asm):01648                   LDA  ,S+            ; GET PRECEDENCE FLAG FROM STACK
E475 2726             (      exbasic.asm):01649                   BEQ  LB220          ; BRANCH IF END OF EXPRESSION
E477 8164             (      exbasic.asm):01650         LB1FA     CMPA #$64           ; * CHECK FOR RELATIONAL COMPARISON FLAG
E479 2703             (      exbasic.asm):01651                   BEQ  LB201          ; * AND BRANCH IF RELATIONAL COMPARISON
E47B BDE3C0           (      exbasic.asm):01652                   JSR  LB143          ; 'TM' ERROR IF VARIABLE TYPE = STRING
E47E 9F3D             (      exbasic.asm):01653         LB201     STX  RELPTR         ; SAVE POINTER TO OPERATOR ROUTINE
E480 3504             (      exbasic.asm):01654         LB203     PULS B              ; GET RELATIONAL OPERATOR FLAG FROM STACK
E482 815A             (      exbasic.asm):01655                   CMPA #$5A           ; CHECK FOR 'NOT' OPERATOR
E484 2719             (      exbasic.asm):01656                   BEQ  LB222          ; RETURN IF 'NOT' - NO RELATIONAL COMPARISON
E486 817D             (      exbasic.asm):01657                   CMPA #$7D           ; CHECK FOR NEGATION (UNARY) FLAG
E488 2715             (      exbasic.asm):01658                   BEQ  LB222          ; RETURN IF NEGATION - NO RELATIONAL COMPARISON
                      (      exbasic.asm):01659         
                      (      exbasic.asm):01660         * EVALUATE AN OPERATION. EIGHT BYTES WILL BE STORED ON STACK, FIRST SIX BYTES
                      (      exbasic.asm):01661         * ARE A TEMPORARY FLOATING POINT RESULT THEN THE ADDRESS OF ROUTINE WHICH
                      (      exbasic.asm):01662         * WILL EVALUATE THE OPERATION. THE RTS AT END OF ROUTINE WILL VECTOR
                      (      exbasic.asm):01663         * TO EVALUATING ROUTINE.
E48A 54               (      exbasic.asm):01664                   LSRB                ; = ROTATE VALTYP BIT INTO CARRY
E48B D70A             (      exbasic.asm):01665                   STB  RELFLG         ; = FLAG AND SAVE NEW RELFLG
E48D 3552             (      exbasic.asm):01666                   PULS A,X,U          ; * PULL A FP VALUE OFF OF THE STACK
E48F 975C             (      exbasic.asm):01667                   STA  FP1EXP         ; * AND SAVE IT IN FPA1
E491 9F5D             (      exbasic.asm):01668                   STX  FPA1           ; *
E493 DF5F             (      exbasic.asm):01669                   STU  FPA1+2         ; *
E495 3504             (      exbasic.asm):01670                   PULS B              ; = GET MANTISSA SIGN AND
E497 D761             (      exbasic.asm):01671                   STB  FP1SGN         ; = SAVE IT IN FPA1
E499 D854             (      exbasic.asm):01672                   EORB FP0SGN         ; EOR IT WITH FPA1 MANTISSA SIGN
E49B D762             (      exbasic.asm):01673                   STB  RESSGN         ; SAVE IT IN RESULT SIGN BYTE
E49D D64F             (      exbasic.asm):01674         LB220     LDB  FP0EXP         ; GET EXPONENT OF FPA0
E49F 39               (      exbasic.asm):01675         LB222     RTS
                      (      exbasic.asm):01676         
E4A0 BDF6ED           (      exbasic.asm):01677         LB223     JSR  XVEC15         ; CALL EXTENDED BASIC ADD-IN
E4A3 0F06             (      exbasic.asm):01678                   CLR  VALTYP         ; INITIALIZE TYPE FLAG TO NUMERIC
E4A5 9D7C             (      exbasic.asm):01679                   JSR  GETNCH         ; GET AN INPUT CHAR
E4A7 2403             (      exbasic.asm):01680                   BCC  LB22F          ; BRANCH IF NOT NUMERIC
E4A9 7EEF4F           (      exbasic.asm):01681         LB22C     JMP  LBD12          ; CONVERT ASCII STRING TO FLOATING POINT -
                      (      exbasic.asm):01682         *         RETURN RESULT IN FPA0
                      (      exbasic.asm):01683         * PROCESS A NON NUMERIC FIRST CHARACTER
E4AC BDE61A           (      exbasic.asm):01684         LB22F     JSR  LB3A2          ; SET CARRY IF NOT ALPHA
E4AF 2450             (      exbasic.asm):01685                   BCC  LB284          ; BRANCH IF ALPHA CHARACTER
E4B1 812E             (      exbasic.asm):01686                   CMPA #'.            ; IS IT '.' (DECIMAL POINT)?
E4B3 27F4             (      exbasic.asm):01687                   BEQ  LB22C          ; CONVERT ASCII STRING TO FLOATING POINT
E4B5 81A7             (      exbasic.asm):01688                   CMPA #TOK_MINUS     ; MINUS TOKEN
E4B7 2740             (      exbasic.asm):01689                   BEQ  LB27C          ; YES - GO PROCESS THE MINUS OPERATOR
E4B9 81A6             (      exbasic.asm):01690                   CMPA #TOK_PLUS      ; PLUS TOKEN
E4BB 27E3             (      exbasic.asm):01691                   BEQ  LB223          ; YES - GET ANOTHER CHARACTER
E4BD 8122             (      exbasic.asm):01692                   CMPA #'"            ; STRING DELIMITER?
E4BF 260A             (      exbasic.asm):01693                   BNE  LB24E          ; NO
E4C1 9E83             (      exbasic.asm):01694         LB244     LDX  CHARAD         ; CURRENT BASIC POINTER TO X
E4C3 BDE790           (      exbasic.asm):01695                   JSR  LB518          ; SAVE STRING ON STRING STACK
E4C6 9E64             (      exbasic.asm):01696         LB249     LDX  COEFPT         ; * GET ADDRESS OF END OF STRING AND
E4C8 9F83             (      exbasic.asm):01697                   STX  CHARAD         ; * PUT BASIC'S INPUT POINTER THERE
E4CA 39               (      exbasic.asm):01698                   RTS
E4CB 81A3             (      exbasic.asm):01699         LB24E     CMPA #TOK_NOT       ; NOT TOKEN?
E4CD 260D             (      exbasic.asm):01700                   BNE  LB25F          ; NO
                      (      exbasic.asm):01701         * PROCESS THE NOT OPERATOR
E4CF 865A             (      exbasic.asm):01702                   LDA  #$5A           ; 'NOT' PRECEDENCE FLAG
E4D1 BDE3D7           (      exbasic.asm):01703                   JSR  LB15A          ; PROCESS OPERATION FOLLOWING 'NOT'
E4D4 BDE665           (      exbasic.asm):01704                   JSR  INTCNV         ; CONVERT FPA0 TO INTEGER IN ACCD
E4D7 43               (      exbasic.asm):01705                   COMA                ; * 'NOT' THE INTEGER
E4D8 53               (      exbasic.asm):01706                   COMB                ; *
E4D9 7EE76C           (      exbasic.asm):01707                   JMP  GIVABF         ; CONVERT ACCD TO FLOATING POINT (FPA0)
E4DC 4C               (      exbasic.asm):01708         LB25F     INCA                ; CHECK FOR TOKENS PRECEEDED BY $FF
E4DD 272E             (      exbasic.asm):01709                   BEQ  LB290          ; IT WAS PRECEEDED BY $FF
E4DF 8D06             (      exbasic.asm):01710         LB262     BSR  LB26A          ; SYNTAX CHECK FOR A '('
E4E1 BDE3D3           (      exbasic.asm):01711                   JSR  LB156          ; EVALUATE EXPRESSIONS WITHIN PARENTHESES AT
                      (      exbasic.asm):01712         *         HIGHEST PRECEDENCE
E4E4 C629             (      exbasic.asm):01713         LB267     LDB  #')            ; SYNTAX CHECK FOR ')'
E4E6 8C               (      exbasic.asm):01714                   FCB  SKP2           ; SKIP 2 BYTES
E4E7 C628             (      exbasic.asm):01715         LB26A     LDB  #'(            ; SYNTAX CHECK FOR '('
E4E9 8C               (      exbasic.asm):01716                   FCB  SKP2           ; SKIP 2 BYTES
E4EA C62C             (      exbasic.asm):01717         LB26D     LDB  #',            ; SYNTAX CHECK FOR COMMA
E4EC E19F0083         (      exbasic.asm):01718         LB26F     CMPB [CHARAD]       ; * COMPARE ACCB TO CURRENT INPUT
E4F0 2602             (      exbasic.asm):01719                   BNE  LB277          ; * CHARACTER - SYNTAX ERROR IF NO MATCH
E4F2 0E7C             (      exbasic.asm):01720                   JMP  GETNCH         ; GET A CHARACTER FROM BASIC
E4F4 C602             (      exbasic.asm):01721         LB277     LDB  #2*1           ; SYNTAX ERROR
E4F6 7EDEF7           (      exbasic.asm):01722                   JMP  LAC46          ; JUMP TO ERROR HANDLER
                      (      exbasic.asm):01723         
                      (      exbasic.asm):01724         * PROCESS THE MINUS (UNARY) OPERATOR
E4F9 867D             (      exbasic.asm):01725         LB27C     LDA  #$7D           ; MINUS (UNARY) PRECEDENCE FLAG
E4FB BDE3D7           (      exbasic.asm):01726                   JSR  LB15A          ; PROCESS OPERATION FOLLOWING 'UNARY' NEGATION
E4FE 7EF126           (      exbasic.asm):01727                   JMP  LBEE9          ; CHANGE SIGN OF FPA0 MANTISSA
                      (      exbasic.asm):01728         
                      (      exbasic.asm):01729         * EVALUATE ALPHA EXPRESSION
E501 BDE5CF           (      exbasic.asm):01730         LB284     JSR  LB357          ; FIND THE DESCRIPTOR ADDRESS OF A VARIABLE
E504 9F52             (      exbasic.asm):01731         LB287     STX  FPA0+2         ; SAVE DESCRIPTOR ADDRESS IN FPA0
E506 9606             (      exbasic.asm):01732                   LDA  VALTYP         ; TEST VARIABLE TYPE
E508 2695             (      exbasic.asm):01733                   BNE  LB222          ; RETURN IF STRING
E50A 7EEE51           (      exbasic.asm):01734                   JMP  LBC14          ; COPY A FP NUMBER FROM (X) TO FPA0
                      (      exbasic.asm):01735         
                      (      exbasic.asm):01736         * EVALUATING A SECONDARY TOKEN
E50D 9D7C             (      exbasic.asm):01737         LB290     JSR  GETNCH         ; GET AN INPUT CHARACTER (SECONDARY TOKEN)
E50F 1F89             (      exbasic.asm):01738                   TFR  A,B            ; SAVE IT IN ACCB
E511 58               (      exbasic.asm):01739                   ASLB                ; X2 & BET RID OF BIT 7
E512 9D7C             (      exbasic.asm):01740                   JSR  GETNCH         ; GET ANOTHER INPUT CHARACTER
E514 C11B             (      exbasic.asm):01741                   CMPB #NUM_SEC_FNS-1*2 ; 29 SECONDARY FUNCTIONS - 1
E516 2303             (      exbasic.asm):01742                   BLS  LB29F          ; BRANCH IF COLOR BASIC TOKEN
E518 7EE4F4           (      exbasic.asm):01743                   JMP  LB277          ; SYNTAX ERROR
E51B 3404             (      exbasic.asm):01744         LB29F     PSHS B              ; SAVE TOKEN OFFSET ON STACK
E51D C195             (      exbasic.asm):01745                   CMPB #TOK_LEFT-$80*2 ; CHECK FOR TOKEN WITH AN ARGUMENT
E51F 251E             (      exbasic.asm):01746                   BCS  LB2C7          ; DO SECONDARIES STRING$ OR LESS
E521 C198             (      exbasic.asm):01747                   CMPB #TOK_INKEY-$80*2 ; *
E523 241C             (      exbasic.asm):01748                   BCC  LB2C9          ; * DO SECONDARIES $92 (INKEY$) OR >
E525 8DC0             (      exbasic.asm):01749                   BSR  LB26A          ; SYNTAX CHECK FOR A '('
E527 A6E4             (      exbasic.asm):01750                   LDA  ,S             ; GET TOKEN NUMBER
                      (      exbasic.asm):01751         * DO SECONDARIES (LEFT$, RIGHT$, MID$)
E529 BDE3D3           (      exbasic.asm):01752                   JSR  LB156          ; EVALUATE FIRST STRING IN ARGUMENT
E52C 8DBC             (      exbasic.asm):01753                   BSR  LB26D          ; SYNTAX CHECK FOR A COMMA
E52E BDE3C3           (      exbasic.asm):01754                   JSR  LB146          ; 'TM' ERROR IF NUMERIC VARiABLE
E531 3502             (      exbasic.asm):01755                   PULS A              ; GET TOKEN OFFSET FROM STACK
E533 DE52             (      exbasic.asm):01756                   LDU  FPA0+2         ; POINT U TO STRING DESCRIPTOR
E535 3442             (      exbasic.asm):01757                   PSHS U,A            ; SAVE TOKEN OFFSET AND DESCRIPTOR ADDRESS
E537 BDE983           (      exbasic.asm):01758                   JSR  LB70B          ; EVALUATE FIRST NUMERIC ARGUMENT
E53A 3502             (      exbasic.asm):01759                   PULS A              ; GET TOKEN OFFSET FROM STACK
E53C 3406             (      exbasic.asm):01760                   PSHS B,A            ; SAVE TOKEN OFFSET AND NUMERIC ARGUMENT
E53E 8E               (      exbasic.asm):01761                   FCB  $8E            ; OP CODE OF LDX# - SKlP 2 BYTES
E53F 8D9E             (      exbasic.asm):01762         LB2C7     BSR  LB262          ; SYNTAX CHECK FOR A '('
E541 3504             (      exbasic.asm):01763         LB2C9     PULS B              ; GET TOKEN OFFSET
E543 BEDBEA           (      exbasic.asm):01764                   LDX  COMVEC+8       ; GET SECONDARY FUNCTION JUMP TABLE ADDRESS
E546 3A               (      exbasic.asm):01765         LB2CE     ABX                 ; ADD IN COMMAND OFFSET
                      (      exbasic.asm):01766         *
                      (      exbasic.asm):01767         * HERE IS WHERE WE BRANCH TO A SECONDARY FUNCTION
E547 AD94             (      exbasic.asm):01768                   JSR  [,X]           ; GO DO AN SECONDARY FUNCTION
E549 7EE3C0           (      exbasic.asm):01769                   JMP  LB143          ; 'TM' ERROR IF VARIABLE TYPE = STRING
                      (      exbasic.asm):01770         
                      (      exbasic.asm):01771         * LOGICAL OPERATOR 'OR' JUMPS HERE
E54C 86               (      exbasic.asm):01772         LB2D4     FCB  SKP1LD         ; SKIP ONE BYTE - 'OR' FLAG = $4F
                      (      exbasic.asm):01773         
                      (      exbasic.asm):01774         * LOGICAL OPERATOR 'AND' JUMPS HERE
E54D 4F               (      exbasic.asm):01775         LB2D5     CLRA                ; AND FLAG = 0
E54E 9703             (      exbasic.asm):01776                   STA  TMPLOC         ; AND/OR FLAG
E550 BDE665           (      exbasic.asm):01777                   JSR  INTCNV         ; CONVERT FPA0 INTO AN INTEGER IN ACCD
E553 DD01             (      exbasic.asm):01778                   STD  CHARAC         ; TEMP SAVE ACCD
E555 BDEE87           (      exbasic.asm):01779                   JSR  LBC4A          ; MOVE FPA1 TO FPA0
E558 BDE665           (      exbasic.asm):01780                   JSR  INTCNV         ; CONVERT FPA0 INTO AN INTEGER IN ACCD
E55B 0D03             (      exbasic.asm):01781                   TST  TMPLOC         ; CHECK AND/OR FLAG
E55D 2606             (      exbasic.asm):01782                   BNE  LB2ED          ; BRANCH IF OR
E55F 9401             (      exbasic.asm):01783                   ANDA CHARAC         ; * 'AND' ACCD WITH FPA0 INTEGER
E561 D402             (      exbasic.asm):01784                   ANDB ENDCHR         ; * STORED IN ENDCHR
E563 2004             (      exbasic.asm):01785                   BRA  LB2F1          ; CONVERT TO FP
E565 9A01             (      exbasic.asm):01786         LB2ED     ORA  CHARAC         ; * 'OR' ACCD WITH FPA0 INTEGER
E567 DA02             (      exbasic.asm):01787                   ORB  ENDCHR         ; * STORED IN CHARAC
E569 7EE76C           (      exbasic.asm):01788         LB2F1     JMP  GIVABF         ; CONVERT THE VALUE IN ACCD INTO A FP NUMBER
                      (      exbasic.asm):01789         
                      (      exbasic.asm):01790         * RELATIONAL COMPARISON PROCESS HANDLER
E56C BDE3C5           (      exbasic.asm):01791         LB2F4     JSR  LB148          ; 'TM' ERROR IF TYPE MISMATCH
E56F 2610             (      exbasic.asm):01792                   BNE  LB309          ; BRANCH IF STRING VARIABLE
E571 9661             (      exbasic.asm):01793                   LDA  FP1SGN         ; * 'PACK' THE MANTISSA
E573 8A7F             (      exbasic.asm):01794                   ORA  #$7F           ; * SIGN OF FPA1 INTO
E575 945D             (      exbasic.asm):01795                   ANDA FPA1           ; * BIT 7 OF THE
E577 975D             (      exbasic.asm):01796                   STA  FPA1           ; * MANTISSA MS BYTE
E579 8E005C           (      exbasic.asm):01797                   LDX  #FP1EXP        ; POINT X TO FPA1
E57C BDEED3           (      exbasic.asm):01798                   JSR  LBC96          ; COMPARE FPA0 TO FPA1
E57F 2036             (      exbasic.asm):01799                   BRA  LB33F          ; CHECK TRUTH OF RELATIONAL COMPARISON
                      (      exbasic.asm):01800         
                      (      exbasic.asm):01801         * RELATIONAL COMPARISON OF STRINGS
E581 0F06             (      exbasic.asm):01802         LB309     CLR  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
E583 0A3F             (      exbasic.asm):01803                   DEC  TRELFL         ; REMOVE STRING TYPE FLAG (BIT0=1 FOR STRINGS) FROM THE
                      (      exbasic.asm):01804         *                             ; DESIRED RELATIONAL COMPARISON DATA
E585 BDE8CF           (      exbasic.asm):01805                   JSR  LB657          ; GET LENGTH AND ADDRESS OF STRING WHOSE
                      (      exbasic.asm):01806         *                             ; DESCRIPTOR ADDRESS IS IN THE BOTTOM OF FPA0
E588 D756             (      exbasic.asm):01807                   STB  STRDES         ; * SAVE LENGTH AND ADDRESS IN TEMPORARY
E58A 9F58             (      exbasic.asm):01808                   STX  STRDES+2       ; * DESCRIPTOR (STRING B)
E58C 9E5F             (      exbasic.asm):01809                   LDX  FPA1+2         ; = RETURN LENGTH AND ADDRESS OF STRING
E58E BDE8D1           (      exbasic.asm):01810                   JSR  LB659          ; = WHOSE DESCRIPTOR ADDRESS IS STORED IN FPA1+2
E591 9656             (      exbasic.asm):01811                   LDA  STRDES         ; LOAD ACCA WITH LENGTH OF STRING B
E593 3404             (      exbasic.asm):01812                   PSHS B              ; SAVE LENGTH A ON STACK
E595 A0E0             (      exbasic.asm):01813                   SUBA ,S+            ; SUBTRACT LENGTH A FROM LENGTH B
E597 2707             (      exbasic.asm):01814                   BEQ  LB328          ; BRANCH IF STRINGS OF EQUAL LENGTH
E599 8601             (      exbasic.asm):01815                   LDA  #1             ; ; TRUE FLAG
E59B 2403             (      exbasic.asm):01816                   BCC  LB328          ; TRUE IF LENGTH B > LENGTH A
E59D D656             (      exbasic.asm):01817                   LDB  STRDES         ; LOAD ACCB WITH LENGTH B
E59F 40               (      exbasic.asm):01818                   NEGA                ; SET FLAG = FALSE (1FF)
E5A0 9754             (      exbasic.asm):01819         LB328     STA  FP0SGN         ; SAVE TRUE/FALSE FLAG
E5A2 DE58             (      exbasic.asm):01820                   LDU  STRDES+2       ; POINT U TO START OF STRING
E5A4 5C               (      exbasic.asm):01821                   INCB                ; COMPENSATE FOR THE DECB BELOW
                      (      exbasic.asm):01822         * ENTER WITH ACCB CONTAINING LENGTH OF SHORTER STRING
E5A5 5A               (      exbasic.asm):01823         LB32D     DECB                ; DECREMENT SHORTER STRING LENGTH
E5A6 2604             (      exbasic.asm):01824                   BNE  LB334          ; BRANCH IF ALL OF STRING NOT COMPARED
E5A8 D654             (      exbasic.asm):01825                   LDB  FP0SGN         ; GET TRUE/FALSE FLAB
E5AA 200B             (      exbasic.asm):01826                   BRA  LB33F          ; CHECK TRUTH OF RELATIONAL COMPARISON
E5AC A680             (      exbasic.asm):01827         LB334     LDA  ,X+            ; GET A BYTE FROM STRING A
E5AE A1C0             (      exbasic.asm):01828                   CMPA ,U+            ; COMPARE TO STRING B
E5B0 27F3             (      exbasic.asm):01829                   BEQ  LB32D          ; CHECK ANOTHER CHARACTER IF =
E5B2 C6FF             (      exbasic.asm):01830                   LDB  #$FF           ; FALSE FLAG IF STRING A > B
E5B4 2401             (      exbasic.asm):01831                   BCC  LB33F          ; BRANCH IF STRING A > STRING B
E5B6 50               (      exbasic.asm):01832                   NEGB                ; SET FLAG = TRUE
                      (      exbasic.asm):01833         
                      (      exbasic.asm):01834         * DETERMINE TRUTH OF COMPARISON - RETURN RESULT IN FPA0
E5B7 CB01             (      exbasic.asm):01835         LB33F     ADDB #1             ; CONVERT $FF,0,1 TO 0,1,2
E5B9 59               (      exbasic.asm):01836                   ROLB                ; NOW IT'S 1,2,4 FOR > = <
E5BA D40A             (      exbasic.asm):01837                   ANDB RELFLG         ; 'AND' THE ACTUAL COMPARISON WITH THE DESIRED -
E5BC                  (      exbasic.asm):01838         COMPARISON
E5BC 2702             (      exbasic.asm):01839                   BEQ  LB348          ; BRANCH IF FALSE (NO MATCHING BITS)
E5BE C6FF             (      exbasic.asm):01840                   LDB  #$FF           ; TRUE FLAG
E5C0 7EEEB9           (      exbasic.asm):01841         LB348     JMP  LBC7C          ; CONVERT ACCB INTO FP NUMBER IN FPA0
                      (      exbasic.asm):01842         
                      (      exbasic.asm):01843         * DIM
E5C3 BDE4EA           (      exbasic.asm):01844         LB34B     JSR  LB26D          ; SYNTAX CHECK FOR COMMA
E5C6 C601             (      exbasic.asm):01845         DIM       LDB  #1             ; DIMENSION FLAG
E5C8 8D08             (      exbasic.asm):01846                   BSR  LB35A          ; SAVE ARRAY SPACE FOR THIS VARIABLE
E5CA 9D82             (      exbasic.asm):01847                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E5CC 26F5             (      exbasic.asm):01848                   BNE  LB34B          ; KEEP DIMENSIONING IF NOT END OF LINE
E5CE 39               (      exbasic.asm):01849                   RTS
                      (      exbasic.asm):01850         * EVALUATE A VARIABLE - RETURN X AND
                      (      exbasic.asm):01851         * VARPTR POINTING TO VARIABLE DESCRIPTOR
                      (      exbasic.asm):01852         * EACH VARIABLE REQUIRES 7 BYTES - THE FIRST TWO
                      (      exbasic.asm):01853         * BYTES ARE THE VARIABLE NAME AND THE NEXT 5
                      (      exbasic.asm):01854         * BYTES ARE THE DESCRIPTOR. IF BIT 7 OF THE
                      (      exbasic.asm):01855         * FIRST BYTE OF VARlABLE NAME IS SET, THE
                      (      exbasic.asm):01856         * VARIABLE IS A DEF FN VARIABLE. IF BIT 7 OF
                      (      exbasic.asm):01857         * THE SECOND BYTE OF VARIABLE NAME IS SET, THE
                      (      exbasic.asm):01858         * VARIABLE IS A STRING, OTHERWISE THE VARIABLE
                      (      exbasic.asm):01859         * IS NUMERIC.
                      (      exbasic.asm):01860         * IF THE VARIABLE IS NOT FOUND, A ZERO VARIABLE IS
                      (      exbasic.asm):01861         * INSERTED INTO THE VARIABLE SPACE
E5CF 5F               (      exbasic.asm):01862         LB357     CLRB                ; DIMENSION FLAG = 0; DO NOT SET UP AN ARRAY
E5D0 9D82             (      exbasic.asm):01863                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E5D2 D705             (      exbasic.asm):01864         LB35A     STB  DIMFLG         ; SAVE ARRAY FLAG
                      (      exbasic.asm):01865         * ENTRY POINT FOR DEF FN VARIABLE SEARCH
E5D4 9737             (      exbasic.asm):01866         LB35C     STA  VARNAM         ; SAVE INPUT CHARACTER
E5D6 9D82             (      exbasic.asm):01867                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E5D8 8D40             (      exbasic.asm):01868                   BSR  LB3A2          ; SET CARRY IF NOT ALPHA
E5DA 1025FF16         (      exbasic.asm):01869                   LBCS LB277          ; SYNTAX ERROR IF NOT ALPHA
E5DE 5F               (      exbasic.asm):01870                   CLRB                ; DEFAULT 2ND VARIABLE CHARACTER TO ZERO
E5DF D706             (      exbasic.asm):01871                   STB  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
E5E1 9D7C             (      exbasic.asm):01872                   JSR  GETNCH         ; GET ANOTHER CHARACTER FROM BASIC
E5E3 2504             (      exbasic.asm):01873                   BCS  LB371          ; BRANCH IF NUMERIC (2ND CHARACTER IN
                      (      exbasic.asm):01874         *                             ; VARIABLE MAY BE NUMERIC)
E5E5 8D33             (      exbasic.asm):01875                   BSR  LB3A2          ; SET CARRY IF NOT ALPHA
E5E7 250A             (      exbasic.asm):01876                   BCS  LB37B          ; BRANCH IF NOT ALPHA
E5E9 1F89             (      exbasic.asm):01877         LB371     TFR  A,B            ; SAVE 2ND CHARACTER IN ACCB
                      (      exbasic.asm):01878         * READ INPUT CHARACTERS UNTIL A NON ALPHA OR
                      (      exbasic.asm):01879         * NON NUMERIC IS FOUND - IGNORE ALL CHARACTERS
                      (      exbasic.asm):01880         * IN VARIABLE NAME AFTER THE 1ST TWO
E5EB 9D7C             (      exbasic.asm):01881         LB373     JSR  GETNCH         ; GET AN INPUT CHARACTER
E5ED 25FC             (      exbasic.asm):01882                   BCS  LB373          ; BRANCH IF NUMERIC
E5EF 8D29             (      exbasic.asm):01883                   BSR  LB3A2          ; SET CARRY IF NOT ALPHA
E5F1 24F8             (      exbasic.asm):01884                   BCC  LB373          ; BRANCH IF ALPHA
E5F3 8124             (      exbasic.asm):01885         LB37B     CMPA #'$            ; CHECK FOR A STRING VARIABLE
E5F5 2606             (      exbasic.asm):01886                   BNE  LB385          ; BRANCH IF IT IS NOT A STRING
E5F7 0306             (      exbasic.asm):01887                   COM  VALTYP         ; SET VARIABLE TYPE TO STRING
E5F9 CB80             (      exbasic.asm):01888                   ADDB #$80           ; SET BIT 7 OF 2ND CHARACTER (STRING)
E5FB 9D7C             (      exbasic.asm):01889                   JSR  GETNCH         ; GET AN INPUT CHARACTER
E5FD D738             (      exbasic.asm):01890         LB385     STB  VARNAM+1       ; SAVE 2ND CHARACTER IN VARNAM+1
E5FF 9A08             (      exbasic.asm):01891                   ORA  ARYDIS         ; OR IN THE ARRAY DISABLE FLAG - IF = $80,
                      (      exbasic.asm):01892         *              ; DON'T SEARCH FOR VARIABLES IN THE ARRAYS
E601 8028             (      exbasic.asm):01893                   SUBA #'(            ; IS THIS AN ARRAY VARIABLE?
E603 10270075         (      exbasic.asm):01894                   LBEQ LB404          ; BRANCH IF IT IS
E607 0F08             (      exbasic.asm):01895                   CLR  ARYDIS         ; RESET THE ARRAY DISABLE FLAG
E609 9E1B             (      exbasic.asm):01896                   LDX  VARTAB         ; POINT X TO THE START OF VARIABLES
E60B DC37             (      exbasic.asm):01897                   LDD  VARNAM         ; GET VARIABLE IN QUESTION
E60D 9C1D             (      exbasic.asm):01898         LB395     CMPX ARYTAB         ; COMPARE X TO THE END OF VARIABLES
E60F 2712             (      exbasic.asm):01899                   BEQ  LB3AB          ; BRANCH IF END OF VARIABLES
E611 10A381           (      exbasic.asm):01900                   CMPD ,X++           ; * COMPARE VARIABLE IN QUESTION TO CURRENT
E614 273E             (      exbasic.asm):01901                   BEQ  LB3DC          ; * VARIABLE AND BRANCH IF MATCH
E616 3005             (      exbasic.asm):01902                   LEAX 5,X            ; = MOVE POINTER TO NEXT VARIABLE AND
E618 20F3             (      exbasic.asm):01903                   BRA  LB395          ; = KEEP LOOKING
                      (      exbasic.asm):01904         
                      (      exbasic.asm):01905         * SET CARRY IF NOT UPPER CASE ALPHA
E61A 8141             (      exbasic.asm):01906         LB3A2     CMPA #'A            ; * CARRY SET IF < 'A'
E61C 2504             (      exbasic.asm):01907                   BCS  LB3AA          ; *
E61E 805B             (      exbasic.asm):01908                   SUBA #'Z+1          ; =
                      (      exbasic.asm):01909         *         SUBA #-('Z+1)       ; = CARRY CLEAR IF <= 'Z'
E620 80A5             (      exbasic.asm):01910                   FCB  $80,$A5
E622 39               (      exbasic.asm):01911         LB3AA     RTS
                      (      exbasic.asm):01912         * PUT A NEW VARIABLE IN TABLE OF VARIABLES
E623 8E0074           (      exbasic.asm):01913         LB3AB     LDX  #ZERO          ; POINT X TO ZERO LOCATION
E626 EEE4             (      exbasic.asm):01914                   LDU  ,S             ; GET CURRENT RETURN ADDRESS
E628 1183E504         (      exbasic.asm):01915                   CMPU #LB287         ; DID WE COME FROM 'EVALUATE ALPHA EXPR'?
E62C 2728             (      exbasic.asm):01916                   BEQ  LB3DE          ; YES - RETURN A ZERO VALUE
E62E DC1F             (      exbasic.asm):01917                   LDD  ARYEND         ; * GET END OF ARRAYS ADDRESS AND
E630 DD43             (      exbasic.asm):01918                   STD  V43            ; * SAVE IT AT V43
E632 C30007           (      exbasic.asm):01919                   ADDD #7             ; = ADD 7 TO END OF ARRAYS (EACH
E635 DD41             (      exbasic.asm):01920                   STD  V41            ; = VARIABLE = 7 BYTES) AND SAVE AT V41
E637 9E1D             (      exbasic.asm):01921                   LDX  ARYTAB         ; * GET END OF VARIABLES AND SAVE AT V47
E639 9F47             (      exbasic.asm):01922                   STX  V47            ; *
E63B BDDECF           (      exbasic.asm):01923                   JSR  LAC1E          ; MAKE A SEVEN BYTE SLOT FOR NEW VARIABLE AT
                      (      exbasic.asm):01924         *         TOP  OF VARIABLES
E63E 9E41             (      exbasic.asm):01925                   LDX  V41            ; = GET NEW END OF ARRAYS AND SAVE IT
E640 9F1F             (      exbasic.asm):01926                   STX  ARYEND         ; =
E642 9E45             (      exbasic.asm):01927                   LDX  V45            ; * GET NEW END OF VARIABLES AND SAVE IT
E644 9F1D             (      exbasic.asm):01928                   STX  ARYTAB         ; *
E646 9E47             (      exbasic.asm):01929                   LDX  V47            ; GET OLD END OF VARIABLES
E648 DC37             (      exbasic.asm):01930                   LDD  VARNAM         ; GET NEW VARIABLE NAME
E64A ED81             (      exbasic.asm):01931                   STD  ,X++           ; SAVE VARIABLE NAME
E64C 4F               (      exbasic.asm):01932                   CLRA                ; * ZERO OUT THE FP VALUE OF THE NUMERIC
E64D 5F               (      exbasic.asm):01933                   CLRB                ; * VARIABLE OR THE LENGTH AND ADDRESS
E64E ED84             (      exbasic.asm):01934                   STD  ,X             ; * OF A STRING VARIABLE
E650 ED02             (      exbasic.asm):01935                   STD  2,X            ; *
E652 A704             (      exbasic.asm):01936                   STA  4,X            ; *
E654 9F39             (      exbasic.asm):01937         LB3DC     STX  VARPTR         ; STORE ADDRESS OF VARIABLE VALUE
E656 39               (      exbasic.asm):01938         LB3DE     RTS
                      (      exbasic.asm):01939         *
E657 9080000000       (      exbasic.asm):01940         LB3DF     FCB  $90,$80,$00,$00,$00 ; * FLOATING POINT -32768
                      (      exbasic.asm):01941         *                             ; SMALLEST SIGNED TWO BYTE INTEGER
                      (      exbasic.asm):01942         *
E65C 9D7C             (      exbasic.asm):01943         LB3E4     JSR  GETNCH         ; GET AN INPUT CHARACTER FROM BASIC
E65E BDE3BE           (      exbasic.asm):01944         LB3E6     JSR  LB141          ; GO EVALUATE NUMERIC EXPRESSION
E661 9654             (      exbasic.asm):01945         LB3E9     LDA  FP0SGN         ; GET FPA0 MANTISSA SIGN
E663 2B5D             (      exbasic.asm):01946                   BMI  LB44A          ; 'FC' ERROR IF NEGATIVE NUMBER
                      (      exbasic.asm):01947         
                      (      exbasic.asm):01948         
E665 BDE3C0           (      exbasic.asm):01949         INTCNV    JSR  LB143          ; 'TM' ERROR IF STRING VARIABLE
E668 964F             (      exbasic.asm):01950                   LDA  FP0EXP         ; GET FPA0 EXPONENT
E66A 8190             (      exbasic.asm):01951                   CMPA #$90           ; * COMPARE TO 32768 - LARGEST INTEGER EXPONENT AND
E66C 2508             (      exbasic.asm):01952                   BCS  LB3FE          ; * BRANCH IF FPA0 < 32768
E66E 8EE657           (      exbasic.asm):01953                   LDX  #LB3DF         ; POINT X TO FP VALUE OF -32768
E671 BDEED3           (      exbasic.asm):01954                   JSR  LBC96          ; COMPARE -32768 TO FPA0
E674 264C             (      exbasic.asm):01955                   BNE  LB44A          ; 'FC' ERROR IF NOT =
E676 BDEF05           (      exbasic.asm):01956         LB3FE     JSR  LBCC8          ; CONVERT FPA0 TO A TWO BYTE INTEGER
E679 DC52             (      exbasic.asm):01957                   LDD  FPA0+2         ; GET THE INTEGER
E67B 39               (      exbasic.asm):01958                   RTS
                      (      exbasic.asm):01959         * EVALUATE AN ARRAY VARIABLE
E67C DC05             (      exbasic.asm):01960         LB404     LDD  DIMFLG         ; GET ARRAY FLAG AND VARIABLE TYPE
E67E 3406             (      exbasic.asm):01961                   PSHS B,A            ; SAVE THEM ON STACK
E680 12               (      exbasic.asm):01962                   NOP                 ; DEAD SPACE CAUSED BY 1.2 REVISION
E681 5F               (      exbasic.asm):01963                   CLRB                ; RESET DIMENSION COUNTER
E682 9E37             (      exbasic.asm):01964         LB40A     LDX  VARNAM         ; GET VARIABLE NAME
E684 3414             (      exbasic.asm):01965                   PSHS X,B            ; SAVE VARIABLE NAME AND DIMENSION COUNTER
E686 8DD4             (      exbasic.asm):01966                   BSR  LB3E4          ; EVALUATE EXPRESSION (DIMENSlON LENGTH)
E688 3534             (      exbasic.asm):01967                   PULS B,X,Y          ; PULL OFF VARIABLE NAME, DIMENSlON COUNTER,
                      (      exbasic.asm):01968         *                             ; ARRAY FLAG
E68A 9F37             (      exbasic.asm):01969                   STX  VARNAM         ; SAVE VARIABLE NAME AND VARIABLE TYPE
E68C DE52             (      exbasic.asm):01970                   LDU  FPA0+2         ; GET DIMENSION LENGTH
E68E 3460             (      exbasic.asm):01971                   PSHS U,Y            ; SAVE DIMENSION LENGTH, ARRAY FLAG, VARIABLE TYPE
E690 5C               (      exbasic.asm):01972                   INCB                ; INCREASE DIMENSION COUNTER
E691 9D82             (      exbasic.asm):01973                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
E693 812C             (      exbasic.asm):01974                   CMPA #',            ; CHECK FOR ANOTHER DIMENSION
E695 27EB             (      exbasic.asm):01975                   BEQ  LB40A          ; BRANCH IF MORE
E697 D703             (      exbasic.asm):01976                   STB  TMPLOC         ; SAVE DIMENSION COUNTER
E699 BDE4E4           (      exbasic.asm):01977                   JSR  LB267          ; SYNTAX CHECK FOR A ')'
E69C 3506             (      exbasic.asm):01978                   PULS A,B            ; * RESTORE VARIABLE TYPE AND ARRAY
E69E DD05             (      exbasic.asm):01979                   STD  DIMFLG         ; * FLAG - LEAVE DIMENSION LENGTH ON STACK
E6A0 9E1D             (      exbasic.asm):01980                   LDX  ARYTAB         ; GET START OF ARRAYS
E6A2 9C1F             (      exbasic.asm):01981         LB42A     CMPX ARYEND         ; COMPARE TO END OF ARRAYS
E6A4 2721             (      exbasic.asm):01982                   BEQ  LB44F          ; BRANCH IF NO MATCH FOUND
E6A6 DC37             (      exbasic.asm):01983                   LDD  VARNAM         ; GET VARIABLE IN QUESTION
E6A8 10A384           (      exbasic.asm):01984                   CMPD ,X             ; COMPARE TO CURRENT VARIABLE
E6AB 2706             (      exbasic.asm):01985                   BEQ  LB43B          ; BRANCH IF =
E6AD EC02             (      exbasic.asm):01986                   LDD  2,X            ; GET OFFSET TO NEXT ARRAY VARIABLE
E6AF 308B             (      exbasic.asm):01987                   LEAX D,X            ; ADD TO CURRENT POINTER
E6B1 20EF             (      exbasic.asm):01988                   BRA  LB42A          ; KEEP SEARCHING
E6B3 C612             (      exbasic.asm):01989         LB43B     LDB  #2*9           ; 'REDIMENSIONED ARRAY' ERROR
E6B5 9605             (      exbasic.asm):01990                   LDA  DIMFLG         ; * TEST ARRAY FLAG - IF <>0 YOU ARE TRYING
E6B7 260B             (      exbasic.asm):01991                   BNE  LB44C          ; * TO REDIMENSION AN ARRAY
E6B9 D603             (      exbasic.asm):01992                   LDB  TMPLOC         ; GET NUMBER OF DIMENSIONS IN ARRAY
E6BB E104             (      exbasic.asm):01993                   CMPB 4,X            ; COMPARE TO THIS ARRAYS DIMENSIONS
E6BD 2759             (      exbasic.asm):01994                   BEQ  LB4A0          ; BRANCH IF =
E6BF C610             (      exbasic.asm):01995         LB447     LDB  #8*2           ; 'BAD SUBSCRIPT'
E6C1 8C               (      exbasic.asm):01996                   FCB  SKP2           ; SKIP TWO BYTES
E6C2 C608             (      exbasic.asm):01997         LB44A     LDB  #4*2           ; 'ILLEGAL FUNCTION CALL'
E6C4 7EDEF7           (      exbasic.asm):01998         LB44C     JMP  LAC46          ; JUMP TO ERROR SERVICING ROUTINE
                      (      exbasic.asm):01999         
                      (      exbasic.asm):02000         * INSERT A NEW ARRAY INTO ARRAY VARIABLES
                      (      exbasic.asm):02001         * EACH SET OF ARRAY VARIABLES IS PRECEEDED BY A DE-
                      (      exbasic.asm):02002         * SCRIPTOR BLOCK COMPOSED OF 5+2*N BYTES WHERE N IS THE
                      (      exbasic.asm):02003         * NUMBER OF DIMENSIONS IN THE ARRAY. THE BLOCK IS DEFINED
                      (      exbasic.asm):02004         * AS FOLLOWS: BYTES 0,1:VARIABLE'S NAME; 2,3:TOTAL LENGTH
                      (      exbasic.asm):02005         * OF ARRAY ITEMS AND DESCRIPTOR BLOCK; 4:NUMBER OF DIMEN-
                      (      exbasic.asm):02006         * ISIONS; 5,6:LENGTH OF DIMENSION 1; 7,8:LENGTH OF DIMEN-
                      (      exbasic.asm):02007         * SION 2;... 4+N,5+N:LENGTH OF DIMENSION N.
                      (      exbasic.asm):02008         
E6C7 CC0005           (      exbasic.asm):02009         LB44F     LDD  #5             ; * 5 BYTES/ARRAY ENTRY SAVE AT COEFPT
E6CA DD64             (      exbasic.asm):02010                   STD  COEFPT         ; *
E6CC DC37             (      exbasic.asm):02011                   LDD  VARNAM         ; = GET NAME OF ARRAY AND SAVE IN
E6CE ED84             (      exbasic.asm):02012                   STD  ,X             ; = FIRST 2 BYTES OF DESCRIPTOR
E6D0 D603             (      exbasic.asm):02013                   LDB  TMPLOC         ; GET NUMBER OF DIMENSIONS AND SAVE IN
E6D2 E704             (      exbasic.asm):02014                   STB  4,X            ; * 5TH BYTE OF DESCRIPTOR
E6D4 BDDEE4           (      exbasic.asm):02015                   JSR  LAC33          ; CHECK FOR ROOM FOR DESCRIPTOR IN FREE RAM
E6D7 9F41             (      exbasic.asm):02016                   STX  V41            ; TEMPORARILY SAVE DESCRIPTOR ADDRESS
E6D9 C60B             (      exbasic.asm):02017         LB461     LDB  #11            ; * DEFAULT DIMENSION VALUE:X(10)
E6DB 4F               (      exbasic.asm):02018                   CLRA                ; *
E6DC 0D05             (      exbasic.asm):02019                   TST  DIMFLG         ; = CHECK ARRAY FLAG AND BRANCH IF
E6DE 2705             (      exbasic.asm):02020                   BEQ  LB46D          ; = NOT DIMENSIONING AN ARRAY
E6E0 3506             (      exbasic.asm):02021                   PULS A,B            ; GET DIMENSION LENGTH
E6E2 C30001           (      exbasic.asm):02022                   ADDD #1             ; ADD ONE (X(0) HAS A LENGTH OF ONE)
E6E5 ED05             (      exbasic.asm):02023         LB46D     STD  5,X            ; SAVE LENGTH OF ARRAY DIMENSION
E6E7 8D5D             (      exbasic.asm):02024                   BSR  LB4CE          ; MULTIPLY ACCUM ARRAY SIZE NUMBER LENGTH
                      (      exbasic.asm):02025         *                             ; OF NEW DIMENSION
E6E9 DD64             (      exbasic.asm):02026                   STD  COEFPT         ; TEMP STORE NEW CURRENT ACCUMULATED ARRAY SIZE
E6EB 3002             (      exbasic.asm):02027                   LEAX 2,X            ; BUMP POINTER UP TWO
E6ED 0A03             (      exbasic.asm):02028                   DEC  TMPLOC         ; * DECREMENT DIMENSION COUNTER AND BRANCH IF
E6EF 26E8             (      exbasic.asm):02029                   BNE  LB461          ; * NOT DONE WITH ALL DIMENSIONS
E6F1 9F0F             (      exbasic.asm):02030                   STX  TEMPTR         ; SAVE ADDRESS OF (END OF ARRAY DESCRIPTOR - 5)
E6F3 D30F             (      exbasic.asm):02031                   ADDD TEMPTR         ; ADD TOTAL SIZE OF NEW ARRAY
E6F5 1025F7FC         (      exbasic.asm):02032                   LBCS LAC44          ; 'OM' ERROR IF > $FFFF
E6F9 1F01             (      exbasic.asm):02033                   TFR  D,X            ; SAVE END OF ARRAY IN X
E6FB BDDEE8           (      exbasic.asm):02034                   JSR  LAC37          ; MAKE SURE THERE IS ENOUGH FREE RAM FOR ARRAY
E6FE 830035           (      exbasic.asm):02035                   SUBD #STKBUF-5      ; SUBTRACT OUT THE (STACK BUFFER - 5)
E701 DD1F             (      exbasic.asm):02036                   STD  ARYEND         ; SAVE NEW END OF ARRAYS
E703 4F               (      exbasic.asm):02037                   CLRA                ; ZERO = TERMINATOR BYTE
E704 301F             (      exbasic.asm):02038         LB48C     LEAX -1,X           ; * STORE TWO TERMINATOR BYTES AT
E706 A705             (      exbasic.asm):02039                   STA  5,X            ; * THE END OF THE ARRAY DESCRIPTOR
E708 9C0F             (      exbasic.asm):02040                   CMPX TEMPTR         ; *
E70A 26F8             (      exbasic.asm):02041                   BNE  LB48C          ; *
E70C 9E41             (      exbasic.asm):02042                   LDX  V41            ; GET ADDRESS OF START OF DESCRIPTOR
E70E 961F             (      exbasic.asm):02043                   LDA  ARYEND         ; GET MSB OF END OF ARRAYS; LSB ALREADY THERE
E710 9341             (      exbasic.asm):02044                   SUBD V41            ; SUBTRACT OUT ADDRESS OF START OF DESCRIPTOR
E712 ED02             (      exbasic.asm):02045                   STD  2,X            ; SAVE LENGTH OF (ARRAY AND DESCRIPTOR)
E714 9605             (      exbasic.asm):02046                   LDA  DIMFLG         ; * GET ARRAY FLAG AND BRANCH
E716 262D             (      exbasic.asm):02047                   BNE  LB4CD          ; * BACK IF DIMENSIONING
                      (      exbasic.asm):02048         * CALCULATE POINTER TO CORRECT ELEMENT
E718 E604             (      exbasic.asm):02049         LB4A0     LDB  4,X            ; GET THE NUMBER OF DIMENSIONS
E71A D703             (      exbasic.asm):02050                   STB  TMPLOC         ; TEMPORARILY SAVE
E71C 4F               (      exbasic.asm):02051                   CLRA                ; * INITIALIZE POINTER
E71D 5F               (      exbasic.asm):02052                   CLRB                ; * TO ZERO
E71E DD64             (      exbasic.asm):02053         LB4A6     STD  COEFPT         ; SAVE ACCUMULATED POINTER
E720 3506             (      exbasic.asm):02054                   PULS A,B            ; * PULL DIMENSION ARGUMENT OFF THE
E722 DD52             (      exbasic.asm):02055                   STD  FPA0+2         ; * STACK AND SAVE IT
E724 10A305           (      exbasic.asm):02056                   CMPD 5,X            ; COMPARE TO STORED 'DIM' ARGUMENT
E727 243A             (      exbasic.asm):02057                   BCC  LB4EB          ; 'BS' ERROR IF > = "DIM" ARGUMENT
E729 DE64             (      exbasic.asm):02058                   LDU  COEFPT         ; * GET ACCUMULATED POINTER AND
E72B 2704             (      exbasic.asm):02059                   BEQ  LB4B9          ; * BRANCH IF 1ST DIMENSION
E72D 8D17             (      exbasic.asm):02060                   BSR  LB4CE          ; = MULTIPLY ACCUMULATED POINTER AND DIMENSION
E72F D352             (      exbasic.asm):02061                   ADDD FPA0+2         ; = LENGTH AND ADD TO CURRENT ARGUMENT
E731 3002             (      exbasic.asm):02062         LB4B9     LEAX 2,X            ; MOVE POINTER TO NEXT DIMENSION
E733 0A03             (      exbasic.asm):02063                   DEC  TMPLOC         ; * DECREMENT DIMENSION COUNTER AND
E735 26E7             (      exbasic.asm):02064                   BNE  LB4A6          ; * BRANCH IF ANY DIMENSIONS LEFT
                      (      exbasic.asm):02065         * MULTIPLY ACCD BY 5 - 5 BYTES/ARRAY VALUE
E737 EDE3             (      exbasic.asm):02066                   STD  ,--S
E739 58               (      exbasic.asm):02067                   ASLB
E73A 49               (      exbasic.asm):02068                   ROLA                ; TIMES 2
E73B 58               (      exbasic.asm):02069                   ASLB
E73C 49               (      exbasic.asm):02070                   ROLA                ; TIMES 4
E73D E3E1             (      exbasic.asm):02071                   ADDD ,S++           ; TIMES 5
E73F 308B             (      exbasic.asm):02072                   LEAX D,X            ; ADD OFFSET TO START OF ARRAY
E741 3005             (      exbasic.asm):02073                   LEAX 5,X            ; ADJUST POINTER FOR SIZE OF DESCRIPTOR
E743 9F39             (      exbasic.asm):02074                   STX  VARPTR         ; SAVE POINTER TO ARRAY VALUE
E745 39               (      exbasic.asm):02075         LB4CD     RTS
                      (      exbasic.asm):02076         * MULTIPLY 2 BYTE NUMBER IN 5,X BY THE 2 BYTE NUMBER
                      (      exbasic.asm):02077         * IN COEFPT. RETURN RESULT IN ACCD, BS ERROR IF > $FFFF
E746 8610             (      exbasic.asm):02078         LB4CE     LDA  #16            ; 16 SHIFTS TO DO A MULTIPLY
E748 9745             (      exbasic.asm):02079                   STA  V45            ; SHIFT COUNTER
E74A EC05             (      exbasic.asm):02080                   LDD  5,X            ; * GET SIZE OF DIMENSION
E74C DD17             (      exbasic.asm):02081                   STD  BOTSTK         ; * AND SAVE IT
E74E 4F               (      exbasic.asm):02082                   CLRA                ; * ZERO
E74F 5F               (      exbasic.asm):02083                   CLRB                ; * ACCD
E750 58               (      exbasic.asm):02084         LB4D8     ASLB                ; = SHIFT ACCB LEFT
E751 49               (      exbasic.asm):02085                   ROLA                ; = ONE BIT
E752 250F             (      exbasic.asm):02086                   BCS  LB4EB          ; 'BS' ERROR IF CARRY
E754 0865             (      exbasic.asm):02087                   ASL  COEFPT+1       ; * SHIFT MULTIPLICAND LEFT ONE
E756 0964             (      exbasic.asm):02088                   ROL  COEFPT         ; * BIT - ADD MULTIPLIER TO ACCUMULATOR
E758 2404             (      exbasic.asm):02089                   BCC  LB4E6          ; * IF CARRY <> 0
E75A D317             (      exbasic.asm):02090                   ADDD BOTSTK         ; ADD MULTIPLIER TO ACCD
E75C 2505             (      exbasic.asm):02091                   BCS  LB4EB          ; 'BS' ERROR IF CARRY (>$FFFF)
E75E 0A45             (      exbasic.asm):02092         LB4E6     DEC  V45            ; * DECREMENT SHIFT COUNTER
E760 26EE             (      exbasic.asm):02093                   BNE  LB4D8          ; * IF NOT DONE
E762 39               (      exbasic.asm):02094                   RTS
E763 7EE6BF           (      exbasic.asm):02095         LB4EB     JMP  LB447          ; 'BS' ERROR
                      (      exbasic.asm):02096         *
                      (      exbasic.asm):02097         * MEM
                      (      exbasic.asm):02098         * THIS IS NOT A TRUE INDICATOR OF FREE MEMORY BECAUSE
                      (      exbasic.asm):02099         * BASIC REQUIRES A STKBUF SIZE BUFFER FOR THE STACK
                      (      exbasic.asm):02100         * FOR WHICH MEM DOES NOT ALLOW.
                      (      exbasic.asm):02101         *
E766 1F40             (      exbasic.asm):02102         MEM       TFR  S,D            ; PUT STACK POINTER INTO ACCD
E768 931F             (      exbasic.asm):02103                   SUBD ARYEND         ; SUBTRACT END OF ARRAYS
E76A 21               (      exbasic.asm):02104                   FCB  SKP1           ; SKIP ONE BYTE
                      (      exbasic.asm):02105         *CONVERT THE VALUE IN ACCB INTO A FP NUMBER IN FPA0
E76B 4F               (      exbasic.asm):02106         LB4F3     CLRA                ; CLEAR MS BYTE OF ACCD
                      (      exbasic.asm):02107         * CONVERT THE VALUE IN ACCD INTO A FLOATING POINT NUMBER IN FPA0
E76C 0F06             (      exbasic.asm):02108         GIVABF    CLR  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
E76E DD50             (      exbasic.asm):02109                   STD  FPA0           ; SAVE ACCD IN TOP OF FACA
E770 C690             (      exbasic.asm):02110                   LDB  #$90           ; EXPONENT REQUIRED IF THE TOP TWO BYTES
                      (      exbasic.asm):02111         *         OF   FPA0 ARE TO BE TREATED AS AN INTEGER IN FPA0
E772 7EEEBF           (      exbasic.asm):02112                   JMP  LBC82          ; CONVERT THE REST OF FPA0 TO AN INTEGER
                      (      exbasic.asm):02113         
                      (      exbasic.asm):02114         * STR$
E775 BDE3C0           (      exbasic.asm):02115         STR       JSR  LB143          ; 'TM' ERROR IF STRING VARIABLE
E778 CE01F0           (      exbasic.asm):02116                   LDU  #STRBUF+2      ; *CONVERT FP NUMBER TO ASCII STRING IN
E77B BDF019           (      exbasic.asm):02117                   JSR  LBDDC          ; *THE STRING BUFFER
E77E 3262             (      exbasic.asm):02118                   LEAS 2,S            ; PURGE THE RETURN ADDRESS FROM THE STACK
E780 8E01EF           (      exbasic.asm):02119                   LDX  #STRBUF+1      ; *POINT X TO STRING BUFFER AND SAVE
E783 200B             (      exbasic.asm):02120                   BRA  LB518          ; *THE STRING IN THE STRING SPACE
                      (      exbasic.asm):02121         * RESERVE ACCB BYTES OF STRING SPACE. RETURN START
                      (      exbasic.asm):02122         * ADDRESS IN (X) AND FRESPC
E785 9F4D             (      exbasic.asm):02123         LB50D     STX  V4D            ; SAVE X IN V4D
E787 8D5C             (      exbasic.asm):02124         LB50F     BSR  LB56D          ; RESERVE ACCB BYTES IN STRING SPACE
E789 9F58             (      exbasic.asm):02125         LB511     STX  STRDES+2       ; SAVE NEW STRING ADDRESS
E78B D756             (      exbasic.asm):02126                   STB  STRDES         ; SAVE LENGTH OF RESERVED BLOCK
E78D 39               (      exbasic.asm):02127                   RTS
E78E 301F             (      exbasic.asm):02128         LB516     LEAX -1,X           ; MOVE POINTER BACK ONE
                      (      exbasic.asm):02129         * SCAN A LINE FROM (X) UNTIL AN END OF LINE FLAG (ZERO) OR
                      (      exbasic.asm):02130         * EITHER OF THE TWO TERMINATORS STORED IN CHARAC OR ENDCHR IS MATCHED.
                      (      exbasic.asm):02131         * THE RESULTING STRING IS STORED IN THE STRING SPACE
                      (      exbasic.asm):02132         * ONLY IF THE START OF THE STRING IS <= STRBUF+2
E790 8622             (      exbasic.asm):02133         LB518     LDA  #'"            ; * INITIALIZE
E792 9701             (      exbasic.asm):02134                   STA  CHARAC         ; * TERMINATORS
E794 9702             (      exbasic.asm):02135         LB51A     STA  ENDCHR         ; * TO "
E796 3001             (      exbasic.asm):02136         LB51E     LEAX 1,X            ; MOVE POINTER UP ONE
E798 9F62             (      exbasic.asm):02137                   STX  RESSGN         ; TEMPORARILY SAVE START OF STRING
E79A 9F58             (      exbasic.asm):02138                   STX  STRDES+2       ; SAVE START OF STRING IN TEMP DESCRIPTOR
E79C C6FF             (      exbasic.asm):02139                   LDB  #-1            ; INITIALIZE CHARACTER COUNTER TO - 1
E79E 5C               (      exbasic.asm):02140         LB526     INCB                ; INCREMENT CHARACTER COUNTER
E79F A680             (      exbasic.asm):02141                   LDA  ,X+            ; GET CHARACTER
E7A1 270C             (      exbasic.asm):02142                   BEQ  LB537          ; BRANCH IF END OF LINE
E7A3 9101             (      exbasic.asm):02143                   CMPA CHARAC         ; * CHECK FOR TERMINATORS
E7A5 2704             (      exbasic.asm):02144                   BEQ  LB533          ; * IN CHARAC AND ENDCHR
E7A7 9102             (      exbasic.asm):02145                   CMPA ENDCHR         ; * DON'T MOVE POINTER BACK
E7A9 26F3             (      exbasic.asm):02146                   BNE  LB526          ; * ONE IF TERMINATOR IS "MATCHED"
E7AB 8122             (      exbasic.asm):02147         LB533     CMPA #'"            ; = COMPARE CHARACTER TO STRING DELIMITER
E7AD 2702             (      exbasic.asm):02148                   BEQ  LB539          ; = & DON'T MOVE POINTER BACK IF SO
E7AF 301F             (      exbasic.asm):02149         LB537     LEAX -1,X           ; MOVE POINTER BACK ONE
E7B1 9F64             (      exbasic.asm):02150         LB539     STX  COEFPT         ; SAVE END OF STRING ADDRESS
E7B3 D756             (      exbasic.asm):02151                   STB  STRDES         ; SAVE STRING LENGTH IN TEMP DESCRIPTOR
E7B5 DE62             (      exbasic.asm):02152                   LDU  RESSGN         ; GET INITlAL STRING START
E7B7 118301F0         (      exbasic.asm):02153                   CMPU #STRBUF+2      ; COMPARE TO START OF STRING BUFFER
E7BB 2207             (      exbasic.asm):02154         LB543     BHI  LB54C          ; BRANCH IF > START OF STRING BUFFER
E7BD 8DC6             (      exbasic.asm):02155                   BSR  LB50D          ; GO RESERVE SPACE FOR THE STRING
E7BF 9E62             (      exbasic.asm):02156                   LDX  RESSGN         ; POINT X TO THE BEGINNING OF THE STRING
E7C1 BDE8BD           (      exbasic.asm):02157                   JSR  LB645          ; MOVE (B) BYTES FROM (X) TO
                      (      exbasic.asm):02158         *                             [FRESPC] - MOVE STRING DATA
                      (      exbasic.asm):02159         * PUT DIRECT PAGE STRING DESCRIPTOR BUFFER DATA
                      (      exbasic.asm):02160         * ON THE STRING STACK. SET VARIABLE TYPE TO STRING
E7C4 9E0B             (      exbasic.asm):02161         LB54C     LDX  TEMPPT         ; GET NEXT AVAILABLE STRING STACK DESCRIPTOR
E7C6 8C00F1           (      exbasic.asm):02162                   CMPX #LINHDR        ; COMPARE TO TOP OF STRING DESCRIPTOR STACK - WAS #CFNBUF
E7C9 2605             (      exbasic.asm):02163                   BNE  LB558          ; FORMULA O.K.
E7CB C61E             (      exbasic.asm):02164                   LDB  #15*2          ; STRING FORMULA TOO COMPLEX' ERROR
E7CD 7EDEF7           (      exbasic.asm):02165         LB555     JMP  LAC46          ; JUMP TO ERROR SERVICING ROUTINE
E7D0 9656             (      exbasic.asm):02166         LB558     LDA  STRDES         ; * GET LENGTH OF STRING AND SAVE IT
                      (      exbasic.asm):02167         *         STA  ,X             ; * IN BYTE 0 OF DESCRIPTOR
E7D2 A700             (      exbasic.asm):02168                   FCB  $A7,$00
E7D4 DC58             (      exbasic.asm):02169                   LDD  STRDES+2       ; = GET START ADDRESS OF ACTUAL STRING
E7D6 ED02             (      exbasic.asm):02170                   STD  2,X            ; = AND SAVE IN BYTES 2,3 OF DESCRIPTOR
E7D8 86FF             (      exbasic.asm):02171                   LDA  #$FF           ; * VARIABLE TYPE = STRING
E7DA 9706             (      exbasic.asm):02172                   STA  VALTYP         ; * SAVE IN VARIABLE TYPE FLAG
E7DC 9F0D             (      exbasic.asm):02173                   STX  LASTPT         ; = SAVE START OF DESCRIPTOR
E7DE 9F52             (      exbasic.asm):02174                   STX  FPA0+2         ; = ADDRESS IN LASTPT AND FPA0
E7E0 3005             (      exbasic.asm):02175                   LEAX 5,X            ; 5 BYTES/STRING DESCRIPTOR
E7E2 9F0B             (      exbasic.asm):02176                   STX  TEMPPT         ; NEXT AVAILABLE STRING VARIABLE DESCRIPTOR
E7E4 39               (      exbasic.asm):02177                   RTS
                      (      exbasic.asm):02178         * RESERVE ACCB BYTES IN STRING STORAGE SPACE
                      (      exbasic.asm):02179         * RETURN WITH THE STARTING ADDRESS OF THE
                      (      exbasic.asm):02180         * RESERVED STRING SPACE IN (X) AND FRESPC
E7E5 0F07             (      exbasic.asm):02181         LB56D     CLR  GARBFL         ; CLEAR STRING REORGANIZATION FLAG
E7E7 4F               (      exbasic.asm):02182         LB56F     CLRA                ; * PUSH THE LENGTH OF THE
E7E8 3406             (      exbasic.asm):02183                   PSHS B,A            ; * STRING ONTO THE STACK
E7EA DC23             (      exbasic.asm):02184                   LDD  STRTAB         ; GET START OF STRING VARIABLES
E7EC A3E0             (      exbasic.asm):02185                   SUBD ,S+            ; SUBTRACT STRING LENGTH
E7EE 109321           (      exbasic.asm):02186                   CMPD FRETOP         ; COMPARE TO START OF STRING STORAGE
E7F1 250A             (      exbasic.asm):02187                   BCS  LB585          ; IF BELOW START, THEN REORGANIZE
E7F3 DD23             (      exbasic.asm):02188                   STD  STRTAB         ; SAVE NEW START OF STRING VARIABLES
E7F5 9E23             (      exbasic.asm):02189                   LDX  STRTAB         ; GET START OF STRING VARIABLES
E7F7 3001             (      exbasic.asm):02190                   LEAX 1,X            ; ADD ONE
E7F9 9F25             (      exbasic.asm):02191                   STX  FRESPC         ; SAVE START ADDRESS OF NEWLY RESERVED SPACE
E7FB 3584             (      exbasic.asm):02192                   PULS B,PC           ; RESTORE NUMBER OF BYTES RESERVED AND RETURN
E7FD C61A             (      exbasic.asm):02193         LB585     LDB  #2*13          ; OUT OF STRING SPACE' ERROR
E7FF 0307             (      exbasic.asm):02194                   COM  GARBFL         ; TOGGLE REORGANIZATiON FLAG
E801 27CA             (      exbasic.asm):02195                   BEQ  LB555          ; ERROR IF FRESHLY REORGANIZED
E803 8D04             (      exbasic.asm):02196                   BSR  LB591          ; GO REORGANIZE STRING SPACE
E805 3504             (      exbasic.asm):02197                   PULS B              ; GET BACK THE NUMBER OF BYTES TO RESERVE
E807 20DE             (      exbasic.asm):02198                   BRA  LB56F          ; TRY TO RESERVE ACCB BYTES AGAIN
                      (      exbasic.asm):02199         * REORGANIZE THE STRING SPACE
E809 9E27             (      exbasic.asm):02200         LB591     LDX  MEMSIZ         ; GET THE TOP OF STRING SPACE
E80B 9F23             (      exbasic.asm):02201         LB593     STX  STRTAB         ; SAVE TOP OF UNORGANIZED STRING SPACE
E80D 4F               (      exbasic.asm):02202                   CLRA                ; * ZERO OUT ACCD
E80E 5F               (      exbasic.asm):02203                   CLRB                ; * AND RESET VARIABLE
E80F DD4B             (      exbasic.asm):02204                   STD  V4B            ; * POINTER TO 0
E811 9E21             (      exbasic.asm):02205                   LDX  FRETOP         ; POINT X TO START OF STRING SPACE
E813 9F47             (      exbasic.asm):02206                   STX  V47            ; SAVE POINTER IN V47
E815 8E00C9           (      exbasic.asm):02207                   LDX  #STRSTK        ; POINT X TO START OF STRING DESCRIPTOR STACK
E818 9C0B             (      exbasic.asm):02208         LB5A0     CMPX TEMPPT         ; COMPARE TO ADDRESS OF NEXT AVAILABLE DESCRIPTOR
E81A 2704             (      exbasic.asm):02209                   BEQ  LB5A8          ; BRANCH IF TOP OF STRING STACK
E81C 8D32             (      exbasic.asm):02210                   BSR  LB5D8          ; CHECK FOR STRING IN UNORGANIZED STRING SPACE
E81E 20F8             (      exbasic.asm):02211                   BRA  LB5A0          ; KEEP CHECKING
E820 9E1B             (      exbasic.asm):02212         LB5A8     LDX  VARTAB         ; GET THE END OF BASIC PROGRAM
E822 9C1D             (      exbasic.asm):02213         LB5AA     CMPX ARYTAB         ; COMPARE TO END OF VARIABLES
E824 2704             (      exbasic.asm):02214                   BEQ  LB5B2          ; BRANCH IF AT TOP OF VARIABLES
E826 8D22             (      exbasic.asm):02215                   BSR  LB5D2          ; CHECK FOR STRING IN UNORGANIZED STRING SPACE
E828 20F8             (      exbasic.asm):02216                   BRA  LB5AA          ; KEEP CHECKING VARIABLES
E82A 9F41             (      exbasic.asm):02217         LB5B2     STX  V41            ; SAVE ADDRESS OF THE END OF VARIABLES
E82C 9E41             (      exbasic.asm):02218         LB5B4     LDX  V41            ; GET CURRENT ARRAY POINTER
E82E 9C1F             (      exbasic.asm):02219         LB5B6     CMPX ARYEND         ; COMPARE TO THE END OF ARRAYS
E830 2735             (      exbasic.asm):02220                   BEQ  LB5EF          ; BRANCH IF AT END OF ARRAYS
E832 EC02             (      exbasic.asm):02221                   LDD  2,X            ; GET LENGTH OF ARRAY AND DESCRIPTOR
E834 D341             (      exbasic.asm):02222                   ADDD V41            ; * ADD TO CURRENT ARRAY POINTER
E836 DD41             (      exbasic.asm):02223                   STD  V41            ; * AND SAVE IT
E838 A601             (      exbasic.asm):02224                   LDA  1,X            ; GET 1ST CHARACTER OF VARIABLE NAME
E83A 2AF0             (      exbasic.asm):02225                   BPL  LB5B4          ; BRANCH IF NUMERIC ARRAY
E83C E604             (      exbasic.asm):02226                   LDB  4,X            ; GET THE NUMBER OF DIMENSIONS IN THIS ARRAY
E83E 58               (      exbasic.asm):02227                   ASLB                ; MULTIPLY BY 2
E83F CB05             (      exbasic.asm):02228                   ADDB #5             ; ADD FIVE BYTES (VARIABLE NAME, ARRAY
                      (      exbasic.asm):02229         *                             ; LENGTH, NUMBER DIMENSIONS)
E841 3A               (      exbasic.asm):02230                   ABX                 ; X NOW POINTS TO START OF ARRAY ELEMENTS
E842 9C41             (      exbasic.asm):02231         LB5CA     CMPX V41            ; AT END OF THIS ARRAY?
E844 27E8             (      exbasic.asm):02232                   BEQ  LB5B6          ; YES - CHECK FOR ANOTHER
E846 8D08             (      exbasic.asm):02233                   BSR  LB5D8          ; CHECK FOR STRING LOCATED IN
                      (      exbasic.asm):02234         *                             ; UNORGANIZED STRING SPACE
E848 20F8             (      exbasic.asm):02235                   BRA  LB5CA          ; KEEP CHECKING ELEMENTS IN THIS ARRAY
E84A A601             (      exbasic.asm):02236         LB5D2     LDA  1,X            ; GET F1RST BYTE OF VARIABLE NAME
E84C 3002             (      exbasic.asm):02237                   LEAX 2,X            ; MOVE POINTER TO DESCRIPTOR
E84E 2A14             (      exbasic.asm):02238                   BPL  LB5EC          ; BRANCH IF VARIABLE IS NUMERIC
                      (      exbasic.asm):02239         * SEARCH FOR STRING - ENTER WITH X POINTING TO
                      (      exbasic.asm):02240         * THE STRING DESCRIPTOR. IF STRING IS STORED
                      (      exbasic.asm):02241         * BETWEEN V47 AND STRTAB, SAVE DESCRIPTOR POINTER
                      (      exbasic.asm):02242         * IN V4B AND RESET V47 TO STRING ADDRESS
E850 E684             (      exbasic.asm):02243         LB5D8     LDB  ,X             ; GET THE LENGTH OF THE STRING
E852 2710             (      exbasic.asm):02244                   BEQ  LB5EC          ; BRANCH IF NULL - NO STRING
E854 EC02             (      exbasic.asm):02245                   LDD  2,X            ; GET STARTING ADDRESS OF THE STRING
E856 109323           (      exbasic.asm):02246                   CMPD STRTAB         ; COMPARE TO THE START OF STRING VARIABLES
E859 2209             (      exbasic.asm):02247                   BHI  LB5EC          ; BRANCH IF THIS STRING IS STORED IN
                      (      exbasic.asm):02248         *              ; THE STRING VARIABLES
E85B 109347           (      exbasic.asm):02249                   CMPD V47            ; COMPARE TO START OF STRING SPACE
E85E 2304             (      exbasic.asm):02250                   BLS  LB5EC          ; BRANCH IF NOT STORED IN THE STRING SPACE
E860 9F4B             (      exbasic.asm):02251                   STX  V4B            ; SAVE VARIABLE POINTER IF STORED IN STRING SPACE
E862 DD47             (      exbasic.asm):02252                   STD  V47            ; SAVE STRING STARTING ADDRESS
E864 3005             (      exbasic.asm):02253         LB5EC     LEAX 5,X            ; MOVE TO NEXT VARIABLE DESCRIPTOR
E866 39               (      exbasic.asm):02254         LB5EE     RTS
E867 9E4B             (      exbasic.asm):02255         LB5EF     LDX  V4B            ; GET ADDRESS OF THE DESCRIPTOR FOR THE
                      (      exbasic.asm):02256         *              ; STRING WHICH IS STORED IN THE HIGHEST RAM ADDRESS IN
                      (      exbasic.asm):02257         *              ; THE UNORGANIZED STRING SPACE
E869 27FB             (      exbasic.asm):02258                   BEQ  LB5EE          ; BRANCH IF NONE FOUND AND REORGANIZATION DONE
E86B 4F               (      exbasic.asm):02259                   CLRA                ; CLEAR MS BYTE OF LENGTH
E86C E684             (      exbasic.asm):02260                   LDB  ,X             ; GET LENGTH OF STRING
E86E 5A               (      exbasic.asm):02261                   DECB                ; SUBTRACT ONE
E86F D347             (      exbasic.asm):02262                   ADDD V47            ; ADD LENGTH OF STRING TO ITS STARTING ADDRESS
E871 DD43             (      exbasic.asm):02263                   STD  V43            ; SAVE AS MOVE STARTING ADDRESS
E873 9E23             (      exbasic.asm):02264                   LDX  STRTAB         ; POINT X TO THE START OF ORGANIZED STRING VARIABLES
E875 9F41             (      exbasic.asm):02265                   STX  V41            ; SAVE AS MOVE ENDING ADDRESS
E877 BDDED1           (      exbasic.asm):02266                   JSR  LAC20          ; MOVE STRING FROM CURRENT POSITION TO THE
                      (      exbasic.asm):02267         *              ; TOP OF UNORGANIZED STRING SPACE
E87A 9E4B             (      exbasic.asm):02268                   LDX  V4B            ; POINT X TO STRING DESCRIPTOR
E87C DC45             (      exbasic.asm):02269                   LDD  V45            ; * GET NEW STARTING ADDRESS OF STRING AND
E87E ED02             (      exbasic.asm):02270                   STD  2,X            ; * SAVE IT IN DESCRIPTOR
E880 9E45             (      exbasic.asm):02271                   LDX  V45            ; GET NEW TOP OF UNORGANIZED STRING SPACE
E882 301F             (      exbasic.asm):02272                   LEAX -1,X           ; MOVE POINTER BACK ONE
E884 7EE80B           (      exbasic.asm):02273                   JMP  LB593          ; JUMP BACK AND REORGANIZE SOME MORE
                      (      exbasic.asm):02274         
                      (      exbasic.asm):02275         
E887 DC52             (      exbasic.asm):02276         LB60F     LDD  FPA0+2         ; * GET DESCRIPTOR ADDRESS OF STRING A
E889 3406             (      exbasic.asm):02277                   PSHS B,A            ; * AND SAVE IT ON THE STACK
E88B BDE4A0           (      exbasic.asm):02278                   JSR  LB223          ; GET DESCRIPTOR ADDRESS OF STRING B
E88E BDE3C3           (      exbasic.asm):02279                   JSR  LB146          ; 'TM' ERROR IF NUMERIC VARIABLE
E891 3510             (      exbasic.asm):02280                   PULS X              ; * POINT X TO STRING A DESCRIPTOR
E893 9F62             (      exbasic.asm):02281                   STX  RESSGN         ; * ADDRESS AND SAVE IT IN RESSGN
E895 E684             (      exbasic.asm):02282                   LDB  ,X             ; GET LENGTH OF STRING A
E897 9E52             (      exbasic.asm):02283                   LDX  FPA0+2         ; POINT X TO DESCRIPTOR OF STRING B
E899 EB84             (      exbasic.asm):02284                   ADDB ,X             ; ADD LENGTH OF STRING B TO STR1NG A
E89B 2405             (      exbasic.asm):02285                   BCC  LB62A          ; BRANCH IF LENGTH < 256
E89D C61C             (      exbasic.asm):02286                   LDB  #2*14          ; 'STRING TOO LONG' ERROR IF LENGTH > 255
E89F 7EDEF7           (      exbasic.asm):02287                   JMP  LAC46          ; JUMP TO ERROR SERVICING ROUTINE
E8A2 BDE785           (      exbasic.asm):02288         LB62A     JSR  LB50D          ; RESERVE ROOM IN STRING SPACE FOR NEW STRING
E8A5 9E62             (      exbasic.asm):02289                   LDX  RESSGN         ; GET DESCRIPTOR ADDRESS OF STRING A
E8A7 E684             (      exbasic.asm):02290                   LDB  ,X             ; GET LENGTH OF STRING A
E8A9 8D10             (      exbasic.asm):02291                   BSR  LB643          ; MOVE STRING A INTO RESERVED BUFFER IN STRING SPACE
E8AB 9E4D             (      exbasic.asm):02292                   LDX  V4D            ; GET DESCRIPTOR ADDRESS OF STRING B
E8AD 8D22             (      exbasic.asm):02293                   BSR  LB659          ; GET LENGTH AND ADDRESS OF STRING B
E8AF 8D0C             (      exbasic.asm):02294                   BSR  LB645          ; MOVE STRING B INTO REST OF RESERVED BUFFER
E8B1 9E62             (      exbasic.asm):02295                   LDX  RESSGN         ; POINT X TO DESCRIPTOR OF STRING A
E8B3 8D1C             (      exbasic.asm):02296                   BSR  LB659          ; DELETE STRING A IF LAST STRING ON STRING STACK
E8B5 BDE7C4           (      exbasic.asm):02297                   JSR  LB54C          ; PUT STRING DESCRIPTOR ON THE STRING STACK
E8B8 7EE3E5           (      exbasic.asm):02298                   JMP  LB168          ; BRANCH BACK TO EXPRESSION EVALUATION
                      (      exbasic.asm):02299         
                      (      exbasic.asm):02300         * MOVE (B) BYTES FROM 2,X TO FRESPC
E8BB AE02             (      exbasic.asm):02301         LB643     LDX  2,X            ; POINT X TO SOURCE ADDRESS
E8BD DE25             (      exbasic.asm):02302         LB645     LDU  FRESPC         ; POINT U TO DESTINATION ADDRESS
E8BF 5C               (      exbasic.asm):02303                   INCB                ; COMPENSATION FOR THE DECB BELOW
E8C0 2004             (      exbasic.asm):02304                   BRA  LB64E          ; GO MOVE THE BYTES
                      (      exbasic.asm):02305         * MOVE B BYTES FROM (X) TO (U)
E8C2 A680             (      exbasic.asm):02306         LB64A     LDA  ,X+            ; * GET A SOURCE BYTE AND MOVE IT
E8C4 A7C0             (      exbasic.asm):02307                   STA  ,U+            ; * TO THE DESTINATION
E8C6 5A               (      exbasic.asm):02308         LB64E     DECB                ; DECREMENT BYTE COUNTER
E8C7 26F9             (      exbasic.asm):02309                   BNE  LB64A          ; BRANCH IF ALL BYTES NOT MOVED
E8C9 DF25             (      exbasic.asm):02310                   STU  FRESPC         ; SAVE ENDING ADDRESS IN FRESPC
E8CB 39               (      exbasic.asm):02311                   RTS
                      (      exbasic.asm):02312         * RETURN LENGTH (ACCB) AND ADDRESS (X) OF
                      (      exbasic.asm):02313         * STRING WHOSE DESCRIPTOR IS IN FPA0+2
                      (      exbasic.asm):02314         * DELETE THE STRING IF IT IS THE LAST ONE
                      (      exbasic.asm):02315         * PUT ON THE STRING STACK. REMOVE STRING FROM STRING
                      (      exbasic.asm):02316         * SPACE IF IT IS AT THE BOTTOM OF STRING VARIABLES.
E8CC BDE3C3           (      exbasic.asm):02317         LB654     JSR  LB146          ; 'TM' ERROR IF VARIABLE TYPE = NUMERIC
E8CF 9E52             (      exbasic.asm):02318         LB657     LDX  FPA0+2         ; GET ADDRESS OF SELECTED STRING DESCRIPTOR
E8D1 E684             (      exbasic.asm):02319         LB659     LDB  ,X             ; GET LENGTH OF STRING
E8D3 8D18             (      exbasic.asm):02320                   BSR  LB675          ; * CHECK TO SEE IF THIS STRING DESCRIPTOR WAS
E8D5 2613             (      exbasic.asm):02321                   BNE  LB672          ; * THE LAST ONE PUT ON THE STRING STACK AND
                      (      exbasic.asm):02322         *                             ; * BRANCH IF NOT
E8D7 AE07             (      exbasic.asm):02323                   LDX  5+2,X          ; GET START ADDRESS OF STRING JUST REMOVED
E8D9 301F             (      exbasic.asm):02324                   LEAX -1,X           ; MOVE POINTER DOWN ONE
E8DB 9C23             (      exbasic.asm):02325                   CMPX STRTAB         ; COMPARE TO START OF STRING VARIABLES
E8DD 2608             (      exbasic.asm):02326                   BNE  LB66F          ; BRANCH IF THIS STRING IS NOT AT THE BOTTOM
                      (      exbasic.asm):02327         *                             ; OF STRING VARIABLES
E8DF 3404             (      exbasic.asm):02328                   PSHS B              ; SAVE LENGTH; ACCA WAS CLEARED
E8E1 D323             (      exbasic.asm):02329                   ADDD STRTAB         ; * ADD THE LENGTH OF THE JUST REMOVED STRING
E8E3 DD23             (      exbasic.asm):02330                   STD  STRTAB         ; * TO THE START OF STRING VARIABLES - THIS WILL
                      (      exbasic.asm):02331         *                             ; * REMOVE THE STRING FROM THE STRING SPACE
E8E5 3504             (      exbasic.asm):02332                   PULS B              ; RESTORE LENGTH
E8E7 3001             (      exbasic.asm):02333         LB66F     LEAX 1,X            ; ADD ONE TO POINTER
E8E9 39               (      exbasic.asm):02334                   RTS
E8EA AE02             (      exbasic.asm):02335         LB672     LDX  2,X            ; *POINT X TO ADDRESS OF STRING NOT
E8EC 39               (      exbasic.asm):02336                   RTS                 ; *ON THE STRING STACK
                      (      exbasic.asm):02337         * REMOVE STRING FROM STRING STACK. ENTER WITH X
                      (      exbasic.asm):02338         * POINTING TO A STRING DESCRIPTOR - DELETE THE
                      (      exbasic.asm):02339         * STRING FROM STACK IF IT IS ON TOP OF THE
                      (      exbasic.asm):02340         * STACK. IF THE STRING IS DELETED, SET THE ZERO FLAG
E8ED 9C0D             (      exbasic.asm):02341         LB675     CMPX LASTPT         ; *COMPARE TO LAST USED DESCRIPTOR ADDRESS
E8EF 2607             (      exbasic.asm):02342                   BNE  LB680          ; *ON THE STRING STACK, RETURN IF DESCRIPTOR
                      (      exbasic.asm):02343         *                             ; *ADDRESS NOT ON THE STRING STACK
E8F1 9F0B             (      exbasic.asm):02344                   STX  TEMPPT         ; SAVE LAST USED DESCRIPTOR AS NEXT AVAILABLE
E8F3 301B             (      exbasic.asm):02345                   LEAX -5,X           ; * MOVE LAST USED DESCRIPTOR BACK 5 BYTES
E8F5 9F0D             (      exbasic.asm):02346                   STX  LASTPT         ; * AND SAVE AS THE LAST USED DESCRIPTOR ADDR
E8F7 4F               (      exbasic.asm):02347                   CLRA                ; SET ZERO FLAG
E8F8 39               (      exbasic.asm):02348         LB680     RTS
                      (      exbasic.asm):02349         
                      (      exbasic.asm):02350         * LEN
E8F9 8D03             (      exbasic.asm):02351         LEN       BSR  LB686          ; POINT X TO PROPER STRING AND GET LENGTH
E8FB 7EE76B           (      exbasic.asm):02352         LB683     JMP  LB4F3          ; CONVERT ACCB TO FP NUMBER IN FPA0
                      (      exbasic.asm):02353         * POINT X TO STRING ADDRESS LOAD LENGTH INTO
                      (      exbasic.asm):02354         * ACCB. ENTER WITH THE STRING DESCRIPTOR IN
                      (      exbasic.asm):02355         * BOTTOM TWO BYTES OF FPA0
E8FE 8DCC             (      exbasic.asm):02356         LB686     BSR  LB654          ; GET LENGTH AND ADDRESS OF STRING
E900 0F06             (      exbasic.asm):02357                   CLR  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
E902 5D               (      exbasic.asm):02358                   TSTB                ; SET FLAGS ACCORDING TO LENGTH
E903 39               (      exbasic.asm):02359                   RTS
                      (      exbasic.asm):02360         
                      (      exbasic.asm):02361         * CHR$
E904 BDE986           (      exbasic.asm):02362         CHR       JSR  LB70E          ; CONVERT FPA0 TO AN INTEGER IN ACCD
E907 C601             (      exbasic.asm):02363         LB68F     LDB  #1             ; * RESERVE ONE BYTE IN
E909 BDE7E5           (      exbasic.asm):02364                   JSR  LB56D          ; * THE STRING SPACE
E90C 9653             (      exbasic.asm):02365                   LDA  FPA0+3         ; GET ASCII STRING VALUE
E90E BDE789           (      exbasic.asm):02366                   JSR  LB511          ; SAVE RESERVED STRING DESCRIPTOR IN TEMP DESCRIPTOR
E911 A784             (      exbasic.asm):02367                   STA  ,X             ; SAVE THE STRING (IT'S ONLY ONE BYTE)
E913 3262             (      exbasic.asm):02368         LB69B     LEAS 2,S            ; PURGE THE RETURN ADDRESS OFF OF THE STACK
E915 7EE7C4           (      exbasic.asm):02369         LB69D     JMP  LB54C          ; PUT TEMP DESCRIPTOR DATA ONTO STRING STACK
                      (      exbasic.asm):02370         
                      (      exbasic.asm):02371         
E918 8D02             (      exbasic.asm):02372         ASC       BSR  LB6A4          ; PUT 1ST CHARACTER OF STRING INTO ACCB
E91A 20DF             (      exbasic.asm):02373                   BRA  LB683          ; CONVERT ACCB INTO FP NUMBER IN FPA0
E91C 8DE0             (      exbasic.asm):02374         LB6A4     BSR  LB686          ; POINT X TO STRING DESCRIPTOR
E91E 275E             (      exbasic.asm):02375                   BEQ  LB706          ; 'FC' ERROR IF NULL STRING
E920 E684             (      exbasic.asm):02376                   LDB  ,X             ; GET FIRST BYTE OF STRING
E922 39               (      exbasic.asm):02377                   RTS
                      (      exbasic.asm):02378         
                      (      exbasic.asm):02379         
E923 8D48             (      exbasic.asm):02380         LEFT      BSR  LB6F5          ; GET ARGUMENTS FROM STACK
E925 4F               (      exbasic.asm):02381         LB6AD     CLRA                ; CLEAR STRING POINTER OFFSET - OFFSET = 0 FOR LEFT$
E926 E184             (      exbasic.asm):02382         LB6AE     CMPB ,X             ; * COMPARE LENGTH PARAMETER TO LENGTH OF
E928 2303             (      exbasic.asm):02383                   BLS  LB6B5          ; * STRING AND BRANCH IF LENGTH OF STRING
                      (      exbasic.asm):02384         *                             ; >= LENGTH PARAMETER
E92A E684             (      exbasic.asm):02385                   LDB  ,X             ; USE LENGTH OF STRING OTHERWISE
E92C 4F               (      exbasic.asm):02386                   CLRA                ; CLEAR STRING POINTER OFFSET (0 FOR LEFT$)
E92D 3406             (      exbasic.asm):02387         LB6B5     PSHS B,A            ; PUSH PARAMETERS ONTO STACK
E92F BDE787           (      exbasic.asm):02388                   JSR  LB50F          ; RESERVE ACCB BYTES IN THE STRING SPACE
E932 9E4D             (      exbasic.asm):02389                   LDX  V4D            ; POINT X TO STRING DESCRIPTOR
E934 8D9B             (      exbasic.asm):02390                   BSR  LB659          ; GET ADDRESS OF OLD STRING (X=ADDRESS)
E936 3504             (      exbasic.asm):02391                   PULS B              ; * PULL STRING POINTER OFFSET OFF OF THE STACK
E938 3A               (      exbasic.asm):02392                   ABX                 ; * AND ADD IT TO STRING ADDRESS
E939 3504             (      exbasic.asm):02393                   PULS B              ; PULL LENGTH PARAMETER OFF OF THE STACK
E93B BDE8BD           (      exbasic.asm):02394                   JSR  LB645          ; MOVE ACCB BYTES FROM (X) TO [FRESPC]
E93E 20D5             (      exbasic.asm):02395                   BRA  LB69D          ; PUT TEMP STRING DESCRIPTOR ONTO THE STRING STACK
                      (      exbasic.asm):02396         
                      (      exbasic.asm):02397         * RIGHT$
E940 8D2B             (      exbasic.asm):02398         RIGHT     BSR  LB6F5          ; GET ARGUMENTS FROM STACK
E942 A084             (      exbasic.asm):02399                   SUBA ,X             ; ACCA=LENGTH PARAMETER - LENGTH OF OLD STRING
E944 40               (      exbasic.asm):02400                   NEGA                ; NOW ACCA = LENGTH OF OLD STRING
E945 20DF             (      exbasic.asm):02401                   BRA  LB6AE          ; PUT NEW STRING IN THE STRING SPACE
                      (      exbasic.asm):02402         
                      (      exbasic.asm):02403         * MID$
E947 C6FF             (      exbasic.asm):02404         MID       LDB  #$FF           ; * GET DEFAULT VALUE OF LENGTH AND
E949 D753             (      exbasic.asm):02405                   STB  FPA0+3         ; * SAVE IT IN FPA0
E94B 9D82             (      exbasic.asm):02406                   JSR  GETCCH         ; GET CURRENT CHARACTER FROM BASIC
E94D 8129             (      exbasic.asm):02407                   CMPA #')            ; ARGUMENT DELIMITER?
E94F 2705             (      exbasic.asm):02408                   BEQ  LB6DE          ; YES - NO LENGTH PARAMETER GIVEN
E951 BDE4EA           (      exbasic.asm):02409                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
E954 8D2D             (      exbasic.asm):02410                   BSR  LB70B          ; EVALUATE NUMERIC EXPRESSION (LENGTH)
E956 8D15             (      exbasic.asm):02411         LB6DE     BSR  LB6F5          ; GET ARGUMENTS FROM STACK
E958 2724             (      exbasic.asm):02412                   BEQ  LB706          ; 'FC' ERROR IF NULL STRING
E95A 5F               (      exbasic.asm):02413                   CLRB                ; CLEAR LENGTH COUNTER (DEFAULT VALUE)
E95B 4A               (      exbasic.asm):02414                   DECA                ; *SUOTRACT ONE FROM POSITION PARAMETER (THESE
E95C A184             (      exbasic.asm):02415                   CMPA ,X             ; *ROUTINES EXPECT 1ST POSITION TO BE ZERO, NOT ONE)
                      (      exbasic.asm):02416         *                             ; *AND COMPARE IT TO LENGTH OF OLD STRING
E95E 24CD             (      exbasic.asm):02417                   BCC  LB6B5          ; IF POSITION > LENGTH OF OLD STRING, THEN NEW
                      (      exbasic.asm):02418         *                             ; STRING WILL BE A NULL STRING
E960 1F89             (      exbasic.asm):02419                   TFR  A,B            ; SAVE ABSOLUTE POSITION PARAMETER IN ACCB
E962 E084             (      exbasic.asm):02420                   SUBB ,X             ; ACCB=POSITION-LENGTH OF OLD STRING
E964 50               (      exbasic.asm):02421                   NEGB                ; NOW ACCB=LENGTH OF OLDSTRING-POSITION
E965 D153             (      exbasic.asm):02422                   CMPB FPA0+3         ; *IF THE AMOUNT OF OLD STRING TO THE RIGHT OF
E967 23C4             (      exbasic.asm):02423                   BLS  LB6B5          ; *POSITION IS <= THE LENGTH PARAMETER, BRANCH AND
                      (      exbasic.asm):02424         * USE ALL OF THE STRING TO THE RIGHT OF THE POSITION
                      (      exbasic.asm):02425         * INSTEAD OF THE LENGTH PARAMETER
E969 D653             (      exbasic.asm):02426                   LDB  FPA0+3         ; GET LENGTH OF NEW STRING
E96B 20C0             (      exbasic.asm):02427                   BRA  LB6B5          ; PUT NEW STRING IN STRING SPACE
                      (      exbasic.asm):02428         * DO A SYNTAX CHECK FOR ")", THEN PULL THE PREVIOUSLY CALCULATED NUMERIC
                      (      exbasic.asm):02429         * ARGUMENT (ACCD) AND STRING ARGUMENT DESCRIPTOR ADDR OFF OF THE STACK
E96D BDE4E4           (      exbasic.asm):02430         LB6F5     JSR  LB267          ; SYNTAX CHECK FOR A ")"
E970 EEE4             (      exbasic.asm):02431                   LDU  ,S             ; LOAD THE RETURN ADDRESS INTO U REGISTER
E972 AE65             (      exbasic.asm):02432                   LDX  5,S            ; * GET ADDRESS OF STRING AND
E974 9F4D             (      exbasic.asm):02433                   STX  V4D            ; * SAVE IT IN V4D
E976 A664             (      exbasic.asm):02434                   LDA  4,S            ; = PUT LENGTH OF STRING IN
E978 E664             (      exbasic.asm):02435                   LDB  4,S            ; = BOTH ACCA AND ACCB
E97A 3267             (      exbasic.asm):02436                   LEAS 7,S            ; REMOVE DESCRIPTOR AND RETURN ADDRESS FROM STACK
E97C 1F35             (      exbasic.asm):02437                   TFR  U,PC           ; JUMP TO ADDRESS IN U REGISTER
E97E 7EE6C2           (      exbasic.asm):02438         LB706     JMP  LB44A          ; 'ILLEGAL FUNCTION CALL'
                      (      exbasic.asm):02439         * EVALUATE AN EXPRESSION - RETURN AN INTEGER IN
                      (      exbasic.asm):02440         * ACCB - 'FC' ERROR IF EXPRESSION > 255
E981 9D7C             (      exbasic.asm):02441         LB709     JSR  GETNCH         ; GET NEXT BASIC INPUT CHARACTER
E983 BDE3BE           (      exbasic.asm):02442         LB70B     JSR  LB141          ; EVALUATE A NUMERIC EXPRESSION
E986 BDE661           (      exbasic.asm):02443         LB70E     JSR  LB3E9          ; CONVERT FPA0 TO INTEGER IN ACCD
E989 4D               (      exbasic.asm):02444                   TSTA                ; TEST MS BYTE OF INTEGER
E98A 26F2             (      exbasic.asm):02445                   BNE  LB706          ; 'FC' ERROR IF EXPRESSION > 255
E98C 0E82             (      exbasic.asm):02446                   JMP  GETCCH         ; GET CURRENT INPUT CHARACTER FROM BASIC
                      (      exbasic.asm):02447         
                      (      exbasic.asm):02448         * VAL
E98E BDE8FE           (      exbasic.asm):02449         VAL       JSR  LB686          ; POINT X TO STRING ADDRESS
E991 102702E1         (      exbasic.asm):02450                   LBEQ LBA39          ; IF NULL STRING SET FPA0
E995 DE83             (      exbasic.asm):02451                   LDU  CHARAD         ; SAVE INPUT POINTER IN REGISTER U
E997 9F83             (      exbasic.asm):02452                   STX  CHARAD         ; POINT INPUT POINTER TO ADDRESS OF STRING
E999 3A               (      exbasic.asm):02453                   ABX                 ; MOVE POINTER TO END OF STRING TERMINATOR
E99A A684             (      exbasic.asm):02454                   LDA  ,X             ; GET LAST BYTE OF STRING
E99C 3452             (      exbasic.asm):02455                   PSHS U,X,A          ; SAVE INPUT POINTER, STRING TERMINATOR
                      (      exbasic.asm):02456         *         ADDRESS AND CHARACTER
E99E 6F84             (      exbasic.asm):02457                   CLR  ,X             ; CLEAR STRING TERMINATOR : FOR ASCII - FP CONVERSION
E9A0 9D82             (      exbasic.asm):02458                   JSR  GETCCH         ; GET CURRENT CHARACTER FROM BASIC
E9A2 BDEF4F           (      exbasic.asm):02459                   JSR  LBD12          ; CONVERT AN ASCII STRING TO FLOATING POINT
E9A5 3552             (      exbasic.asm):02460                   PULS A,X,U          ; RESTORE CHARACTERS AND POINTERS
E9A7 A784             (      exbasic.asm):02461                   STA  ,X             ; REPLACE STRING TERMINATOR
E9A9 DF83             (      exbasic.asm):02462                   STU  CHARAD         ; RESTORE INPUT CHARACTER
E9AB 39               (      exbasic.asm):02463                   RTS
                      (      exbasic.asm):02464         
E9AC 8D07             (      exbasic.asm):02465         LB734     BSR  LB73D          ; * EVALUATE AN EXPRESSION, RETURN
E9AE 9F2B             (      exbasic.asm):02466                   STX  BINVAL         ; * THE VALUE IN X; STORE IT IN BINVAL
E9B0 BDE4EA           (      exbasic.asm):02467         LB738     JSR  LB26D          ; SYNTAX CHECK FOR A COMMA
E9B3 20CE             (      exbasic.asm):02468                   BRA  LB70B          ; EVALUATE EXPRESSION IN RANGE 0 <= X < 256
                      (      exbasic.asm):02469         * EVALUATE EXPRESSION : RETURN INTEGER PORTION IN X - 'FC' ERROR IF
                      (      exbasic.asm):02470         
E9B5 BDE3BE           (      exbasic.asm):02471         LB73D     JSR  LB141          ; EVALUATE NUMERIC EXPRESSION
E9B8 9654             (      exbasic.asm):02472         LB740     LDA  FP0SGN         ; GET SIGN OF FPA0 MANTISSA
E9BA 2BC2             (      exbasic.asm):02473                   BMI  LB706          ; ILLEGAL FUNCTION CALL' IF NEGATIVE
E9BC 964F             (      exbasic.asm):02474                   LDA  FP0EXP         ; GET EXPONENT OF FPA0
E9BE 8190             (      exbasic.asm):02475                   CMPA #$90           ; COMPARE TO LARGEST POSITIVE INTEGER
E9C0 22BC             (      exbasic.asm):02476                   BHI  LB706          ; ILLEGAL FUNCTION CALL' IF TOO LARGE
E9C2 BDEF05           (      exbasic.asm):02477                   JSR  LBCC8          ; SHIFT BINARY POINT TO EXTREME RIGHT OF FPA0
E9C5 9E52             (      exbasic.asm):02478                   LDX  FPA0+2         ; LOAD X WITH LOWER TWO BYTES OF FPA0
E9C7 39               (      exbasic.asm):02479                   RTS
                      (      exbasic.asm):02480         
                      (      exbasic.asm):02481         * PEEK
E9C8 8DEE             (      exbasic.asm):02482         PEEK      BSR  LB740          ; CONVERT FPA0 TO INTEGER IN REGISTER X
E9CA E684             (      exbasic.asm):02483                   LDB  ,X             ; GET THE VALUE BEING 'PEEK'ED
E9CC 7EE76B           (      exbasic.asm):02484                   JMP  LB4F3          ; CONVERT ACCB INTO A FP NUMBER
                      (      exbasic.asm):02485         
                      (      exbasic.asm):02486         * POKE
E9CF 8DDB             (      exbasic.asm):02487         POKE      BSR  LB734          ; EVALUATE 2 EXPRESSIONS
E9D1 9E2B             (      exbasic.asm):02488                   LDX  BINVAL         ; GET THE ADDRESS TO BE 'POKE'ED
E9D3 E784             (      exbasic.asm):02489                   STB  ,X             ; STORE THE DATA IN THAT ADDRESS
E9D5 39               (      exbasic.asm):02490                   RTS
                      (      exbasic.asm):02491         
                      (      exbasic.asm):02492         
                      (      exbasic.asm):02493         * LIST
E9D6 3401             (      exbasic.asm):02494         LIST      PSHS CC             ; SAVE ZERO FLAG ON STACK
E9D8 BDE208           (      exbasic.asm):02495                   JSR  LAF67          ; CONVERT DECIMAL LINE NUMBER TO BINARY
E9DB BDDF96           (      exbasic.asm):02496                   JSR  LAD01          ; * FIND RAM ADDRESS OF THAT LINE NUMBER AND
E9DE 9F66             (      exbasic.asm):02497                   STX  LSTTXT         ; * SAVE IT IN LSTTXT
E9E0 3501             (      exbasic.asm):02498                   PULS CC             ; GET ZERO FLAG FROM STACK
E9E2 2712             (      exbasic.asm):02499                   BEQ  LB784          ; BRANCH IF END OF LINE
E9E4 9D82             (      exbasic.asm):02500                   JSR  GETCCH         ; GET CURRENT CHARACTER FROM BASIC
E9E6 2713             (      exbasic.asm):02501                   BEQ  LB789          ; BRANCH IF END OF LINE
E9E8 81A7             (      exbasic.asm):02502                   CMPA #TOK_MINUS     ; MINUS TOKEN (IS IT A RANGE OF LINE NUMBERS?)
E9EA 2609             (      exbasic.asm):02503                   BNE  LB783          ; NO - RETURN
E9EC 9D7C             (      exbasic.asm):02504                   JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
E9EE 2706             (      exbasic.asm):02505                   BEQ  LB784          ; BRANCH IF END OF LINE
E9F0 BDE208           (      exbasic.asm):02506                   JSR  LAF67          ; GET ENDING LINE NUMBER
E9F3 2706             (      exbasic.asm):02507                   BEQ  LB789          ; BRANCH IF LEGAL LINE NUMBER
E9F5 39               (      exbasic.asm):02508         LB783 RTS
                      (      exbasic.asm):02509         * LIST THE ENTIRE PROGRAM
E9F6 CEFFFF           (      exbasic.asm):02510         LB784     LDU  #$FFFF         ; * SET THE DEFAULT ENDING LINE NUMBER
E9F9 DF2B             (      exbasic.asm):02511                   STU  BINVAL         ; * TO $FFFF
E9FB 3262             (      exbasic.asm):02512         LB789     LEAS 2,S            ; PURGE RETURN ADDRESS FROM THE STACK
E9FD 9E66             (      exbasic.asm):02513                   LDX  LSTTXT         ; POINT X TO STARTING LINE ADDRESS
E9FF BDEB9D           (      exbasic.asm):02514         LB78D     JSR  LB95C          ; MOVE CURSOR TO START OF A NEW LINE
EA02 BDDC8B           (      exbasic.asm):02515                   JSR  LA549          ; CHECK FOR A BREAK OR PAUSE
EA05 EC84             (      exbasic.asm):02516                   LDD  ,X             ; GET ADDRESS OF NEXT BASIC LINE
EA07 2603             (      exbasic.asm):02517                   BNE  LB79F          ; BRANCH IF NOT END OF PROGRAM
EA09                  (      exbasic.asm):02518         LB797
EA09 7EDF16           (      exbasic.asm):02519                   JMP  LAC73          ; RETURN TO BASIC'S MAIN INPUT LOOP
EA0C 9F66             (      exbasic.asm):02520         LB79F     STX  LSTTXT         ; SAVE NEW STARTING LINE ADDRESS
EA0E EC02             (      exbasic.asm):02521                   LDD  2,X            ; * GET THE LINE NUMBER OF THIS LINE AND
EA10 10932B           (      exbasic.asm):02522                   CMPD BINVAL         ; * COMPARE IT TO ENDING LINE NUMBER
EA13 22F4             (      exbasic.asm):02523                   BHI  LB797          ; EXIT IF LINE NUMBER > ENDING LINE NUMBER
EA15 BDF009           (      exbasic.asm):02524                   JSR  LBDCC          ; PRINT THE NUMBER IN ACCD ON SCREEN IN DECIMAL
EA18 BDEBE9           (      exbasic.asm):02525                   JSR  LB9AC          ; SEND A SPACE TO CONSOLE OUT
EA1B 9E66             (      exbasic.asm):02526                   LDX  LSTTXT         ; GET RAM ADDRESS OF THIS LINE
EA1D 8D10             (      exbasic.asm):02527                   BSR  LB7C2          ; UNCRUNCH A LINE
EA1F AE9F0066         (      exbasic.asm):02528                   LDX  [LSTTXT]       ; POINT X TO START OF NEXT LINE
EA23 CE00F4           (      exbasic.asm):02529                   LDU  #LINBUF+1      ; POINT U TO BUFFER FULL OF UNCRUNCHED LINE
EA26 A6C0             (      exbasic.asm):02530         LB7B9     LDA  ,U+            ; GET A BYTE FROM THE BUFFER
EA28 27D5             (      exbasic.asm):02531                   BEQ  LB78D          ; BRANCH IF END OF BUFFER
EA2A BDEBEE           (      exbasic.asm):02532                   JSR  LB9B1          ; SEND CHARACTER TO CONSOLE OUT
EA2D 20F7             (      exbasic.asm):02533                   BRA  LB7B9          ; GET ANOTHER CHARACTER
                      (      exbasic.asm):02534         
                      (      exbasic.asm):02535         * UNCRUNCH A LINE INTO BASIC'S LINE INPUT BUFFER
EA2F 3004             (      exbasic.asm):02536         LB7C2     LEAX 4,X            ; MOVE POINTER PAST ADDRESS OF NEXT LINE AND LINE NUMBER
EA31 108E00F4         (      exbasic.asm):02537                   LDY  #LINBUF+1      ; UNCRUNCH LINE INTO LINE INPUT BUFFER
EA35 A680             (      exbasic.asm):02538         LB7CB     LDA  ,X+            ; GET A CHARACTER
EA37 2751             (      exbasic.asm):02539                   BEQ  LB820          ; BRANCH IF END OF LINE
EA39 2B15             (      exbasic.asm):02540                   BMI  LB7E6          ; BRANCH IF IT'S A TOKEN
EA3B 813A             (      exbasic.asm):02541                   CMPA #':            ; CHECK FOR END OF SUB LINE
EA3D 260D             (      exbasic.asm):02542                   BNE  LB7E2          ; BRNCH IF NOT END OF SUB LINE
EA3F E684             (      exbasic.asm):02543                   LDB  ,X             ; GET CHARACTER FOLLOWING COLON
EA41 C184             (      exbasic.asm):02544                   CMPB #TOK_ELSE      ; TOKEN FOR ELSE?
EA43 27F0             (      exbasic.asm):02545                   BEQ  LB7CB          ; YES - DON'T PUT IT IN BUFFER
EA45 C183             (      exbasic.asm):02546                   CMPB #TOK_SNGL_Q    ; TOKEN FOR REMARK?
EA47 27EC             (      exbasic.asm):02547                   BEQ  LB7CB          ; YES - DON'T PUT IT IN BUFFER
EA49 8C               (      exbasic.asm):02548                   FCB  SKP2           ; SKIP TWO BYTES
EA4A 8621             (      exbasic.asm):02549         LB7E0     LDA  #'!            ; EXCLAMATION POINT
EA4C 8D30             (      exbasic.asm):02550         LB7E2     BSR  LB814          ; PUT CHARACTER IN BUFFER
EA4E 20E5             (      exbasic.asm):02551                   BRA  LB7CB          ; GET ANOTHER CHARACTER
                      (      exbasic.asm):02552         
EA50 CEDBD8           (      exbasic.asm):02553         LB7E6     LDU  #COMVEC-10     ; FIRST DO COMMANDS
EA53 81FF             (      exbasic.asm):02554                   CMPA #$FF           ; CHECK FOR SECONDARY TOKEN
EA55 2604             (      exbasic.asm):02555                   BNE  LB7F1          ; BRANCH IF NON SECONDARY TOKEN
EA57 A680             (      exbasic.asm):02556                   LDA  ,X+            ; GET SECONDARY TOKEN
EA59 3345             (      exbasic.asm):02557                   LEAU 5,U            ; BUMP IT UP TO SECONDARY FUNCTIONS
EA5B 847F             (      exbasic.asm):02558         LB7F1     ANDA #$7F           ; MASK OFF BIT 7 OF TOKEN
EA5D 334A             (      exbasic.asm):02559         LB7F3     LEAU 10,U           ; MOVE TO NEXT COMMAND TABLE
EA5F 6DC4             (      exbasic.asm):02560                   TST  ,U             ; IS THIS TABLE ENABLED?
EA61 27E7             (      exbasic.asm):02561                   BEQ  LB7E0          ; NO - ILLEGAL TOKEN
EA63 A0C4             (      exbasic.asm):02562                   SUBA ,U             ; SUBTRACT THE NUMBER OF TOKENS FROM THE CURRENT TOKEN NUMBER
EA65 2AF6             (      exbasic.asm):02563                   BPL  LB7F3          ; BRANCH IF TOKEN NOT IN THIS TABLE
EA67 ABC4             (      exbasic.asm):02564                   ADDA ,U             ; RESTORE TOKEN NUMBER RELATIVE TO THIS TABLE
EA69 EE41             (      exbasic.asm):02565                   LDU  1,U            ; POINT U TO COMMAND DICTIONARY TABLE
EA6B 4A               (      exbasic.asm):02566         LB801     DECA                ; DECREMENT TOKEN NUMBER
EA6C 2B06             (      exbasic.asm):02567                   BMI  LB80A          ; BRANCH IF THIS IS THE CORRECT TOKEN
                      (      exbasic.asm):02568         * SKIP THROUGH DICTIONARY TABLE TO START OF NEXT TOKEN
EA6E 6DC0             (      exbasic.asm):02569         LB804     TST  ,U+            ; GRAB A BYTE
EA70 2AFC             (      exbasic.asm):02570                   BPL  LB804          ; BRANCH IF BIT 7 NOT SET
EA72 20F7             (      exbasic.asm):02571                   BRA  LB801          ; GO SEE IF THIS IS THE CORRECT TOKEN
EA74 A6C4             (      exbasic.asm):02572         LB80A     LDA  ,U             ; GET A CHARACTER FROM DICTIONARY TABLE
EA76 8D06             (      exbasic.asm):02573                   BSR  LB814          ; PUT CHARACTER IN BUFFER
EA78 6DC0             (      exbasic.asm):02574                   TST  ,U+            ; CHECK FOR START OF NEXT TOKEN
EA7A 2AF8             (      exbasic.asm):02575                   BPL  LB80A          ; BRANCH IF NOT DONE WITH THIS TOKEN
EA7C 20B7             (      exbasic.asm):02576                   BRA  LB7CB          ; GO GET ANOTHER CHARACTER
EA7E 108C01ED         (      exbasic.asm):02577         LB814     CMPY #LINBUF+LBUFMX ; TEST FOR END OF LINE INPUT BUFFER
EA82 2406             (      exbasic.asm):02578                   BCC  LB820          ; BRANCH IF AT END OF BUFFER
EA84 847F             (      exbasic.asm):02579                   ANDA #$7F           ; MASK OFF BIT 7
EA86 A7A0             (      exbasic.asm):02580                   STA  ,Y+            ; * SAVE CHARACTER IN BUFFER AND
EA88 6FA4             (      exbasic.asm):02581                   CLR  ,Y             ; * CLEAR NEXT CHARACTER SLOT IN BUFFER
EA8A 39               (      exbasic.asm):02582         LB820     RTS
                      (      exbasic.asm):02583         *
                      (      exbasic.asm):02584         * CRUNCH THE LINE THAT THE INPUT POINTER IS
                      (      exbasic.asm):02585         * POINTING TO INTO THE LINE INPUT BUFFER
                      (      exbasic.asm):02586         * RETURN LENGTH OF CRUNCHED LINE IN ACCD
                      (      exbasic.asm):02587         *
EA8B 9E83             (      exbasic.asm):02588         LB821     LDX  CHARAD         ; GET BASIC'S INPUT POINTER ADDRESS
EA8D CE00F3           (      exbasic.asm):02589                   LDU  #LINBUF        ; POINT X TO LINE INPUT BUFFER
EA90 0F43             (      exbasic.asm):02590         LB829     CLR  V43            ; CLEAR ILLEGAL TOKEN FLAG
EA92 0F44             (      exbasic.asm):02591                   CLR  V44            ; CLEAR DATA FLAG
EA94 A680             (      exbasic.asm):02592         LB82D     LDA  ,X+            ; GET INPUT CHAR
EA96 2721             (      exbasic.asm):02593                   BEQ  LB852          ; BRANCH IF END OF LINE
EA98 0D43             (      exbasic.asm):02594                   TST  V43            ; * CHECK ILLEGAL TOKEN FLAG & BRANCH IF NOT
EA9A 270F             (      exbasic.asm):02595                   BEQ  LB844          ; * PROCESSING AN ILLEGAL TOKEN
EA9C BDE61A           (      exbasic.asm):02596                   JSR  LB3A2          ; SET CARRY IF NOT UPPER CASE ALPHA
EA9F 2418             (      exbasic.asm):02597                   BCC  LB852          ; BRANCH IF UPPER CASE ALPHA
EAA1 8130             (      exbasic.asm):02598                   CMPA #'0            ; * DON'T CRUNCH ASCII NUMERIC CHARACTERS
EAA3 2504             (      exbasic.asm):02599                   BLO  LB842          ; * BRANCH IF NOT NUMERIC
EAA5 8139             (      exbasic.asm):02600                   CMPA #'9            ; *
EAA7 2310             (      exbasic.asm):02601                   BLS  LB852          ; * BRANCH IF NUMERIC
                      (      exbasic.asm):02602         * END UP HERE IF NOT UPPER CASE ALPHA OR NUMERIC
EAA9 0F43             (      exbasic.asm):02603         LB842     CLR  V43            ; CLEAR ILLEGAL TOKEN FLAG
EAAB 8120             (      exbasic.asm):02604         LB844     CMPA #SPACE         ; SPACE?
EAAD 270A             (      exbasic.asm):02605                   BEQ  LB852          ; DO NOT REMOVE SPACES
EAAF 9742             (      exbasic.asm):02606                   STA  V42            ; SAVE INPUT CHARACTER AS SCAN DELIMITER
EAB1 8122             (      exbasic.asm):02607                   CMPA #'"            ; CHECK FOR STRING DELIMITER
EAB3 2738             (      exbasic.asm):02608                   BEQ  LB886          ; BRANCH IF STRING
EAB5 0D44             (      exbasic.asm):02609                   TST  V44            ; * CHECK DATA FLAG AND BRANCH IF CLEAR
EAB7 2719             (      exbasic.asm):02610                   BEQ  LB86B          ; * DO NOT CRUNCH DATA
EAB9 A7C0             (      exbasic.asm):02611         LB852     STA  ,U+            ; SAVE CHARACTER IN BUFFER
EABB 2706             (      exbasic.asm):02612                   BEQ  LB85C          ; BRANCH IF END OF LINE
EABD 813A             (      exbasic.asm):02613                   CMPA #':            ; * CHECK FOR END OF SUBLINE
EABF 27CF             (      exbasic.asm):02614                   BEQ  LB829          ; * AND RESET FLAGS IF END OF SUBLINE
EAC1 20D1             (      exbasic.asm):02615         LB85A     BRA  LB82D          ; GO GET ANOTHER CHARACTER
EAC3 6FC0             (      exbasic.asm):02616         LB85C     CLR  ,U+            ; * DOUBLE ZERO AT END OF LINE
EAC5 6FC0             (      exbasic.asm):02617                   CLR  ,U+            ; *
EAC7 1F30             (      exbasic.asm):02618                   TFR  U,D            ; SAVE ADDRESS OF END OF LINE IN ACCD
EAC9 8300F1           (      exbasic.asm):02619                   SUBD #LINHDR        ; LENGTH OF LINE IN ACCD
EACC 8E00F2           (      exbasic.asm):02620                   LDX  #LINBUF-1      ; * SET THE INPUT POINTER TO ONE BEFORE
EACF 9F83             (      exbasic.asm):02621                   STX  CHARAD         ; * THE START OF THE CRUNCHED LINE
EAD1 39               (      exbasic.asm):02622                   RTS                 ; EXIT 'CRUNCH'
EAD2 813F             (      exbasic.asm):02623         LB86B     CMPA #'?            ; CHECK FOR "?" - PRINT ABBREVIATION
EAD4 2604             (      exbasic.asm):02624                   BNE  LB873          ; BRANCH IF NOT PRINT ABBREVIATION
EAD6 8687             (      exbasic.asm):02625                   LDA  #TOK_PRINT     ; * GET THE PRINT TOKEN AND SAVE IT
EAD8 20DF             (      exbasic.asm):02626                   BRA  LB852          ; * IN BUFFER
EADA 8127             (      exbasic.asm):02627         LB873     CMPA #''            ; APOSTROPHE IS SAME AS REM
EADC 2613             (      exbasic.asm):02628                   BNE  LB88A          ; BRANCH IF NOT REMARK
EADE CC3A83           (      exbasic.asm):02629                   LDD  #$3A00+TOK_SNGL_Q ; COLON, REM TOKEN
EAE1 EDC1             (      exbasic.asm):02630                   STD  ,U++           ; SAVE IN BUFFER
EAE3 0F42             (      exbasic.asm):02631         LB87C     CLR  V42            ; SET DELIMITER = 0 (END OF LINE)
EAE5 A680             (      exbasic.asm):02632         LB87E     LDA  ,X+            ; SCAN TILL WE MATCH [V42]
EAE7 27D0             (      exbasic.asm):02633                   BEQ  LB852          ; BRANCH IF END OF LINE
EAE9 9142             (      exbasic.asm):02634                   CMPA V42            ; DELIMITER?
EAEB 27CC             (      exbasic.asm):02635                   BEQ  LB852          ; BRANCH OUT IF SO
EAED A7C0             (      exbasic.asm):02636         LB886     STA  ,U+            ; DON'T CRUNCH REMARKS OR STRINGS
EAEF 20F4             (      exbasic.asm):02637                   BRA  LB87E          ; GO GET MORE STRING OR REMARK
EAF1 8130             (      exbasic.asm):02638         LB88A     CMPA #'0            ; * LESS THAN ASCII ZERO?
EAF3 2504             (      exbasic.asm):02639                   BCS  LB892          ; * BRANCH IF SO
EAF5 813C             (      exbasic.asm):02640                   CMPA #';+1          ; = CHECK FOR NUMERIC VALUE, COLON OR SEMICOLON
EAF7 25C0             (      exbasic.asm):02641                   BCS  LB852          ; = AND INSERT IN BUFFER IF SO
EAF9 301F             (      exbasic.asm):02642         LB892     LEAX -1,X           ; MOVE INPUT POINTER BACK ONE
EAFB 3450             (      exbasic.asm):02643                   PSHS U,X            ; SAVE POINTERS TO INPUT STRING, OUTPUT STRING
EAFD 0F41             (      exbasic.asm):02644                   CLR  V41            ; TOKEN FLAG 0 = COMMAND, FF = SECONDARY
EAFF CEDBD8           (      exbasic.asm):02645                   LDU  #COMVEC-10     ; POINT U TO COMMAND INTERPRETATION
                      (      exbasic.asm):02646         *                             ; TABLE FOR BASIC - 10
EB02 0F42             (      exbasic.asm):02647         LB89B     CLR  V42            ; INITIALIZE V42 AS TOKEN COUNTER
EB04 334A             (      exbasic.asm):02648         LB89D     LEAU 10,U           ; MOVE TO NEXT COMMAND INTERPRETATION TABLE
EB06 A6C4             (      exbasic.asm):02649                   LDA  ,U             ; GET NUMBER OF COMMANDS
EB08 2731             (      exbasic.asm):02650                   BEQ  LB8D4          ; GO DO SECONDARY FUNCTIONS IF NO COMMAND TABLE
EB0A 10AE41           (      exbasic.asm):02651                   LDY  1,U            ; POINT Y TO COMMAND DICTIONARY TABLE
EB0D AEE4             (      exbasic.asm):02652         LB8A6     LDX  ,S             ; GET POINTER TO INPUT STRING
EB0F E6A0             (      exbasic.asm):02653         LB8A8     LDB  ,Y+            ; GET A BYTE FROM DICTIONARY TABLE
EB11 E080             (      exbasic.asm):02654                   SUBB ,X+            ; SUBTRACT INPUT CHARACTER
EB13 27FA             (      exbasic.asm):02655                   BEQ  LB8A8          ; LOOP IF SAME
EB15 C180             (      exbasic.asm):02656                   CMPB #$80           ; LAST CHAR IN RESERVED WORD TABLE HAD
                      (      exbasic.asm):02657         *                             ; BIT 7 SET, SO IF WE HAVE $80 HERE
                      (      exbasic.asm):02658         *                             ; THEN IT IS A GOOD COMPARE
EB17 2638             (      exbasic.asm):02659                   BNE  LB8EA          ; BRANCH IF NO MATCH - CHECK ANOTHER COMMAND
EB19 3262             (      exbasic.asm):02660                   LEAS 2,S            ; DELETE OLD INPUT POINTER FROM STACK
EB1B 3540             (      exbasic.asm):02661                   PULS U              ; GET POINTER TO OUTPUT STRING
EB1D DA42             (      exbasic.asm):02662                   ORB  V42            ; OR IN THE TABLE POSITION TO MAKE THE TOKEN
                      (      exbasic.asm):02663         *                             ; - NOTE THAT B ALREADY HAD $80 IN IT -
EB1F 9641             (      exbasic.asm):02664                   LDA  V41            ; * CHECK TOKEN FLAG AND BRANCH
EB21 2606             (      exbasic.asm):02665                   BNE  LB8C2          ; * IF SECONDARY
EB23 C184             (      exbasic.asm):02666                   CMPB #TOK_ELSE      ; IS IT ELSE TOKEN?
EB25 2606             (      exbasic.asm):02667                   BNE  LB8C6          ; NO
EB27 863A             (      exbasic.asm):02668                   LDA  #':            ; PUT A COLON (SUBLINE) BEFORE ELSE TOKEN
EB29 EDC1             (      exbasic.asm):02669         LB8C2     STD  ,U++           ; SECONDARY TOKENS PRECEEDED BY $FF
EB2B 2094             (      exbasic.asm):02670                   BRA  LB85A          ; GO PROCESS MORE INPUT CHARACTERS
EB2D E7C0             (      exbasic.asm):02671         LB8C6     STB  ,U+            ; SAVE THIS TOKEN
EB2F C186             (      exbasic.asm):02672                   CMPB #TOK_DATA      ; DATA TOKEN?
EB31 2602             (      exbasic.asm):02673                   BNE  LB8CE          ; NO
EB33 0C44             (      exbasic.asm):02674                   INC  V44            ; SET DATA FLAG
EB35 C182             (      exbasic.asm):02675         LB8CE     CMPB #TOK_REM       ; REM TOKEN?
EB37 27AA             (      exbasic.asm):02676                   BEQ  LB87C          ; YES
EB39 2086             (      exbasic.asm):02677         LB8D2     BRA  LB85A          ; GO PROCESS MORE INPUT CHARACTERS
                      (      exbasic.asm):02678         * CHECK FOR A SECONDARY TOKEN
EB3B CEDBDD           (      exbasic.asm):02679         LB8D4     LDU  #COMVEC-5      ; NOW DO SECONDARY FUNCTIONS
EB3E 0341             (      exbasic.asm):02680                   COM  V41            ; TOGGLE THE TOKEN FLAG
EB40 26C0             (      exbasic.asm):02681                   BNE  LB89B          ; BRANCH IF NOW CHECKING SECONDARY COMMANDS
                      (      exbasic.asm):02682         
                      (      exbasic.asm):02683         * THIS CODE WILL PROCESS INPUT DATA WHICH CANNOT BE CRUNCHED AND SO
                      (      exbasic.asm):02684         * IS ASSUMED TO BE ILLEGAL DATA OR AN ILLEGAL TOKEN
EB42 3550             (      exbasic.asm):02685                   PULS X,U            ; RESTORE INPUT AND OUTPUT POINTERS
EB44 A680             (      exbasic.asm):02686                   LDA  ,X+            ; * MOVE THE FIRST CHARACTER OF AN
EB46 A7C0             (      exbasic.asm):02687                   STA  ,U+            ; * ILLEGAL TOKEN
EB48 BDE61A           (      exbasic.asm):02688                   JSR  LB3A2          ; SET CARRY IF NOT ALPHA
EB4B 25EC             (      exbasic.asm):02689                   BCS  LB8D2          ; BRANCH IF NOT ALPHA
EB4D 0343             (      exbasic.asm):02690                   COM  V43            ; SET ILLEGAL TOKEN FLAG IF UPPER CASE ALPHA
EB4F 20E8             (      exbasic.asm):02691                   BRA  LB8D2          ; PROCESS MORE INPUT CHARACTERS
EB51 0C42             (      exbasic.asm):02692         LB8EA     INC  V42            ; INCREMENT TOKEN COUNTER
EB53 4A               (      exbasic.asm):02693                   DECA                ; DECR COMMAND COUNTER
EB54 27AE             (      exbasic.asm):02694                   BEQ  LB89D          ; GET ANOTHER COMMAND TABLE IF DONE W/THIS ONE
EB56 313F             (      exbasic.asm):02695                   LEAY -1,Y           ; MOVE POINTER BACK ONE
EB58 E6A0             (      exbasic.asm):02696         LB8F1     LDB  ,Y+            ; * GET TO NEXT
EB5A 2AFC             (      exbasic.asm):02697                   BPL  LB8F1          ; * RESERVED WORD
EB5C 20AF             (      exbasic.asm):02698                   BRA  LB8A6          ; GO SEE IF THIS WORD IS A MATCH
                      (      exbasic.asm):02699         
                      (      exbasic.asm):02700         * PRINT
EB5E 2739             (      exbasic.asm):02701         PRINT     BEQ  LB958          ; BRANCH IF NO ARGUMENT
EB60 8D01             (      exbasic.asm):02702                   BSR  LB8FE          ; CHECK FOR ALL PRINT OPTIONS
EB62 39               (      exbasic.asm):02703                   RTS
EB63                  (      exbasic.asm):02704         LB8FE
EB63 BDFAC3           (      exbasic.asm):02705         LB918     JSR  XVEC9          ; CALL EXTENDED BASIC ADD-IN
EB66 273E             (      exbasic.asm):02706         LB91B     BEQ  LB965          ; RETURN IF END OF LINE
EB68 819F             (      exbasic.asm):02707         LB91D     CMPA #TOK_TAB       ; TOKEN FOR TAB( ?
EB6A 2753             (      exbasic.asm):02708                   BEQ  LB97E          ; YES
EB6C 812C             (      exbasic.asm):02709                   CMPA #',            ; COMMA?
EB6E 2737             (      exbasic.asm):02710                   BEQ  LB966          ; YES - ADVANCE TO NEXT TAB FIELD
EB70 813B             (      exbasic.asm):02711                   CMPA #';            ; SEMICOLON?
EB72 2760             (      exbasic.asm):02712                   BEQ  LB997          ; YES - DO NOT ADVANCE CURSOR
EB74 BDE3D3           (      exbasic.asm):02713                   JSR  LB156          ; EVALUATE EXPRESSION
EB77 9606             (      exbasic.asm):02714                   LDA  VALTYP         ; * GET VARIABLE TYPE AND
EB79 3402             (      exbasic.asm):02715                   PSHS A              ; * SAVE IT ON THE STACK
EB7B 2606             (      exbasic.asm):02716                   BNE  LB938          ; BRANCH IF STRING VARIABLE
EB7D BDF016           (      exbasic.asm):02717                   JSR  LBDD9          ; CONVERT FP NUMBER TO AN ASCII STRING
EB80 BDE78E           (      exbasic.asm):02718                   JSR  LB516          ; PARSE A STRING FROM (X-1) AND PUT
                      (      exbasic.asm):02719         *                             ; DESCRIPTOR ON STRING STACK
EB83 8D57             (      exbasic.asm):02720         LB938     BSR  LB99F          ; PRINT STRING POINTED TO BY X
EB85 3504             (      exbasic.asm):02721                   PULS B              ; GET VARIABLE TYPE BACK
EB87 BDDC24           (      exbasic.asm):02722                   JSR  LA35F          ; SET UP TAB WIDTH ZONE, ETC
EB8A 5D               (      exbasic.asm):02723         LB949     TSTB                ; CHECK CURRENT PRINT POSITION
EB8B 2608             (      exbasic.asm):02724                   BNE  LB954          ; BRANCH IF NOT AT START OF LINE
EB8D 9D82             (      exbasic.asm):02725                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
EB8F 812C             (      exbasic.asm):02726                   CMPA #',            ; COMMA?
EB91 2714             (      exbasic.asm):02727                   BEQ  LB966          ; SKIP TO NEXT TAB FIELD
EB93 8D54             (      exbasic.asm):02728                   BSR  LB9AC          ; SEND A SPACE TO CONSOLE OUT
EB95 9D82             (      exbasic.asm):02729         LB954     JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
EB97 26CF             (      exbasic.asm):02730                   BNE  LB91D          ; BRANCH IF NOT END OF LINE
EB99 860D             (      exbasic.asm):02731         LB958     LDA  #CR            ; * SEND A CR TO
EB9B 2051             (      exbasic.asm):02732                   BRA  LB9B1          ; * CONSOLE OUT
EB9D BDDC24           (      exbasic.asm):02733         LB95C     JSR  LA35F          ; SET UP TAB WIDTH, ZONE ETC
EBA0 27F7             (      exbasic.asm):02734                   BEQ  LB958          ; BRANCH IF WIDTH = ZERO
EBA2 966C             (      exbasic.asm):02735                   LDA  DEVPOS         ; GET PRINT POSITION
EBA4 26F3             (      exbasic.asm):02736                   BNE  LB958          ; BRANCH IF NOT AT START OF LINE
EBA6 39               (      exbasic.asm):02737         LB965     RTS
                      (      exbasic.asm):02738         * SKIP TO NEXT TAB FIELD
EBA7 BDDC24           (      exbasic.asm):02739         LB966     JSR  LA35F          ; SET UP TAB WIDTH, ZONE ETC
EBAA 270A             (      exbasic.asm):02740                   BEQ  LB975          ; BRANCH IF LINE WIDTH = 0 (CASSETTE)
EBAC D66C             (      exbasic.asm):02741                   LDB  DEVPOS         ; GET CURRENT POSITION
EBAE D16B             (      exbasic.asm):02742                   CMPB DEVLCF         ; COMPARE TO LAST TAB ZONE
EBB0 2506             (      exbasic.asm):02743                   BCS  LB977          ; BRANCH IF < LAST TAB ZONE
EBB2 8DE5             (      exbasic.asm):02744                   BSR  LB958          ; SEND A CARRIAGE RETURN TO CONSOLE OUT
EBB4 201E             (      exbasic.asm):02745                   BRA  LB997          ; GET MORE DATA
EBB6 D66C             (      exbasic.asm):02746         LB975     LDB  DEVPOS         ; *
EBB8 D06A             (      exbasic.asm):02747         LB977     SUBB DEVCFW         ; * SUBTRACT TAB FIELD WIDTH FROM CURRENT
EBBA 24FC             (      exbasic.asm):02748                   BCC  LB977          ; * POSITION UNTIL CARRY SET - NEGATING THE
EBBC 50               (      exbasic.asm):02749                   NEGB                ; * REMAINDER LEAVES THE NUMBER OF SPACES TO NEXT
                      (      exbasic.asm):02750         *              ; * TAB ZONE IN ACCB
EBBD 2010             (      exbasic.asm):02751                   BRA  LB98E          ; GO ADVANCE TO NEXT TAB ZONE
                      (      exbasic.asm):02752         
                      (      exbasic.asm):02753         * PRINT TAB(
EBBF BDE981           (      exbasic.asm):02754         LB97E     JSR  LB709          ; EVALUATE EXPRESSION - RETURN VALUE IN B
EBC2 8129             (      exbasic.asm):02755                   CMPA #')            ; * 'SYNTAX' ERROR IF NOT ')'
EBC4 1026F92C         (      exbasic.asm):02756                   LBNE LB277          ; *
EBC8 BDDC24           (      exbasic.asm):02757                   JSR  LA35F          ; SET UP TAB WIDTH, ZONE ETC
EBCB D06C             (      exbasic.asm):02758                   SUBB DEVPOS         ; GET DIFFERENCE OF PRINT POSITION & TAB POSITION
EBCD 2305             (      exbasic.asm):02759                   BLS  LB997          ; BRANCH IF TAB POSITION < CURRENT POSITION
EBCF                  (      exbasic.asm):02760         LB98E
EBCF 8D18             (      exbasic.asm):02761         LB992     BSR  LB9AC          ; SEND A SPACE TO CONSOLE OUT
EBD1 5A               (      exbasic.asm):02762                   DECB                ; DECREMENT DIFFERENCE COUNT
EBD2 26FB             (      exbasic.asm):02763                   BNE  LB992          ; BRANCH UNTIL CURRENT POSITION = TAB POSITION
EBD4 9D7C             (      exbasic.asm):02764         LB997     JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
EBD6 7EEB66           (      exbasic.asm):02765                   JMP  LB91B          ; LOOK FOR MORE PRINT DATA
                      (      exbasic.asm):02766         * COPY A STRING FROM (X) TO CONSOLE OUT
EBD9 BDE790           (      exbasic.asm):02767         LB99C     JSR  LB518          ; PARSE A STRING FROM X AND PUT
                      (      exbasic.asm):02768         *         DESCRIPTOR ON STRING STACK
EBDC BDE8CF           (      exbasic.asm):02769         LB99F     JSR  LB657          ; GET LENGTH OF STRING AND REMOVE
                      (      exbasic.asm):02770         *         DESCRIPTOR FROM STRING STACK
EBDF 5C               (      exbasic.asm):02771                   INCB                ; COMPENSATE FOR DECB BELOW
EBE0 5A               (      exbasic.asm):02772         LB9A3     DECB                ; DECREMENT COUNTER
EBE1 27C3             (      exbasic.asm):02773                   BEQ  LB965          ; EXIT ROUTINE
EBE3 A680             (      exbasic.asm):02774                   LDA  ,X+            ; GET A CHARACTER FROM X
EBE5 8D07             (      exbasic.asm):02775                   BSR  LB9B1          ; SEND TO CONSOLE OUT
EBE7 20F7             (      exbasic.asm):02776                   BRA  LB9A3          ; KEEP LOOPING
EBE9 8620             (      exbasic.asm):02777         LB9AC     LDA  #SPACE         ; SPACE TO CONSOLE OUT
EBEB 8C               (      exbasic.asm):02778                   FCB  SKP2           ; SKIP NEXT TWO BYTES
EBEC 863F             (      exbasic.asm):02779         LB9AF     LDA  #'?            ; QUESTION MARK TO CONSOLE OUT
EBEE 7EDB14           (      exbasic.asm):02780         LB9B1     JMP  PUTCHR         ; JUMP TO CONSOLE OUT
                      (      exbasic.asm):02781         
                      (      exbasic.asm):02782         * FLOATING POINT MATH PACKAGE
                      (      exbasic.asm):02783         
                      (      exbasic.asm):02784         * ADD .5 TO FPA0
EBF1 8EF0FD           (      exbasic.asm):02785         LB9B4     LDX  #LBEC0         ; FLOATING POINT CONSTANT (.5)
EBF4 2009             (      exbasic.asm):02786                   BRA  LB9C2          ; ADD .5 TO FPA0
                      (      exbasic.asm):02787         * SUBTRACT FPA0 FROM FP NUMBER POINTED
                      (      exbasic.asm):02788         * TO BY (X), LEAVE RESULT IN FPA0
EBF6 BDED6C           (      exbasic.asm):02789         LB9B9     JSR  LBB2F          ; COPY PACKED FP DATA FROM (X) TO FPA1
                      (      exbasic.asm):02790         
                      (      exbasic.asm):02791         * ARITHMETIC OPERATION (-) JUMPS HERE - SUBTRACT FPA0 FROM FPA1 (ENTER
                      (      exbasic.asm):02792         * WITH EXPONENT OF FPA0 IN ACCB AND EXPONENT OF FPA1 IN ACCA)
EBF9 0354             (      exbasic.asm):02793         LB9BC     COM  FP0SGN         ; CHANGE MANTISSA SIGN OF FPA0
EBFB 0362             (      exbasic.asm):02794                   COM  RESSGN         ; REVERSE RESULT SIGN FLAG
EBFD 2003             (      exbasic.asm):02795                   BRA  LB9C5          ; GO ADD FPA1 AND FPA0
                      (      exbasic.asm):02796         * ADD FP NUMBER POINTED TO BY
                      (      exbasic.asm):02797         * (X) TO FPA0 - LEAVE RESULT IN FPA0
EBFF BDED6C           (      exbasic.asm):02798         LB9C2     JSR  LBB2F          ; UNPACK PACKED FP DATA FROM (X) TO
                      (      exbasic.asm):02799         *         FPA1; RETURN EXPONENT OF FPA1 IN ACCA
                      (      exbasic.asm):02800         
                      (      exbasic.asm):02801         * ARITHMETIC OPERATION (+) JUMPS HERE - ADD FPA0 TO
                      (      exbasic.asm):02802         
EC02 5D               (      exbasic.asm):02803         LB9C5     TSTB                ; CHECK EXPONENT OF FPA0
EC03 10270280         (      exbasic.asm):02804                   LBEQ LBC4A          ; COPY FPA1 TO FPA0 IF FPA0 =
EC07 8E005C           (      exbasic.asm):02805                   LDX  #FP1EXP        ; POINT X TO FPA1
EC0A 1F89             (      exbasic.asm):02806         LB9CD     TFR  A,B            ; PUT EXPONENT OF FPA1 INTO ACCB
EC0C 5D               (      exbasic.asm):02807                   TSTB                ; CHECK EXPONENT
EC0D 276C             (      exbasic.asm):02808                   BEQ  LBA3E          ; RETURN IF EXPONENT = 0 (ADDING 0 TO FPA0)
EC0F D04F             (      exbasic.asm):02809                   SUBB FP0EXP         ; SUBTRACT EXPONENT OF FPA0 FROM EXPONENT OF FPA1
EC11 2769             (      exbasic.asm):02810                   BEQ  LBA3F          ; BRANCH IF EXPONENTS ARE EQUAL
EC13 250A             (      exbasic.asm):02811                   BCS  LB9E2          ; BRANCH IF EXPONENT FPA0 > FPA1
EC15 974F             (      exbasic.asm):02812                   STA  FP0EXP         ; REPLACE FPA0 EXPONENT WITH FPA1 EXPONENT
EC17 9661             (      exbasic.asm):02813                   LDA  FP1SGN         ; * REPLACE FPA0 MANTISSA SIGN
EC19 9754             (      exbasic.asm):02814                   STA  FP0SGN         ; * WITH FPA1 MANTISSA SIGN
EC1B 8E004F           (      exbasic.asm):02815                   LDX  #FP0EXP        ; POINT X TO FPA0
EC1E 50               (      exbasic.asm):02816                   NEGB                ; NEGATE DIFFERENCE OF EXPONENTS
EC1F C1F8             (      exbasic.asm):02817         LB9E2     CMPB #-8            ; TEST DIFFERENCE OF EXPONENTS
EC21 2F59             (      exbasic.asm):02818                   BLE  LBA3F          ; BRANCH IF DIFFERENCE OF EXPONENTS <= 8
EC23 4F               (      exbasic.asm):02819                   CLRA                ; CLEAR OVERFLOW BYTE
EC24 6401             (      exbasic.asm):02820                   LSR  1,X            ; SHIFT MS BYTE OF MANTISSA; BIT 7 = 0
EC26 BDECF7           (      exbasic.asm):02821                   JSR  LBABA          ; GO SHIFT MANTISSA OF (X) TO THE RIGHT (B) TIMES
EC29 D662             (      exbasic.asm):02822         LB9EC     LDB  RESSGN         ; GET SIGN FLAG
EC2B 2A0B             (      exbasic.asm):02823                   BPL  LB9FB          ; BRANCH IF FPA0 AND FPA1 SIGNS ARE THE SAME
EC2D 6301             (      exbasic.asm):02824                   COM  1,X            ; * COMPLEMENT MANTISSA POINTED
EC2F 6302             (      exbasic.asm):02825                   COM  2,X            ; * TO BY (X) THE
EC31 6303             (      exbasic.asm):02826                   COM  3,X            ; * ADCA BELOW WILL
EC33 6304             (      exbasic.asm):02827                   COM  4,X            ; * CONVERT THIS OPERATION
EC35 43               (      exbasic.asm):02828                   COMA                ; * INTO A NEG (MANTISSA)
EC36 8900             (      exbasic.asm):02829                   ADCA #0             ; ADD ONE TO ACCA - COMA ALWAYS SETS THE CARRY FLAG
                      (      exbasic.asm):02830         * THE PREVIOUS TWO BYTES MAY BE REPLACED BY A NEGA
                      (      exbasic.asm):02831         *
                      (      exbasic.asm):02832         * ADD MANTISSAS OF FPA0 AND FPA1, PUT RESULT IN FPA0
EC38 9763             (      exbasic.asm):02833         LB9FB     STA  FPSBYT         ; SAVE FPA SUB BYTE
EC3A 9653             (      exbasic.asm):02834                   LDA  FPA0+3         ; * ADD LS BYTE
EC3C 9960             (      exbasic.asm):02835                   ADCA FPA1+3         ; * OF MANTISSA
EC3E 9753             (      exbasic.asm):02836                   STA  FPA0+3         ; SAVE IN FPA0 LSB
EC40 9652             (      exbasic.asm):02837                   LDA  FPA0+2         ; * ADD NEXT BYTE
EC42 995F             (      exbasic.asm):02838                   ADCA FPA1+2         ; * OF MANTISSA
EC44 9752             (      exbasic.asm):02839                   STA  FPA0+2         ; SAVE IN FPA0
EC46 9651             (      exbasic.asm):02840                   LDA  FPA0+1         ; * ADD NEXT BYTE
EC48 995E             (      exbasic.asm):02841                   ADCA FPA1+1         ; * OF MANTISSA
EC4A 9751             (      exbasic.asm):02842                   STA  FPA0+1         ; SAVE IN FPA0
EC4C 9650             (      exbasic.asm):02843                   LDA  FPA0           ; * ADD MS BYTE
EC4E 995D             (      exbasic.asm):02844                   ADCA FPA1           ; * OF MANTISSA
EC50 9750             (      exbasic.asm):02845                   STA  FPA0           ; SAVE IN FPA0
EC52 5D               (      exbasic.asm):02846                   TSTB                ; TEST SIGN FLAG
EC53 2A44             (      exbasic.asm):02847                   BPL  LBA5C          ; BRANCH IF FPA0 & FPA1 SIGNS WERE ALIKE
EC55 2502             (      exbasic.asm):02848         LBA18     BCS  LBA1C          ; BRANCH IF POSITIVE MANTISSA
EC57 8D5D             (      exbasic.asm):02849                   BSR  LBA79          ; NEGATE FPA0 MANTISSA
                      (      exbasic.asm):02850         
                      (      exbasic.asm):02851         * NORMALIZE FPA0
EC59 5F               (      exbasic.asm):02852         LBA1C     CLRB                ; CLEAR TEMPORARY EXPONENT ACCUMULATOR
EC5A 9650             (      exbasic.asm):02853         LBA1D     LDA  FPA0           ; TEST MSB OF MANTISSA
EC5C 262E             (      exbasic.asm):02854                   BNE  LBA4F          ; BRANCH IF <> 0
EC5E 9651             (      exbasic.asm):02855                   LDA  FPA0+1         ; * IF THE MSB IS
EC60 9750             (      exbasic.asm):02856                   STA  FPA0           ; * 0, THEN SHIFT THE
EC62 9652             (      exbasic.asm):02857                   LDA  FPA0+2         ; * MANTISSA A WHOLE BYTE
EC64 9751             (      exbasic.asm):02858                   STA  FPA0+1         ; * AT A TIME. THIS
EC66 9653             (      exbasic.asm):02859                   LDA  FPA0+3         ; * IS FASTER THAN ONE
EC68 9752             (      exbasic.asm):02860                   STA  FPA0+2         ; * BIT AT A TIME
EC6A 9663             (      exbasic.asm):02861                   LDA  FPSBYT         ; * BUT USES MORE MEMORY.
EC6C 9753             (      exbasic.asm):02862                   STA  FPA0+3         ; * FPSBYT, THE CARRY IN
EC6E 0F63             (      exbasic.asm):02863                   CLR  FPSBYT         ; * BYTE, REPLACES THE MATISSA LSB.
EC70 CB08             (      exbasic.asm):02864                   ADDB #8             ; SHIFTING ONE BYTE = 8 BIT SHIFTS; ADD 8 TO EXPONENT
EC72 C128             (      exbasic.asm):02865                   CMPB #5*8           ; CHECK FOR 5 SHIFTS
EC74 2DE4             (      exbasic.asm):02866                   BLT  LBA1D          ; BRANCH IF < 5 SHIFTS, IF > 5, THEN MANTISSA = 0
EC76 4F               (      exbasic.asm):02867         LBA39     CLRA                ; A ZERO EXPONENT = 0 FLOATING POINT
EC77 974F             (      exbasic.asm):02868         LBA3A     STA  FP0EXP         ; ZERO OUT THE EXPONENT
EC79 9754             (      exbasic.asm):02869                   STA  FP0SGN         ; ZERO OUT THE MANTISSA SIGN
EC7B 39               (      exbasic.asm):02870         LBA3E     RTS
EC7C 8D6D             (      exbasic.asm):02871         LBA3F     BSR  LBAAE          ; SHIFT FPA0 MANTISSA TO RIGHT
EC7E 5F               (      exbasic.asm):02872                   CLRB                ; CLEAR CARRY FLAG
EC7F 20A8             (      exbasic.asm):02873                   BRA  LB9EC
                      (      exbasic.asm):02874         * SHIFT FPA0 LEFT ONE BIT UNTIL BIT 7
                      (      exbasic.asm):02875         * OF MATISSA MS BYTE = 1
EC81 5C               (      exbasic.asm):02876         LBA44     INCB                ; ADD ONE TO EXPONENT ACCUMULATOR
EC82 0863             (      exbasic.asm):02877                   ASL  FPSBYT         ; SHIFT SUB BYTE ONE LEFT
EC84 0953             (      exbasic.asm):02878                   ROL  FPA0+3         ; SHIFT LS BYTE
EC86 0952             (      exbasic.asm):02879                   ROL  FPA0+2         ; SHIFT NS BYTE
EC88 0951             (      exbasic.asm):02880                   ROL  FPA0+1         ; SHIFT NS BYTE
EC8A 0950             (      exbasic.asm):02881                   ROL  FPA0           ; SHIFT MS BYTE
EC8C 2AF3             (      exbasic.asm):02882         LBA4F     BPL  LBA44          ; BRANCH IF NOT YET NORMALIZED
EC8E 964F             (      exbasic.asm):02883                   LDA  FP0EXP         ; GET CURRENT EXPONENT
EC90 3404             (      exbasic.asm):02884                   PSHS B              ; SAVE EXPONENT MODIFIER CAUSED BY NORMALIZATION
EC92 A0E0             (      exbasic.asm):02885                   SUBA ,S+            ; SUBTRACT ACCUMULATED EXPONENT MODIFIER
EC94 974F             (      exbasic.asm):02886                   STA  FP0EXP         ; SAVE AS NEW EXPONENT
EC96 23DE             (      exbasic.asm):02887                   BLS  LBA39          ; SET FPA0 = 0 IF THE NORMALIZATION CAUSED
                      (      exbasic.asm):02888         *         MORE OR EQUAL NUMBER OF LEFT SHIFTS THAN THE
                      (      exbasic.asm):02889         *         SIZE OF THE EXPONENT
EC98 8C               (      exbasic.asm):02890                   FCB  SKP2           ; SKIP 2 BYTES
EC99 2508             (      exbasic.asm):02891         LBA5C     BCS  LBA66          ; BRANCH IF MANTISSA OVERFLOW
EC9B 0863             (      exbasic.asm):02892                   ASL  FPSBYT         ; SUB BYTE BIT 7 TO CARRY - USE AS ROUND-OFF
                      (      exbasic.asm):02893         *                             ; FLAG (TRUNCATE THE REST OF SUB BYTE)
EC9D 8600             (      exbasic.asm):02894                   LDA  #0             ; CLRA, BUT DO NOT CHANGE CARRY FLAG
EC9F 9763             (      exbasic.asm):02895                   STA  FPSBYT         ; CLEAR THE SUB BYTE
ECA1 200C             (      exbasic.asm):02896                   BRA  LBA72          ; GO ROUND-OFF RESULT
ECA3 0C4F             (      exbasic.asm):02897         LBA66     INC  FP0EXP         ; INCREMENT EXPONENT - MULTIPLY BY 2
ECA5 2728             (      exbasic.asm):02898                   BEQ  LBA92          ; OVERFLOW ERROR IF CARRY PAST $FF
ECA7 0650             (      exbasic.asm):02899                   ROR  FPA0           ; * SHIFT MANTISSA
ECA9 0651             (      exbasic.asm):02900                   ROR  FPA0+1         ; * ONE TO
ECAB 0652             (      exbasic.asm):02901                   ROR  FPA0+2         ; * THE RIGHT -
ECAD 0653             (      exbasic.asm):02902                   ROR  FPA0+3         ; * DIVIDE BY TWO
ECAF 2404             (      exbasic.asm):02903         LBA72     BCC  LBA78          ; BRANCH IF NO ROUND-OFF NEEDED
ECB1 8D0D             (      exbasic.asm):02904                   BSR  LBA83          ; ADD ONE TO MANTISSA - ROUND OFF
ECB3 27EE             (      exbasic.asm):02905                   BEQ  LBA66          ; BRANCH iF OVERFLOW - MANTISSA = 0
ECB5 39               (      exbasic.asm):02906         LBA78     RTS
                      (      exbasic.asm):02907         * NEGATE FPA0 MANTISSA
ECB6 0354             (      exbasic.asm):02908         LBA79     COM  FP0SGN         ; TOGGLE SIGN OF MANTISSA
ECB8 0350             (      exbasic.asm):02909         LBA7B     COM  FPA0           ; * COMPLEMENT ALL 4 MANTISSA BYTES
ECBA 0351             (      exbasic.asm):02910                   COM  FPA0+1         ; *
ECBC 0352             (      exbasic.asm):02911                   COM  FPA0+2         ; *
ECBE 0353             (      exbasic.asm):02912                   COM  FPA0+3         ; *
                      (      exbasic.asm):02913         * ADD ONE TO FPA0 MANTISSA
ECC0 9E52             (      exbasic.asm):02914         LBA83     LDX  FPA0+2         ; * GET BOTTOM 2 MANTISSA
ECC2 3001             (      exbasic.asm):02915                   LEAX 1,X            ; * BYTES, ADD ONE TO
ECC4 9F52             (      exbasic.asm):02916                   STX  FPA0+2         ; * THEM AND SAVE THEM
ECC6 2606             (      exbasic.asm):02917                   BNE  LBA91          ; BRANCH IF NO OVERFLOW
ECC8 9E50             (      exbasic.asm):02918                   LDX  FPA0           ; * IF OVERFLOW ADD ONE
ECCA 3001             (      exbasic.asm):02919                   LEAX 1,X            ; * TO TOP 2 MANTISSA
ECCC 9F50             (      exbasic.asm):02920                   STX  FPA0           ; * BYTES AND SAVE THEM
ECCE 39               (      exbasic.asm):02921         LBA91     RTS
ECCF C60A             (      exbasic.asm):02922         LBA92     LDB  #2*5           ; OV' OVERFLOW ERROR
ECD1 7EDEF7           (      exbasic.asm):02923                   JMP  LAC46          ; PROCESS AN ERROR
ECD4 8E0012           (      exbasic.asm):02924         LBA97     LDX  #FPA2-1        ; POINT X TO FPA2
                      (      exbasic.asm):02925         * SHIFT FPA POINTED TO BY (X) TO
                      (      exbasic.asm):02926         * THE RIGHT -(B) TIMES. EXIT WITH
                      (      exbasic.asm):02927         * ACCA CONTAINING DATA SHIFTED OUT
                      (      exbasic.asm):02928         * TO THE RIGHT (SUB BYTE) AND THE DATA
                      (      exbasic.asm):02929         * SHIFTED IN FROM THE LEFT WILL COME FROM FPCARY
ECD7 A604             (      exbasic.asm):02930         LBA9A     LDA  4,X            ; GET LS BYTE OF MANTISSA (X)
ECD9 9763             (      exbasic.asm):02931                   STA  FPSBYT         ; SAVE IN FPA SUB BYTE
ECDB A603             (      exbasic.asm):02932                   LDA  3,X            ; * SHIFT THE NEXT THREE BYTES OF THE
ECDD A704             (      exbasic.asm):02933                   STA  4,X            ; * MANTISSA RIGHT ONE COMPLETE BYTE.
ECDF A602             (      exbasic.asm):02934                   LDA  2,X            ; *
ECE1 A703             (      exbasic.asm):02935                   STA  3,X            ; *
ECE3 A601             (      exbasic.asm):02936                   LDA  1,X            ; *
ECE5 A702             (      exbasic.asm):02937                   STA  2,X            ; *
ECE7 965B             (      exbasic.asm):02938                   LDA  FPCARY         ; GET THE CARRY IN BYTE
ECE9 A701             (      exbasic.asm):02939                   STA  1,X            ; STORE AS THE MS MANTISSA BYTE OF (X)
ECEB CB08             (      exbasic.asm):02940         LBAAE     ADDB #8             ; ADD 8 TO DIFFERENCE OF EXPONENTS
ECED 2FE8             (      exbasic.asm):02941                   BLE  LBA9A          ; BRANCH IF EXPONENT DIFFERENCE < -8
ECEF 9663             (      exbasic.asm):02942                   LDA  FPSBYT         ; GET FPA SUB BYTE
ECF1 C008             (      exbasic.asm):02943                   SUBB #8             ; CAST OUT THE 8 ADDED IN ABOVE
ECF3 270C             (      exbasic.asm):02944                   BEQ  LBAC4          ; BRANCH IF EXPONENT DIFFERENCE = 0
                      (      exbasic.asm):02945         
                      (      exbasic.asm):02946         
ECF5 6701             (      exbasic.asm):02947         LBAB8     ASR  1,X            ; * SHIFT MANTISSA AND SUB BYTE ONE BIT TO THE RIGHT
ECF7 6602             (      exbasic.asm):02948         LBABA     ROR  2,X            ; *
ECF9 6603             (      exbasic.asm):02949                   ROR  3,X            ; *
ECFB 6604             (      exbasic.asm):02950                   ROR  4,X            ; *
ECFD 46               (      exbasic.asm):02951                   RORA                ; *
ECFE 5C               (      exbasic.asm):02952                   INCB                ; ADD ONE TO EXPONENT DIFFERENCE
ECFF 26F4             (      exbasic.asm):02953                   BNE  LBAB8          ; BRANCH IF EXPONENTS NOT =
ED01 39               (      exbasic.asm):02954         LBAC4     RTS
ED02 8100000000       (      exbasic.asm):02955         LBAC5     FCB  $81,$00,$00,$00,$00 ; FLOATING POINT CONSTANT 1.0
                      (      exbasic.asm):02956         
                      (      exbasic.asm):02957         * ARITHMETIC OPERATION (*) JUMPS HERE - MULTIPLY
                      (      exbasic.asm):02958         * FPA0 BY (X) - RETURN PRODUCT IN FPA0
ED07 8D63             (      exbasic.asm):02959         LBACA     BSR  LBB2F          ; MOVE PACKED FPA FROM (X) TO FPA1
ED09 2760             (      exbasic.asm):02960         LBACC     BEQ  LBB2E          ; BRANCH IF EXPONENT OF FPA0 = 0
ED0B 8D78             (      exbasic.asm):02961                   BSR  LBB48          ; CALCULATE EXPONENT OF PRODUCT
                      (      exbasic.asm):02962         * MULTIPLY FPA0 MANTISSA BY FPA1. NORMALIZE
                      (      exbasic.asm):02963         * HIGH ORDER BYTES OF PRODUCT IN FPA0. THE
                      (      exbasic.asm):02964         * LOW ORDER FOUR BYTES OF THE PRODUCT WILL
                      (      exbasic.asm):02965         * BE STORED IN VAB-VAE.
ED0D 8600             (      exbasic.asm):02966         LBAD0     LDA  #0             ; * ZERO OUT MANTISSA OF FPA2
ED0F 9713             (      exbasic.asm):02967                   STA  FPA2           ; *
ED11 9714             (      exbasic.asm):02968                   STA  FPA2+1         ; *
ED13 9715             (      exbasic.asm):02969                   STA  FPA2+2         ; *
ED15 9716             (      exbasic.asm):02970                   STA  FPA2+3         ; *
ED17 D653             (      exbasic.asm):02971                   LDB  FPA0+3         ; GET LS BYTE OF FPA0
ED19 8D22             (      exbasic.asm):02972                   BSR  LBB00          ; MULTIPLY BY FPA1
ED1B D663             (      exbasic.asm):02973                   LDB  FPSBYT         ; * TEMPORARILY SAVE SUB BYTE 4
ED1D D78B             (      exbasic.asm):02974                   STB  VAE            ; *
ED1F D652             (      exbasic.asm):02975                   LDB  FPA0+2         ; GET NUMBER 3 MANTISSA BYTE OF FPA0
ED21 8D1A             (      exbasic.asm):02976                   BSR  LBB00          ; MULTIPLY BY FPA1
ED23 D663             (      exbasic.asm):02977                   LDB  FPSBYT         ; * TEMPORARILY SAVE SUB BYTE 3
ED25 D78A             (      exbasic.asm):02978                   STB  VAD            ; *
ED27 D651             (      exbasic.asm):02979                   LDB  FPA0+1         ; GET NUMBER 2 MANTISSA BYTE OF FPA0
ED29 8D12             (      exbasic.asm):02980                   BSR  LBB00          ; MULTIPLY BY FPA1
ED2B D663             (      exbasic.asm):02981                   LDB  FPSBYT         ; * TEMPORARILY SAVE SUB BYTE 2
ED2D D789             (      exbasic.asm):02982                   STB  VAC            ; *
ED2F D650             (      exbasic.asm):02983                   LDB  FPA0           ; GET MS BYTE OF FPA0 MANTISSA
ED31 8D0C             (      exbasic.asm):02984                   BSR  LBB02          ; MULTIPLY BY FPA1
ED33 D663             (      exbasic.asm):02985                   LDB  FPSBYT         ; * TEMPORARILY SAVE SUB BYTE 1
ED35 D788             (      exbasic.asm):02986                   STB  VAB            ; *
ED37 BDEE48           (      exbasic.asm):02987                   JSR  LBC0B          ; COPY MANTISSA FROM FPA2 TO FPA0
ED3A 7EEC59           (      exbasic.asm):02988                   JMP  LBA1C          ; NORMALIZE FPA0
ED3D 2795             (      exbasic.asm):02989         LBB00     BEQ  LBA97          ; SHIFT FPA2 ONE BYTE TO RIGHT
ED3F 43               (      exbasic.asm):02990         LBB02     COMA                ; SET CARRY FLAG
                      (      exbasic.asm):02991         * MULTIPLY FPA1 MANTISSA BY ACCB AND
                      (      exbasic.asm):02992         * ADD PRODUCT TO FPA2 MANTISSA
ED40 9613             (      exbasic.asm):02993         LBB03     LDA  FPA2           ; GET FPA2 MS BYTE
ED42 56               (      exbasic.asm):02994                   RORB                ; ROTATE CARRY FLAG INTO SHIFT COUNTER;
                      (      exbasic.asm):02995         *         DATA BIT INTO CARRY
ED43 2726             (      exbasic.asm):02996                   BEQ  LBB2E          ; BRANCH WHEN 8 SHIFTS DONE
ED45 2416             (      exbasic.asm):02997                   BCC  LBB20          ; DO NOT ADD FPA1 IF DATA BIT = 0
ED47 9616             (      exbasic.asm):02998                   LDA  FPA2+3         ; * ADD MANTISSA LS BYTE
ED49 9B60             (      exbasic.asm):02999                   ADDA FPA1+3         ; *
ED4B 9716             (      exbasic.asm):03000                   STA  FPA2+3         ; *
ED4D 9615             (      exbasic.asm):03001                   LDA  FPA2+2         ; = ADD MANTISSA NUMBER 3 BYTE
ED4F 995F             (      exbasic.asm):03002                   ADCA FPA1+2         ; =
ED51 9715             (      exbasic.asm):03003                   STA  FPA2+2         ; =
ED53 9614             (      exbasic.asm):03004                   LDA  FPA2+1         ; * ADD MANTISSA NUMBER 2 BYTE
ED55 995E             (      exbasic.asm):03005                   ADCA FPA1+1         ; *
ED57 9714             (      exbasic.asm):03006                   STA  FPA2+1         ; *
ED59 9613             (      exbasic.asm):03007                   LDA  FPA2           ; = ADD MANTISSA MS BYTE
ED5B 995D             (      exbasic.asm):03008                   ADCA FPA1           ; =
ED5D 46               (      exbasic.asm):03009         LBB20     RORA                ; * ROTATE CARRY INTO MS BYTE
ED5E 9713             (      exbasic.asm):03010                   STA  FPA2           ; *
ED60 0614             (      exbasic.asm):03011                   ROR  FPA2+1         ; = ROTATE FPA2 ONE BIT TO THE RIGHT
ED62 0615             (      exbasic.asm):03012                   ROR  FPA2+2         ; =
ED64 0616             (      exbasic.asm):03013                   ROR  FPA2+3         ; =
ED66 0663             (      exbasic.asm):03014                   ROR  FPSBYT         ; =
ED68 4F               (      exbasic.asm):03015                   CLRA                ; CLEAR CARRY FLAG
ED69 20D5             (      exbasic.asm):03016                   BRA  LBB03          ; KEEP LOOPING
ED6B 39               (      exbasic.asm):03017         LBB2E     RTS
                      (      exbasic.asm):03018         * UNPACK A FP NUMBER FROM (X) TO FPA1
ED6C EC01             (      exbasic.asm):03019         LBB2F     LDD  1,X            ; GET TWO MSB BYTES OF MANTISSA FROM
                      (      exbasic.asm):03020         *         FPA  POINTED TO BY X
ED6E 9761             (      exbasic.asm):03021                   STA  FP1SGN         ; SAVE PACKED MANTISSA SIGN BYTE
ED70 8A80             (      exbasic.asm):03022                   ORA  #$80           ; FORCE BIT 7 OF MSB MANTISSA = 1
ED72 DD5D             (      exbasic.asm):03023                   STD  FPA1           ; SAVE 2 MSB BYTES IN FPA1
ED74 D661             (      exbasic.asm):03024                   LDB  FP1SGN         ; * GET PACKED MANTISSA SIGN BYTE. EOR W/FPA0
ED76 D854             (      exbasic.asm):03025                   EORB FP0SGN         ; * SIGN - NEW SIGN POSITION IF BOTH OLD SIGNS ALIKE,
ED78 D762             (      exbasic.asm):03026                   STB  RESSGN         ; * NEG IF BOTH OLD SIGNS DIFF. SAVE ADJUSTED
                      (      exbasic.asm):03027         *                             ; * MANTISSA SIGN BYTE
ED7A EC03             (      exbasic.asm):03028                   LDD  3,X            ; = GET 2 LSB BYTES OF MANTISSA
ED7C DD5F             (      exbasic.asm):03029                   STD  FPA1+2         ; = AND PUT IN FPA1
ED7E A684             (      exbasic.asm):03030                   LDA  ,X             ; * GET EXPONENT FROM (X) AND
ED80 975C             (      exbasic.asm):03031                   STA  FP1EXP         ; * PUT IN EXPONENT OF FPA1
ED82 D64F             (      exbasic.asm):03032                   LDB  FP0EXP         ; GET EXPONENT OF FPA0
ED84 39               (      exbasic.asm):03033                   RTS
                      (      exbasic.asm):03034         * CALCULATE EXPONENT FOR PRODUCT OF FPA0 & FPA1
                      (      exbasic.asm):03035         * ENTER WITH EXPONENT OF FPA1 IN ACCA
ED85 4D               (      exbasic.asm):03036         LBB48     TSTA                ; TEST EXPONENT OF FPA1
ED86 2716             (      exbasic.asm):03037                   BEQ  LBB61          ; PURGE RETURN ADDRESS & SET FPA0 = 0
ED88 9B4F             (      exbasic.asm):03038                   ADDA FP0EXP         ; ADD FPA1 EXPONENT TO FPA0 EXPONENT
ED8A 46               (      exbasic.asm):03039                   RORA                ; ROTATE CARRY INTO BIT 7; BIT 0 INTO CARRY
ED8B 49               (      exbasic.asm):03040                   ROLA                ; SET OVERFLOW FLAG
ED8C 2810             (      exbasic.asm):03041                   BVC  LBB61          ; BRANCH IF EXPONENT TOO LARGE OR SMALL
ED8E 8B80             (      exbasic.asm):03042                   ADDA #$80           ; ADD $80 BIAS TO EXPONENT
ED90 974F             (      exbasic.asm):03043                   STA  FP0EXP         ; SAVE NEW EXPONENT
ED92 270C             (      exbasic.asm):03044                   BEQ  LBB63          ; SET FPA0
ED94 9662             (      exbasic.asm):03045                   LDA  RESSGN         ; GET MANTISSA SIGN
ED96 9754             (      exbasic.asm):03046                   STA  FP0SGN         ; SAVE AS MANTISSA SIGN OF FPA0
ED98 39               (      exbasic.asm):03047                   RTS
                      (      exbasic.asm):03048         * IF FPA0 = POSITIVE THEN 'OV' ERROR IF FPA0
                      (      exbasic.asm):03049         * = IS NEGATIVE THEN FPA0 = 0
ED99 9654             (      exbasic.asm):03050         LBB5C     LDA  FP0SGN         ; GET MANTISSA SIGN OF FPA0
ED9B 43               (      exbasic.asm):03051                   COMA                ; CHANGE SIGN OF FPA0 MANTISSA
ED9C 2002             (      exbasic.asm):03052                   BRA  LBB63
ED9E 3262             (      exbasic.asm):03053         LBB61     LEAS 2,S            ; PURGE RETURN ADDRESS FROM STACK
EDA0 102AFED2         (      exbasic.asm):03054         LBB63     LBPL LBA39          ; ZERO FPA0 MANTISSA SIGN & EXPONENT
EDA4 7EECCF           (      exbasic.asm):03055         LBB67     JMP  LBA92          ; 'OV' OVERFLOW ERROR
                      (      exbasic.asm):03056         * FAST MULTIPLY BY 10 AND LEAVE RESULT IN FPA0
EDA7 BDEE9C           (      exbasic.asm):03057         LBB6A     JSR  LBC5F          ; TRANSFER FPA0 TO FPA1
EDAA 270D             (      exbasic.asm):03058                   BEQ  LBB7C          ; BRANCH IF EXPONENT = 0
EDAC 8B02             (      exbasic.asm):03059                   ADDA #2             ; ADD 2 TO EXPONENT (TIMES 4)
EDAE 25F4             (      exbasic.asm):03060                   BCS  LBB67          ; 'OV' ERROR IF EXPONENT > $FF
EDB0 0F62             (      exbasic.asm):03061                   CLR  RESSGN         ; CLEAR RESULT SIGN BYTE
EDB2 BDEC0A           (      exbasic.asm):03062                   JSR  LB9CD          ; ADD FPA1 TO FPA0 (TIMES 5)
EDB5 0C4F             (      exbasic.asm):03063                   INC  FP0EXP         ; ADD ONE TO EXPONENT (TIMES 10)
EDB7 27EB             (      exbasic.asm):03064                   BEQ  LBB67          ; 'OV' ERROR IF EXPONENT > $FF
EDB9 39               (      exbasic.asm):03065         LBB7C     RTS
EDBA 8420000000       (      exbasic.asm):03066         LBB7D     FCB  $84,$20,$00,$00,$00 ; FLOATING POINT CONSTANT 10
                      (      exbasic.asm):03067         * DIVIDE FPA0 BY 10
EDBF BDEE9C           (      exbasic.asm):03068         LBB82     JSR  LBC5F          ; MOVE FPA0 TO FPA1
EDC2 8EEDBA           (      exbasic.asm):03069                   LDX  #LBB7D         ; POINT TO FLOATING POINT CONSTANT 10
EDC5 5F               (      exbasic.asm):03070                   CLRB                ; ZERO MANTISSA SIGN BYTE
EDC6 D762             (      exbasic.asm):03071         LBB89     STB  RESSGN         ; STORE THE QUOTIENT MANTISSA SIGN BYTE
EDC8 BDEE51           (      exbasic.asm):03072                   JSR  LBC14          ; UNPACK AN FP NUMBER FROM (X) INTO FPA0
EDCB 8C               (      exbasic.asm):03073                   FCB  SKP2           ; SKIP TWO BYTES
                      (      exbasic.asm):03074         * DIVIDE (X) BY FPA0-LEAVE NORMALIZED QUOTIENT IN FPA0
EDCC 8D9E             (      exbasic.asm):03075         LBB8F     BSR  LBB2F          ; GET FP NUMBER FROM (X) TO FPA1
                      (      exbasic.asm):03076         
                      (      exbasic.asm):03077         * ARITHMETIC OPERATION (/) JUMPS HERE. DIVIDE FPA1 BY FPA0 (ENTER WITH
                      (      exbasic.asm):03078         * EXPONENT OF FPA1 IN ACCA AND FLAGS SET BY TSTA)
                      (      exbasic.asm):03079         
                      (      exbasic.asm):03080         * DIVIDE FPA1 BY FPA0
EDCE 2773             (      exbasic.asm):03081         LBB91     BEQ  LBC06          ; '/0' DIVIDE BY ZERO ERROR
EDD0 004F             (      exbasic.asm):03082                   NEG  FP0EXP         ; GET EXPONENT OF RECIPROCAL OF DIVISOR
EDD2 8DB1             (      exbasic.asm):03083                   BSR  LBB48          ; CALCULATE EXPONENT OF QUOTIENT
EDD4 0C4F             (      exbasic.asm):03084                   INC  FP0EXP         ; INCREMENT EXPONENT
EDD6 27CC             (      exbasic.asm):03085                   BEQ  LBB67          ; 'OV' OVERFLOW ERROR
EDD8 8E0013           (      exbasic.asm):03086                   LDX  #FPA2          ; POINT X TO MANTISSA OF FPA2 - HOLD
                      (      exbasic.asm):03087         *                             ; TEMPORARY QUOTIENT IN FPA2
EDDB C604             (      exbasic.asm):03088                   LDB  #4             ; 5 BYTE DIVIDE
EDDD D703             (      exbasic.asm):03089                   STB  TMPLOC         ; SAVE BYTE COUNTER
EDDF C601             (      exbasic.asm):03090                   LDB  #1             ; SHIFT COUNTER-AND TEMPORARY QUOTIENT BYTE
                      (      exbasic.asm):03091         * COMPARE FPA0 MANTISSA TO FPA1 MANTISSA -
                      (      exbasic.asm):03092         * SET CARRY FLAG IF FPA1 >= FPA0
EDE1 9650             (      exbasic.asm):03093         LBBA4     LDA  FPA0           ; * COMPARE THE TWO MS BYTES
EDE3 915D             (      exbasic.asm):03094                   CMPA FPA1           ; * OF FPA0 AND FPA1 AND
EDE5 2613             (      exbasic.asm):03095                   BNE  LBBBD          ; * BRANCH IF <>
EDE7 9651             (      exbasic.asm):03096                   LDA  FPA0+1         ; = COMPARE THE NUMBER 2
EDE9 915E             (      exbasic.asm):03097                   CMPA FPA1+1         ; = BYTES AND
EDEB 260D             (      exbasic.asm):03098                   BNE  LBBBD          ; = BRANCH IF <>
EDED 9652             (      exbasic.asm):03099                   LDA  FPA0+2         ; * COMPARE THE NUMBER 3
EDEF 915F             (      exbasic.asm):03100                   CMPA FPA1+2         ; * BYTES AND
EDF1 2607             (      exbasic.asm):03101                   BNE  LBBBD          ; * BRANCH IF <>
EDF3 9653             (      exbasic.asm):03102                   LDA  FPA0+3         ; = COMPARE THE LS BYTES
EDF5 9160             (      exbasic.asm):03103                   CMPA FPA1+3         ; = AND BRANCH
EDF7 2601             (      exbasic.asm):03104                   BNE  LBBBD          ; = IF <>
EDF9 43               (      exbasic.asm):03105                   COMA                ; SET CARRY FLAG IF FPA0 = FPA1
EDFA 1FA8             (      exbasic.asm):03106         LBBBD     TFR  CC,A           ; SAVE CARRY FLAG STATUS IN ACCA; CARRY
                      (      exbasic.asm):03107         *         CLEAR IF FPA0 > FPA1
EDFC 59               (      exbasic.asm):03108                   ROLB                ; ROTATE CARRY INTO TEMPORARY QUOTIENT BYTE
EDFD 240A             (      exbasic.asm):03109                   BCC  LBBCC          ; CARRY WILL BE SET AFTER 8 SHIFTS
EDFF E780             (      exbasic.asm):03110                   STB  ,X+            ; SAVE TEMPORARY QUOTIENT
EE01 0A03             (      exbasic.asm):03111                   DEC  TMPLOC         ; DECREMENT BYTE COUNTER
EE03 2B34             (      exbasic.asm):03112                   BMI  LBBFC          ; BRANCH IF DONE
EE05 272E             (      exbasic.asm):03113                   BEQ  LBBF8          ; BRANCH IF LAST BYTE
EE07 C601             (      exbasic.asm):03114                   LDB  #1             ; RESET SHIFT COUNTER AND TEMPORARY QUOTIENT BYTE
EE09 1F8A             (      exbasic.asm):03115         LBBCC     TFR  A,CC           ; RESTORE CARRY FLAG AND
EE0B 250E             (      exbasic.asm):03116                   BCS  LBBDE          ; BRANCH IF FPA0 =< FPA1
EE0D 0860             (      exbasic.asm):03117         LBBD0     ASL  FPA1+3         ; * SHIFT FPA1 MANTISSA 1 BIT TO LEFT
EE0F 095F             (      exbasic.asm):03118                   ROL  FPA1+2         ; *
EE11 095E             (      exbasic.asm):03119                   ROL  FPA1+1         ; *
EE13 095D             (      exbasic.asm):03120                   ROL  FPA1           ; *
EE15 25E3             (      exbasic.asm):03121                   BCS  LBBBD          ; BRANCH IF CARRY - ADD ONE TO PARTIAL QUOTIENT
EE17 2BC8             (      exbasic.asm):03122                   BMI  LBBA4          ; IF MSB OF HIGH ORDER MANTISSA BYTE IS
                      (      exbasic.asm):03123         *         SET, CHECK THE MAGNITUDES OF FPA0, FPA1
EE19 20DF             (      exbasic.asm):03124                   BRA  LBBBD          ; CARRY IS CLEAR, CHECK ANOTHER BIT
                      (      exbasic.asm):03125         * SUBTRACT FPA0 FROM FPA1 - LEAVE RESULT IN FPA1
EE1B 9660             (      exbasic.asm):03126         LBBDE     LDA  FPA1+3         ; * SUBTRACT THE LS BYTES OF MANTISSA
EE1D 9053             (      exbasic.asm):03127                   SUBA FPA0+3         ; *
EE1F 9760             (      exbasic.asm):03128                   STA  FPA1+3         ; *
EE21 965F             (      exbasic.asm):03129                   LDA  FPA1+2         ; = THEN THE NEXT BYTE
EE23 9252             (      exbasic.asm):03130                   SBCA FPA0+2         ; =
EE25 975F             (      exbasic.asm):03131                   STA  FPA1+2         ; =
EE27 965E             (      exbasic.asm):03132                   LDA  FPA1+1         ; * AND THE NEXT
EE29 9251             (      exbasic.asm):03133                   SBCA FPA0+1         ; *
EE2B 975E             (      exbasic.asm):03134                   STA  FPA1+1         ; *
EE2D 965D             (      exbasic.asm):03135                   LDA  FPA1           ; = AND FINALLY, THE MS BYTE OF MANTISSA
EE2F 9250             (      exbasic.asm):03136                   SBCA FPA0           ; =
EE31 975D             (      exbasic.asm):03137                   STA  FPA1           ; =
EE33 20D8             (      exbasic.asm):03138                   BRA  LBBD0          ; GO SHIFT FPA1
EE35 C640             (      exbasic.asm):03139         LBBF8     LDB  #$40           ; USE ONLY TWO BITS OF THE LAST BYTE (FIFTH)
EE37 20D0             (      exbasic.asm):03140                   BRA  LBBCC          ; GO SHIFT THE LAST BYTE
EE39 56               (      exbasic.asm):03141         LBBFC     RORB                ; * SHIFT CARRY (ALWAYS SET HERE) INTO
EE3A 56               (      exbasic.asm):03142                   RORB                ; * BIT 5 AND MOVE
EE3B 56               (      exbasic.asm):03143                   RORB                ; * BITS 1,0 TO BITS 7,6
EE3C D763             (      exbasic.asm):03144                   STB  FPSBYT         ; SAVE SUB BYTE
EE3E 8D08             (      exbasic.asm):03145                   BSR  LBC0B          ; MOVE MANTISSA OF FPA2 TO FPA0
EE40 7EEC59           (      exbasic.asm):03146                   JMP  LBA1C          ; NORMALIZE FPA0
EE43 C614             (      exbasic.asm):03147         LBC06     LDB  #2*10          ; /0' ERROR
EE45 7EDEF7           (      exbasic.asm):03148                   JMP  LAC46          ; PROCESS THE ERROR
                      (      exbasic.asm):03149         * COPY MANTISSA FROM FPA2 TO FPA0
EE48 9E13             (      exbasic.asm):03150         LBC0B     LDX  FPA2           ; * MOVE TOP 2 BYTES
EE4A 9F50             (      exbasic.asm):03151                   STX  FPA0           ; *
EE4C 9E15             (      exbasic.asm):03152                   LDX  FPA2+2         ; = MOVE BOTTOM 2 BYTES
EE4E 9F52             (      exbasic.asm):03153                   STX  FPA0+2         ; =
EE50 39               (      exbasic.asm):03154                   RTS
                      (      exbasic.asm):03155         * COPY A PACKED FP NUMBER FROM (X) TO FPA0
EE51 3402             (      exbasic.asm):03156         LBC14     PSHS A              ; SAVE ACCA
EE53 EC01             (      exbasic.asm):03157                   LDD  1,X            ; GET TOP TWO MANTISSA BYTES
EE55 9754             (      exbasic.asm):03158                   STA  FP0SGN         ; SAVE MS BYTE OF MANTISSA AS MANTISSA SIGN
EE57 8A80             (      exbasic.asm):03159                   ORA  #$80           ; UNPACK MS BYTE
EE59 DD50             (      exbasic.asm):03160                   STD  FPA0           ; SAVE UNPACKED TOP 2 MANTISSA BYTES
EE5B 0F63             (      exbasic.asm):03161                   CLR  FPSBYT         ; CLEAR MANTISSA SUB BYTE
EE5D E684             (      exbasic.asm):03162                   LDB  ,X             ; GET EXPONENT TO ACCB
EE5F AE03             (      exbasic.asm):03163                   LDX  3,X            ; * MOVE LAST 2
EE61 9F52             (      exbasic.asm):03164                   STX  FPA0+2         ; * MANTISSA BYTES
EE63 D74F             (      exbasic.asm):03165                   STB  FP0EXP         ; SAVE EXPONENT
EE65 3582             (      exbasic.asm):03166                   PULS A,PC           ; RESTORE ACCA AND RETURN
                      (      exbasic.asm):03167         
EE67 8E0045           (      exbasic.asm):03168         LBC2A     LDX  #V45           ; POINT X TO MANTISSA OF FPA4
EE6A 2006             (      exbasic.asm):03169                   BRA  LBC35          ; MOVE FPA0 TO FPA4
EE6C 8E0040           (      exbasic.asm):03170         LBC2F     LDX  #V40           ; POINT X TO MANTISSA OF FPA3
EE6F 8C               (      exbasic.asm):03171                   FCB  SKP2           ; SKIP TWO BYTES
EE70 9E3B             (      exbasic.asm):03172         LBC33     LDX  VARDES         ; POINT X TO VARIABLE DESCRIPTOR IN VARDES
                      (      exbasic.asm):03173         * PACK FPA0 AND MOVE IT TO ADDRESS IN X
EE72 964F             (      exbasic.asm):03174         LBC35     LDA  FP0EXP         ; * COPY EXPONENT
EE74 A784             (      exbasic.asm):03175                   STA  ,X             ; *
EE76 9654             (      exbasic.asm):03176                   LDA  FP0SGN         ; GET MANTISSA SIGN BIT
EE78 8A7F             (      exbasic.asm):03177                   ORA  #$7F           ; MASK THE BOTTOM 7 BITS
EE7A 9450             (      exbasic.asm):03178                   ANDA FPA0           ; AND BIT 7 OF MANTISSA SIGN INTO BIT 7 OF MS BYTE
EE7C A701             (      exbasic.asm):03179                   STA  1,X            ; SAVE MS BYTE
EE7E 9651             (      exbasic.asm):03180                   LDA  FPA0+1         ; * MOVE 2ND MANTISSA BYTE
EE80 A702             (      exbasic.asm):03181                   STA  2,X            ; *
EE82 DE52             (      exbasic.asm):03182                   LDU  FPA0+2         ; = MOVE BOTTOM 2 MANTISSA BYTES
EE84 EF03             (      exbasic.asm):03183                   STU  3,X            ; =
EE86 39               (      exbasic.asm):03184                   RTS
                      (      exbasic.asm):03185         * MOVE FPA1 TO FPA0 RETURN W/MANTISSA SIGN IN ACCA
EE87 9661             (      exbasic.asm):03186         LBC4A     LDA  FP1SGN         ; * COPY MANTISSA SIGN FROM
EE89 9754             (      exbasic.asm):03187         LBC4C     STA  FP0SGN         ; * FPA1 TO FPA0
EE8B 9E5C             (      exbasic.asm):03188                   LDX  FP1EXP         ; = COPY EXPONENT + MS BYTE FROM
EE8D 9F4F             (      exbasic.asm):03189                   STX  FP0EXP         ; = FPA1 TO FPA0
EE8F 0F63             (      exbasic.asm):03190                   CLR  FPSBYT         ; CLEAR MANTISSA SUB BYTE
EE91 965E             (      exbasic.asm):03191                   LDA  FPA1+1         ; * COPY 2ND MANTISSA BYTE
EE93 9751             (      exbasic.asm):03192                   STA  FPA0+1         ; * FROM FPA1 TO FPA0
EE95 9654             (      exbasic.asm):03193                   LDA  FP0SGN         ; GET MANTISSA SIGN
EE97 9E5F             (      exbasic.asm):03194                   LDX  FPA1+2         ; * COPY 3RD AND 4TH MANTISSA BYTE
EE99 9F52             (      exbasic.asm):03195                   STX  FPA0+2         ; * FROM FPA1 TO FPA0
EE9B 39               (      exbasic.asm):03196                   RTS
                      (      exbasic.asm):03197         * TRANSFER FPA0 TO FPA1
EE9C DC4F             (      exbasic.asm):03198         LBC5F     LDD  FP0EXP         ; * TRANSFER EXPONENT & MS BYTE
EE9E DD5C             (      exbasic.asm):03199                   STD  FP1EXP         ; *
EEA0 9E51             (      exbasic.asm):03200                   LDX  FPA0+1         ; = TRANSFER MIDDLE TWO BYTES
EEA2 9F5E             (      exbasic.asm):03201                   STX  FPA1+1         ; =
EEA4 9E53             (      exbasic.asm):03202                   LDX  FPA0+3         ; * TRANSFER BOTTOM TWO BYTES
EEA6 9F60             (      exbasic.asm):03203                   STX  FPA1+3         ; *
EEA8 4D               (      exbasic.asm):03204                   TSTA                ; SET FLAGS ACCORDING TO EXPONENT
EEA9 39               (      exbasic.asm):03205                   RTS
                      (      exbasic.asm):03206         * CHECK FPA0; RETURN ACCB = 0 IF FPA0 = 0,
                      (      exbasic.asm):03207         * ACCB = $FF IF FPA0 = NEGATIVE, ACCB = 1 IF FPA0 = POSITIVE
EEAA D64F             (      exbasic.asm):03208         LBC6D     LDB  FP0EXP         ; GET EXPONENT
EEAC 2708             (      exbasic.asm):03209                   BEQ  LBC79          ; BRANCH IF FPA0 = 0
EEAE D654             (      exbasic.asm):03210         LBC71     LDB  FP0SGN         ; GET SIGN OF MANTISSA
EEB0 59               (      exbasic.asm):03211         LBC73     ROLB                ; BIT 7 TO CARRY
EEB1 C6FF             (      exbasic.asm):03212                   LDB  #$FF           ; NEGATIVE FLAG
EEB3 2501             (      exbasic.asm):03213                   BCS  LBC79          ; BRANCH IF NEGATIVE MANTISSA
EEB5 50               (      exbasic.asm):03214                   NEGB                ; ACCB = 1 IF POSITIVE MANTISSA
EEB6 39               (      exbasic.asm):03215         LBC79     RTS
                      (      exbasic.asm):03216         
                      (      exbasic.asm):03217         * SGN
EEB7 8DF1             (      exbasic.asm):03218         SGN       BSR  LBC6D          ; SET ACCB ACCORDING TO SIGN OF FPA0
                      (      exbasic.asm):03219         * CONVERT A SIGNED NUMBER IN ACCB INTO A FLOATING POINT NUMBER
EEB9 D750             (      exbasic.asm):03220         LBC7C     STB  FPA0           ; SAVE ACCB IN FPA0
EEBB 0F51             (      exbasic.asm):03221                   CLR  FPA0+1         ; CLEAR NUMBER 2 MANTISSA BYTE OF FPA0
EEBD C688             (      exbasic.asm):03222                   LDB  #$88           ; EXPONENT REQUIRED IF FPA0 IS TO BE AN INTEGER
EEBF 9650             (      exbasic.asm):03223         LBC82     LDA  FPA0           ; GET MS BYTE OF MANTISSA
EEC1 8080             (      exbasic.asm):03224                   SUBA #$80           ; SET CARRY IF POSITIVE MANTISSA
EEC3 D74F             (      exbasic.asm):03225         LBC86     STB  FP0EXP         ; SAVE EXPONENT
EEC5 DC74             (      exbasic.asm):03226                   LDD  ZERO           ; * ZERO OUT ACCD AND
EEC7 DD52             (      exbasic.asm):03227                   STD  FPA0+2         ; * BOTTOM HALF OF FPA0
EEC9 9763             (      exbasic.asm):03228                   STA  FPSBYT         ; CLEAR SUB BYTE
EECB 9754             (      exbasic.asm):03229                   STA  FP0SGN         ; CLEAR SIGN OF FPA0 MANTISSA
EECD 7EEC55           (      exbasic.asm):03230                   JMP  LBA18          ; GO NORMALIZE FPA0
                      (      exbasic.asm):03231         
                      (      exbasic.asm):03232         * ABS
EED0 0F54             (      exbasic.asm):03233         ABS       CLR  FP0SGN         ; FORCE MANTISSA SIGN OF FPA0 POSITIVE
EED2 39               (      exbasic.asm):03234                   RTS
                      (      exbasic.asm):03235         * COMPARE A PACKED FLOATING POINT NUMBER POINTED TO
                      (      exbasic.asm):03236         * BY (X) TO AN UNPACKED FP NUMBER IN FPA0. RETURN
                      (      exbasic.asm):03237         * ZERO FLAG SET AND ACCB = 0, IF EQUAL; ACCB = 1 IF
                      (      exbasic.asm):03238         * FPA0 > (X); ACCB = $FF IF FPA0 < (X)
EED3 E684             (      exbasic.asm):03239         LBC96     LDB  ,X             ; CHECK EXPONENT OF (X)
EED5 27D3             (      exbasic.asm):03240                   BEQ  LBC6D          ; BRANCH IF FPA = 0
EED7 E601             (      exbasic.asm):03241                   LDB  1,X            ; GET MS BYTE OF MANTISSA OF (X)
EED9 D854             (      exbasic.asm):03242                   EORB FP0SGN         ; EOR WITH SIGN OF FPA0
EEDB 2BD1             (      exbasic.asm):03243                   BMI  LBC71          ; BRANCH IF SIGNS NOT =
                      (      exbasic.asm):03244         * COMPARE FPA0 WITH FP NUMBER POINTED TO BY (X).
                      (      exbasic.asm):03245         * FPA0 IS NORMALIZED, (X) IS PACKED.
EEDD D64F             (      exbasic.asm):03246         LBCA0     LDB  FP0EXP         ; * GET EXPONENT OF
EEDF E184             (      exbasic.asm):03247                   CMPB ,X             ; * FPA0, COMPARE TO EXPONENT OF
EEE1 261D             (      exbasic.asm):03248                   BNE  LBCC3          ; * (X) AND BRANCH IF <>.
EEE3 E601             (      exbasic.asm):03249                   LDB  1,X            ; * GET MS BYTE OF (X), KEEP ONLY
EEE5 CA7F             (      exbasic.asm):03250                   ORB  #$7F           ; * THE SIGN BIT - 'AND' THE BOTTOM 7
EEE7 D450             (      exbasic.asm):03251                   ANDB FPA0           ; * BITS OF FPA0 INTO ACCB
EEE9 E101             (      exbasic.asm):03252                   CMPB 1,X            ; = COMPARE THE BOTTOM 7 BITS OF THE MANTISSA
EEEB 2613             (      exbasic.asm):03253                   BNE  LBCC3          ; = MS BYTE AND BRANCH IF <>
EEED D651             (      exbasic.asm):03254                   LDB  FPA0+1         ; * COMPARE 2ND BYTE
EEEF E102             (      exbasic.asm):03255                   CMPB 2,X            ; * OF MANTISSA,
EEF1 260D             (      exbasic.asm):03256                   BNE  LBCC3          ; * BRANCH IF <>
EEF3 D652             (      exbasic.asm):03257                   LDB  FPA0+2         ; = COMPARE 3RD BYTE
EEF5 E103             (      exbasic.asm):03258                   CMPB 3,X            ; = OF MANTISSA,
EEF7 2607             (      exbasic.asm):03259                   BNE  LBCC3          ; = BRANCH IF <>
EEF9 D653             (      exbasic.asm):03260                   LDB  FPA0+3         ; * SUBTRACT LS BYTE
EEFB E004             (      exbasic.asm):03261                   SUBB 4,X            ; * OF (X) FROM LS BYTE OF
EEFD 2601             (      exbasic.asm):03262                   BNE  LBCC3          ; * FPA0, BRANCH IF <>
EEFF 39               (      exbasic.asm):03263                   RTS                 ; RETURN IF FP (X) = FPA0
EF00 56               (      exbasic.asm):03264         LBCC3     RORB                ; SHIFT CARRY TO BIT 7; CARRY SET IF FPA0 < (X)
EF01 D854             (      exbasic.asm):03265                   EORB FP0SGN         ; TOGGLE SIZE COMPARISON BIT IF FPA0 IS NEGATIVE
EF03 20AB             (      exbasic.asm):03266                   BRA  LBC73          ; GO SET ACCB ACCORDING TO COMPARISON
                      (      exbasic.asm):03267         * DE-NORMALIZE FPA0 : SHIFT THE MANTISSA UNTIL THE BINARY POINT IS TO THE RIGHT
                      (      exbasic.asm):03268         * OF THE LEAST SIGNIFICANT BYTE OF THE MANTISSA
EF05 D64F             (      exbasic.asm):03269         LBCC8     LDB  FP0EXP         ; GET EXPONENT OF FPA0
EF07 273D             (      exbasic.asm):03270                   BEQ  LBD09          ; ZERO MANTISSA IF FPA0 = 0
EF09 C0A0             (      exbasic.asm):03271                   SUBB #$A0           ; SUBTRACT $A0 FROM FPA0 EXPONENT T THIS WILL YIELD
                      (      exbasic.asm):03272         *                             ; THE NUMBER OF SHIFTS REQUIRED TO DENORMALIZE FPA0. WHEN
                      (      exbasic.asm):03273         *                             ; THE EXPONENT OF FPA0 IS = ZERO, THEN THE BINARY POINT
                      (      exbasic.asm):03274         *                             ; WILL BE TO THE RIGHT OF THE MANTISSA
EF0B 9654             (      exbasic.asm):03275                   LDA  FP0SGN         ; TEST SIGN OF FPA0 MANTISSA
EF0D 2A05             (      exbasic.asm):03276                   BPL  LBCD7          ; BRANCH IF POSITIVE
EF0F 035B             (      exbasic.asm):03277                   COM  FPCARY         ; COMPLEMENT CARRY IN BYTE
EF11 BDECB8           (      exbasic.asm):03278                   JSR  LBA7B          ; NEGATE MANTISSA OF FPA0
EF14 8E004F           (      exbasic.asm):03279         LBCD7     LDX  #FP0EXP        ; POINT X TO FPA0
EF17 C1F8             (      exbasic.asm):03280                   CMPB #-8            ; EXPONENT DIFFERENCE < -8?
EF19 2E06             (      exbasic.asm):03281                   BGT  LBCE4          ; YES
EF1B BDECEB           (      exbasic.asm):03282                   JSR  LBAAE          ; SHIFT FPA0 RIGHT UNTIL FPA0 EXPONENT = $A0
EF1E 0F5B             (      exbasic.asm):03283                   CLR  FPCARY         ; CLEAR CARRY IN BYTE
EF20 39               (      exbasic.asm):03284                   RTS
EF21 0F5B             (      exbasic.asm):03285         LBCE4     CLR  FPCARY         ; CLEAR CARRY IN BYTE
EF23 9654             (      exbasic.asm):03286                   LDA  FP0SGN         ; * GET SIGN OF FPA0 MANTISSA
EF25 49               (      exbasic.asm):03287                   ROLA                ; * ROTATE IT INTO THE CARRY FLAG
EF26 0650             (      exbasic.asm):03288                   ROR  FPA0           ; ROTATE CARRY (MANTISSA SIGN) INTO BIT 7
                      (      exbasic.asm):03289         *                             ; OF LS BYTE OF MANTISSA
EF28 7EECF7           (      exbasic.asm):03290                   JMP  LBABA          ; DE-NORMALIZE FPA0
                      (      exbasic.asm):03291         
                      (      exbasic.asm):03292         * INT
                      (      exbasic.asm):03293         * THE INT STATEMENT WILL "DENORMALIZE" FPA0 - THAT IS IT WILL SHIFT THE BINARY POINT
                      (      exbasic.asm):03294         * TO THE EXTREME RIGHT OF THE MANTISSA TO FORCE ITS EXPONENT TO BE $AO. ONCE
                      (      exbasic.asm):03295         * THIS IS DONE THE MANTISSA OF FPA0 WILL CONTAIN THE FOUR LEAST SIGNIFICANT
                      (      exbasic.asm):03296         * BYTES OF THE INTEGER PORTION OF FPA0. AT THE CONCLUSION OF THE DE-NORMALIZATION
                      (      exbasic.asm):03297         * ONLY THE INTEGER PORTION OF FPA0 WILL REMAIN.
                      (      exbasic.asm):03298         *
EF2B D64F             (      exbasic.asm):03299         INT       LDB  FP0EXP         ; GET EXPONENT OF FPA0
EF2D C1A0             (      exbasic.asm):03300                   CMPB #$A0           ; LARGEST POSSIBLE INTEGER EXPONENT
EF2F 241D             (      exbasic.asm):03301                   BCC  LBD11          ; RETURN IF FPA0 >= 32768
EF31 8DD2             (      exbasic.asm):03302                   BSR  LBCC8          ; SHIFT THE BINARY POINT ONE TO THE RIGHT OF THE
                      (      exbasic.asm):03303         *                             ; LS BYTE OF THE FPA0 MANTISSA
EF33 D763             (      exbasic.asm):03304                   STB  FPSBYT         ; ACCB = 0: ZERO OUT THE SUB BYTE
EF35 9654             (      exbasic.asm):03305                   LDA  FP0SGN         ; GET MANTISSA SIGN
EF37 D754             (      exbasic.asm):03306                   STB  FP0SGN         ; FORCE MANTISSA SIGN TO BE POSITIVE
EF39 8080             (      exbasic.asm):03307                   SUBA #$80           ; SET CARRY IF MANTISSA
EF3B 86A0             (      exbasic.asm):03308                   LDA  #$A0           ; * GET DENORMALIZED EXPONENT AND
EF3D 974F             (      exbasic.asm):03309                   STA  FP0EXP         ; * SAVE IT IN FPA0 EXPONENT
EF3F 9653             (      exbasic.asm):03310                   LDA  FPA0+3         ; = GET LS BYTE OF FPA0 AND
EF41 9701             (      exbasic.asm):03311                   STA  CHARAC         ; = SAVE IT IN CHARAC
EF43 7EEC55           (      exbasic.asm):03312                   JMP  LBA18          ; NORMALIZE FPA0
                      (      exbasic.asm):03313         
EF46 D750             (      exbasic.asm):03314         LBD09     STB  FPA0           ; * LOAD MANTISSA OF FPA0 WITH CONTENTS OF ACCB
EF48 D751             (      exbasic.asm):03315                   STB  FPA0+1         ; *
EF4A D752             (      exbasic.asm):03316                   STB  FPA0+2         ; *
EF4C D753             (      exbasic.asm):03317                   STB  FPA0+3         ; *
EF4E 39               (      exbasic.asm):03318         LBD11     RTS                 ; *
                      (      exbasic.asm):03319         
                      (      exbasic.asm):03320         * CONVERT ASCII STRING TO FLOATING POINT
EF4F 9E74             (      exbasic.asm):03321         LBD12     LDX  ZERO           ; (X) = 0
EF51 9F54             (      exbasic.asm):03322                   STX  FP0SGN         ; * ZERO OUT FPA0 & THE SIGN FLAG (COEFCT)
EF53 9F4F             (      exbasic.asm):03323                   STX  FP0EXP         ; *
EF55 9F51             (      exbasic.asm):03324                   STX  FPA0+1         ; *
EF57 9F52             (      exbasic.asm):03325                   STX  FPA0+2         ; *
EF59 9F47             (      exbasic.asm):03326                   STX  V47            ; INITIALIZE EXPONENT & EXPONENT SIGN FLAG TO ZERO
EF5B 9F45             (      exbasic.asm):03327                   STX  V45            ; INITIALIZE RIGHT DECIMAL CTR & DECIMAL PT FLAG TO 0
EF5D 2564             (      exbasic.asm):03328                   BCS  LBD86          ; IF CARRY SET (NUMERIC CHARACTER), ASSUME ACCA CONTAINS FIRST
                      (      exbasic.asm):03329         *         NUMERIC CHAR, SIGN IS POSITIVE AND SKIP THE RAM HOOK
EF5F BDF68C           (      exbasic.asm):03330                   JSR  XVEC19         ; CALL EXTENDED BASIC ADD-IN
EF62 812D             (      exbasic.asm):03331         LBD25     CMPA #'-            ; * CHECK FOR A LEADING MINUS SIGN AND BRANCH
EF64 2604             (      exbasic.asm):03332                   BNE  LBD2D          ; * IF NO MINUS SIGN
EF66 0355             (      exbasic.asm):03333                   COM  COEFCT         ; TOGGLE SIGN; 0 = +; FF = -
EF68 2004             (      exbasic.asm):03334                   BRA  LBD31          ; INTERPRET THE REST OF THE STRING
EF6A 812B             (      exbasic.asm):03335         LBD2D     CMPA #'+            ; * CHECK FOR LEADING PLUS SlGN AND BRANCH
EF6C 2604             (      exbasic.asm):03336                   BNE  LBD35          ; * IF NOT A PLUS SIGN
EF6E 9D7C             (      exbasic.asm):03337         LBD31     JSR  GETNCH         ; GET NEXT INPUT CHARACTER FROM BASIC
EF70 2551             (      exbasic.asm):03338                   BCS  LBD86          ; BRANCH IF NUMERIC CHARACTER
EF72 812E             (      exbasic.asm):03339         LBD35     CMPA #'.            ; DECIMAL POlNT?
EF74 2728             (      exbasic.asm):03340                   BEQ  LBD61          ; YES
EF76 8145             (      exbasic.asm):03341                   CMPA #'E            ; "E" SHORTHAND FORM (SCIENTIFIC NOTATION)?
EF78 2628             (      exbasic.asm):03342                   BNE  LBD65          ; NO
                      (      exbasic.asm):03343         * EVALUATE EXPONENT OF EXPONENTIAL FORMAT
EF7A 9D7C             (      exbasic.asm):03344                   JSR  GETNCH         ; GET NEXT INPUT CHARACTER FROM BASIC
EF7C 2564             (      exbasic.asm):03345                   BCS  LBDA5          ; BRANCH IF NUMERIC
EF7E 81A7             (      exbasic.asm):03346                   CMPA #TOK_MINUS     ; MINUS TOKEN?
EF80 270E             (      exbasic.asm):03347                   BEQ  LBD53          ; YES
EF82 812D             (      exbasic.asm):03348                   CMPA #'-            ; ASCII MINUS?
EF84 270A             (      exbasic.asm):03349                   BEQ  LBD53          ; YES
EF86 81A6             (      exbasic.asm):03350                   CMPA #TOK_PLUS      ; PLUS TOKEN?
EF88 2708             (      exbasic.asm):03351                   BEQ  LBD55          ; YES
EF8A 812B             (      exbasic.asm):03352                   CMPA #'+            ; ASCII PLUS?
EF8C 2704             (      exbasic.asm):03353                   BEQ  LBD55          ; YES
EF8E 2006             (      exbasic.asm):03354                   BRA  LBD59          ; BRANCH IF NO SIGN FOUND
EF90 0348             (      exbasic.asm):03355         LBD53     COM  V48            ; SET EXPONENT SIGN FLAG TO NEGATIVE
                      (      exbasic.asm):03356         * STRIP A DECIMAL NUMBER FROM BASIC LINE, CONVERT IT TO BINARY IN V47
EF92 9D7C             (      exbasic.asm):03357         LBD55     JSR  GETNCH         ; GET NEXT INPUT CHARACTER FROM BASIC
EF94 254C             (      exbasic.asm):03358                   BCS  LBDA5          ; IF NUMERIC CHARACTER, CONVERT TO BINARY
EF96 0D48             (      exbasic.asm):03359         LBD59     TST  V48            ; * CHECK EXPONENT SIGN FLAG
EF98 2708             (      exbasic.asm):03360                   BEQ  LBD65          ; * AND BRANCH IF POSITIVE
EF9A 0047             (      exbasic.asm):03361                   NEG  V47            ; NEGATE VALUE OF EXPONENT
EF9C 2004             (      exbasic.asm):03362                   BRA  LBD65
EF9E 0346             (      exbasic.asm):03363         LBD61     COM  V46            ; *TOGGLE DECIMAL PT FLAG AND INTERPRET ANOTHER
EFA0 26CC             (      exbasic.asm):03364                   BNE  LBD31          ; *CHARACTER IF <> 0 - TERMINATE INTERPRETATION
                      (      exbasic.asm):03365         *         IF   SECOND DECIMAL POINT
                      (      exbasic.asm):03366         * ADJUST FPA0 FOR THE DECIMAL EXPONENT IN V47
EFA2 9647             (      exbasic.asm):03367         LBD65     LDA  V47            ; * GET EXPONENT, SUBTRACT THE NUMBER OF
EFA4 9045             (      exbasic.asm):03368                   SUBA V45            ; * PLACES TO THE RIGHT OF DECIMAL POINT
EFA6 9747             (      exbasic.asm):03369                   STA  V47            ; * AND RESAVE IT.
EFA8 2712             (      exbasic.asm):03370                   BEQ  LBD7F          ; EXIT ROUTINE IF ADJUSTED EXPONENT = ZERO
EFAA 2A09             (      exbasic.asm):03371                   BPL  LBD78          ; BRANCH IF POSITIVE EXPONENT
EFAC BDEDBF           (      exbasic.asm):03372         LBD6F     JSR  LBB82          ; DIVIDE FPA0 BY 10
EFAF 0C47             (      exbasic.asm):03373                   INC  V47            ; INCREMENT EXPONENT COUNTER (MULTIPLY BY 10)
EFB1 26F9             (      exbasic.asm):03374                   BNE  LBD6F          ; KEEP MULTIPLYING
EFB3 2007             (      exbasic.asm):03375                   BRA  LBD7F          ; EXIT ROUTINE
EFB5 BDEDA7           (      exbasic.asm):03376         LBD78     JSR  LBB6A          ; MULTIPLY FPA0 BY 10
EFB8 0A47             (      exbasic.asm):03377                   DEC  V47            ; DECREMENT EXPONENT COUNTER (DIVIDE BY 10)
EFBA 26F9             (      exbasic.asm):03378                   BNE  LBD78          ; KEEP MULTIPLYING
EFBC 9655             (      exbasic.asm):03379         LBD7F     LDA  COEFCT         ; GET THE SIGN FLAG
EFBE 2A8E             (      exbasic.asm):03380                   BPL  LBD11          ; RETURN IF POSITIVE
EFC0 7EF126           (      exbasic.asm):03381                   JMP  LBEE9          ; TOGGLE MANTISSA SIGN OF FPA0, IF NEGATIVE
                      (      exbasic.asm):03382         *MULTIPLY FPA0 BY TEN AND ADD ACCA TO THE RESULT
EFC3 D645             (      exbasic.asm):03383         LBD86     LDB  V45            ; *GET THE RIGHT DECIMAL COUNTER AND SUBTRACT
EFC5 D046             (      exbasic.asm):03384                   SUBB V46            ; *THE DECIMAL POINT FLAG FROM IT. IF DECIMAL POINT
EFC7 D745             (      exbasic.asm):03385                   STB  V45            ; *FLAG=0, NOTHING HAPPENS. IF DECIMAL POINT FLAG IS
                      (      exbasic.asm):03386         *                             -1, THEN RIGHT DECIMAL COUNTER IS INCREMENTED BY ONE
EFC9 3402             (      exbasic.asm):03387                   PSHS A              ; SAVE NEW DIGIT ON STACK
EFCB BDEDA7           (      exbasic.asm):03388                   JSR  LBB6A          ; MULTIPLY FPA0 BY 10
EFCE 3504             (      exbasic.asm):03389                   PULS B              ; GET NEW DIGIT BACK
EFD0 C030             (      exbasic.asm):03390                   SUBB #'0            ; MASK OFF ASCII
EFD2 8D02             (      exbasic.asm):03391                   BSR  LBD99          ; ADD ACCB TO FPA0
EFD4 2098             (      exbasic.asm):03392                   BRA  LBD31          ; GET ANOTHER CHARACTER FROM BASIC
EFD6 BDEE6C           (      exbasic.asm):03393         LBD99     JSR  LBC2F          ; PACK FPA0 AND SAVE IT IN FPA3
EFD9 BDEEB9           (      exbasic.asm):03394                   JSR  LBC7C          ; CONVERT ACCB TO FP NUMBER IN FPA0
EFDC 8E0040           (      exbasic.asm):03395                   LDX  #V40           ; * ADD FPA0 TO
EFDF 7EEBFF           (      exbasic.asm):03396                   JMP  LB9C2          ; * FPA3
                      (      exbasic.asm):03397         
                      (      exbasic.asm):03398         
EFE2 D647             (      exbasic.asm):03399         LBDA5     LDB  V47
EFE4 58               (      exbasic.asm):03400                   ASLB                ; TIMES 2
EFE5 58               (      exbasic.asm):03401                   ASLB                ; TIMES 4
EFE6 DB47             (      exbasic.asm):03402                   ADDB V47            ; ADD 1 = TIMES 5
EFE8 58               (      exbasic.asm):03403                   ASLB                ; TIMES 10
EFE9 8030             (      exbasic.asm):03404                   SUBA #'0            ; *MASK OFF ASCII FROM ACCA, PUSH
EFEB 3404             (      exbasic.asm):03405                   PSHS B              ; *RESULT ONTO THE STACK AND
EFED ABE0             (      exbasic.asm):03406                   ADDA ,S+            ; ADD lT TO ACCB
EFEF 9747             (      exbasic.asm):03407                   STA  V47            ; SAVE IN V47
EFF1 209F             (      exbasic.asm):03408                   BRA  LBD55          ; INTERPRET ANOTHER CHARACTER
                      (      exbasic.asm):03409         *
EFF3 9B3EBC1FFD       (      exbasic.asm):03410         LBDB6     FCB  $9B,$3E,$BC,$1F,$FD ; * 99999999.9
EFF8 9E6E6B27FD       (      exbasic.asm):03411         LBDBB     FCB  $9E,$6E,$6B,$27,$FD ; * 999999999
EFFD 9E6E6B2800       (      exbasic.asm):03412         LBDC0     FCB  $9E,$6E,$6B,$28,$00 ; * 1E + 09
                      (      exbasic.asm):03413         *
F002 8EDE98           (      exbasic.asm):03414         LBDC5     LDX  #LABE8-1       ; POINT X TO " IN " MESSAGE
F005 8D0C             (      exbasic.asm):03415                   BSR  LBDD6          ; COPY A STRING FROM (X) TO CONSOLE OUT
F007 DC68             (      exbasic.asm):03416                   LDD  CURLIN         ; GET CURRENT BASIC LINE NUMBER TO ACCD
                      (      exbasic.asm):03417         * CONVERT VALUE IN ACCD INTO A DECIMAL NUMBER
                      (      exbasic.asm):03418         * AND PRINT IT TO CONSOLE OUT
F009 DD50             (      exbasic.asm):03419         LBDCC     STD  FPA0           ; SAVE ACCD IN TOP HALF OF FPA0
F00B C690             (      exbasic.asm):03420                   LDB  #$90           ; REQ'D EXPONENT IF TOP HALF OF ACCD = INTEGER
F00D 43               (      exbasic.asm):03421                   COMA                ; SET CARRY FLAG - FORCE POSITIVE MANTISSA
F00E BDEEC3           (      exbasic.asm):03422                   JSR  LBC86          ; ZERO BOTTOM HALF AND SIGN OF FPA0, THEN
                      (      exbasic.asm):03423         *         SAVE EXPONENT AND NORMALIZE IT
F011 8D03             (      exbasic.asm):03424                   BSR  LBDD9          ; CONVERT FP NUMBER TO ASCII STRING
F013 7EEBD9           (      exbasic.asm):03425         LBDD6     JMP  LB99C          ; COPY A STRING FROM (X) TO CONSOLE OUT
                      (      exbasic.asm):03426         
                      (      exbasic.asm):03427         * CONVERT FP NUMBER TO ASCII STRING
F016 CE01F1           (      exbasic.asm):03428         LBDD9     LDU  #STRBUF+3      ; POINT U TO BUFFER WHICH WILL NOT CAUSE
                      (      exbasic.asm):03429         *                             ; THE STRING TO BE STORED IN STRING SPACE
F019 8620             (      exbasic.asm):03430         LBDDC     LDA  #SPACE         ; SPACE = DEFAULT SIGN FOR POSITIVE #
F01B D654             (      exbasic.asm):03431                   LDB  FP0SGN         ; GET SIGN OF FPA0
F01D 2A02             (      exbasic.asm):03432                   BPL  LBDE4          ; BRANCH IF POSITIVE
F01F 862D             (      exbasic.asm):03433                   LDA  #'-            ; ASCII MINUS SIGN
F021 A7C0             (      exbasic.asm):03434         LBDE4     STA  ,U+            ; STORE SIGN OF NUMBER
F023 DF64             (      exbasic.asm):03435                   STU  COEFPT         ; SAVE BUFFER POINTER
F025 9754             (      exbasic.asm):03436                   STA  FP0SGN         ; SAVE SIGN (IN ASCII)
F027 8630             (      exbasic.asm):03437                   LDA  #'0            ; ASCII ZERO IF EXPONENT = 0
F029 D64F             (      exbasic.asm):03438                   LDB  FP0EXP         ; GET FPA0 EXPONENT
F02B 102700C6         (      exbasic.asm):03439                   LBEQ LBEB8          ; BRANCH IF FPA0 = 0
F02F 4F               (      exbasic.asm):03440                   CLRA                ; BASE 10 EXPONENT=0 FOR FP NUMBER > 1
F030 C180             (      exbasic.asm):03441                   CMPB #$80           ; CHECK EXPONENT
F032 2208             (      exbasic.asm):03442                   BHI  LBDFF          ; BRANCH IF FP NUMBER > 1
                      (      exbasic.asm):03443         * IF FPA0 < 1.0, MULTIPLY IT BY 1E+09 TO SPEED UP THE CONVERSION PROCESS
F034 8EEFFD           (      exbasic.asm):03444                   LDX  #LBDC0         ; POINT X TO FP 1E+09
F037 BDED07           (      exbasic.asm):03445                   JSR  LBACA          ; MULTIPLY FPA0 BY (X)
F03A 86F7             (      exbasic.asm):03446                   LDA  #-9            ; BASE 10 EXPONENT = -9
F03C 9745             (      exbasic.asm):03447         LBDFF     STA  V45            ; BASE 10 EXPONENT
                      (      exbasic.asm):03448         * PSEUDO - NORMALIZE THE FP NUMBER TO A VALUE IN THE RANGE
                      (      exbasic.asm):03449         * OF 999,999,999 RO 99,999,999.9 - THIS IS THE LARGEST
                      (      exbasic.asm):03450         * NUMBER RANGE IN WHICH ALL OF THE DIGITS ARE
                      (      exbasic.asm):03451         * SIGNIFICANT WHICH CAN BE DISPLAYED WITHOUT USING
                      (      exbasic.asm):03452         * SCIENTIFIC NOTATION
F03E 8EEFF8           (      exbasic.asm):03453         LBE01     LDX  #LBDBB         ; POINT X TO FP 999,999,999
F041 BDEEDD           (      exbasic.asm):03454                   JSR  LBCA0          ; COMPARE FPA0 TO 999,999,999
F044 2E0F             (      exbasic.asm):03455                   BGT  LBE18          ; BRANCH IF > 999,999,999
F046 8EEFF3           (      exbasic.asm):03456         LBE09     LDX  #LBDB6         ; POINT X TO FP 99,999,999.9
F049 BDEEDD           (      exbasic.asm):03457                   JSR  LBCA0          ; COMPARE FPA0 TO 99,999,999.9
F04C 2E0E             (      exbasic.asm):03458                   BGT  LBE1F          ; BRANCH IF > 99,999,999.9 (IN RANGE)
F04E BDEDA7           (      exbasic.asm):03459                   JSR  LBB6A          ; MULTIPLY FPA0 BY 10
F051 0A45             (      exbasic.asm):03460                   DEC  V45            ; SUBTRACT ONE FROM DECIMAL OFFSET
F053 20F1             (      exbasic.asm):03461                   BRA  LBE09          ; PSEUDO - NORMALIZE SOME MORE
F055 BDEDBF           (      exbasic.asm):03462         LBE18     JSR  LBB82          ; DIVIDE FPA0 BY 10
F058 0C45             (      exbasic.asm):03463                   INC  V45            ; ADD ONE TO BASE 10 EXPONENT
F05A 20E2             (      exbasic.asm):03464                   BRA  LBE01          ; PSEUDO - NORMALIZE SOME MORE
F05C BDEBF1           (      exbasic.asm):03465         LBE1F     JSR  LB9B4          ; ADD .5 TO FPA0 (ROUND OFF)
F05F BDEF05           (      exbasic.asm):03466                   JSR  LBCC8          ; CONVERT FPA0 TO AN INTEGER
F062 C601             (      exbasic.asm):03467                   LDB  #1             ; DEFAULT DECIMAL POINT FLAG (FORCE IMMED DECIMAL PT)
F064 9645             (      exbasic.asm):03468                   LDA  V45            ; * GET BASE 10 EXPONENT AND ADD TEN TO IT
F066 8B0A             (      exbasic.asm):03469                   ADDA #9+1           ; * (NUMBER 'NORMALIZED' TO 9 PLACES & DECIMAL PT)
F068 2B09             (      exbasic.asm):03470                   BMI  LBE36          ; BRANCH IF NUMBER < 1.0
F06A 810B             (      exbasic.asm):03471                   CMPA #9+2           ; NINE PLACES MAY BE DISPLAYED WITHOUT
                      (      exbasic.asm):03472         *         USING SCIENTIFIC NOTATION
F06C 2405             (      exbasic.asm):03473                   BCC  LBE36          ; BRANCH IF SCIENTIFIC NOTATION REQUIRED
F06E 4A               (      exbasic.asm):03474                   DECA                ; * SUBTRACT 1 FROM MODIFIED BASE 10 EXPONENT CTR
F06F 1F89             (      exbasic.asm):03475                   TFR  A,B            ; * AND SAVE IT IN ACCB (DECiMAL POINT FLAG)
F071 8602             (      exbasic.asm):03476                   LDA  #2             ; FORCE EXPONENT = 0 - DON'T USE SCIENTIFIC NOTATION
F073 4A               (      exbasic.asm):03477         LBE36     DECA                ; * SUBTRACT TWO (WITHOUT AFFECTING CARRY)
F074 4A               (      exbasic.asm):03478                   DECA                ; * FROM BASE 10 EXPONENT
F075 9747             (      exbasic.asm):03479                   STA  V47            ; SAVE EXPONENT - ZERO EXPONENT = DO NOT DISPLAY
                      (      exbasic.asm):03480         *         IN   SCIENTIFIC NOTATION
F077 D745             (      exbasic.asm):03481                   STB  V45            ; DECIMAL POINT FLAG - NUMBER OF PLACES TO
                      (      exbasic.asm):03482         *         LEFT OF DECIMAL POINT
F079 2E0D             (      exbasic.asm):03483                   BGT  LBE4B          ; BRANCH IF >= 1
F07B DE64             (      exbasic.asm):03484                   LDU  COEFPT         ; POINT U TO THE STRING BUFFER
F07D 862E             (      exbasic.asm):03485                   LDA  #'.            ; * STORE A PERIOD
F07F A7C0             (      exbasic.asm):03486                   STA  ,U+            ; * IN THE BUFFER
F081 5D               (      exbasic.asm):03487                   TSTB                ; CHECK DECIMAL POINT FLAG
F082 2704             (      exbasic.asm):03488                   BEQ  LBE4B          ; BRANCH IF NOTHING TO LEFT OF DECIMAL POINT
F084 8630             (      exbasic.asm):03489                   LDA  #'0            ; * STORE A ZERO
F086 A7C0             (      exbasic.asm):03490                   STA  ,U+            ; * IN THE BUFFER
                      (      exbasic.asm):03491         
                      (      exbasic.asm):03492         * CONVERT FPA0 INTO A STRING OF ASCII DIGITS
F088 8EF102           (      exbasic.asm):03493         LBE4B     LDX  #LBEC5         ; POINT X TO FP POWER OF 10 MANTISSA
F08B C680             (      exbasic.asm):03494                   LDB  #0+$80         ; INITIALIZE DIGIT COUNTER TO 0+$80
                      (      exbasic.asm):03495         * BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA
                      (      exbasic.asm):03496         * IS NEGATIVE. WHEN YOU 'ADD' A NEGATIVE MANTISSA, IT IS
                      (      exbasic.asm):03497         * THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB IS HOW
                      (      exbasic.asm):03498         * THE ROUTINE KNOWS THAT A 'SUBTRACTION' IS OCCURING.
F08D 9653             (      exbasic.asm):03499         LBE50     LDA  FPA0+3         ; * ADD MANTISSA LS
F08F AB03             (      exbasic.asm):03500                   ADDA 3,X            ; * BYTE OF FPA0
F091 9753             (      exbasic.asm):03501                   STA  FPA0+3         ; * AND (X)
F093 9652             (      exbasic.asm):03502                   LDA  FPA0+2         ; = ADD MANTISSA
F095 A902             (      exbasic.asm):03503                   ADCA 2,X            ; = NUMBER 3 BYTE OF
F097 9752             (      exbasic.asm):03504                   STA  FPA0+2         ; = FPA0 AND (X)
F099 9651             (      exbasic.asm):03505                   LDA  FPA0+1         ; * ADD MANTISSA
F09B A901             (      exbasic.asm):03506                   ADCA 1,X            ; * NUMBER 2 BYTE OF
F09D 9751             (      exbasic.asm):03507                   STA  FPA0+1         ; * FPA0 AND (X)
F09F 9650             (      exbasic.asm):03508                   LDA  FPA0           ; = ADD MANTISSA
F0A1 A984             (      exbasic.asm):03509                   ADCA ,X             ; = MS BYTE OF
F0A3 9750             (      exbasic.asm):03510                   STA  FPA0           ; = FPA0 AND (X)
F0A5 5C               (      exbasic.asm):03511                   INCB                ; ADD ONE TO DIGIT COUNTER
F0A6 56               (      exbasic.asm):03512                   RORB                ; ROTATE CARRY INTO BIT 7
F0A7 59               (      exbasic.asm):03513                   ROLB                ; *SET OVERFLOW FLAG AND BRANCH IF CARRY = 1 AND
F0A8 28E3             (      exbasic.asm):03514                   BVC  LBE50          ; *POSITIVE MANTISSA OR CARRY = 0 AND NEG MANTISSA
F0AA 2403             (      exbasic.asm):03515                   BCC  LBE72          ; BRANCH IF NEGATIVE MANTISSA
F0AC C00B             (      exbasic.asm):03516                   SUBB #10+1          ; * TAKE THE 9'S COMPLEMENT IF
F0AE 50               (      exbasic.asm):03517                   NEGB                ; * ADDING MANTISSA
F0AF CB2F             (      exbasic.asm):03518         LBE72     ADDB #'0-1          ; ADD ASCII OFFSET TO DIGIT
F0B1 3004             (      exbasic.asm):03519                   LEAX 4,X            ; MOVE TO NEXT POWER OF 10 MANTISSA
F0B3 1F98             (      exbasic.asm):03520                   TFR  B,A            ; SAVE DIGIT IN ACCA
F0B5 847F             (      exbasic.asm):03521                   ANDA #$7F           ; MASK OFF BIT 7 (ADD/SUBTRACT FLAG)
F0B7 A7C0             (      exbasic.asm):03522                   STA  ,U+            ; STORE DIGIT IN STRING BUFFER
F0B9 0A45             (      exbasic.asm):03523                   DEC  V45            ; DECREMENT DECIMAL POINT FLAG
F0BB 2604             (      exbasic.asm):03524                   BNE  LBE84          ; BRANCH IF NOT TIME FOR DECIMAL POINT
F0BD 862E             (      exbasic.asm):03525                   LDA  #'.            ; * STORE DECIMAL POINT IN
F0BF A7C0             (      exbasic.asm):03526                   STA  ,U+            ; * STRING BUFFER
F0C1 53               (      exbasic.asm):03527         LBE84     COMB                ; TOGGLE BIT 7 (ADD/SUBTRACT FLAG)
F0C2 C480             (      exbasic.asm):03528                   ANDB #$80           ; MASK OFF ALL BUT ADD/SUBTRACT FLAG
F0C4 8CF126           (      exbasic.asm):03529                   CMPX #LBEC5+36      ; COMPARE X TO END OF MANTISSA TABLE
F0C7 26C4             (      exbasic.asm):03530                   BNE  LBE50          ; BRANCH IF NOT AT END OF TABLE
                      (      exbasic.asm):03531         * BLANK TRAILING ZEROS AND STORE EXPONENT IF ANY
F0C9 A6C2             (      exbasic.asm):03532         LBE8C     LDA  ,-U            ; GET THE LAST CHARACTER; MOVE POINTER BACK
F0CB 8130             (      exbasic.asm):03533                   CMPA #'0            ; WAS IT A ZERO?
F0CD 27FA             (      exbasic.asm):03534                   BEQ  LBE8C          ; IGNORE TRAILING ZEROS IF SO
F0CF 812E             (      exbasic.asm):03535                   CMPA #'.            ; CHECK FOR DECIMAL POINT
F0D1 2602             (      exbasic.asm):03536                   BNE  LBE98          ; BRANCH IF NOT DECIMAL POINT
F0D3 335F             (      exbasic.asm):03537                   LEAU -1,U           ; STEP OVER THE DECIMAL POINT
F0D5 862B             (      exbasic.asm):03538         LBE98     LDA  #'+            ; ASCII PLUS SIGN
F0D7 D647             (      exbasic.asm):03539                   LDB  V47            ; GET SCIENTIFIC NOTATION EXPONENT
F0D9 271C             (      exbasic.asm):03540                   BEQ  LBEBA          ; BRANCH IF NOT SCIENTIFIC NOTATION
F0DB 2A03             (      exbasic.asm):03541                   BPL  LBEA3          ; BRANCH IF POSITIVE EXPONENT
F0DD 862D             (      exbasic.asm):03542                   LDA  #'-            ; ASCII MINUS SIGN
F0DF 50               (      exbasic.asm):03543                   NEGB                ; NEGATE EXPONENT IF NEGATIVE
F0E0 A742             (      exbasic.asm):03544         LBEA3     STA  2,U            ; STORE EXPONENT SIGN IN STRING
F0E2 8645             (      exbasic.asm):03545                   LDA  #'E            ; * GET ASCII 'E' (SCIENTIFIC NOTATION
F0E4 A741             (      exbasic.asm):03546                   STA  1,U            ; * FLAG) AND SAVE IT IN THE STRING
F0E6 862F             (      exbasic.asm):03547                   LDA  #'0-1          ; INITIALIZE ACCA TO ASCII ZERO
                      (      exbasic.asm):03548         
                      (      exbasic.asm):03549         
F0E8 4C               (      exbasic.asm):03550         LBEAB     INCA                ; ADD ONE TO 10'S DIGIT OF EXPONENT
F0E9 C00A             (      exbasic.asm):03551                   SUBB #10            ; SUBTRACT 10 FROM ACCB
F0EB 24FB             (      exbasic.asm):03552                   BCC  LBEAB          ; ADD 1 TO 10'S DIGIT IF NO CARRY
F0ED CB3A             (      exbasic.asm):03553                   ADDB #'9+1          ; CONVERT UNITS DIGIT TO ASCII
F0EF ED43             (      exbasic.asm):03554                   STD  3,U            ; SAVE EXPONENT IN STRING
F0F1 6F45             (      exbasic.asm):03555                   CLR  5,U            ; CLEAR LAST BYTE (TERMINATOR)
F0F3 2004             (      exbasic.asm):03556                   BRA  LBEBC          ; GO RESET POINTER
F0F5 A7C4             (      exbasic.asm):03557         LBEB8     STA  ,U             ; STORE LAST CHARACTER
F0F7 6F41             (      exbasic.asm):03558         LBEBA     CLR  1,U            ; CLEAR LAST BYTE (TERMINATOR - REQUIRED BY
                      (      exbasic.asm):03559         *         PRINT SUBROUTINES)
F0F9 8E01F1           (      exbasic.asm):03560         LBEBC     LDX  #STRBUF+3      ; RESET POINTER TO START OF BUFFER
F0FC 39               (      exbasic.asm):03561                   RTS
                      (      exbasic.asm):03562         *
F0FD 8000000000       (      exbasic.asm):03563         LBEC0     FCB  $80,$00,$00,$00,$00 ; FLOATING POINT .5
                      (      exbasic.asm):03564         *
                      (      exbasic.asm):03565         *** TABLE OF UNNORMALIZED POWERS OF 10
F102 FA0A1F00         (      exbasic.asm):03566         LBEC5     FCB  $FA,$0A,$1F,$00 ; -100000000
F106 00989680         (      exbasic.asm):03567         LBEC9     FCB  $00,$98,$96,$80 ; 10000000
F10A FFF0BDC0         (      exbasic.asm):03568         LBECD     FCB  $FF,$F0,$BD,$C0 ; -1000000
F10E 000186A0         (      exbasic.asm):03569         LBED1     FCB  $00,$01,$86,$A0 ; 100000
F112 FFFFD8F0         (      exbasic.asm):03570         LBED5     FCB  $FF,$FF,$D8,$F0 ; -10000
F116 000003E8         (      exbasic.asm):03571         LBED9     FCB  $00,$00,$03,$E8 ; 1000
F11A FFFFFF9C         (      exbasic.asm):03572         LBEDD     FCB  $FF,$FF,$FF,$9C ; -100
F11E 0000000A         (      exbasic.asm):03573         LBEE1     FCB  $00,$00,$00,$0A ; 10
F122 FFFFFFFF         (      exbasic.asm):03574         LBEE5     FCB  $FF,$FF,$FF,$FF ; -1
                      (      exbasic.asm):03575         *
                      (      exbasic.asm):03576         *
F126 964F             (      exbasic.asm):03577         LBEE9     LDA  FP0EXP         ; GET EXPONENT OF FPA0
F128 2702             (      exbasic.asm):03578                   BEQ  LBEEF          ; BRANCH IF FPA0 = 0
F12A 0354             (      exbasic.asm):03579                   COM  FP0SGN         ; TOGGLE MANTISSA SIGN OF FPA0
F12C 39               (      exbasic.asm):03580         LBEEF     RTS
                      (      exbasic.asm):03581         * EXPAND A POLYNOMIAL OF THE FORM
                      (      exbasic.asm):03582         * AQ+BQ**3+CQ**5+DQ**7.... WHERE Q = FPA0
                      (      exbasic.asm):03583         * AND THE X REGISTER POINTS TO A TABLE OF
                      (      exbasic.asm):03584         * COEFFICIENTS A,B,C,D....
F12D 9F64             (      exbasic.asm):03585         LBEF0     STX  COEFPT         ; SAVE COEFFICIENT TABLE POINTER
F12F BDEE6C           (      exbasic.asm):03586                   JSR  LBC2F          ; MOVE FPA0 TO FPA3
F132 8D05             (      exbasic.asm):03587                   BSR  LBEFC          ; MULTIPLY FPA3 BY FPA0
F134 8D08             (      exbasic.asm):03588                   BSR  LBF01          ; EXPAND POLYNOMIAL
F136 8E0040           (      exbasic.asm):03589                   LDX  #V40           ; POINT X TO FPA3
F139 7EED07           (      exbasic.asm):03590         LBEFC     JMP  LBACA          ; MULTIPLY (X) BY FPA0
                      (      exbasic.asm):03591         
                      (      exbasic.asm):03592         * CALCULATE THE VALUE OF AN EXPANDED POLYNOMIAL
                      (      exbasic.asm):03593         * EXPRESSION. ENTER WITH (X) POINTING TO A TABLE
                      (      exbasic.asm):03594         * OF COEFFICIENTS, THE FIRST BYTE OF WHICH IS THE
                      (      exbasic.asm):03595         * NUMBER OF (COEFFICIENTS-1) FOLLOWED BY THAT NUMBER
                      (      exbasic.asm):03596         * OF PACKED FLOATING POINT NUMBERS. THE
                      (      exbasic.asm):03597         * POLYNOMIAL IS EVALUATED AS FOLLOWS: VALUE =
                      (      exbasic.asm):03598         * (((FPA0*Y0+Y1)*FPA0+Y2)*FPA0...YN)
F13C 9F64             (      exbasic.asm):03599         LBEFF     STX  COEFPT         ; SAVE COEFFICIENT TABLE POINTER
F13E BDEE67           (      exbasic.asm):03600         LBF01     JSR  LBC2A          ; MOVE FPA0 TO FPA4
F141 9E64             (      exbasic.asm):03601                   LDX  COEFPT         ; GET THE COEFFICIENT POINTER
F143 E680             (      exbasic.asm):03602                   LDB  ,X+            ; GET THE TOP OF COEFFICIENT TABLE TO
F145 D755             (      exbasic.asm):03603                   STB  COEFCT         ; * USE AND STORE IT IN TEMPORARY COUNTER
F147 9F64             (      exbasic.asm):03604                   STX  COEFPT         ; SAVE NEW COEFFICIENT POINTER
F149 8DEE             (      exbasic.asm):03605         LBF0C     BSR  LBEFC          ; MULTIPLY (X) BY FPA0
F14B 9E64             (      exbasic.asm):03606                   LDX  COEFPT         ; *GET COEFFICIENT POINTER
F14D 3005             (      exbasic.asm):03607                   LEAX 5,X            ; *MOVE TO NEXT FP NUMBER
F14F 9F64             (      exbasic.asm):03608                   STX  COEFPT         ; *SAVE NEW COEFFICIENT POINTER
F151 BDEBFF           (      exbasic.asm):03609                   JSR  LB9C2          ; ADD (X) AND FPA0
F154 8E0045           (      exbasic.asm):03610                   LDX  #V45           ; POINT (X) TO FPA4
F157 0A55             (      exbasic.asm):03611                   DEC  COEFCT         ; DECREMENT TEMP COUNTER
F159 26EE             (      exbasic.asm):03612                   BNE  LBF0C          ; BRANCH IF MORE COEFFICIENTS LEFT
F15B 39               (      exbasic.asm):03613                   RTS
                      (      exbasic.asm):03614         
                      (      exbasic.asm):03615         * RND
F15C BDEEAA           (      exbasic.asm):03616         RND       JSR  LBC6D          ; TEST FPA0
F15F 2B1F             (      exbasic.asm):03617                   BMI  LBF45          ; BRANCH IF FPA0 = NEGATIVE
F161 2715             (      exbasic.asm):03618                   BEQ  LBF3B          ; BRANCH IF FPA0 = 0
F163 8D10             (      exbasic.asm):03619                   BSR  LBF38          ; CONVERT FPA0 TO AN INTEGER
F165 BDEE6C           (      exbasic.asm):03620                   JSR  LBC2F          ; PACK FPA0 TO FPA3
F168 8D0E             (      exbasic.asm):03621                   BSR  LBF3B          ; GET A RANDOM NUMBER: FPA0 < 1.0
F16A 8E0040           (      exbasic.asm):03622                   LDX  #V40           ; POINT (X) TO FPA3
F16D 8DCA             (      exbasic.asm):03623                   BSR  LBEFC          ; MULTIPLY (X) BY FPA0
F16F 8EED02           (      exbasic.asm):03624                   LDX  #LBAC5         ; POINT (X) TO FP VALUE OF 1.0
F172 BDEBFF           (      exbasic.asm):03625                   JSR  LB9C2          ; ADD 1.0 TO FPA0
F175 7EEF2B           (      exbasic.asm):03626         LBF38     JMP  INT            ; CONVERT FPA0 TO AN INTEGER
                      (      exbasic.asm):03627         * CALCULATE A RANDOM NUMBER IN THE RANGE 0.0 < X <= 1.0
F178 9EB1             (      exbasic.asm):03628         LBF3B     LDX  RVSEED+1       ; * MOVE VARIABLE
F17A 9F50             (      exbasic.asm):03629                   STX  FPA0           ; * RANDOM NUMBER
F17C 9EB3             (      exbasic.asm):03630                   LDX  RVSEED+3       ; * SEED TO
F17E 9F52             (      exbasic.asm):03631                   STX  FPA0+2         ; * FPA0
F180 BEF1AD           (      exbasic.asm):03632         LBF45     LDX  RSEED          ; = MOVE FIXED
F183 9F5D             (      exbasic.asm):03633                   STX  FPA1           ; = RANDOM NUMBER
F185 BEF1AF           (      exbasic.asm):03634                   LDX  RSEED+2        ; = SEED TO
F188 9F5F             (      exbasic.asm):03635                   STX  FPA1+2         ; = MANTISSA OF FPA0
F18A BDED0D           (      exbasic.asm):03636                   JSR  LBAD0          ; MULTIPLY FPA0 X FPA1
F18D DC8A             (      exbasic.asm):03637                   LDD  VAD            ; GET THE TWO LOWEST ORDER PRODUCT BYTES
F18F C3658B           (      exbasic.asm):03638                   ADDD #$658B         ; ADD A CONSTANT
F192 DDB3             (      exbasic.asm):03639                   STD  RVSEED+3       ; SAVE NEW LOW ORDER VARIABLE RANDOM # SEED
F194 DD52             (      exbasic.asm):03640                   STD  FPA0+2         ; SAVE NEW LOW ORDER BYTES OF FPA0 MANTISSA
F196 DC88             (      exbasic.asm):03641                   LDD  VAB            ; GET 2 MORE LOW ORDER PRODUCT BYTES
F198 C9B0             (      exbasic.asm):03642                   ADCB #$B0           ; ADD A CONSTANT
F19A 8905             (      exbasic.asm):03643                   ADCA #5             ; ADD A CONSTANT
F19C DDB1             (      exbasic.asm):03644                   STD  RVSEED+1       ; SAVE NEW HIGH ORDER VARIABLE RANDOM # SEED
F19E DD50             (      exbasic.asm):03645                   STD  FPA0           ; SAVE NEW HIGH ORDER FPA0 MANTISSA
F1A0 0F54             (      exbasic.asm):03646                   CLR  FP0SGN         ; FORCE FPA0 MANTISSA = POSITIVE
F1A2 8680             (      exbasic.asm):03647                   LDA  #$80           ; * SET FPA0 BIASED EXPONENT
F1A4 974F             (      exbasic.asm):03648                   STA  FP0EXP         ; * TO 0 1 < FPA0 < 0
F1A6 9615             (      exbasic.asm):03649                   LDA  FPA2+2         ; GET A BYTE FROM FPA2 (MORE RANDOMNESS)
F1A8 9763             (      exbasic.asm):03650                   STA  FPSBYT         ; SAVE AS SUB BYTE
F1AA 7EEC59           (      exbasic.asm):03651                   JMP  LBA1C          ; NORMALIZE FPA0
                      (      exbasic.asm):03652         *
F1AD 40E6             (      exbasic.asm):03653         RSEED     FDB  $40E6          ; *CONSTANT RANDOM NUMBER GENERATOR SEED
F1AF 4DAB             (      exbasic.asm):03654                   FDB  $4DAB          ; *
                      (      exbasic.asm):03655         
                      (      exbasic.asm):03656         * SIN
                      (      exbasic.asm):03657         * THE SIN FUNCTION REQUIRES AN ARGUMENT IN RADIANS AND WILL REPEAT ITSELF EVERY
                      (      exbasic.asm):03658         * 2*PI RADIANS. THE ARGUMENT IS DIVIDED BY 2*PI AND ONLY THE FRACTIONAL PART IS
                      (      exbasic.asm):03659         * RETAINED. SINCE THE ARGUMENT WAS DIVIDED BY 2*P1, THE COEFFICIENTS MUST BE
                      (      exbasic.asm):03660         * MULTIPLIED BY THE APPROPRIATE POWER OF 2*PI.
                      (      exbasic.asm):03661         
                      (      exbasic.asm):03662         * SIN IS EVALUATED USING THE TRIGONOMETRIC IDENTITIES BELOW:
                      (      exbasic.asm):03663         * SIN(X)=SIN(PI-X) & -SIN(PI/2-X)=SIN((3*PI)/2+X)
F1B1 BDEE9C           (      exbasic.asm):03664         SIN       JSR  LBC5F          ; COPY FPA0 TO FPA1
F1B4 8EF1F6           (      exbasic.asm):03665                   LDX  #LBFBD         ; POINT (X) TO 2*PI
F1B7 D661             (      exbasic.asm):03666                   LDB  FP1SGN         ; *GET MANTISSA SIGN OF FPA1
F1B9 BDEDC6           (      exbasic.asm):03667                   JSR  LBB89          ; *AND DIVIDE FPA0 BY 2*PI
F1BC BDEE9C           (      exbasic.asm):03668                   JSR  LBC5F          ; COPY FPA0 TO FPA1
F1BF 8DB4             (      exbasic.asm):03669                   BSR  LBF38          ; CONVERT FPA0 TO AN INTEGER
F1C1 0F62             (      exbasic.asm):03670                   CLR  RESSGN         ; SET RESULT SIGN = POSITIVE
F1C3 965C             (      exbasic.asm):03671                   LDA  FP1EXP         ; *GET EXPONENT OF FPA1
F1C5 D64F             (      exbasic.asm):03672                   LDB  FP0EXP         ; *GET EXPONENT OF FPA0
F1C7 BDEBF9           (      exbasic.asm):03673                   JSR  LB9BC          ; *SUBTRACT FPA0 FROM FPA1
                      (      exbasic.asm):03674         * NOW FPA0 CONTAINS ONLY THE FRACTIONAL PART OF ARGUMENT/2*PI
F1CA 8EF1FB           (      exbasic.asm):03675                   LDX  #LBFC2         ; POINT X TO FP (.25)
F1CD BDEBF6           (      exbasic.asm):03676                   JSR  LB9B9          ; SUBTRACT FPA0 FROM .25 (PI/2)
F1D0 9654             (      exbasic.asm):03677                   LDA  FP0SGN         ; GET MANTISSA SIGN OF FPA0
F1D2 3402             (      exbasic.asm):03678                   PSHS A              ; SAVE IT ON STACK
F1D4 2A09             (      exbasic.asm):03679                   BPL  LBFA6          ; BRANCH IF MANTISSA POSITIVE
F1D6 BDEBF1           (      exbasic.asm):03680                   JSR  LB9B4          ; ADD .5 (PI) TO FPA0
F1D9 9654             (      exbasic.asm):03681                   LDA  FP0SGN         ; GET SIGN OF FPA0
F1DB 2B05             (      exbasic.asm):03682                   BMI  LBFA9          ; BRANCH IF NEGATIVE
F1DD 030A             (      exbasic.asm):03683                   COM  RELFLG         ; COM IF +(3*PI)/2 >= ARGUMENT >+ PI/2 (QUADRANT FLAG)
F1DF BDF126           (      exbasic.asm):03684         LBFA6     JSR  LBEE9          ; TOGGLE MANTISSA SIGN OF FPA0
F1E2 8EF1FB           (      exbasic.asm):03685         LBFA9     LDX  #LBFC2         ; POINT X TO FP (.25)
F1E5 BDEBFF           (      exbasic.asm):03686                   JSR  LB9C2          ; ADD .25 (PI/2) TO FPA0
F1E8 3502             (      exbasic.asm):03687                   PULS A              ; GET OLD MANTISSA SIGN
F1EA 4D               (      exbasic.asm):03688                   TSTA                ; * BRANCH IF OLD
F1EB 2A03             (      exbasic.asm):03689                   BPL  LBFB7          ; * SIGN WAS POSITIVE
F1ED BDF126           (      exbasic.asm):03690                   JSR  LBEE9          ; TOGGLE MANTISSA SIGN
F1F0 8EF200           (      exbasic.asm):03691         LBFB7     LDX  #LBFC7         ; POINT X TO TABLE OF COEFFICIENTS
F1F3 7EF12D           (      exbasic.asm):03692                   JMP  LBEF0          ; GO CALCULATE POLYNOMIAL VALUE
                      (      exbasic.asm):03693         
F1F6 83490FDAA2       (      exbasic.asm):03694         LBFBD     FCB  $83,$49,$0F,$DA,$A2 ; 6.28318531 (2*PI)
F1FB 7F00000000       (      exbasic.asm):03695         LBFC2     FCB  $7F,$00,$00,$00,$00 ; .25
                      (      exbasic.asm):03696         
                      (      exbasic.asm):03697         
F200 05               (      exbasic.asm):03698         LBFC7     FCB  6-1            ; SIX COEFFICIENTS
F201 84E61A2D1B       (      exbasic.asm):03699         LBFC8     FCB  $84,$E6,$1A,$2D,$1B ; * -((2*PI)**11)/11!
F206 862807FBF8       (      exbasic.asm):03700         LBFCD     FCB  $86,$28,$07,$FB,$F8 ; * ((2*PI)**9)/9!
F20B 8799688901       (      exbasic.asm):03701         LBFD2     FCB  $87,$99,$68,$89,$01 ; * -((2*PI)**7)/7!
F210 872335DFE1       (      exbasic.asm):03702         LBFD7     FCB  $87,$23,$35,$DF,$E1 ; * ((2*PI)**5)/5!
F215 86A55DE728       (      exbasic.asm):03703         LBFDC     FCB  $86,$A5,$5D,$E7,$28 ; * -((2*PI)**3)/3!
F21A 83490FDAA2       (      exbasic.asm):03704         LBFE1     FCB  $83,$49,$0F,$DA,$A2 ; *
                      (      exbasic.asm):03705         
F21F A154468F13       (      exbasic.asm):03706                   FCB  $A1,$54,$46,$8F,$13 ; UNUSED GARBAGE BYTES
F224 8F524389CD       (      exbasic.asm):03707                   FCB  $8F,$52,$43,$89,$CD ; UNUSED GARBAGE BYTES
                      (      exbasic.asm):03708         * EXTENDED BASIC
                      (      exbasic.asm):03709         
                      (      exbasic.asm):03710         * COS
                      (      exbasic.asm):03711         * THE VALUE OF COS(X) IS DETERMINED BY THE TRIG IDENTITY COS(X)=SIN((PI/2)+X)
F229 8EF25C           (      exbasic.asm):03712         COS       LDX  #L83AB         ; POINT X TO FP CONSTANT (P1/2)
F22C BDEBFF           (      exbasic.asm):03713                   JSR  LB9C2          ; ADD FPA0 TO (X)
F22F 7EF1B1           (      exbasic.asm):03714         L837E     JMP  SIN            ; JUMP TO SIN ROUTINE
                      (      exbasic.asm):03715         
                      (      exbasic.asm):03716         * TAN
                      (      exbasic.asm):03717         * THE VALUE OF TAN(X) IS DETERMINED BY THE TRIG IDENTITY TAN(X)=SIN(X)/COS(X)
F232 BDEE6C           (      exbasic.asm):03718         TAN       JSR  LBC2F          ; PACK FPA0 AND MOVE IT TO FPA3
F235 0F0A             (      exbasic.asm):03719                   CLR  RELFLG         ; RESET QUADRANT FLAG
F237 8DF6             (      exbasic.asm):03720                   BSR  L837E          ; CALCULATE SIN OF ARGUMENT
F239 8E004A           (      exbasic.asm):03721                   LDX  #V4A           ; POINT X TO FPA5
F23C BDEE72           (      exbasic.asm):03722                   JSR  LBC35          ; PACK FPA0 AND MOVE IT TO FPA5
F23F 8E0040           (      exbasic.asm):03723                   LDX  #V40           ; POINT X TO FPA3
F242 BDEE51           (      exbasic.asm):03724                   JSR  LBC14          ; MOVE FPA3 TO FPA0
F245 0F54             (      exbasic.asm):03725                   CLR  FP0SGN         ; FORCE FPA0 MANTISSA TO BE POSITIVE
F247 960A             (      exbasic.asm):03726                   LDA  RELFLG         ; GET THE QUADRANT FLAG - COS NEGATIVE IN QUADS 2,3
F249 8D0C             (      exbasic.asm):03727                   BSR  L83A6          ; CALCULATE VALUE OF COS(FPA0)
F24B 0D4F             (      exbasic.asm):03728                   TST  FP0EXP         ; CHECK EXPONENT OF FPA0
F24D 1027FA7E         (      exbasic.asm):03729                   LBEQ LBA92          ; ''OV' ERROR IF COS(X)=0
F251 8E004A           (      exbasic.asm):03730                   LDX  #V4A           ; POINT X TO FPA5
F254 7EEDCC           (      exbasic.asm):03731         L83A3     JMP  LBB8F          ; DIVIDE (X) BY FPA0 - SIN(X)/COS(X)
F257 3402             (      exbasic.asm):03732         L83A6     PSHS A              ; SAVE SIGN FLAG ON STACK
F259 7EF1DF           (      exbasic.asm):03733                   JMP  LBFA6          ; EXPAND POLYNOMIAL
                      (      exbasic.asm):03734         
F25C 81490FDAA2       (      exbasic.asm):03735         L83AB     FCB  $81,$49,$0F,$DA,$A2 ; 1.57079633 (PI/2)
                      (      exbasic.asm):03736         
                      (      exbasic.asm):03737         * ATN
                      (      exbasic.asm):03738         * A 12 TERM TAYLOR SERIES IS USED TO EVALUATE THE
                      (      exbasic.asm):03739         * ARCTAN EXPRESSION. TWO  DIFFERENT FORMULI ARE USED
                      (      exbasic.asm):03740         * TO EVALUATE THE EXPRESSION DEPENDING UPON
                      (      exbasic.asm):03741         * WHETHER OR NOT THE ARGUMENT SQUARED IS > OR < 1.0
                      (      exbasic.asm):03742         
                      (      exbasic.asm):03743         * IF X**2<1 THEN ATN=X-(X**3)/3+(X**5)/5-(X**7)/7. . .
                      (      exbasic.asm):03744         * IF X**2>=1 THEN ATN=PI/2-(1/X-1/((X**3)*3)+(1/((X**5)*5)-. . .)
                      (      exbasic.asm):03745         
F261 9654             (      exbasic.asm):03746         ATN       LDA  FP0SGN         ; * GET THE SIGN OF THE MANTISSA AND
F263 3402             (      exbasic.asm):03747                   PSHS A              ; * SAVE IT ON THE STACK
F265 2A02             (      exbasic.asm):03748                   BPL  L83B8          ; BRANCH IF POSITIVE MANTISSA
F267 8D24             (      exbasic.asm):03749                   BSR  L83DC          ; CHANGE SIGN OF FPA0
F269 964F             (      exbasic.asm):03750         L83B8     LDA  FP0EXP         ; * GET EXPONENT OF FPA0 AND
F26B 3402             (      exbasic.asm):03751                   PSHS A              ; * SAVE IT ON THE STACK
F26D 8181             (      exbasic.asm):03752                   CMPA #$81           ; IS FPAO < 1.0?
F26F 2505             (      exbasic.asm):03753                   BLO  L83C5          ; YES
F271 8EED02           (      exbasic.asm):03754                   LDX  #LBAC5         ; POINT X TO FP CONSTANT 1.0
F274 8DDE             (      exbasic.asm):03755                   BSR  L83A3          ; GET RECIPROCAL OF FPA0
F276 8EF291           (      exbasic.asm):03756         L83C5     LDX  #L83E0         ; POINT (X) TO TAYLOR SERIES COEFFICIENTS
F279 BDF12D           (      exbasic.asm):03757                   JSR  LBEF0          ; EXPAND POLYNOMIAL
F27C 3502             (      exbasic.asm):03758                   PULS A              ; GET EXPONENT OF ARGUMENT
F27E 8181             (      exbasic.asm):03759                   CMPA #$81           ; WAS ARGUMENT < 1.0?
F280 2506             (      exbasic.asm):03760                   BLO  L83D7          ; YES
F282 8EF25C           (      exbasic.asm):03761                   LDX  #L83AB         ; POINT (X) TO FP NUMBER (PI/2)
F285 BDEBF6           (      exbasic.asm):03762                   JSR  LB9B9          ; SUBTRACT FPA0 FROM (PI/2)
F288 3502             (      exbasic.asm):03763         L83D7     PULS A              ; * GET SIGN OF INITIAL ARGUMENT MANTISSA
F28A 4D               (      exbasic.asm):03764                   TSTA                ; * AND SET FLAGS ACCORDING TO IT
F28B 2A03             (      exbasic.asm):03765                   BPL  L83DF          ; RETURN IF ARGUMENT WAS POSITIVE
F28D 7EF126           (      exbasic.asm):03766         L83DC     JMP  LBEE9          ; CHANGE MANTISSA SIGN OF FPA0
F290 39               (      exbasic.asm):03767         L83DF     RTS
                      (      exbasic.asm):03768         *
                      (      exbasic.asm):03769         * TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR ARCTANGENT
F291 0B               (      exbasic.asm):03770         L83E0     FCB  $0B            ; TWELVE COEFFICIENTS
F292 76B383BDD3       (      exbasic.asm):03771         L83E1     FCB  $76,$B3,$83,$BD,$D3 ; -6.84793912E-04 1/23
F297 791EF4A6F5       (      exbasic.asm):03772         L83E6     FCB  $79,$1E,$F4,$A6,$F5 ; +4.85094216E-03 1/21
F29C 7B83FCB010       (      exbasic.asm):03773         L83EB     FCB  $7B,$83,$FC,$B0,$10 ; -0.0161117018
F2A1 7C0C1F67CA       (      exbasic.asm):03774         L83F0     FCB  $7C,$0C,$1F,$67,$CA ; 0.0342096381
F2A6 7CDE53CBC1       (      exbasic.asm):03775         L83F5     FCB  $7C,$DE,$53,$CB,$C1 ; -0.0542791328
F2AB 7D1464704C       (      exbasic.asm):03776         L83FA     FCB  $7D,$14,$64,$70,$4C ; 0.0724571965
F2B0 7DB7EA517A       (      exbasic.asm):03777         L83FF     FCB  $7D,$B7,$EA,$51,$7A ; -0.0898023954
F2B5 7D6330887E       (      exbasic.asm):03778         L8404     FCB  $7D,$63,$30,$88,$7E ; 0.110932413
F2BA 7E9244993A       (      exbasic.asm):03779         L8409     FCB  $7E,$92,$44,$99,$3A ; -0.142839808
F2BF 7E4CCC91C7       (      exbasic.asm):03780         L840E     FCB  $7E,$4C,$CC,$91,$C7 ; 0.199999121
F2C4 7FAAAAAA13       (      exbasic.asm):03781         L8413     FCB  $7F,$AA,$AA,$AA,$13 ; -0.333333316
F2C9 8100000000       (      exbasic.asm):03782         L8418     FCB  $81,$00,$00,$00,$00 ; 1
                      (      exbasic.asm):03783         *
                      (      exbasic.asm):03784         *** TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR LN(X)
                      (      exbasic.asm):03785         *
F2CE 03               (      exbasic.asm):03786         L841D     FCB  3              ; FOUR COEFFICIENTS
F2CF 7F5E56CB79       (      exbasic.asm):03787         L841E     FCB  $7F,$5E,$56,$CB,$79 ; 0.434255942
F2D4 80139B0B64       (      exbasic.asm):03788         L8423     FCB  $80,$13,$9B,$0B,$64 ; 0.576584541
F2D9 8076389316       (      exbasic.asm):03789         L8428     FCB  $80,$76,$38,$93,$16 ; 0.961800759
F2DE 8238AA3B20       (      exbasic.asm):03790         L842D     FCB  $82,$38,$AA,$3B,$20 ; 2.88539007
                      (      exbasic.asm):03791         
F2E3 803504F334       (      exbasic.asm):03792         L8432     FCB  $80,$35,$04,$F3,$34 ; 1/SQR(2)
                      (      exbasic.asm):03793         
F2E8 813504F334       (      exbasic.asm):03794         L8437     FCB  $81,$35,$04,$F3,$34 ; SQR(2)
                      (      exbasic.asm):03795         
F2ED 8080000000       (      exbasic.asm):03796         L843C     FCB  $80,$80,$00,$00,$00 ; -0.5
                      (      exbasic.asm):03797         
F2F2 80317217F8       (      exbasic.asm):03798         L8441     FCB  $80,$31,$72,$17,$F8 ; LN(2)
                      (      exbasic.asm):03799         *
                      (      exbasic.asm):03800         * LOG - NATURAL LOGARITHM (LN)
                      (      exbasic.asm):03801         
                      (      exbasic.asm):03802         * THE NATURAL OR NAPERIAN LOGARITHM IS CALCULATED USING
                      (      exbasic.asm):03803         * MATHEMATICAL IDENTITIES. FPA0 IS OF THE FORM FPA0=A*(2**B) (SCIENTIFIC
                      (      exbasic.asm):03804         * NOTATION). THEREFORE, THE LOG ROUTINE DETERMINES THE VALUE OF
                      (      exbasic.asm):03805         * LN(A*(2**B)). A SERIES OF MATHEMATICAL IDENTITIES WILL EXPAND THIS
                      (      exbasic.asm):03806         * TERM: LN(A*(2**B))=(-1/2+(1/LN(2))*(LN(A*SQR(2)))+B)*LN(2). ALL OF
                      (      exbasic.asm):03807         * THE TERMS OF THE LATTER EXPRESSION ARE CONSTANTS EXCEPT FOR THE
                      (      exbasic.asm):03808         * LN(A*SQR(2)) TERM WHICH IS EVALUATED USING THE TAYLOR SERIES EXPANSION
F2F7 BDEEAA           (      exbasic.asm):03809         LOG       JSR  LBC6D          ; CHECK STATUS OF FPA0
F2FA 102FF3C4         (      exbasic.asm):03810                   LBLE LB44A          ; 'FC' ERROR IF NEGATIVE OR ZERO
F2FE 8EF2E3           (      exbasic.asm):03811                   LDX  #L8432         ; POINT (X) TO FP NUMBER (1/SQR(2))
F301 964F             (      exbasic.asm):03812                   LDA  FP0EXP         ; *GET EXPONENT OF ARGUMENT
F303 8080             (      exbasic.asm):03813                   SUBA #$80           ; *SUBTRACT OFF THE BIAS AND
F305 3402             (      exbasic.asm):03814                   PSHS A              ; *SAVE IT ON THE STACK
F307 8680             (      exbasic.asm):03815                   LDA  #$80
F309 974F             (      exbasic.asm):03816                   STA  FP0EXP
F30B BDEBFF           (      exbasic.asm):03817                   JSR  LB9C2          ; ADD FPA0 TO (X)
F30E 8EF2E8           (      exbasic.asm):03818                   LDX  #L8437         ; POINT X TO SQR(2)
F311 BDEDCC           (      exbasic.asm):03819                   JSR  LBB8F          ; DIVIDE SQR(2) BY FPA0
F314 8EED02           (      exbasic.asm):03820                   LDX  #LBAC5         ; POINT X TO FP VALUE OF 1.00
F317 BDEBF6           (      exbasic.asm):03821                   JSR  LB9B9          ; SUBTRACT FPA0 FROM (X)
                      (      exbasic.asm):03822         *         NOW  FPA0 = (1-SQR(2)*X)/(1+SQR(2)*X) WHERE X IS ARGUMENT
F31A 8EF2CE           (      exbasic.asm):03823                   LDX  #L841D         ; POINT X TO TABLE OF COEFFICIENTS
F31D BDF12D           (      exbasic.asm):03824                   JSR  LBEF0          ; EXPAND POLYNOMIAL
F320 8EF2ED           (      exbasic.asm):03825                   LDX  #L843C         ; POINT X TO FP VALUE OF (-.5)
F323 BDEBFF           (      exbasic.asm):03826                   JSR  LB9C2          ; ADD FPA0 TO X
F326 3504             (      exbasic.asm):03827                   PULS B              ; GET EXPONENT OF ARGUMENT BACK (WITHOUT BIAS)
F328 BDEFD6           (      exbasic.asm):03828                   JSR  LBD99          ; ADD ACCB TO FPA0
F32B 8EF2F2           (      exbasic.asm):03829                   LDX  #L8441         ; POINT X TO LN(2)
F32E 7EED07           (      exbasic.asm):03830                   JMP  LBACA          ; MULTIPLY FPA0 * LN(2)
                      (      exbasic.asm):03831         
                      (      exbasic.asm):03832         * SQR
F331 BDEE9C           (      exbasic.asm):03833         SQR       JSR  LBC5F          ; MOVE FPA0 TO FPA1
F334 8EF0FD           (      exbasic.asm):03834                   LDX  #LBEC0         ; POINT (X) TO FP NUMBER (.5)
F337 BDEE51           (      exbasic.asm):03835                   JSR  LBC14          ; COPY A PACKED NUMBER FROM (X) TO FPA0
                      (      exbasic.asm):03836         
                      (      exbasic.asm):03837         * ARITHMETIC OPERATOR FOR EXPONENTIATION JUMPS
                      (      exbasic.asm):03838         * HERE. THE FORMULA USED TO EVALUATE EXPONENTIATION
                      (      exbasic.asm):03839         * IS A**X=E**(X LN A) = E**(FPA0*LN(FPA1)), E=2.7182818
F33A 2767             (      exbasic.asm):03840         L8489     BEQ  EXP            ; DO A NATURAL EXPONENTIATION IF EXPONENT = 0
F33C 4D               (      exbasic.asm):03841                   TSTA                ; *CHECK VALUE BEING EXPONENTIATED
F33D 2603             (      exbasic.asm):03842                   BNE  L8491          ; *AND BRANCH IF IT IS <> 0
F33F 7EEC77           (      exbasic.asm):03843                   JMP  LBA3A          ; FPA0=0 IF RAISING ZERO TO A POWER
F342 8E004A           (      exbasic.asm):03844         L8491     LDX  #V4A           ; * PACK FPA0 AND SAVE
F345 BDEE72           (      exbasic.asm):03845                   JSR  LBC35          ; * IT IN FPA5 (ARGUMENT'S EXPONENT)
F348 5F               (      exbasic.asm):03846                   CLRB                ; ACCB=DEFAULT RESULT SIGN FLAG; 0=POSITIVE
F349 9661             (      exbasic.asm):03847                   LDA  FP1SGN         ; *CHECK THE SIGN OF ARGUMENT
F34B 2A10             (      exbasic.asm):03848                   BPL  L84AC          ; *BRANCH IF POSITIVE
F34D BDEF2B           (      exbasic.asm):03849                   JSR  INT            ; CONVERT EXPONENT INTO AN INTEGER
F350 8E004A           (      exbasic.asm):03850                   LDX  #V4A           ; POINT X TO FPA5 (ORIGINAL EXPONENT)
F353 9661             (      exbasic.asm):03851                   LDA  FP1SGN         ; GET MANTISSA SIGN OF FPA1 (ARGUMENT)
F355 BDEEDD           (      exbasic.asm):03852                   JSR  LBCA0          ; *COMPARE FPA0 TO (X) AND
F358 2603             (      exbasic.asm):03853                   BNE  L84AC          ; *BRANCH IF NOT EQUAL
F35A 43               (      exbasic.asm):03854                   COMA                ; TOGGLE FPA1 MANTISSA SIGN - FORCE POSITIVE
F35B D601             (      exbasic.asm):03855                   LDB  CHARAC         ; GET LS BYTE OF INTEGER VALUE OF EXPONENT (RESULT SIGN FLAG)
F35D BDEE89           (      exbasic.asm):03856         L84AC     JSR  LBC4C          ; COPY FPA1 TO FPA0; ACCA = MANTISSA SIGN
F360 3404             (      exbasic.asm):03857                   PSHS B              ; PUT RESULT SIGN FLAG ON THE STACK
F362 BDF2F7           (      exbasic.asm):03858                   JSR  LOG
F365 8E004A           (      exbasic.asm):03859                   LDX  #V4A           ; POINT (X) TO FPA5
F368 BDED07           (      exbasic.asm):03860                   JSR  LBACA          ; MULTIPLY FPA0 BY FPA5
F36B 8D36             (      exbasic.asm):03861                   BSR  EXP            ; CALCULATE E**(FPA0)
F36D 3502             (      exbasic.asm):03862                   PULS A              ; * GET RESULT SIGN FLAG FROM THE STACK
F36F 46               (      exbasic.asm):03863                   RORA                ; * AND BRANCH IF NEGATIVE
F370 1025FDB2         (      exbasic.asm):03864                   LBCS LBEE9          ; CHANGE SIGN OF FPA0 MANTISSA
F374 39               (      exbasic.asm):03865                   RTS
                      (      exbasic.asm):03866         
                      (      exbasic.asm):03867         * CORRECTION FACTOR FOR EXPONENTIAL FUNCTION
F375 8138AA3B29       (      exbasic.asm):03868         L84C4     FCB  $81,$38,$AA,$3B,$29 ; 1.44269504 ( CF )
                      (      exbasic.asm):03869         *
                      (      exbasic.asm):03870         * TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR E**X
                      (      exbasic.asm):03871         *
F37A 07               (      exbasic.asm):03872         L84C9     FCB  7              ; EIGHT COEFFICIENTS
F37B 7134583E56       (      exbasic.asm):03873         L84CA     FCB  $71,$34,$58,$3E,$56 ; 2.14987637E-05: 1/(7!*(CF**7))
F380 74167EB31B       (      exbasic.asm):03874         L84CF     FCB  $74,$16,$7E,$B3,$1B ; 1.4352314E-04 : 1/(6!*(CF**6))
F385 772FEEE385       (      exbasic.asm):03875         L84D4     FCB  $77,$2F,$EE,$E3,$85 ; 1.34226348E-03: 1/(5!*(CF**5))
F38A 7A1D841C2A       (      exbasic.asm):03876         L84D9     FCB  $7A,$1D,$84,$1C,$2A ; 9.61401701E-03: 1/(4!*(CF**4))
F38F 7C6359580A       (      exbasic.asm):03877         L84DE     FCB  $7C,$63,$59,$58,$0A ; 0.0555051269
F394 7E75FDE7C6       (      exbasic.asm):03878         L84E3     FCB  $7E,$75,$FD,$E7,$C6 ; 0.240226385
F399 8031721810       (      exbasic.asm):03879         L84E8     FCB  $80,$31,$72,$18,$10 ; 0.693147186
F39E 8100000000       (      exbasic.asm):03880         L84ED     FCB  $81,$00,$00,$00,$00 ; 1
                      (      exbasic.asm):03881         *
                      (      exbasic.asm):03882         * EXP ( E**X)
                      (      exbasic.asm):03883         * THE EXPONENTIAL FUNCTION IS EVALUATED BY FIRST MULTIPLYING THE
                      (      exbasic.asm):03884         * ARGUMENT BY A CORRECTION FACTOR (CF). AFTER THIS IS DONE, AN
                      (      exbasic.asm):03885         * ARGUMENT >= 127 WILL YIELD A ZERO RESULT (NO UNDERFLOW) FOR A
                      (      exbasic.asm):03886         * NEGATIVE ARGUMENT OR AN 'OV' (OVERFLOW) ERROR FOR A POSITIVE
                      (      exbasic.asm):03887         * ARGUMENT. THE POLYNOMIAL COEFFICIENTS ARE MODIFIED TO REFLECT
                      (      exbasic.asm):03888         * THE CF MULTIPLICATION AT THE START OF THE EVALUATION PROCESS.
                      (      exbasic.asm):03889         
F3A3 8EF375           (      exbasic.asm):03890         EXP       LDX  #L84C4         ; POINT X TO THE CORRECTION FACTOR
F3A6 BDED07           (      exbasic.asm):03891                   JSR  LBACA          ; MULTIPLY FPA0 BY (X)
F3A9 BDEE6C           (      exbasic.asm):03892                   JSR  LBC2F          ; PACK FPA0 AND STORE IT IN FPA3
F3AC 964F             (      exbasic.asm):03893                   LDA  FP0EXP         ; *GET EXPONENT OF FPA0 AND
F3AE 8188             (      exbasic.asm):03894                   CMPA #$88           ; *COMPARE TO THE MAXIMUM VALUE
F3B0 2503             (      exbasic.asm):03895                   BLO  L8504          ; BRANCH IF FPA0 < 128
F3B2 7EED99           (      exbasic.asm):03896         L8501     JMP  LBB5C          ; SET FPA0 = 0 OR 'OV' ERROR
F3B5 BDEF2B           (      exbasic.asm):03897         L8504     JSR  INT            ; CONVERT FPA0 TO INTEGER
F3B8 9601             (      exbasic.asm):03898                   LDA  CHARAC         ; GET LS BYTE OF INTEGER
F3BA 8B81             (      exbasic.asm):03899                   ADDA #$81           ; * WAS THE ARGUMENT =127, IF SO
F3BC 27F4             (      exbasic.asm):03900                   BEQ  L8501          ; * THEN 'OV' ERROR; THIS WILL ALSO ADD THE $80 BIAS
                      (      exbasic.asm):03901         *              ; * REQUIRED WHEN THE NEW EXPONENT IS CALCULATED BELOW
F3BE 4A               (      exbasic.asm):03902                   DECA                ; DECREMENT ONE FROM THE EXPONENT, BECAUSE $81, NOT $80 WAS USED ABOVE
F3BF 3402             (      exbasic.asm):03903                   PSHS A              ; SAVE EXPONENT OF INTEGER PORTION ON STACK
F3C1 8E0040           (      exbasic.asm):03904                   LDX  #V40           ; POINT (X) TO FPA3
F3C4 BDEBF6           (      exbasic.asm):03905                   JSR  LB9B9          ; SUBTRACT FPA0 FROM (X) - GET FRACTIONAL PART OF ARGUMENT
F3C7 8EF37A           (      exbasic.asm):03906                   LDX  #L84C9         ; POINT X TO COEFFICIENTS
F3CA BDF13C           (      exbasic.asm):03907                   JSR  LBEFF          ; EVALUATE POLYNOMIAL FOR FRACTIONAL PART
F3CD 0F62             (      exbasic.asm):03908                   CLR  RESSGN         ; FORCE THE MANTISSA TO BE POSITIVE
F3CF 3502             (      exbasic.asm):03909                   PULS A              ; GET INTEGER EXPONENT FROM STACK
F3D1 BDED85           (      exbasic.asm):03910                   JSR  LBB48          ; * CALCULATE EXPONENT OF NEW FPA0 BY ADDING THE EXPONENTS OF THE
                      (      exbasic.asm):03911         *              ; * INTEGER AND FRACTIONAL PARTS
F3D4 39               (      exbasic.asm):03912                   RTS
                      (      exbasic.asm):03913         
                      (      exbasic.asm):03914         * FIX
F3D5 BDEEAA           (      exbasic.asm):03915         FIX       JSR  LBC6D          ; CHECK STATUS OF FPA0
F3D8 2B03             (      exbasic.asm):03916                   BMI  L852C          ; BRANCH IF FPA0 = NEGATIVE
F3DA 7EEF2B           (      exbasic.asm):03917         L8529     JMP  INT            ; CONVERT FPA0 TO INTEGER
F3DD 0354             (      exbasic.asm):03918         L852C     COM  FP0SGN         ; TOGGLE SIGN OF FPA0 MANTISSA
F3DF 8DF9             (      exbasic.asm):03919                   BSR  L8529          ; CONVERT FPA0 TO INTEGER
F3E1 7EF126           (      exbasic.asm):03920                   JMP  LBEE9          ; TOGGLE SIGN OF FPA0
                      (      exbasic.asm):03921         
                      (      exbasic.asm):03922         * EDIT
F3E4 BDF812           (      exbasic.asm):03923         EDIT      JSR  L89AE          ; GET LINE NUMBER FROM BASIC
F3E7 3262             (      exbasic.asm):03924                   LEAS $02,S          ; PURGE RETURN ADDRESS OFF OF THE STACK
F3E9 8601             (      exbasic.asm):03925         L8538     LDA  #$01           ; 'LIST' FLAG
F3EB 9798             (      exbasic.asm):03926                   STA  VD8            ; SET FLAG TO LIST LINE
F3ED BDDF96           (      exbasic.asm):03927                   JSR  LAD01          ; GO FIND THE LINE NUMBER IN PROGRAM
F3F0 1025ED7F         (      exbasic.asm):03928                   LBCS LAED2          ; ERROR #7 'UNDEFINED LINE #'
F3F4 BDEA2F           (      exbasic.asm):03929                   JSR  LB7C2          ; GO UNCRUNCH LINE INTO BUFFER AT LINBUF+1
F3F7 1F20             (      exbasic.asm):03930                   TFR  Y,D            ; PUT ABSOLUTE ADDRESS OF END OF LINE TO ACCD
F3F9 8300F5           (      exbasic.asm):03931                   SUBD #LINBUF+2      ; SUBTRACT OUT THE START OF LINE
F3FC D797             (      exbasic.asm):03932                   STB  VD7            ; SAVE LENGTH OF LINE
F3FE DC2B             (      exbasic.asm):03933         L854D     LDD  BINVAL         ; GET THE HEX VALUE OF LINE NUMBER
F400 BDF009           (      exbasic.asm):03934                   JSR  LBDCC          ; LIST THE LINE NUMBER ON THE SCREEN
F403 BDEBE9           (      exbasic.asm):03935                   JSR  LB9AC          ; PRINT A SPACE
F406 8E00F4           (      exbasic.asm):03936                   LDX  #LINBUF+1      ; POINT X TO BUFFER
F409 D698             (      exbasic.asm):03937                   LDB  VD8            ; * CHECK TO SEE IF LINE IS TO BE
F40B 2625             (      exbasic.asm):03938                   BNE  L8581          ; * LISTED TO SCREEN - BRANCH IF IT IS
F40D 5F               (      exbasic.asm):03939         L855C     CLRB                ; RESET DIGIT ACCUMULATOR - DEFAULT VALUE
F40E BDF538           (      exbasic.asm):03940         L855D     JSR  L8687          ; GET KEY STROKE
F411 BDFCDD           (      exbasic.asm):03941                   JSR  L90AA          ; SET CARRY IF NOT NUMERIC
F414 250B             (      exbasic.asm):03942                   BLO  L8570          ; BRANCH IF NOT NUMERIC
F416 8030             (      exbasic.asm):03943                   SUBA #'0            ; MASK OFF ASCII
F418 3402             (      exbasic.asm):03944                   PSHS A              ; SAVE IT ON STACK
F41A 860A             (      exbasic.asm):03945                   LDA  #10            ; NUMBER BEING CONVERTED IS BASE 10
F41C 3D               (      exbasic.asm):03946                   MUL                 ; MULTIPLY ACCUMULATED VALUE BY BASE (10)
F41D EBE0             (      exbasic.asm):03947                   ADDB ,S+            ; ADD DIGIT TO ACCUMULATED VALUE
F41F 20ED             (      exbasic.asm):03948                   BRA  L855D          ; CHECK FOR ANOTHER DIGIT
F421 C001             (      exbasic.asm):03949         L8570     SUBB #$01           ; * REPEAT PARAMETER IN ACCB; IF IT
F423 C901             (      exbasic.asm):03950                   ADCB #$01           ; *IS 0, THEN MAKE IT '1'
F425 8141             (      exbasic.asm):03951                   CMPA #'A            ; ABORT?
F427 2605             (      exbasic.asm):03952                   BNE  L857D          ; NO
F429 BDEB99           (      exbasic.asm):03953                   JSR  LB958          ; PRINT CARRIAGE RETURN TO SCREEN
F42C 20BB             (      exbasic.asm):03954                   BRA  L8538          ; RESTART EDIT PROCESS - CANCEL ALL CHANGES
F42E 814C             (      exbasic.asm):03955         L857D     CMPA #'L            ; LIST?
F430 260B             (      exbasic.asm):03956                   BNE  L858C          ; NO
F432 8D31             (      exbasic.asm):03957         L8581     BSR  L85B4          ; LIST THE LINE
F434 0F98             (      exbasic.asm):03958                   CLR  VD8            ; RESET THE LIST FLAG TO 'NO LIST'
F436 BDEB99           (      exbasic.asm):03959                   JSR  LB958          ; PRINT CARRIAGE RETURN
F439 20C3             (      exbasic.asm):03960                   BRA  L854D          ; GO INTERPRET ANOTHER EDIT COMMAND
F43B 3262             (      exbasic.asm):03961         L858A     LEAS $02,S          ; PURGE RETURN ADDRESS OFF OF THE STACK
F43D 810D             (      exbasic.asm):03962         L858C     CMPA #CR            ; ENTER KEY?
F43F 260D             (      exbasic.asm):03963                   BNE  L859D          ; NO
F441 8D22             (      exbasic.asm):03964                   BSR  L85B4          ; ECHO THE LINE TO THE SCREEN
F443 BDEB99           (      exbasic.asm):03965         L8592     JSR  LB958          ; PRINT CARRIAGE RETURN
F446 8E00F4           (      exbasic.asm):03966                   LDX  #LINBUF+1      ; * RESET BASIC'S INPUT POINTER
F449 9F83             (      exbasic.asm):03967                   STX  CHARAD         ; * TO THE LINE INPUT BUFFER
F44B 7EDF3F           (      exbasic.asm):03968                   JMP  LACA8          ; GO PUT LINE BACK IN PROGRAM
F44E 8145             (      exbasic.asm):03969         L859D     CMPA #'E            ; EXIT?
F450 27F1             (      exbasic.asm):03970                   BEQ  L8592          ; YES - SAME AS ENTER EXCEPT NO ECHO
F452 8151             (      exbasic.asm):03971                   CMPA #'Q            ; QUIT?
F454 2606             (      exbasic.asm):03972                   BNE  L85AB          ; NO
F456 BDEB99           (      exbasic.asm):03973                   JSR  LB958          ; PRINT CARRIAGE RETURN TO SCREEN
F459 7EDF16           (      exbasic.asm):03974                   JMP  LAC73          ; GO TO COMMAND LEVEL - MAKE NO CHANGES
F45C 8D02             (      exbasic.asm):03975         L85AB     BSR  L85AF          ; INTERPRET THE REMAINING COMMANDS AS SUBROUTINES
F45E 20AD             (      exbasic.asm):03976                   BRA  L855C          ; GO INTERPRET ANOTHER EDIT COMMAND
F460 8120             (      exbasic.asm):03977         L85AF     CMPA #SPACE         ; SPACE BAR?
F462 2610             (      exbasic.asm):03978                   BNE  L85C3          ; NO
F464 8C               (      exbasic.asm):03979         L85B3     FCB  SKP2           ; SKIP TWO BYTES
                      (      exbasic.asm):03980         * DISPLAY THE NEXT ACCB BYTES OF THE LINE IN THE BUFFER TO THE SCREEN
                      (      exbasic.asm):03981         *
F465 C6F9             (      exbasic.asm):03982         L85B4     LDB  #LBUFMX-1      ; 250 BYTES MAX IN BUFFER
F467 A684             (      exbasic.asm):03983         L85B6     LDA  ,X             ; GET A CHARACTER FROM BUFFER
F469 2708             (      exbasic.asm):03984                   BEQ  L85C2          ; EXIT IF IT'S A 0
F46B BDDB14           (      exbasic.asm):03985                   JSR  PUTCHR         ; SEND CHAR TO CONSOLE OUT
F46E 3001             (      exbasic.asm):03986                   LEAX $01,X          ; MOVE POINTER UP ONE
F470 5A               (      exbasic.asm):03987                   DECB                ; DECREMENT CHARACTER COUNTER
F471 26F4             (      exbasic.asm):03988                   BNE  L85B6          ; LOOP IF NOT DONE
F473 39               (      exbasic.asm):03989         L85C2     RTS
F474 8144             (      exbasic.asm):03990         L85C3     CMPA #'D            ; DELETE?
F476 2648             (      exbasic.asm):03991                   BNE  L860F          ; NO
F478 6D84             (      exbasic.asm):03992         L85C7     TST  ,X             ; * CHECK FOR END OF LINE
F47A 27F7             (      exbasic.asm):03993                   BEQ  L85C2          ; * AND BRANCH IF SO
F47C 8D04             (      exbasic.asm):03994                   BSR  L85D1          ; REMOVE A CHARACTER
F47E 5A               (      exbasic.asm):03995                   DECB                ; DECREMENT REPEAT PARAMETER
F47F 26F7             (      exbasic.asm):03996                   BNE  L85C7          ; BRANCH IF NOT DONE
F481 39               (      exbasic.asm):03997                   RTS
                      (      exbasic.asm):03998         * REMOVE ONE CHARACTER FROM BUFFER
F482 0A97             (      exbasic.asm):03999         L85D1     DEC  VD7            ; DECREMENT LENGTH OF BUFFER
F484 311F             (      exbasic.asm):04000                   LEAY -1,X           ; POINT Y TO ONE BEFORE CURRENT BUFFER POINTER
F486 3121             (      exbasic.asm):04001         L85D5     LEAY $01,Y          ; INCREMENT TEMPORARY BUFFER POINTER
F488 A621             (      exbasic.asm):04002                   LDA  $01,Y          ; GET NEXT CHARACTER
F48A A7A4             (      exbasic.asm):04003                   STA  ,Y             ; PUT IT IN CURRENT POSITION
F48C 26F8             (      exbasic.asm):04004                   BNE  L85D5          ; BRANCH IF NOT END OF LINE
F48E 39               (      exbasic.asm):04005                   RTS
F48F 8149             (      exbasic.asm):04006         L85DE     CMPA #'I            ;  INSERT?
F491 2713             (      exbasic.asm):04007                   BEQ  L85F5          ; YES
F493 8158             (      exbasic.asm):04008                   CMPA #'X            ; EXTEND?
F495 270D             (      exbasic.asm):04009                   BEQ  L85F3          ; YES
F497 8148             (      exbasic.asm):04010                   CMPA #'H            ; HACK?
F499 265C             (      exbasic.asm):04011                   BNE  L8646          ; NO
F49B 6F84             (      exbasic.asm):04012                   CLR  ,X             ; TURN CURRENT BUFFER POINTER INTO END OF LINE FLAG
F49D 1F10             (      exbasic.asm):04013                   TFR  X,D            ; PUT CURRENT BUFFER POINTER IN ACCD
F49F 8300F5           (      exbasic.asm):04014                   SUBD #LINBUF+2      ; SUBTRACT INITIAL POINTER POSITION
F4A2 D797             (      exbasic.asm):04015                   STB  VD7            ; SAVE NEW BUFFER LENGTH
F4A4 8DBF             (      exbasic.asm):04016         L85F3     BSR  L85B4          ; DISPLAY THE LINE ON THE SCREEN
F4A6 BDF538           (      exbasic.asm):04017         L85F5     JSR  L8687          ; GET A KEYSTROKE
F4A9 810D             (      exbasic.asm):04018                   CMPA #CR            ; ENTER KEY?
F4AB 278E             (      exbasic.asm):04019                   BEQ  L858A          ; YES - INTERPRET ANOTHER COMMAND - PRINT LINE
F4AD 811B             (      exbasic.asm):04020                   CMPA #ESC           ; ESCAPE?
F4AF 2725             (      exbasic.asm):04021                   BEQ  L8625          ; YES - RETURN TO COMMAND LEVEL - DON'T PRINT LINE
F4B1 8108             (      exbasic.asm):04022                   CMPA #BS            ; BACK SPACE?
F4B3 2622             (      exbasic.asm):04023                   BNE  L8626          ; NO
F4B5 8C00F4           (      exbasic.asm):04024                   CMPX #LINBUF+1      ; COMPARE POINTER TO START OF BUFFER
F4B8 27EC             (      exbasic.asm):04025                   BEQ  L85F5          ; DO NOT ALLOW BS IF AT START
F4BA 8D45             (      exbasic.asm):04026                   BSR  L8650          ; MOVE POINTER BACK ONE, BS TO SCREEN
F4BC 8DC4             (      exbasic.asm):04027                   BSR  L85D1          ; REMOVE ONE CHARACTER FROM BUFFER
F4BE 20E6             (      exbasic.asm):04028                   BRA  L85F5          ; GET INSERT SUB COMMAND
F4C0 8143             (      exbasic.asm):04029         L860F     CMPA #'C            ; CHANGE?
F4C2 26CB             (      exbasic.asm):04030                   BNE  L85DE          ; NO
F4C4 6D84             (      exbasic.asm):04031         L8613     TST  ,X             ; CHECK CURRENT BUFFER CHARACTER
F4C6 270E             (      exbasic.asm):04032                   BEQ  L8625          ; BRANCH IF END OF LINE
F4C8 BDF538           (      exbasic.asm):04033                   JSR  L8687          ; GET A KEYSTROKE
F4CB 2502             (      exbasic.asm):04034                   BLO  L861E          ; BRANCH IF LEGITIMATE KEY
F4CD 20F5             (      exbasic.asm):04035                   BRA  L8613          ; TRY AGAIN IF ILLEGAL KEY
F4CF A780             (      exbasic.asm):04036         L861E     STA  ,X+            ; INSERT NEW CHARACTER INTO BUFFER
F4D1 8D37             (      exbasic.asm):04037                   BSR  L8659          ; SEND NEW CHARACTER TO SCREEN
F4D3 5A               (      exbasic.asm):04038                   DECB                ; DECREMENT REPEAT PARAMETER
F4D4 26EE             (      exbasic.asm):04039                   BNE  L8613          ; BRANCH IF NOT DONE
F4D6 39               (      exbasic.asm):04040         L8625     RTS
F4D7 D697             (      exbasic.asm):04041         L8626     LDB  VD7            ; GET LENGTH OF LINE
F4D9 C1F9             (      exbasic.asm):04042                   CMPB #LBUFMX-1      ; COMPARE TO MAXIMUM LENGTH
F4DB 2602             (      exbasic.asm):04043                   BNE  L862E          ; BRANCH IF NOT AT MAXIMUM
F4DD 20C7             (      exbasic.asm):04044                   BRA  L85F5          ; IGNORE INPUT IF LINE AT MAXIMUM LENGTH
F4DF 3410             (      exbasic.asm):04045         L862E     PSHS X              ; SAVE CURRENT BUFFER POINTER
F4E1 6D80             (      exbasic.asm):04046         L8630     TST  ,X+            ; * SCAN THE LINE UNTIL END OF
F4E3 26FC             (      exbasic.asm):04047                   BNE  L8630          ; * LINE (0) IS FOUND
F4E5 E682             (      exbasic.asm):04048         L8634     LDB  ,-X            ; DECR TEMP LINE POINTER AND GET A CHARACTER
F4E7 E701             (      exbasic.asm):04049                   STB  $01,X          ; PUT CHARACTER BACK DOWN ONE SPOT
F4E9 ACE4             (      exbasic.asm):04050                   CMPX ,S             ; HAVE WE REACHED STARTING POINT?
F4EB 26F8             (      exbasic.asm):04051                   BNE  L8634          ; NO - KEEP GOING
F4ED 3262             (      exbasic.asm):04052                   LEAS $02,S          ; PURGE BUFFER POINTER FROM STACK
F4EF A780             (      exbasic.asm):04053                   STA  ,X+            ; INSERT NEW CHARACTER INTO THE LINE
F4F1 8D17             (      exbasic.asm):04054                   BSR  L8659          ; SEND A CHARACTER TO CONSOLE OUT
F4F3 0C97             (      exbasic.asm):04055                   INC  VD7            ; ADD ONE TO BUFFER LENGTH
F4F5 20AF             (      exbasic.asm):04056                   BRA  L85F5          ; GET INSERT SUB COMMAND
F4F7 8108             (      exbasic.asm):04057         L8646     CMPA #BS            ; BACKSPACE?
F4F9 2612             (      exbasic.asm):04058                   BNE  L865C          ; NO
F4FB 8D04             (      exbasic.asm):04059         L864A     BSR  L8650          ; MOVE POINTER BACK 1, SEND BS TO SCREEN
F4FD 5A               (      exbasic.asm):04060                   DECB                ; DECREMENT REPEAT PARAMETER
F4FE 26FB             (      exbasic.asm):04061                   BNE  L864A          ; LOOP UNTIL DONE
F500 39               (      exbasic.asm):04062                   RTS
F501 8C00F4           (      exbasic.asm):04063         L8650     CMPX #LINBUF+1      ; COMPARE POINTER TO START OF BUFFER
F504 27D0             (      exbasic.asm):04064                   BEQ  L8625          ; DO NOT ALLOW BS IF AT START
F506 301F             (      exbasic.asm):04065                   LEAX -1,X           ; MOVE POINTER BACK ONE
F508 8608             (      exbasic.asm):04066                   LDA  #BS            ; BACK SPACE
F50A 7EDB14           (      exbasic.asm):04067         L8659     JMP  PUTCHR         ; SEND TO CONSOLE OUT
F50D 814B             (      exbasic.asm):04068         L865C     CMPA #'K            ; KILL?
F50F 2705             (      exbasic.asm):04069                   BEQ  L8665          ; YES
F511 8053             (      exbasic.asm):04070                   SUBA #'S            ; SEARCH?
F513 2701             (      exbasic.asm):04071                   BEQ  L8665          ; YES
F515 39               (      exbasic.asm):04072                   RTS
F516 3402             (      exbasic.asm):04073         L8665     PSHS A              ; SAVE KILL/SEARCH FLAG ON STACK
F518 8D1E             (      exbasic.asm):04074                   BSR  L8687          ; * GET A KEYSTROKE (TARGET CHARACTER)
F51A 3402             (      exbasic.asm):04075                   PSHS A              ; * AND SAVE IT ON STACK
F51C A684             (      exbasic.asm):04076         L866B     LDA  ,X             ; GET CURRENT BUFFER CHARACTER
F51E 2716             (      exbasic.asm):04077                   BEQ  L8685          ; AND RETURN IF END OF LINE
F520 6D61             (      exbasic.asm):04078                   TST  $01,S          ; CHECK KILL/SEARCH FLAG
F522 2606             (      exbasic.asm):04079                   BNE  L8679          ; BRANCH IF KILL
F524 8DE4             (      exbasic.asm):04080                   BSR  L8659          ; SEND A CHARACTER TO CONSOLE OUT
F526 3001             (      exbasic.asm):04081                   LEAX $01,X          ; INCREMENT BUFFER POINTER
F528 2003             (      exbasic.asm):04082                   BRA  L867C          ; CHECK NEXT INPUT CHARACTER
F52A BDF482           (      exbasic.asm):04083         L8679     JSR  L85D1          ; REMOVE ONE CHARACTER FROM BUFFER
F52D A684             (      exbasic.asm):04084         L867C     LDA  ,X             ; GET CURRENT INPUT CHARACTER
F52F A1E4             (      exbasic.asm):04085                   CMPA ,S             ; COMPARE TO TARGET CHARACTER
F531 26E9             (      exbasic.asm):04086                   BNE  L866B          ; BRANCH IF NO MATCH
F533 5A               (      exbasic.asm):04087                   DECB                ; DECREMENT REPEAT PARAMETER
F534 26E6             (      exbasic.asm):04088                   BNE  L866B          ; BRANCH IF NOT DONE
F536 35A0             (      exbasic.asm):04089         L8685     PULS Y,PC           ; THE Y PULL WILL CLEAN UP THE STACK FOR THE 2 PSHS A
                      (      exbasic.asm):04090         *
                      (      exbasic.asm):04091         * GET A KEYSTRKE
F538 BDDB00           (      exbasic.asm):04092         L8687     JSR  LA171          ; CALL CONSOLE IN : DEV NBR=SCREEN
F53B 817F             (      exbasic.asm):04093                   CMPA #$7F           ; GRAPHIC CHARACTER?
F53D 24F9             (      exbasic.asm):04094                   BCC  L8687          ; YES - GET ANOTHER CHAR
F53F 815F             (      exbasic.asm):04095                   CMPA #$5F           ; SHIFT UP ARROW (QUIT INSERT)
F541 2602             (      exbasic.asm):04096                   BNE  L8694          ; NO
F543 861B             (      exbasic.asm):04097                   LDA  #ESC           ; REPLACE W/ESCAPE CODE
F545 810D             (      exbasic.asm):04098         L8694     CMPA #CR            ; ENTER KEY
F547 270E             (      exbasic.asm):04099                   BEQ  L86A6          ; YES
F549 811B             (      exbasic.asm):04100                   CMPA #ESC           ; ESCAPE?
F54B 270A             (      exbasic.asm):04101                   BEQ  L86A6          ; YES
F54D 8108             (      exbasic.asm):04102                   CMPA #BS            ; BACKSPACE?
F54F 2706             (      exbasic.asm):04103                   BEQ  L86A6          ; YES
F551 8120             (      exbasic.asm):04104                   CMPA #SPACE         ; SPACE
F553 25E3             (      exbasic.asm):04105                   BLO  L8687          ; GET ANOTHER CHAR IF CONTROL CHAR
F555 1A01             (      exbasic.asm):04106                   ORCC #$01           ; SET CARRY
F557 39               (      exbasic.asm):04107         L86A6     RTS
                      (      exbasic.asm):04108         
                      (      exbasic.asm):04109         * TRON
F558 86               (      exbasic.asm):04110         TRON      FCB  SKP1LD         ; SKIP ONE BYTE AND LDA #$4F
                      (      exbasic.asm):04111         
                      (      exbasic.asm):04112         * TROFF
F559 4F               (      exbasic.asm):04113         TROFF     CLRA                ; TROFF FLAG
F55A 978C             (      exbasic.asm):04114                   STA  TRCFLG         ; TRON/TROFF FLAG:0=TROFF, <> 0=TRON
F55C 39               (      exbasic.asm):04115                   RTS
                      (      exbasic.asm):04116         
                      (      exbasic.asm):04117         * POS
                      (      exbasic.asm):04118         
F55D 8600             (      exbasic.asm):04119         POS       LDA  #0             ; GET DEVICE NUMBER
F55F D679             (      exbasic.asm):04120                   LDB  LPTPOS         ; GET PRINT POSITION
F561 1D               (      exbasic.asm):04121         LA5E8     SEX                 ; CONVERT ACCB TO 2 DIGIT SIGNED INTEGER
F562 7EE76C           (      exbasic.asm):04122                   JMP  GIVABF         ; CONVERT ACCD TO FLOATING POINT
                      (      exbasic.asm):04123         
                      (      exbasic.asm):04124         
                      (      exbasic.asm):04125         * VARPTR
F565 BDE4E7           (      exbasic.asm):04126         VARPT     JSR  LB26A          ; SYNTAX CHECK FOR '('
F568 DC1F             (      exbasic.asm):04127                   LDD  ARYEND         ; GET ADDR OF END OF ARRAYS
F56A 3406             (      exbasic.asm):04128                   PSHS B,A            ; SAVE IT ON STACK
F56C BDE5CF           (      exbasic.asm):04129                   JSR  LB357          ; GET VARIABLE DESCRIPTOR
F56F BDE4E4           (      exbasic.asm):04130                   JSR  LB267          ; SYNTAX CHECK FOR ')'
F572 3506             (      exbasic.asm):04131                   PULS A,B            ; GET END OF ARRAYS ADDR BACK
F574 1E10             (      exbasic.asm):04132                   EXG  X,D            ; SWAP END OF ARRAYS AND VARIABLE DESCRIPTOR
F576 9C1F             (      exbasic.asm):04133                   CMPX ARYEND         ; COMPARE TO NEW END OF ARRAYS
F578 2651             (      exbasic.asm):04134                   BNE  L8724          ; 'FC' ERROR IF VARIABLE WAS NOT DEFINED PRIOR TO CALLING VARPTR
F57A 7EE76C           (      exbasic.asm):04135                   JMP  GIVABF         ; CONVERT VARIABLE DESCRIPTOR INTO A FP NUMBER
                      (      exbasic.asm):04136         
                      (      exbasic.asm):04137         * MID$(OLDSTRING,POSITION,LENGTH)=REPLACEMENT
F57D 9D7C             (      exbasic.asm):04138         L86D6     JSR  GETNCH         ; GET INPUT CHAR FROM BASIC
F57F BDE4E7           (      exbasic.asm):04139                   JSR  LB26A          ; SYNTAX CHECK FOR '('
F582 BDE5CF           (      exbasic.asm):04140                   JSR  LB357          ; * GET VARIABLE DESCRIPTOR ADDRESS AND
F585 3410             (      exbasic.asm):04141                   PSHS X              ; * SAVE IT ON THE STACK
F587 EC02             (      exbasic.asm):04142                   LDD  $02,X          ; POINT ACCD TO START OF OLDSTRING
F589 109321           (      exbasic.asm):04143                   CMPD FRETOP         ; COMPARE TO START OF CLEARED SPACE
F58C 2304             (      exbasic.asm):04144                   BLS  L86EB          ; BRANCH IF <=
F58E 9327             (      exbasic.asm):04145                   SUBD MEMSIZ         ; SUBTRACT OUT TOP OF CLEARED SPACE
F590 2312             (      exbasic.asm):04146                   BLS  L86FD          ; BRANCH IF STRING IN STRING SPACE
F592 E684             (      exbasic.asm):04147         L86EB     LDB  ,X             ; GET LENGTH OF OLDSTRING
F594 BDE7E5           (      exbasic.asm):04148                   JSR  LB56D          ; RESERVE ACCB BYTES IN STRING SPACE
F597 3410             (      exbasic.asm):04149                   PSHS X              ; SAVE RESERVED SPACE STRING ADDRESS ON STACK
F599 AE62             (      exbasic.asm):04150                   LDX  $02,S          ; POINT X TO OLDSTRING DESCRIPTOR
F59B BDE8BB           (      exbasic.asm):04151                   JSR  LB643          ; MOVE OLDSTRING INTO STRING SPACE
F59E 3550             (      exbasic.asm):04152                   PULS X,U            ; * GET OLDSTRING DESCRIPTOR ADDRESS AND RESERVED STRING
F5A0 AF42             (      exbasic.asm):04153                   STX  $02,U          ; * ADDRESS AND SAVE RESERVED ADDRESS AS OLDSTRING ADDRESS
F5A2 3440             (      exbasic.asm):04154                   PSHS U              ; SAVE OLDSTRING DESCRIPTOR ADDRESS
F5A4 BDE9B0           (      exbasic.asm):04155         L86FD     JSR  LB738          ; SYNTAX CHECK FOR COMMA AND EVALUATE LENGTH EXPRESSION
F5A7 3404             (      exbasic.asm):04156                   PSHS B              ; SAVE POSITION PARAMETER ON STACK
F5A9 5D               (      exbasic.asm):04157                   TSTB                ; * CHECK POSITION PARAMETER AND BRANCH
F5AA 271F             (      exbasic.asm):04158                   BEQ  L8724          ; * IF START OF STRING
F5AC C6FF             (      exbasic.asm):04159                   LDB  #$FF           ; DEFAULT REPLACEMENT LENGTH = $FF
F5AE 8129             (      exbasic.asm):04160                   CMPA #')            ; * CHECK FOR END OF MID$ STATEMENT AND
F5B0 2703             (      exbasic.asm):04161                   BEQ  L870E          ; * BRANCH IF AT END OF STATEMENT
F5B2 BDE9B0           (      exbasic.asm):04162                   JSR  LB738          ; SYNTAX CHECK FOR COMMA AND EVALUATE LENGTH EXPRESSION
F5B5 3404             (      exbasic.asm):04163         L870E     PSHS B              ; SAVE LENGTH PARAMETER ON STACK
F5B7 BDE4E4           (      exbasic.asm):04164                   JSR  LB267          ; SYNTAX CHECK FOR ')'
F5BA C6AE             (      exbasic.asm):04165                   LDB  #TOK_EQUALS    ; TOKEN FOR =
F5BC BDE4EC           (      exbasic.asm):04166                   JSR  LB26F          ; SYNTAX CHECK FOR '='
F5BF 8D2E             (      exbasic.asm):04167                   BSR  L8748          ; EVALUATE REPLACEMENT STRING
F5C1 1F13             (      exbasic.asm):04168                   TFR  X,U            ; SAVE REPLACEMENT STRING ADDRESS IN U
F5C3 AE62             (      exbasic.asm):04169                   LDX  $02,S          ; POINT X TO OLOSTRING DESCRIPTOR ADDRESS
F5C5 A684             (      exbasic.asm):04170                   LDA  ,X             ; GET LENGTH OF OLDSTRING
F5C7 A061             (      exbasic.asm):04171                   SUBA $01,S          ; SUBTRACT POSITION PARAMETER
F5C9 2403             (      exbasic.asm):04172                   BCC  L8727          ; INSERT REPLACEMENT STRING INTO OLDSTRING
F5CB 7EE6C2           (      exbasic.asm):04173         L8724     JMP  LB44A          ; 'FC' ERROR IF POSITION > LENGTH OF OLDSTRING
F5CE 4C               (      exbasic.asm):04174         L8727     INCA                ; * NOW ACCA = NUMBER OF CHARACTERS TO THE RIGHT
                      (      exbasic.asm):04175         *                             ; * (INCLUSIVE) OF THE POSITION PARAMETER
F5CF A1E4             (      exbasic.asm):04176                   CMPA ,S
F5D1 2402             (      exbasic.asm):04177                   BCC  L872E          ; BRANCH IF NEW STRING WILL FIT IN OLDSTRING
F5D3 A7E4             (      exbasic.asm):04178                   STA  ,S             ; IF NOT, USE AS MUCH OF LENGTH PARAMETER AS WILL FIT
F5D5 A661             (      exbasic.asm):04179         L872E     LDA  $01,S          ; GET POSITION PARAMETER
F5D7 1E89             (      exbasic.asm):04180                   EXG  A,B            ; ACCA=LENGTH OF REPL STRING, ACCB=POSITION PARAMETER
F5D9 AE02             (      exbasic.asm):04181                   LDX  $02,X          ; POINT X TO OLDSTRING ADDRESS
F5DB 5A               (      exbasic.asm):04182                   DECB                ; * BASIC'S POSITION PARAMETER STARTS AT 1; THIS ROUTINE
                      (      exbasic.asm):04183         *                             ; * WANTS IT TO START AT ZERO
F5DC 3A               (      exbasic.asm):04184                   ABX                 ; POINT X TO POSITION IN OLDSTRING WHERE THE REPLACEMENT WILL GO
F5DD 4D               (      exbasic.asm):04185                   TSTA                ; * IF THE LENGTH OF THE REPLACEMENT STRING IS ZERO
F5DE 270D             (      exbasic.asm):04186                   BEQ  L8746          ; * THEN RETURN
F5E0 A1E4             (      exbasic.asm):04187                   CMPA ,S
F5E2 2302             (      exbasic.asm):04188                   BLS  L873F          ; ADJUSTED LENGTH PARAMETER, THEN BRANCH
F5E4 A6E4             (      exbasic.asm):04189                   LDA  ,S             ; OTHERWISE USE AS MUCH ROOM AS IS AVAILABLE
F5E6 1F89             (      exbasic.asm):04190         L873F     TFR  A,B            ; SAVE NUMBER OF BYTES TO MOVE IN ACCB
F5E8 1E31             (      exbasic.asm):04191                   EXG  U,X            ; SWAP SOURCE AND DESTINATION POINTERS
F5EA BDDCA2           (      exbasic.asm):04192                   JSR  LA59A          ; MOVE (B) BYTES FROM (X) TO (U)
F5ED 3596             (      exbasic.asm):04193         L8746     PULS A,B,X,PC
F5EF BDE3D3           (      exbasic.asm):04194         L8748     JSR  LB156          ; EVALUATE EXPRESSION
F5F2 7EE8CC           (      exbasic.asm):04195                   JMP  LB654          ; *'TM' ERROR IF NUMERIC; RETURN WITH X POINTING
                      (      exbasic.asm):04196         *                             ; *TO STRING, ACCB = LENGTH
                      (      exbasic.asm):04197         
                      (      exbasic.asm):04198         * STRING
F5F5 BDE4E7           (      exbasic.asm):04199         STRING    JSR  LB26A          ; SYNTAX CHECK FOR '('
F5F8 BDE983           (      exbasic.asm):04200                   JSR  LB70B          ; EVALUATE EXPRESSION; ERROR IF > 255
F5FB 3404             (      exbasic.asm):04201                   PSHS B              ; SAVE LENGTH OF STRING
F5FD BDE4EA           (      exbasic.asm):04202                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
F600 BDE3D3           (      exbasic.asm):04203                   JSR  LB156          ; EVALUATE EXPRESSION
F603 BDE4E4           (      exbasic.asm):04204                   JSR  LB267          ; SYNTAX CHECK FOR ')'
F606 9606             (      exbasic.asm):04205                   LDA  VALTYP         ; GET VARIABLE TYPE
F608 2605             (      exbasic.asm):04206                   BNE  L8768          ; BRANCH IF STRING
F60A BDE986           (      exbasic.asm):04207                   JSR  LB70E          ; CONVERT FPA0 INTO AN INTEGER IN ACCB
F60D 2003             (      exbasic.asm):04208                   BRA  L876B          ; SAVE THE STRING IN STRING SPACE
F60F BDE91C           (      exbasic.asm):04209         L8768     JSR  LB6A4          ; GET FIRST BYTE OF STRING
F612 3404             (      exbasic.asm):04210         L876B     PSHS B              ; SAVE FIRST BYTE OF EXPRESSION
F614 E661             (      exbasic.asm):04211                   LDB  $01,S          ; GET LENGTH OF STRING
F616 BDE787           (      exbasic.asm):04212                   JSR  LB50F          ; RESERVE ACCB BYTES IN STRING SPACE
F619 3506             (      exbasic.asm):04213                   PULS A,B            ; GET LENGTH OF STRING AND CHARACTER
F61B 2705             (      exbasic.asm):04214                   BEQ  L877B          ; BRANCH IF NULL STRING
F61D A780             (      exbasic.asm):04215         L8776     STA  ,X+            ; SAVE A CHARACTER IN STRING SPACE
F61F 5A               (      exbasic.asm):04216                   DECB                ; DECREMENT LENGTH
F620 26FB             (      exbasic.asm):04217                   BNE  L8776          ; BRANCH IF NOT DONE
F622 7EE913           (      exbasic.asm):04218         L877B     JMP  LB69B          ; PUT STRING DESCRIPTOR ONTO STRING STACK
                      (      exbasic.asm):04219         
                      (      exbasic.asm):04220         * INSTR
F625 BDE4E7           (      exbasic.asm):04221         INSTR     JSR  LB26A          ; SYNTAX CHECK FOR '('
F628 BDE3D3           (      exbasic.asm):04222                   JSR  LB156          ; EVALUATE EXPRESSION
F62B C601             (      exbasic.asm):04223                   LDB  #$01           ; DEFAULT POSITION = 1 (SEARCH START)
F62D 3404             (      exbasic.asm):04224                   PSHS B              ; SAVE START
F62F 9606             (      exbasic.asm):04225                   LDA  VALTYP         ; GET VARIABLE TYPE
F631 2610             (      exbasic.asm):04226                   BNE  L879C          ; BRANCH IF STRING
F633 BDE986           (      exbasic.asm):04227                   JSR  LB70E          ; CONVERT FPA0 TO INTEGER IN ACCB
F636 E7E4             (      exbasic.asm):04228                   STB  ,S             ; SAVE START SEARCH VALUE
F638 2791             (      exbasic.asm):04229                   BEQ  L8724          ; BRANCH IF START SEARCH AT ZERO
F63A BDE4EA           (      exbasic.asm):04230                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
F63D BDE3D3           (      exbasic.asm):04231                   JSR  LB156          ; EVALUATE EXPRESSION - SEARCH STRING
F640 BDE3C3           (      exbasic.asm):04232                   JSR  LB146          ; 'TM' ERROR IF NUMERIC
F643 9E52             (      exbasic.asm):04233         L879C     LDX  FPA0+2         ; SEARCH STRING DESCRIPTOR ADDRESS
F645 3410             (      exbasic.asm):04234                   PSHS X              ; SAVE ON THE STACK
F647 BDE4EA           (      exbasic.asm):04235                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
F64A BDF5EF           (      exbasic.asm):04236                   JSR  L8748          ; EVALUATE TARGET STRING EXPRESSION
F64D 3414             (      exbasic.asm):04237                   PSHS X,B            ; SAVE ADDRESS AND LENGTH ON STACK
F64F BDE4E4           (      exbasic.asm):04238                   JSR  LB267          ; SYNTAX CHECK FOR ')'
F652 AE63             (      exbasic.asm):04239                   LDX  $03,S          ; * LOAD X WITH SEARCH STRING DESCRIPTOR ADDRESS
F654 BDE8D1           (      exbasic.asm):04240                   JSR  LB659          ; * AND GET THE LENGTH ANDADDRESS OF SEARCH STRING
F657 3404             (      exbasic.asm):04241                   PSHS B              ; SAVE LENGTH ON STACK
                      (      exbasic.asm):04242         *
                      (      exbasic.asm):04243         * AT THIS POINT THE STACK HAS THE FOLLOWING INFORMATION
                      (      exbasic.asm):04244         * ON IT: 0,S-SEARCH LENGTH; 1,S-TARGET LENGTH; 2 3,S-TARGET
                      (      exbasic.asm):04245         * ADDRESS; 4 5,S-SEARCH DESCRIPTOR ADDRESS; 6,S-SEARCH POSITION
F659 E166             (      exbasic.asm):04246                   CMPB $06,S          ; COMPARE LENGTH OF SEARCH STRING TO START
F65B 2523             (      exbasic.asm):04247                   BLO  L87D9          ; POSITION; RETURN 0 IF LENGTH < START
F65D A661             (      exbasic.asm):04248                   LDA  $01,S          ; GET LENGTH OF TARGET STRING
F65F 271C             (      exbasic.asm):04249                   BEQ  L87D6          ; BRANCH IF TARGET STRING = NULL
F661 E666             (      exbasic.asm):04250                   LDB  $06,S          ; GET START POSITION
F663 5A               (      exbasic.asm):04251                   DECB                ; MOVE BACK ONE
F664 3A               (      exbasic.asm):04252                   ABX                 ; POINT X TO POSITION IN SEARCH STRING WHERE SEARCHING WILL START
F665 3184             (      exbasic.asm):04253         L87BE     LEAY ,X             ; POINT Y TO SEARCH POSITION
F667 EE62             (      exbasic.asm):04254                   LDU  $02,S          ; POINT U TO START OF TARGET
F669 E661             (      exbasic.asm):04255                   LDB  $01,S          ; LOAD ACCB WITH LENGTH OF TARGET
F66B A6E4             (      exbasic.asm):04256                   LDA  ,S             ; LOAD ACCA WITH LENGTH OF SEARCH
F66D A066             (      exbasic.asm):04257                   SUBA $06,S          ; SUBTRACT SEARCH POSITION FROM SEARCH LENGTH
F66F 4C               (      exbasic.asm):04258                   INCA                ; ADD ONE
F670 A161             (      exbasic.asm):04259                   CMPA $01,S          ; COMPARE TO TARGET LENGTH
F672 250C             (      exbasic.asm):04260                   BLO  L87D9          ; RETURN 0 IF TARGET LENGTH > WHAT'S LEFT OF SEARCH STRING
F674 A680             (      exbasic.asm):04261         L87CD     LDA  ,X+            ; GET A CHARACTER FROM SEARCH STRING
F676 A1C0             (      exbasic.asm):04262                   CMPA ,U+            ; COMPARE IT TO TARGET STRING
F678 260C             (      exbasic.asm):04263                   BNE  L87DF          ; BRANCH IF NO MATCH
F67A 5A               (      exbasic.asm):04264                   DECB                ; DECREMENT TARGET LENGTH
F67B 26F7             (      exbasic.asm):04265                   BNE  L87CD          ; CHECK ANOTHER CHARACTER
F67D E666             (      exbasic.asm):04266         L87D6     LDB  $06,S          ; GET MATCH POSITION
F67F 21               (      exbasic.asm):04267         L87D8     FCB  SKP1           ; SKIP NEXT BYTE
F680 5F               (      exbasic.asm):04268         L87D9     CLRB                ; MATCH ADDRESS = 0
F681 3267             (      exbasic.asm):04269                   LEAS $07,S          ; CLEAN UP THE STACK
F683 7EE76B           (      exbasic.asm):04270                   JMP  LB4F3          ; CONVERT ACCB TO FP NUMBER
F686 6C66             (      exbasic.asm):04271         L87DF     INC  $06,S          ; INCREMENT SEARCH POSITION
F688 3021             (      exbasic.asm):04272                   LEAX $01,Y          ; MOVE X TO NEXT SEARCH POSITION
F68A 20D9             (      exbasic.asm):04273                   BRA  L87BE          ; KEEP LOOKING FOR A MATCH
                      (      exbasic.asm):04274         
                      (      exbasic.asm):04275         * EXTENDED BASIC RVEC19 HOOK CODE
F68C 8126             (      exbasic.asm):04276         XVEC19    CMPA #'&            ; *
F68E 265C             (      exbasic.asm):04277                   BNE  L8845          ; * RETURN IF NOT HEX OR OCTAL VARIABLE
F690 3262             (      exbasic.asm):04278                   LEAS $02,S          ; PURGE RETURN ADDRESS FROM STACK
                      (      exbasic.asm):04279         * PROCESS A VARIABLE PRECEEDED BY A '&' (&H,&O)
F692 0F52             (      exbasic.asm):04280         L87EB     CLR  FPA0+2         ; * CLEAR BOTTOM TWO
F694 0F53             (      exbasic.asm):04281                   CLR  FPA0+3         ; * BYTES OF FPA0
F696 8E0052           (      exbasic.asm):04282                   LDX  #FPA0+2        ; BYTES 2,3 OF FPA0 = (TEMPORARY ACCUMULATOR)
F699 9D7C             (      exbasic.asm):04283                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F69B 814F             (      exbasic.asm):04284                   CMPA #'O
F69D 2712             (      exbasic.asm):04285                   BEQ  L880A          ; YES
F69F 8148             (      exbasic.asm):04286                   CMPA #'H
F6A1 2723             (      exbasic.asm):04287                   BEQ  L881F          ; YES
F6A3 9D82             (      exbasic.asm):04288                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F6A5 200C             (      exbasic.asm):04289                   BRA  L880C          ; DEFAULT TO OCTAL (&O)
F6A7 8138             (      exbasic.asm):04290         L8800     CMPA #'8
F6A9 1022EE47         (      exbasic.asm):04291                   LBHI LB277
F6AD C603             (      exbasic.asm):04292                   LDB  #$03           ; BASE 8 MULTIPLIER
F6AF 8D2A             (      exbasic.asm):04293                   BSR  L8834          ; ADD DIGIT TO TEMPORARY ACCUMULATOR
                      (      exbasic.asm):04294         * EVALUATE AN &O VARIABLE
F6B1 9D7C             (      exbasic.asm):04295         L880A     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F6B3 25F2             (      exbasic.asm):04296         L880C     BLO  L8800          ; BRANCH IF NUMERIC
F6B5 0F50             (      exbasic.asm):04297         L880E     CLR  FPA0           ; * CLEAR 2 HIGH ORDER
F6B7 0F51             (      exbasic.asm):04298                   CLR  FPA0+1         ; * BYTES OF FPA0
F6B9 0F06             (      exbasic.asm):04299                   CLR  VALTYP         ; SET VARXABLE TYPE TO NUMERIC
F6BB 0F63             (      exbasic.asm):04300                   CLR  FPSBYT         ; ZERO OUT SUB BYTE OF FPA0
F6BD 0F54             (      exbasic.asm):04301                   CLR  FP0SGN         ; ZERO OUT MANTISSA SIGN OF FPA0
F6BF C6A0             (      exbasic.asm):04302                   LDB  #$A0           ; * SET EXPONENT OF FPA0
F6C1 D74F             (      exbasic.asm):04303                   STB  FP0EXP         ; *
F6C3 7EEC59           (      exbasic.asm):04304                   JMP  LBA1C          ; GO NORMALIZE FPA0
                      (      exbasic.asm):04305         * EVALUATE AN &H VARIABLE
F6C6 9D7C             (      exbasic.asm):04306         L881F     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F6C8 250B             (      exbasic.asm):04307                   BLO  L882E          ; BRANCH IF NUMERIC
F6CA BDE61A           (      exbasic.asm):04308                   JSR  LB3A2          ; SET CARRY IF NOT ALPHA
F6CD 25E6             (      exbasic.asm):04309                   BLO  L880E          ; BRANCH IF NOT ALPHA OR NUMERIC
F6CF 8147             (      exbasic.asm):04310                   CMPA #'G            ; CHECK FOR LETTERS A-F
F6D1 24E2             (      exbasic.asm):04311                   BCC  L880E          ; BRANCH IF >= G (ILLEGAL HEX LETTER)
F6D3 8007             (      exbasic.asm):04312                   SUBA #7             ; SUBTRACT ASCII DIFFERENCE BETWEEN A AND 9
F6D5 C604             (      exbasic.asm):04313         L882E     LDB  #$04           ; BASE 16 DIGIT MULTIPLIER = 2**4
F6D7 8D02             (      exbasic.asm):04314                   BSR  L8834          ; ADD DIGIT TO TEMPORARY ACCUMULATOR
F6D9 20EB             (      exbasic.asm):04315                   BRA  L881F          ; KEEP EVALUATING VARIABLE
F6DB 6801             (      exbasic.asm):04316         L8834     ASL  $01,X          ; * MULTIPLY TEMPORARY
F6DD 6984             (      exbasic.asm):04317                   ROL  ,X             ; * ACCUMULATOR BY TWO
F6DF 1025F5EC         (      exbasic.asm):04318                   LBCS LBA92          ; 'OV' OVERFLOW ERROR
F6E3 5A               (      exbasic.asm):04319                   DECB                ; DECREMENT SHIFT COUNTER
F6E4 26F5             (      exbasic.asm):04320                   BNE  L8834          ; MULTIPLY TEMPORARY ACCUMULATOR AGAIN
F6E6 8030             (      exbasic.asm):04321                   SUBA #'0            ; MASK OFF ASCII
F6E8 AB01             (      exbasic.asm):04322                   ADDA $01,X          ; * ADD DIGIT TO TEMPORARY
F6EA A701             (      exbasic.asm):04323                   STA  $01,X          ; * ACCUMULATOR AND SAVE IT
F6EC 39               (      exbasic.asm):04324         L8845     RTS
                      (      exbasic.asm):04325         
F6ED 3540             (      exbasic.asm):04326         XVEC15    PULS U              ; PULL RETURN ADDRESS AND SAVE IN U REGISTER
F6EF 0F06             (      exbasic.asm):04327                   CLR  VALTYP         ; SET VARIABLE TYPE TO NUMERIC
F6F1 9E83             (      exbasic.asm):04328                   LDX  CHARAD         ; CURRENT INPUT POINTER TO X
F6F3 9D7C             (      exbasic.asm):04329                   JSR  GETNCH         ; GET CHARACTER FROM BASIC
F6F5 8126             (      exbasic.asm):04330                   CMPA #'&            ; HEX AND OCTAL VARIABLES ARE PRECEEDED BY &
F6F7 2799             (      exbasic.asm):04331                   BEQ  L87EB          ; PROCESS A '&' VARIABLE
F6F9 81B0             (      exbasic.asm):04332                   CMPA #TOK_FN        ; TOKEN FOR FN
F6FB 275E             (      exbasic.asm):04333                   BEQ  L88B4          ; PROCESS FN CALL
F6FD 81FF             (      exbasic.asm):04334                   CMPA #$FF           ; CHECK FOR SECONDARY TOKEN
F6FF 2608             (      exbasic.asm):04335                   BNE  L8862          ; NOT SECONDARY
F701 9D7C             (      exbasic.asm):04336                   JSR  GETNCH         ; GET CHARACTER FROM BASIC
F703 8183             (      exbasic.asm):04337                   CMPA #TOK_USR       ; TOKEN FOR USR
F705 102700AB         (      exbasic.asm):04338                   LBEQ L892C          ; PROCESS USR CALL
F709 9F83             (      exbasic.asm):04339         L8862     STX  CHARAD         ; RESTORE BASIC'S INPUT POINTER
F70B 6EC4             (      exbasic.asm):04340                   JMP  ,U             ; RETURN TO CALLING ROUTINE
F70D 9E68             (      exbasic.asm):04341         L8866     LDX  CURLIN         ; GET CURRENT LINE NUMBER
F70F 3001             (      exbasic.asm):04342                   LEAX $01,X          ; IN DIRECT MODE?
F711 26D9             (      exbasic.asm):04343                   BNE  L8845          ; RETURN IF NOT IN DIRECT MODE
F713 C616             (      exbasic.asm):04344                   LDB  #2*11          ; 'ILLEGAL DIRECT STATEMENT' ERROR
F715 7EDEF7           (      exbasic.asm):04345         L886E     JMP  LAC46          ; PROCESS ERROR
                      (      exbasic.asm):04346         
F718 AE9F0083         (      exbasic.asm):04347         DEF       LDX  [CHARAD]       ; GET TWO INPUT CHARS
F71C 8CFF83           (      exbasic.asm):04348                   CMPX #TOK_FF_USR    ; TOKEN FOR USR
F71F 10270074         (      exbasic.asm):04349                   LBEQ L890F          ; BRANCH IF DEF USR
F723 8D23             (      exbasic.asm):04350                   BSR  L88A1          ; GET DESCRIPTOR ADDRESS FOR FN VARIABLE NAME
F725 8DE6             (      exbasic.asm):04351                   BSR  L8866          ; DON'T ALLOW DEF FN IF IN DIRECT MODE
F727 BDE4E7           (      exbasic.asm):04352                   JSR  LB26A          ; SYNTAX CHECK FOR '('
F72A C680             (      exbasic.asm):04353                   LDB  #$80           ; * GET THE FLAG TO INDICATE ARRAY VARIABLE SEARCH DISABLE
F72C D708             (      exbasic.asm):04354                   STB  ARYDIS         ; * AND SAVE IT IN THE ARRAY DISABLE FLAG
F72E BDE5CF           (      exbasic.asm):04355                   JSR  LB357          ; GET VARIABLE DESCRIPTOR
F731 8D25             (      exbasic.asm):04356                   BSR  L88B1          ; 'TM' ERROR IF STRING
F733 BDE4E4           (      exbasic.asm):04357                   JSR  LB267          ; SYNTAX CHECK FOR ')'
F736 C6AE             (      exbasic.asm):04358                   LDB  #TOK_EQUALS    ; TOKEN FOR '='
F738 BDE4EC           (      exbasic.asm):04359                   JSR  LB26F          ; DO A SYNTAX CHECK FOR =
F73B 9E4B             (      exbasic.asm):04360                   LDX  V4B            ; GET THE ADDRESS OF THE FN NAME DESCRIPTOR
F73D DC83             (      exbasic.asm):04361                   LDD  CHARAD         ; * GET THE CURRENT INPUT POINTER ADDRESS AND
F73F ED84             (      exbasic.asm):04362                   STD  ,X             ; * SAVE IT IN FIRST 2 BYTES OF THE DESCRIPTOR
F741 DC39             (      exbasic.asm):04363                   LDD  VARPTR         ; = GET THE DESCRIPTOR ADDRESS OF THE ARGUMENT
F743 ED02             (      exbasic.asm):04364                   STD  $02,X          ; = VARIABLE AND SAVE IT IN THE DESCRIPTOR OF THE FN NAME
F745 7EE181           (      exbasic.asm):04365                   JMP  DATA           ; MOVE INPUT POINTER TO END OF LINE OR SUBLINE
F748 C6B0             (      exbasic.asm):04366         L88A1     LDB  #TOK_FN        ; TOKEN FOR FN
F74A BDE4EC           (      exbasic.asm):04367                   JSR  LB26F          ; DO A SYNTAX CHECK FOR FN
F74D C680             (      exbasic.asm):04368                   LDB  #$80           ; * GET THE FLAG TO INDICATE ARRAY VARIABLE SEARCH DISABLE FLAG
F74F D708             (      exbasic.asm):04369                   STB  ARYDIS         ; * AND SAVE IT IN ARRAY VARIABLE FLAG
F751 8A80             (      exbasic.asm):04370                   ORA  #$80           ; SET BIT 7 OF CURRENT INPUT CHARACTER TO INDICATE AN FN VARIABLE
F753 BDE5D4           (      exbasic.asm):04371                   JSR  LB35C          ; * GET THE DESCRIPTOR ADDRESS OF THIS
F756 9F4B             (      exbasic.asm):04372                   STX  V4B            ; * VARIABLE AND SAVE IT IN V4B
F758 7EE3C0           (      exbasic.asm):04373         L88B1     JMP  LB143          ; 'TM' ERROR IF STRING VARIABLE
                      (      exbasic.asm):04374         * EVALUATE AN FN CALL
F75B 8DEB             (      exbasic.asm):04375         L88B4     BSR  L88A1          ; * GET THE DESCRIPTOR OF THE FN NAME
F75D 3410             (      exbasic.asm):04376                   PSHS X              ; * VARIABLE AND SAVE IT ON THE STACK
F75F BDE4DF           (      exbasic.asm):04377                   JSR  LB262          ; SYNTAX CHECK FOR '(' & EVALUATE EXPR
F762 8DF4             (      exbasic.asm):04378                   BSR  L88B1          ; 'TM' ERROR IF STRING VARIABLE
F764 3540             (      exbasic.asm):04379                   PULS U              ; POINT U TO FN NAME DESCRIPTOR
F766 C632             (      exbasic.asm):04380                   LDB  #2*25          ; 'UNDEFINED FUNCTION CALL' ERROR
F768 AE42             (      exbasic.asm):04381                   LDX  $02,U          ; POINT X TO ARGUMENT VARIABLE DESCRIPTOR
F76A 27A9             (      exbasic.asm):04382                   BEQ  L886E          ; BRANCH TO ERROR HANDLER
F76C 109E83           (      exbasic.asm):04383                   LDY  CHARAD         ; SAVE CURRENT INPUT POINTER IN Y
F76F EEC4             (      exbasic.asm):04384                   LDU  ,U             ; * POINT U TO START OF FN FORMULA AND
F771 DF83             (      exbasic.asm):04385                   STU  CHARAD         ; * SAVE IT IN INPUT POINTER
F773 A604             (      exbasic.asm):04386                   LDA  $04,X          ; = GET FP VALUE OF
F775 3402             (      exbasic.asm):04387                   PSHS A              ; = ARGUMENT VARIABLE, CURRENT INPUT
F777 EC84             (      exbasic.asm):04388                   LDD  ,X             ; = POINTER, AND ADDRESS OF START
F779 EE02             (      exbasic.asm):04389                   LDU  $02,X          ; = OF FN FORMULA AND SAVE
F77B 3476             (      exbasic.asm):04390                   PSHS U,Y,X,B,A      ; = THEM ON THE STACK
F77D BDEE72           (      exbasic.asm):04391                   JSR  LBC35          ; PACK FPA0 AND SAVE IT IN (X)
F780 BDE3BE           (      exbasic.asm):04392         L88D9     JSR  LB141          ; EVALUATE FN EXPRESSION
F783 3576             (      exbasic.asm):04393                   PULS A,B,X,Y,U      ; RESTORE REGISTERS
F785 ED84             (      exbasic.asm):04394                   STD  ,X             ; * GET THE FP
F787 EF02             (      exbasic.asm):04395                   STU  $02,X          ; * VALUE OF THE ARGUMENT
F789 3502             (      exbasic.asm):04396                   PULS A              ; * VARIABLE OFF OF THE
F78B A704             (      exbasic.asm):04397                   STA  $04,X          ; * STACK AND RE-SAVE IT
F78D 9D82             (      exbasic.asm):04398                   JSR  GETCCH         ; GET FINAL CHARACTER OF THE FN FORMULA
F78F 1026ED61         (      exbasic.asm):04399                   LBNE LB277          ; 'SYNTAX' ERROR IF NOT END OF LINE
F793 109F83           (      exbasic.asm):04400                   STY  CHARAD         ; RESTORE INPUT POINTER
F796 39               (      exbasic.asm):04401         L88EF     RTS
                      (      exbasic.asm):04402         
                      (      exbasic.asm):04403         
                      (      exbasic.asm):04404         
                      (      exbasic.asm):04405         * DEF USR
F797 9D7C             (      exbasic.asm):04406         L890F     JSR  GETNCH         ; SKIP PAST SECOND BYTE OF DEF USR TOKEN
F799 8D09             (      exbasic.asm):04407                   BSR  L891C          ; GET FN NUMBER
F79B 3410             (      exbasic.asm):04408                   PSHS X              ; SAVE FN EXEC ADDRESS STORAGE LOC
F79D 8D2D             (      exbasic.asm):04409                   BSR  L8944          ; CALCULATE EXEC ADDRESS
F79F 3540             (      exbasic.asm):04410                   PULS U              ; GET FN EXEC ADDRESS STORAGE LOC
F7A1 AFC4             (      exbasic.asm):04411                   STX  ,U             ; SAVE EXEC ADDRESS
F7A3 39               (      exbasic.asm):04412                   RTS
F7A4 5F               (      exbasic.asm):04413         L891C     CLRB                ; DEFAULT TO USR0 IF NO ARGUMENT
F7A5 9D7C             (      exbasic.asm):04414                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F7A7 2406             (      exbasic.asm):04415                   BCC  L8927          ; BRANCH IF NOT NUMERIC
F7A9 8030             (      exbasic.asm):04416                   SUBA #'0            ; MASK OFF ASCII
F7AB 1F89             (      exbasic.asm):04417                   TFR  A,B            ; SAVE USR NUMBER IN ACCB
F7AD 9D7C             (      exbasic.asm):04418                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F7AF 9E8D             (      exbasic.asm):04419         L8927     LDX  USRADR         ; GET ADDRESS OF STORAGE LOCs FOR USR ADDRESS
F7B1 58               (      exbasic.asm):04420                   ASLB                ; X2 - 2 BYTES/USR ADDRESS
F7B2 3A               (      exbasic.asm):04421                   ABX                 ; ADD OFFSET TO START ADDRESS OF STORAGE LOCs
F7B3 39               (      exbasic.asm):04422                   RTS
                      (      exbasic.asm):04423         * PROCESS A USR CALL
F7B4 8DEE             (      exbasic.asm):04424         L892C     BSR  L891C          ; GET STORAGE LOC OF EXEC ADDRESS FOR USR N
F7B6 AE84             (      exbasic.asm):04425                   LDX  ,X             ; * GET EXEC ADDRESS AND
F7B8 3410             (      exbasic.asm):04426                   PSHS X              ; * PUSH IT ONTO STACK
F7BA BDE4DF           (      exbasic.asm):04427                   JSR  LB262          ; SYNTAX CHECK FOR '(' & EVALUATE EXPR
F7BD 8E004F           (      exbasic.asm):04428                   LDX  #FP0EXP        ; POINT X TO FPA0
F7C0 9606             (      exbasic.asm):04429                   LDA  VALTYP         ; GET VARIABLE TYPE
F7C2 2707             (      exbasic.asm):04430                   BEQ  L8943          ; BRANCH IF NUMERIC, STRING IF <> 0
F7C4 BDE8CF           (      exbasic.asm):04431                   JSR  LB657          ; GET LENGTH & ADDRESS OF STRING VARIABLE
F7C7 9E52             (      exbasic.asm):04432                   LDX  FPA0+2         ; GET POINTER TO STRING DESCRIPTOR
F7C9 9606             (      exbasic.asm):04433                   LDA  VALTYP         ; GET VARIABLE TYPE
F7CB 39               (      exbasic.asm):04434         L8943     RTS                 ; JUMP TO USR ROUTINE (PSHS X ABOVE)
F7CC C6AE             (      exbasic.asm):04435         L8944     LDB  #TOK_EQUALS    ; TOKEN FOR '='
F7CE BDE4EC           (      exbasic.asm):04436                   JSR  LB26F          ; DO A SYNTAX CHECK FOR =
F7D1 7EE9B5           (      exbasic.asm):04437                   JMP  LB73D          ; EVALUATE EXPRESSION, RETURN VALUE IN X
                      (      exbasic.asm):04438         
                      (      exbasic.asm):04439         
                      (      exbasic.asm):04440         
                      (      exbasic.asm):04441         * DEL
F7D4 1027EEEA         (      exbasic.asm):04442         DEL       LBEQ LB44A          ; 'FC' ERROR IF NO ARGUMENT
F7D8 BDE208           (      exbasic.asm):04443                   JSR  LAF67          ; CONVERT A DECIMAL BASiC NUMBER TO BINARY
F7DB BDDF96           (      exbasic.asm):04444                   JSR  LAD01          ; FIND RAM ADDRESS OF START OF A BASIC LINE
F7DE 9F93             (      exbasic.asm):04445                   STX  VD3            ; SAVE RAM ADDRESS OF STARTING LINE NUMBER
F7E0 9D82             (      exbasic.asm):04446                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F7E2 2710             (      exbasic.asm):04447                   BEQ  L8990          ; BRANCH IF END OF LINE
F7E4 81A7             (      exbasic.asm):04448                   CMPA #TOK_MINUS     ; TOKEN FOR '-'
F7E6 263B             (      exbasic.asm):04449                   BNE  L89BF          ; TERMINATE COMMAND IF LINE NUMBER NOT FOLLOWED BY '-'
F7E8 9D7C             (      exbasic.asm):04450                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F7EA 2704             (      exbasic.asm):04451                   BEQ  L898C          ; IF END OF LINE, USE DEFAULT ENDING LINE NUMBER
F7EC 8D24             (      exbasic.asm):04452                   BSR  L89AE          ; * CONVERT ENDING LINE NUMBER TO BINARY
F7EE 2004             (      exbasic.asm):04453                   BRA  L8990          ; * AND SAVE IT IN BINVAL
F7F0 86FF             (      exbasic.asm):04454         L898C     LDA  #$FF           ; = USE $FFXX AS DEFAULT ENDING
F7F2 972B             (      exbasic.asm):04455                   STA  BINVAL         ; = LINE NUMBER - SAVE IT IN BINVAL
F7F4 DE93             (      exbasic.asm):04456         L8990     LDU  VD3            ; POINT U TO STARTING LINE NUMBER ADDRESS
F7F6 8C               (      exbasic.asm):04457         L8992     FCB  SKP2           ; SKIP TWO BYTES
F7F7 EEC4             (      exbasic.asm):04458         L8993     LDU  ,U             ; POINT U TO START OF NEXT LINE
F7F9 ECC4             (      exbasic.asm):04459                   LDD  ,U             ; CHECK FOR END OF PROGRAM
F7FB 2706             (      exbasic.asm):04460                   BEQ  L899F          ; BRANCH IF END OF PROGRAM
F7FD EC42             (      exbasic.asm):04461                   LDD  $02,U          ; LOAD ACCD WITH THIS LINE'S NUMBER
F7FF 932B             (      exbasic.asm):04462                   SUBD BINVAL         ; SUBTRACT ENDING LINE NUMBER ADDRESS
F801 23F4             (      exbasic.asm):04463                   BLS  L8993          ; BRANCH IF = < ENDING LINE NUMBER
F803 9E93             (      exbasic.asm):04464         L899F     LDX  VD3            ; GET STARTING LINE NUMBER
F805 8D15             (      exbasic.asm):04465                   BSR  L89B8          ; MOVE (U) TO (X) UNTIL END OF PROGRAM
F807 BDDFB6           (      exbasic.asm):04466                   JSR  LAD21          ; RESET BASIC'S INPUT POINTER AND ERASE VARIABLES
F80A 9E93             (      exbasic.asm):04467                   LDX  VD3            ; GET STARTING LINE NUMBER ADDRESS
F80C BDDF86           (      exbasic.asm):04468                   JSR  LACF1          ; RECOMPUTE START OF NEXT LINE ADDRESSES
F80F 7EDF16           (      exbasic.asm):04469                   JMP  LAC73          ; JUMP TO BASIC'S MAIN COMMAND LOOP
F812 BDE208           (      exbasic.asm):04470         L89AE     JSR  LAF67          ; GO GET LINE NUMBER CONVERTED TO BINARY
F815 7EDCAB           (      exbasic.asm):04471                   JMP  LA5C7          ; MAKE SURE THERE'S NO MORE ON THIS LINE
F818 A6C0             (      exbasic.asm):04472         L89B4     LDA  ,U+            ; GET A BYTE FROM (U)
F81A A780             (      exbasic.asm):04473                   STA  ,X+            ; MOVE THE BYTE TO (X)
F81C 11931B           (      exbasic.asm):04474         L89B8     CMPU VARTAB         ; COMPARE TO END OF BASIC
F81F 26F7             (      exbasic.asm):04475                   BNE  L89B4          ; BRANCH IF NOT AT END
F821 9F1B             (      exbasic.asm):04476                   STX  VARTAB         ; SAVE (X) AS NEW END OF BASIC
F823 39               (      exbasic.asm):04477         L89BF     RTS
                      (      exbasic.asm):04478         
                      (      exbasic.asm):04479         
F824 BDF70D           (      exbasic.asm):04480         L89C0     JSR  L8866          ; 'BS' ERROR IF IN DIRECT MODE
F827 9D7C             (      exbasic.asm):04481                   JSR  GETNCH         ; GET A CHAR FROM BASIC
F829 8122             (      exbasic.asm):04482         L89D2     CMPA #'"            ; CHECK FOR PROMPT STRING
F82B 260B             (      exbasic.asm):04483                   BNE  L89E1          ; BRANCH IF NO PROMPT STRING
F82D BDE4C1           (      exbasic.asm):04484                   JSR  LB244          ; STRIP OFF PROMPT STRING & PUT IT ON STRING STACK
F830 C63B             (      exbasic.asm):04485                   LDB  #';            ; *
F832 BDE4EC           (      exbasic.asm):04486                   JSR  LB26F          ; * DO A SYNTAX CHECK FOR;
F835 BDEBDC           (      exbasic.asm):04487                   JSR  LB99F          ; REMOVE PROMPT STRING FROM STRING STACK & SEND TO CONSOLE OUT
F838 327E             (      exbasic.asm):04488         L89E1     LEAS -2,S           ; RESERVE TWO STORAGE SLOTS ON STACK
F83A BDE2BD           (      exbasic.asm):04489                   JSR  LB035          ; INPUT A LINE FROM CURRENT INPUT DEVICE
F83D 3262             (      exbasic.asm):04490                   LEAS $02,S          ; CLEAN UP THE STACK
F83F BDE5CF           (      exbasic.asm):04491                   JSR  LB357          ; SEARCH FOR A VARIABLE
F842 9F3B             (      exbasic.asm):04492                   STX  VARDES         ; SAVE POINTER TO VARIABLE DESCRIPTOR
F844 BDE3C3           (      exbasic.asm):04493                   JSR  LB146          ; ''TM' ERROR IF VARIABLE TYPE = NUMERIC
F847 8E00F3           (      exbasic.asm):04494                   LDX  #LINBUF        ; POINT X TO THE STRING BUFFER WHERE THE INPUT STRING WAS STORED
F84A 4F               (      exbasic.asm):04495                   CLRA                ; TERMINATOR CHARACTER 0 (END OF LINE)
F84B BDE794           (      exbasic.asm):04496                   JSR  LB51A          ; PARSE THE INPUT STRING AND STORE IT IN THE STRING SPACE
F84E 7EE245           (      exbasic.asm):04497                   JMP  LAFA4          ; REMOVE DESCRIPTOR FROM STRING STACK
F851 BDE208           (      exbasic.asm):04498         L89FC     JSR  LAF67          ; STRIP A DECIMAL NUMBER FROM BASIC INPUT LINE
F854 9E2B             (      exbasic.asm):04499                   LDX  BINVAL         ; GET BINARY VALUE
F856 39               (      exbasic.asm):04500                   RTS
F857 9E91             (      exbasic.asm):04501         L8A02     LDX  VD1            ; GET CURRENT OLD NUMBER BEING RENUMBERED
F859 9F2B             (      exbasic.asm):04502         L8A04     STX  BINVAL         ; SAVE THE LINE NUMBER BEING SEARCHED FOR
F85B 7EDF96           (      exbasic.asm):04503                   JMP  LAD01          ; GO FIND THE LINE NUMBER IN BASIC PROGRAM
                      (      exbasic.asm):04504         
                      (      exbasic.asm):04505         * RENUM
F85E BDDFBB           (      exbasic.asm):04506         RENUM     JSR  LAD26          ; ERASE VARIABLES
F861 CC000A           (      exbasic.asm):04507                   LDD  #10            ; DEFAULT LINE NUMBER INTERVAL
F864 DD95             (      exbasic.asm):04508                   STD  VD5            ; SAVE DEFAULT RENUMBER START LINE NUMBER
F866 DD8F             (      exbasic.asm):04509                   STD  VCF            ; SAVE DEFAULT INTERVAL
F868 5F               (      exbasic.asm):04510                   CLRB                ; NOW ACCD = 0
F869 DD91             (      exbasic.asm):04511                   STD  VD1            ; DEFAULT LINE NUMBER OF WHERE TO START RENUMBERING
F86B 9D82             (      exbasic.asm):04512                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F86D 2406             (      exbasic.asm):04513                   BCC  L8A20          ; BRANCH IF NOT NUMERIC
F86F 8DE0             (      exbasic.asm):04514                   BSR  L89FC          ; CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY
F871 9F95             (      exbasic.asm):04515                   STX  VD5            ; SAVE LINE NUMBER WHERE RENUMBERING STARTS
F873 9D82             (      exbasic.asm):04516                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F875 271B             (      exbasic.asm):04517         L8A20     BEQ  L8A3D          ; BRANCH IF END OF LINE
F877 BDE4EA           (      exbasic.asm):04518                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
F87A 2406             (      exbasic.asm):04519                   BCC  L8A2D          ; BRANCH IF NEXT CHARACTER NOT NUMERIC
F87C 8DD3             (      exbasic.asm):04520                   BSR  L89FC          ; CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY
F87E 9F91             (      exbasic.asm):04521                   STX  VD1            ; SAVE NEW RENUMBER LINE
F880 9D82             (      exbasic.asm):04522                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F882 270E             (      exbasic.asm):04523         L8A2D     BEQ  L8A3D          ; BRANCH IF END OF LINE
F884 BDE4EA           (      exbasic.asm):04524                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
F887 2406             (      exbasic.asm):04525                   BCC  L8A3A          ; BRANCH IF NEXT CHARACTER NOT NUMERIC
F889 8DC6             (      exbasic.asm):04526                   BSR  L89FC          ; CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY
F88B 9F8F             (      exbasic.asm):04527                   STX  VCF            ; SAVE NEW INTERVAL
F88D 2749             (      exbasic.asm):04528                   BEQ  L8A83          ; 'FC' ERROR
F88F BDDCAB           (      exbasic.asm):04529         L8A3A     JSR  LA5C7          ; CHECK FOR MORE CHARACTERS ON LINE - 'SYNTAX' ERROR IF ANY
F892 8DC3             (      exbasic.asm):04530         L8A3D     BSR  L8A02          ; GO GET ADDRESS OF OLD NUMBER BEING RENUMBERED
F894 9F93             (      exbasic.asm):04531                   STX  VD3            ; SAVE ADDRESS
F896 9E95             (      exbasic.asm):04532                   LDX  VD5            ; GET NEXT RENUMBERED LINE NUMBER TO USE
F898 8DBF             (      exbasic.asm):04533                   BSR  L8A04          ; FIND THE LINE NUMBER IN THE BASIC PROGRAM
F89A 9C93             (      exbasic.asm):04534                   CMPX VD3            ; COMPARE TO ADDRESS OF OLD LINE NUMBER
F89C 253A             (      exbasic.asm):04535                   BLO  L8A83          ; 'FC' ERROR IF NEW ADDRESS < OLD ADDRESS
F89E 8D1C             (      exbasic.asm):04536                   BSR  L8A67          ; MAKE SURE RENUMBERED LINE NUMBERS WILL BE IN RANGE
F8A0 BDF932           (      exbasic.asm):04537                   JSR  L8ADD          ; CONVERT ASCII LINE NUMBERS TO 'EXPANDED' BINARY
F8A3 BDDF84           (      exbasic.asm):04538                   JSR  LACEF          ; RECALCULATE NEXT LINE RAM ADDRESSES
F8A6 8DAF             (      exbasic.asm):04539                   BSR  L8A02          ; GET RAM ADDRESS OF FIRST LINE TO BE RENUMBERED
F8A8 9F93             (      exbasic.asm):04540                   STX  VD3            ; SAVE IT
F8AA 8D3A             (      exbasic.asm):04541                   BSR  L8A91          ; MAKE SURE LINE NUMBERS EXIST
F8AC 8D0F             (      exbasic.asm):04542                   BSR  L8A68          ; INSERT NEW LINE NUMBERS IN LINE HEADERS
F8AE 8D36             (      exbasic.asm):04543                   BSR  L8A91          ; INSERT NEW LINE NUMBERS IN PROGRAM STATEMENTS
F8B0 BDF9CD           (      exbasic.asm):04544                   JSR  L8B7B          ; CONVERT PACKED BINARY LINE NUMBERS TO ASCII
F8B3 BDDFBB           (      exbasic.asm):04545                   JSR  LAD26          ; ERASE VARIABLES
F8B6 BDDF84           (      exbasic.asm):04546                   JSR  LACEF          ; RECALCULATE NEXT LINE RAM ADDRESS
F8B9 7EDF16           (      exbasic.asm):04547                   JMP  LAC73          ; GO BACK TO BASIC'S MAIN LOOP
F8BC 86               (      exbasic.asm):04548         L8A67     FCB  SKP1LD         ; SKIP ONE BYTE - LDA #$4F
F8BD 4F               (      exbasic.asm):04549         L8A68     CLRA                ; NEW LINE NUMBER FLAG - 0; INSERT NEW LINE NUMBERS
F8BE 9798             (      exbasic.asm):04550                   STA  VD8            ; SAVE NEW LINE NUMBER FLAG; 0 = INSERT NEW NUMBERS
F8C0 9E93             (      exbasic.asm):04551                   LDX  VD3            ; GET ADDRESS OF OLD LINE NUMBER BEING RENUMBERED
F8C2 DC95             (      exbasic.asm):04552                   LDD  VD5            ; GET THE CURRENT RENUMBERED LINE NUMBER
F8C4 8D15             (      exbasic.asm):04553                   BSR  L8A86          ; RETURN IF END OF PROGRAM
F8C6 0D98             (      exbasic.asm):04554         L8A71     TST  VD8            ; CHECK NEW LINE NUMBER FLAG
F8C8 2602             (      exbasic.asm):04555                   BNE  L8A77          ; BRANCH IF NOT INSERTING NEW LINE NUMBERS
F8CA ED02             (      exbasic.asm):04556                   STD  $02,X          ; STORE THE NEW LINE NUMBER IN THE BASIC PROGRAM
F8CC AE84             (      exbasic.asm):04557         L8A77     LDX  ,X             ; POINT X TO THE NEXT LINE IN BASIC
F8CE 8D0B             (      exbasic.asm):04558                   BSR  L8A86          ; RETURN IF END OF PROGRAM
F8D0 D38F             (      exbasic.asm):04559                   ADDD VCF            ; ADD INTERVAL TO CURRENT RENUMBERED LINE NUMBER
F8D2 2504             (      exbasic.asm):04560                   BLO  L8A83          ; 'FC' ERROR IF LINE NUMBER > $FFFF
F8D4 81FA             (      exbasic.asm):04561                   CMPA #MAXLIN        ; LARGEST LINE NUMBER = $F9FF
F8D6 25EE             (      exbasic.asm):04562                   BLO  L8A71          ; BRANCH IF LEGAL LINE NUMBER
F8D8 7EE6C2           (      exbasic.asm):04563         L8A83     JMP  LB44A          ; 'FC' ERROR IF LINE NUMBER MS BYTE > $F9
                      (      exbasic.asm):04564         * TEST THE TWO BYTES POINTED TO BY (X).
                      (      exbasic.asm):04565         * NORMAL RETURN IF <> 0. IF = 0 (END OF
                      (      exbasic.asm):04566         * PROGRAM) RETURN IS PULLED OFF STACK AND
                      (      exbasic.asm):04567         * YOU RETURN TO PREVIOUS SUBROUTINE CALL.
F8DB 3406             (      exbasic.asm):04568         L8A86     PSHS B,A            ; SAVE ACCD
F8DD EC84             (      exbasic.asm):04569                   LDD  ,X             ; TEST THE 2 BYTES POINTED TO BY X
F8DF 3506             (      exbasic.asm):04570                   PULS A,B            ; RESTORE ACCD
F8E1 2602             (      exbasic.asm):04571                   BNE  L8A90          ; BRANCH IF NOT END OF PROGRAM
F8E3 3262             (      exbasic.asm):04572                   LEAS $02,S          ; PURGE RETURN ADDRESS FROM STACK
F8E5 39               (      exbasic.asm):04573         L8A90     RTS
F8E6 9E19             (      exbasic.asm):04574         L8A91     LDX  TXTTAB         ; GET START OF BASIC PROGRAM
F8E8 301F             (      exbasic.asm):04575                   LEAX -1,X           ; MOVE POINTER BACK ONE
F8EA 3001             (      exbasic.asm):04576         L8A95     LEAX $01,X          ; MOVE POINTER UP ONE
F8EC 8DED             (      exbasic.asm):04577                   BSR  L8A86          ; RETURN IF END OF PROGRAM
F8EE 3003             (      exbasic.asm):04578         L8A99     LEAX $03,X          ; SKIP OVER NEXT LINE ADDRESS AND LINE NUMBER
F8F0 3001             (      exbasic.asm):04579         L8A9B     LEAX $01,X          ; MOVE POINTER TO NEXT CHARACTER
F8F2 A684             (      exbasic.asm):04580                   LDA  ,X             ; CHECK CURRENT CHARACTER
F8F4 27F4             (      exbasic.asm):04581                   BEQ  L8A95          ; BRANCH IF END OF LINE
F8F6 9F0F             (      exbasic.asm):04582                   STX  TEMPTR         ; SAVE CURRENT POINTER
F8F8 4A               (      exbasic.asm):04583                   DECA                ; =
F8F9 270C             (      exbasic.asm):04584                   BEQ  L8AB2          ; =BRANCH IF START OF PACKED NUMERIC LINE
F8FB 4A               (      exbasic.asm):04585                   DECA                ; *
F8FC 272A             (      exbasic.asm):04586                   BEQ  L8AD3          ; *BRANCH IF LINE NUMBER EXISTS
F8FE 4A               (      exbasic.asm):04587                   DECA                ; =
F8FF 26EF             (      exbasic.asm):04588                   BNE  L8A9B          ; =MOVE TO NEXT CHARACTER IF > 3
F901 8603             (      exbasic.asm):04589         L8AAC     LDA  #$03           ; * SET 1ST BYTE = 3 TO INDICATE LINE
F903 A780             (      exbasic.asm):04590                   STA  ,X+            ; * NUMBER DOESN'T CURRENTLY EXIST
F905 20E7             (      exbasic.asm):04591                   BRA  L8A99          ; GO GET ANOTHER CHARACTER
F907 EC01             (      exbasic.asm):04592         L8AB2     LDD  $01,X          ; GET MS BYTE OF LINE NUMBER
F909 6A02             (      exbasic.asm):04593                   DEC  $02,X          ; DECREMENT ZERO CHECK BYTE
F90B 2701             (      exbasic.asm):04594                   BEQ  L8AB9          ; BRANCH IF MS BYTE <> 0
F90D 4F               (      exbasic.asm):04595                   CLRA                ; CLEAR MS BYTE
F90E E603             (      exbasic.asm):04596         L8AB9     LDB  $03,X          ; GET LS BYTE OF LINE NUMBER
F910 6A04             (      exbasic.asm):04597                   DEC  $04,X          ; DECREMENT ZERO CHECK FLAG
F912 2701             (      exbasic.asm):04598                   BEQ  L8AC0          ; BRANCH IF IS BYTE <> 0
F914 5F               (      exbasic.asm):04599                   CLRB                ; CLEAR LS BYTE
F915 ED01             (      exbasic.asm):04600         L8AC0     STD  $01,X          ; SAVE BINARY LINE NUMBER
F917 DD2B             (      exbasic.asm):04601                   STD  BINVAL         ; SAVE TRIAL LINE NUMBER
F919 BDDF96           (      exbasic.asm):04602                   JSR  LAD01          ; FIND RAM ADDRESS OF A BASIC LINE NUMBER
F91C 9E0F             (      exbasic.asm):04603         L8AC7     LDX  TEMPTR         ; GET BACK POINTER TO START OF PACKED LINE NUMBER
F91E 25E1             (      exbasic.asm):04604                   BLO  L8AAC          ; BRANCH IF NO LINE NUMBER MATCH FOUND
F920 DC47             (      exbasic.asm):04605                   LDD  V47            ; GET START ADDRESS OF LINE NUMBER
F922 6C80             (      exbasic.asm):04606                   INC  ,X+            ; * SET 1ST BYTE = 2, TO INDICATE LINE NUMBER EXISTS IF CHECKING FOR
                      (      exbasic.asm):04607         *              ; * EXISTENCE OF LINE NUMBER, SET IT = 1 IF INSERTING LINE NUMBERS
                      (      exbasic.asm):04608         
F924 ED84             (      exbasic.asm):04609                   STD  ,X             ; SAVE RAM ADDRESS OF CORRECT LINE NUMBER
F926 20C6             (      exbasic.asm):04610                   BRA  L8A99          ; GO GET ANOTHER CHARACTER
F928 6F84             (      exbasic.asm):04611         L8AD3     CLR  ,X             ; CLEAR CARRY FLAG AND 1ST BYTE
F92A AE01             (      exbasic.asm):04612                   LDX  $01,X          ; POINT X TO RAM ADDRESS OF CORRECT LINE NUMBER
F92C AE02             (      exbasic.asm):04613                   LDX  $02,X          ; PUT CORRECT LINE NUMBER INTO (X)
F92E 9F47             (      exbasic.asm):04614                   STX  V47            ; SAVE IT TEMPORARILY
F930 20EA             (      exbasic.asm):04615                   BRA  L8AC7          ; GO INSERT IT INTO BASIC LINE
F932 9E19             (      exbasic.asm):04616         L8ADD     LDX  TXTTAB         ; GET BEGINNING OF BASIC PROGRAM
F934 2004             (      exbasic.asm):04617                   BRA  L8AE5
F936 9E83             (      exbasic.asm):04618         L8AE1     LDX  CHARAD         ; *GET CURRENT INPUT POINTER
F938 3001             (      exbasic.asm):04619                   LEAX $01,X          ; *AND BUMP IT ONE
F93A 8D9F             (      exbasic.asm):04620         L8AE5     BSR  L8A86          ; RETURN IF END OF PROGRAM
F93C 3002             (      exbasic.asm):04621                   LEAX $02,X          ; SKIP PAST NEXT LINE ADDRESS
F93E 3001             (      exbasic.asm):04622         L8AE9     LEAX $01,X          ; ADVANCE POINTER BY ONE
F940 9F83             (      exbasic.asm):04623         L8AEB     STX  CHARAD         ; SAVE NEW BASIC INPUT POINTER
F942 9D7C             (      exbasic.asm):04624         L8AED     JSR  GETNCH         ; GET NEXT CHARACTER FROM BASIC
F944 4D               (      exbasic.asm):04625         L8AEF     TSTA                ; CHECK THE CHARACTER
F945 27EF             (      exbasic.asm):04626                   BEQ  L8AE1          ; BRANCH IF END OF LINE
F947 2AF9             (      exbasic.asm):04627                   BPL  L8AED          ; BRANCH IF NOT A TOKEN
F949 9E83             (      exbasic.asm):04628                   LDX  CHARAD         ; GET CURRENT INPUT POINTER
F94B 81FF             (      exbasic.asm):04629                   CMPA #$FF           ; IS THIS A SECONDARY TOKEN?
F94D 27EF             (      exbasic.asm):04630                   BEQ  L8AE9          ; YES - IGNORE IT
F94F 81A2             (      exbasic.asm):04631                   CMPA #TOK_THEN      ; TOKEN FOR THEN?
F951 2712             (      exbasic.asm):04632                   BEQ  L8B13          ; YES
F953 8184             (      exbasic.asm):04633                   CMPA #TOK_ELSE      ; TOKEN FOR ELSE?
F955 270E             (      exbasic.asm):04634                   BEQ  L8B13          ; YES
F957 8181             (      exbasic.asm):04635                   CMPA #TOK_GO        ; TOKEN FOR GO?
F959 26E7             (      exbasic.asm):04636                   BNE  L8AED          ; NO
F95B 9D7C             (      exbasic.asm):04637                   JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F95D 81A0             (      exbasic.asm):04638                   CMPA #TOK_TO        ; TOKEN FOR TO?
F95F 2704             (      exbasic.asm):04639                   BEQ  L8B13          ; YES
F961 81A1             (      exbasic.asm):04640                   CMPA #TOK_SUB       ; TOKEN FOR SUB?
F963 26DB             (      exbasic.asm):04641                   BNE  L8AEB          ; NO
F965 9D7C             (      exbasic.asm):04642         L8B13     JSR  GETNCH         ; GET A CHARACTER FROM BASIC
F967 2504             (      exbasic.asm):04643                   BLO  L8B1B          ; BRANCH IF NUMERIC
F969 9D82             (      exbasic.asm):04644         L8B17     JSR  GETCCH         ; GET CURRENT BASIC INPUT CHARRACTER
F96B 20D7             (      exbasic.asm):04645                   BRA  L8AEF          ; KEEP CHECKING THE LINE
F96D 9E83             (      exbasic.asm):04646         L8B1B     LDX  CHARAD         ; GET CURRENT INPUT ADDRESS
F96F 3410             (      exbasic.asm):04647                   PSHS X              ; SAVE IT ON THE STACK
F971 BDE208           (      exbasic.asm):04648                   JSR  LAF67          ; CONVERT DECIMAL BASIC NUMBER TO BINARY
F974 9E83             (      exbasic.asm):04649                   LDX  CHARAD         ; GET CURRENT INPUT POINTER
F976 A682             (      exbasic.asm):04650         L8B24     LDA  ,-X            ; GET PREVIOUS INPUT CHARACTER
F978 BDFCDD           (      exbasic.asm):04651                   JSR  L90AA          ; CLEAR CARRY IF NUMERIC INPUT VALUE
F97B 25F9             (      exbasic.asm):04652                   BLO  L8B24          ; BRANCH IF NON-NUMERIC
F97D 3001             (      exbasic.asm):04653                   LEAX $01,X          ; MOVE POINTER UP ONE
F97F 1F10             (      exbasic.asm):04654                   TFR  X,D            ; NOW ACCD POINTS TO ONE PAST END OF LINE NUMBER
F981 E061             (      exbasic.asm):04655                   SUBB $01,S          ; SUBTRACT PRE-NUMERIC POINTER LS BYTE
F983 C005             (      exbasic.asm):04656                   SUBB #$05           ; MAKE SURE THERE ARE AT LEAST 5 CHARACTERS IN THE NUMERIC LINE
                      (      exbasic.asm):04657         *
F985 2720             (      exbasic.asm):04658                   BEQ  L8B55          ; BRANCH IF EXACTLY 5
F987 250A             (      exbasic.asm):04659                   BLO  L8B41          ; BRANCH IF < 5
F989 3384             (      exbasic.asm):04660                   LEAU ,X             ; TRANSFER X TO U
F98B 50               (      exbasic.asm):04661                   NEGB                ; NEGATE B
F98C 3085             (      exbasic.asm):04662                   LEAX B,X            ; MOVE X BACK B BYTES
F98E BDF81C           (      exbasic.asm):04663                   JSR  L89B8          ; *MOVE BYTES FROM (U) TO (X) UNTIL
                      (      exbasic.asm):04664         *         *U   = END OF BASIC; (I) = NEW END OF BASIC
F991 2014             (      exbasic.asm):04665                   BRA  L8B55
                      (      exbasic.asm):04666         * FORCE FIVE BYTES OF SPACE FOR THE LINE NUMBER
F993 9F47             (      exbasic.asm):04667         L8B41     STX  V47            ; SAVE END OF NUMERIC VALUE
F995 9E1B             (      exbasic.asm):04668                   LDX  VARTAB         ; GET END OF BASIC PROGRAM
F997 9F43             (      exbasic.asm):04669                   STX  V43            ; SAVE IT
F999 50               (      exbasic.asm):04670                   NEGB                ; NEGATE B
F99A 3085             (      exbasic.asm):04671                   LEAX B,X            ; ADD IT TO END OF NUMERIC POiNTER
F99C 9F41             (      exbasic.asm):04672                   STX  V41            ; SAVE POINTER
F99E 9F1B             (      exbasic.asm):04673                   STX  VARTAB         ; STORE END OF BASIC PROGRAM
F9A0 BDDECF           (      exbasic.asm):04674                   JSR  LAC1E          ; ACCD = TOP OF ARRAYS - CHECK FOR ENOUGH ROOM
F9A3 9E45             (      exbasic.asm):04675                   LDX  V45            ; * GET AND SAVE THE
F9A5 9F83             (      exbasic.asm):04676                   STX  CHARAD         ; * NEW CURRENT INPUT POINTER
F9A7 3510             (      exbasic.asm):04677         L8B55     PULS X              ; RESTORE POINTER TO START OF NUMERIC VALUE
F9A9 8601             (      exbasic.asm):04678                   LDA  #$01           ; NEW LINE NUMBER FLAG
F9AB A784             (      exbasic.asm):04679                   STA  ,X             ; * SAVE NEW LINE FLAG
F9AD A702             (      exbasic.asm):04680                   STA  $02,X          ; *
F9AF A704             (      exbasic.asm):04681                   STA  $04,X          ; *
F9B1 D62B             (      exbasic.asm):04682                   LDB  BINVAL         ; GET MS BYTE OF BINARY LINE NUMBER
F9B3 2604             (      exbasic.asm):04683                   BNE  L8B67          ; BRANCH IF IT IS NOT ZERO
F9B5 C601             (      exbasic.asm):04684                   LDB  #$01           ; ; SAVE A 1 IF BYTE IS 0; OTHERWISE, BASIC WILL
                      (      exbasic.asm):04685         *              ; THINK IT IS THE END OF A LINE
F9B7 6C02             (      exbasic.asm):04686                   INC  $02,X          ; IF 2,X = 2, THEN PREVIOUS BYTE WAS A ZERO
F9B9 E701             (      exbasic.asm):04687         L8B67     STB  $01,X          ; SAVE MS BYTE OF BINARY LINE NUMBER
F9BB D62C             (      exbasic.asm):04688                   LDB  BINVAL+1       ; GET IS BYTE OF BINARY LINE NUMBER
F9BD 2604             (      exbasic.asm):04689                   BNE  L8B71          ; BRANCH IF NOT A ZERO BYTE
F9BF C601             (      exbasic.asm):04690                   LDB  #$01           ; SAVE A 1 IF BYTE IS A 0
F9C1 6C04             (      exbasic.asm):04691                   INC  $04,X          ; IF 4,X = 2, THEN PREVIOUS BYTE WAS A 0
F9C3 E703             (      exbasic.asm):04692         L8B71     STB  $03,X          ; SAVE LS BYTE OF BINARY LINE NUMBER
F9C5 9D82             (      exbasic.asm):04693                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
F9C7 812C             (      exbasic.asm):04694                   CMPA #',            ; IS IT A COMMA?
F9C9 279A             (      exbasic.asm):04695                   BEQ  L8B13          ; YES - PROCESS ANOTHER NUMERIC VALUE
F9CB 209C             (      exbasic.asm):04696                   BRA  L8B17          ; NO - GO GET AND PROCESS AN INPUT CHARACTER
F9CD 9E19             (      exbasic.asm):04697         L8B7B     LDX  TXTTAB         ; POINT X TO START OF BASIC PROGRAM
F9CF 301F             (      exbasic.asm):04698                   LEAX -1,X           ; MOVE POINTER BACK ONE
F9D1 3001             (      exbasic.asm):04699         L8B7F     LEAX $01,X          ; MOVE POINTER UP ONE
F9D3 EC02             (      exbasic.asm):04700                   LDD  $02,X          ; GET ADDRESS OF NEXT LINE
F9D5 DD68             (      exbasic.asm):04701                   STD  CURLIN         ; SAVE IT IN CURLIN
F9D7 BDF8DB           (      exbasic.asm):04702                   JSR  L8A86          ; RETURN IF END OF PROGRAM
F9DA 3003             (      exbasic.asm):04703                   LEAX $03,X          ; SKIP OVER ADDRESS OF NEXT LINE AND 1ST BYTE OF LINE NUMBER
F9DC 3001             (      exbasic.asm):04704         L8B8A     LEAX $01,X          ; MOVE POINTER UP ONE
F9DE A684             (      exbasic.asm):04705         L8B8C     LDA  ,X             ; GET CURRENT CHARACTER
F9E0 27EF             (      exbasic.asm):04706                   BEQ  L8B7F          ; BRANCH IF END OF LINE
F9E2 4A               (      exbasic.asm):04707                   DECA                ; INPUT CHARACTER = 1? - VALID LINE NUMBER
F9E3 271B             (      exbasic.asm):04708                   BEQ  L8BAE          ; YES
F9E5 8002             (      exbasic.asm):04709                   SUBA #$02           ; INPUT CHARACTER 3? - UL LINE NUMBER
F9E7 26F3             (      exbasic.asm):04710                   BNE  L8B8A          ; NO
F9E9 3410             (      exbasic.asm):04711                   PSHS X              ; SAVE CURRENT POSITION OF INPUT POINTER
F9EB 8EFA2A           (      exbasic.asm):04712                   LDX  #L8BD9-1       ; POINT X TO 'UL' MESSAGE
F9EE BDEBD9           (      exbasic.asm):04713                   JSR  LB99C          ; PRINT STRING TO THE SCREEN
F9F1 AEE4             (      exbasic.asm):04714                   LDX  ,S             ; GET INPUT POINTER
F9F3 EC01             (      exbasic.asm):04715                   LDD  $01,X          ; GET THE UNDEFINED LINE NUMBER
F9F5 BDF009           (      exbasic.asm):04716                   JSR  LBDCC          ; CONVERT NUMBER IN ACCD TO DECIMAL AND DISPLAY IT
F9F8 BDF002           (      exbasic.asm):04717                   JSR  LBDC5          ; PRINT 'IN XXXX' XXXX = CURRENT LINE NUMBER
F9FB BDEB99           (      exbasic.asm):04718                   JSR  LB958          ; SEND A CR TO CONSOLE OUT
F9FE 3510             (      exbasic.asm):04719                   PULS X              ; GET INPUT POINTER BACK
FA00 3410             (      exbasic.asm):04720         L8BAE     PSHS X              ; SAVE CURRENT POSITION OF INPUT POINTER
FA02 EC01             (      exbasic.asm):04721                   LDD  $01,X          ; LOAD ACCD WITH BINARY VALUE OF LINE NUMBER
FA04 DD52             (      exbasic.asm):04722                   STD  FPA0+2         ; SAVE IN BOTTOM 2 BYTES OF FPA0
FA06 BDF6B5           (      exbasic.asm):04723                   JSR  L880E          ; ADJUST REST OF FPA0 AS AN INTEGER
FA09 BDF016           (      exbasic.asm):04724                   JSR  LBDD9          ; CONVERT FPA0 TO ASCII, STORE IN LINE NUMBER
FA0C 3540             (      exbasic.asm):04725                   PULS U              ; LOAD U WITH PREVIOUS ADDRESS OF INPUT POINTER
FA0E C605             (      exbasic.asm):04726                   LDB  #$05           ; EACH EXPANDED LINE NUMBER USES 5 BYTES
FA10 3001             (      exbasic.asm):04727         L8BBE     LEAX $01,X          ; MOVE POINTER FORWARD ONE
FA12 A684             (      exbasic.asm):04728                   LDA  ,X             ; GET AN ASCII BYTE
FA14 2705             (      exbasic.asm):04729                   BEQ  L8BC9          ; BRANCH IF END OF NUMBER
FA16 5A               (      exbasic.asm):04730                   DECB                ; DECREMENT BYTE COUNTER
FA17 A7C0             (      exbasic.asm):04731                   STA  ,U+            ; STORE ASCII NUMBER IN BASIC LINE
FA19 20F5             (      exbasic.asm):04732                   BRA  L8BBE          ; CHECK FOR ANOTHER DIGIT
FA1B 30C4             (      exbasic.asm):04733         L8BC9     LEAX ,U             ; TRANSFER NEW LINE POINTER TO (X)
FA1D 5D               (      exbasic.asm):04734                   TSTB                ; DOES THE NEW LINE NUMBER REQUIRE 5 BYTES?
FA1E 27BE             (      exbasic.asm):04735                   BEQ  L8B8C          ; YES - GO GET ANOTHER INPUT CHARACTER
FA20 31C4             (      exbasic.asm):04736                   LEAY ,U             ; SAVE NEW LINE POINTER IN Y
FA22 33C5             (      exbasic.asm):04737                   LEAU B,U            ; POINT U TO END OF 5 BYTE PACKED LINE NUMBER BLOCK
FA24 BDF81C           (      exbasic.asm):04738                   JSR  L89B8          ; MOVE BYTES FROM (U) TO (X) UNTIL END OF PROGRAM
FA27 30A4             (      exbasic.asm):04739                   LEAX ,Y             ; LOAD (X) WITH NEW LINE POINTER
FA29 20B3             (      exbasic.asm):04740                   BRA  L8B8C          ; GO GET ANOTHER INPUT CHARACTER
                      (      exbasic.asm):04741         
FA2B 554C20           (      exbasic.asm):04742         L8BD9     FCC  "UL "          ; UNKNOWN LINE NUMBER MESSAGE
FA2E 00               (      exbasic.asm):04743                   FCB  0
                      (      exbasic.asm):04744         
                      (      exbasic.asm):04745         
FA2F BDE9B8           (      exbasic.asm):04746         HEXDOL    JSR  LB740          ; CONVERT FPA0 INTO A POSITIVE 2 BYTE INTEGER
FA32 8E01F0           (      exbasic.asm):04747                   LDX  #STRBUF+2      ; POINT TO TEMPORARY BUFFER
FA35 C604             (      exbasic.asm):04748                   LDB  #$04           ; CONVERT 4 NIBBLES
FA37 3404             (      exbasic.asm):04749         L8BE5     PSHS B              ; SAVE NIBBLE COUNTER
FA39 5F               (      exbasic.asm):04750                   CLRB                ; CLEAR CARRY FLAG
FA3A 8604             (      exbasic.asm):04751                   LDA  #$04           ; 4 SHIFTS
FA3C 0853             (      exbasic.asm):04752         L8BEA     ASL  FPA0+3         ; * SHIFT BOTTOM TWO BYTES OF
FA3E 0952             (      exbasic.asm):04753                   ROL  FPA0+2         ; * FPA0 LEFT ONE BIT (X2)
FA40 59               (      exbasic.asm):04754                   ROLB                ; IF OVERFLOW, ACCB <> 0
FA41 4A               (      exbasic.asm):04755                   DECA                ; * DECREMENT SHIFT COUNTER AND
FA42 26F8             (      exbasic.asm):04756                   BNE  L8BEA          ; * BRANCH IF NOT DONE
FA44 5D               (      exbasic.asm):04757                   TSTB                ; CHECK FOR OVERFLOW
FA45 260A             (      exbasic.asm):04758                   BNE  L8BFF          ; BRANCH IF OVERFLOW
FA47 A6E4             (      exbasic.asm):04759                   LDA  ,S             ; * GET NIBBLE COUNTER,
FA49 4A               (      exbasic.asm):04760                   DECA                ; * DECREMENT IT AND
FA4A 2705             (      exbasic.asm):04761                   BEQ  L8BFF          ; * BRANCH IF DONE
FA4C 8C01F0           (      exbasic.asm):04762                   CMPX #STRBUF+2      ; DO NOT DO A CONVERSION UNTIL A NON-ZERO
FA4F 270C             (      exbasic.asm):04763                   BEQ  L8C0B          ; BYTE IS FOUND - LEADING ZERO SUPPRESSION
FA51 CB30             (      exbasic.asm):04764         L8BFF     ADDB #'0            ; ADD IN ASCII ZERO
FA53 C139             (      exbasic.asm):04765                   CMPB #'9            ; COMPARE TO ASCII 9
FA55 2302             (      exbasic.asm):04766                   BLS  L8C07          ; BRANCH IF < 9
FA57 CB07             (      exbasic.asm):04767                   ADDB #7             ; ADD ASCII OFFSET IF HEX LETTER
FA59 E780             (      exbasic.asm):04768         L8C07     STB  ,X+            ; STORE HEX VALUE AND ADVANCE POINTER
FA5B 6F84             (      exbasic.asm):04769                   CLR  ,X             ; CLEAR NEXT BYTE - END OF STRING FLAG
FA5D 3504             (      exbasic.asm):04770         L8C0B     PULS B              ; * GET NIBBLE COUNTER,
FA5F 5A               (      exbasic.asm):04771                   DECB                ; * DECREMENT IT AND
FA60 26D5             (      exbasic.asm):04772                   BNE  L8BE5          ; * BRANCH IF NOT DONE
FA62 3262             (      exbasic.asm):04773                   LEAS $02,S          ; PURGE RETURN ADDRESS OFF OF STACK
FA64 8E01EF           (      exbasic.asm):04774                   LDX  #STRBUF+1      ; RESET POINTER
FA67 7EE790           (      exbasic.asm):04775                   JMP  LB518          ; SAVE STRING ON STRING STACK
                      (      exbasic.asm):04776         * PROCESS EXCLAMATION POINT
FA6A 8601             (      exbasic.asm):04777         L8E37     LDA  #$01           ; * SET SPACES
FA6C 9799             (      exbasic.asm):04778                   STA  VD9            ; * COUNTER = 1
                      (      exbasic.asm):04779         * PROCESS STRING ITEM - LIST
FA6E 5A               (      exbasic.asm):04780         L8E3B     DECB                ; DECREMENT FORMAT STRING LENGTH COUNTER
FA6F BDFC0B           (      exbasic.asm):04781                   JSR  L8FD8          ; SEND A '+' TO CONSOLE OUT IF VDA <>0
FA72 9D82             (      exbasic.asm):04782                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
FA74 10270093         (      exbasic.asm):04783                   LBEQ L8ED8          ; EXIT PRINT USING IF END OF LINE
FA78 D793             (      exbasic.asm):04784                   STB  VD3            ; SAVE REMAINDER FORMAT STRING LENGTH
FA7A BDE3D3           (      exbasic.asm):04785                   JSR  LB156          ; EVALUATE EXPRESSION
FA7D BDE3C3           (      exbasic.asm):04786                   JSR  LB146          ; 'TM' ERROR IF NUMERIC VARIABLE
FA80 9E52             (      exbasic.asm):04787                   LDX  FPA0+2         ; * GET ITEM - LIST DESCRIPTOR ADDRESS
FA82 9F4D             (      exbasic.asm):04788                   STX  V4D            ; * AND SAVE IT IN V4D
FA84 D699             (      exbasic.asm):04789                   LDB  VD9            ; GET SPACES COUNTER
FA86 BDE925           (      exbasic.asm):04790                   JSR  LB6AD          ; PUT ACCB BYTES INTO STRING SPACE & PUT DESCRIPTOR ON STRING STACK
FA89 BDEBDC           (      exbasic.asm):04791                   JSR  LB99F          ; PRINT THE FORMATTED STRING TO CONSOLE OUT
                      (      exbasic.asm):04792         * PAD FORMAT STRING WITH SPACES IF ITEM - LIST STRING < FORMAT STRING LENGTH
FA8C 9E52             (      exbasic.asm):04793                   LDX  FPA0+2         ; POINT X TO FORMATTED STRING DESCRIPTOR ADDRESS
FA8E D699             (      exbasic.asm):04794                   LDB  VD9            ; GET SPACES COUNTER
FA90 E084             (      exbasic.asm):04795                   SUBB ,X             ; SUBTRACT LENGTH OF FORMATTED STRING
FA92 5A               (      exbasic.asm):04796         L8E5F     DECB                ; DECREMENT DIFFERENCE
FA93 102B014F         (      exbasic.asm):04797                   LBMI L8FB3          ; GO INTERPRET ANOTHER ITEM - LIST
FA97 BDEBE9           (      exbasic.asm):04798                   JSR  LB9AC          ; PAD FORMAT STRING WITH A SPACE
FA9A 20F6             (      exbasic.asm):04799                   BRA  L8E5F          ; KEEP PADDING
                      (      exbasic.asm):04800         * PERCENT SIGN - PROCESS A %SPACES% COMMAND
FA9C D793             (      exbasic.asm):04801         L8E69     STB  VD3            ; * SAVE THE CURRENT FORMAT STRING
FA9E 9F0F             (      exbasic.asm):04802                   STX  TEMPTR         ; * COUNTER AND POINTER
FAA0 8602             (      exbasic.asm):04803                   LDA  #$02           ; INITIAL SPACES COUNTER = 2
FAA2 9799             (      exbasic.asm):04804                   STA  VD9            ; SAVE IN SPACES COUNTER
FAA4 A684             (      exbasic.asm):04805         L8E71     LDA  ,X             ; GET A CHARACTER FROM FORMAT STRING
FAA6 8125             (      exbasic.asm):04806                   CMPA #'%            ; COMPARE TO TERMINATOR CHARACTER
FAA8 27C4             (      exbasic.asm):04807                   BEQ  L8E3B          ; BRANCH IF END OF SPACES COMMAND
FAAA 8120             (      exbasic.asm):04808                   CMPA #'             ; BLANK
FAAC 2607             (      exbasic.asm):04809                   BNE  L8E82          ; BRANCH IF ILLEGAL CHARACTER
FAAE 0C99             (      exbasic.asm):04810                   INC  VD9            ; ADD ONE TO SPACES COUNTER
FAB0 3001             (      exbasic.asm):04811                   LEAX $01,X          ; MOVE FORMAT POINTER UP ONE
FAB2 5A               (      exbasic.asm):04812                   DECB                ; DECREMENT LENGTH COUNTER
FAB3 26EF             (      exbasic.asm):04813                   BNE  L8E71          ; BRANCH IF NOT END OF FORMAT STRING
FAB5 9E0F             (      exbasic.asm):04814         L8E82     LDX  TEMPTR         ; * RESTORE CURRENT FORMAT STRING COUNTER
FAB7 D693             (      exbasic.asm):04815                   LDB  VD3            ; * AND POINTER TO POSITION BEFORE SPACES COMMAND
FAB9 8625             (      exbasic.asm):04816                   LDA  #'%            ; SEND A '%' TO CONSOLE OUT AS A DEBUGGING AID
                      (      exbasic.asm):04817         * ERROR PROCESSOR - ILLEGAL CHARACTER OR BAD SYNTAX IN FORMAT STRING
FABB BDFC0B           (      exbasic.asm):04818         L8E88     JSR  L8FD8          ; SEND A '+' TO CONSOLE OUT IF VDA <> 0
FABE BDDB14           (      exbasic.asm):04819                   JSR  PUTCHR         ; SEND CHARACTER TO CONSOLE OUT
FAC1 2029             (      exbasic.asm):04820                   BRA  L8EB9          ; GET NEXT CHARACTER IN FORMAT STRING
                      (      exbasic.asm):04821         
                      (      exbasic.asm):04822         * PRINT RAM HOOK
FAC3 81B1             (      exbasic.asm):04823         XVEC9     CMPA #TOK_USING     ; USING TOKEN
FAC5 2701             (      exbasic.asm):04824                   BEQ  L8E95          ; BRANCH IF PRINT USING
FAC7 39               (      exbasic.asm):04825                   RTS
                      (      exbasic.asm):04826         
                      (      exbasic.asm):04827         * PRINT USING
                      (      exbasic.asm):04828         * VDA IS USED AS A STATUS BYTE: BIT 6 = COMMA FORCE
                      (      exbasic.asm):04829         * BIT 5=LEADING ASTERISK FORCE; BIT 4 = FLOATING $ FORCE
                      (      exbasic.asm):04830         * BIT 3 = PRE SIGN FORCE; BIT 2 = POST SIGN FORCE; BIT 0 = EXPONENTIAL FORCE
FAC8 3262             (      exbasic.asm):04831         L8E95     LEAS $02,S          ; PURGE RETURN ADDRESS OFF THE STACK
FACA BDE3D5           (      exbasic.asm):04832                   JSR  LB158          ; EVALUATE FORMAT STRING
FACD BDE3C3           (      exbasic.asm):04833                   JSR  LB146          ; 'TM' ERROR IF VARIABLE TYPE = NUMERIC
FAD0 C63B             (      exbasic.asm):04834                   LDB  #';            ; CHECK FOR ITEM LIST SEPARATOR
FAD2 BDE4EC           (      exbasic.asm):04835                   JSR  LB26F          ; SYNTAX CHECK FOR ;
FAD5 9E52             (      exbasic.asm):04836                   LDX  FPA0+2         ; * GET FORMAT STRING DESCRIPTOR ADDRESS
FAD7 9F95             (      exbasic.asm):04837                   STX  VD5            ; * AND SAVE IT IN VD5
FAD9 2006             (      exbasic.asm):04838                   BRA  L8EAE          ; GO PROCESS FORMAT STRING
FADB 9697             (      exbasic.asm):04839         L8EA8     LDA  VD7            ; *CHECK NEXT PRINT ITEM FLAG AND
FADD 2708             (      exbasic.asm):04840                   BEQ  L8EB4          ; *'FC' ERROR IF NO FURTHER PRINT ITEMS
FADF 9E95             (      exbasic.asm):04841                   LDX  VD5            ; RESET FORMAT STRING POINTER TO START OF STRING
FAE1 0F97             (      exbasic.asm):04842         L8EAE     CLR  VD7            ; RESET NEXT PRINT ITEM FLAG
FAE3 E684             (      exbasic.asm):04843                   LDB  ,X             ; GET LENGTH OF FORMAT STRING
FAE5 2603             (      exbasic.asm):04844                   BNE  L8EB7          ; INTERPRET FORMAT STRING IF LENGTH > 0
FAE7 7EE6C2           (      exbasic.asm):04845         L8EB4     JMP  LB44A          ; 'FC' ERROR IF FORMAT STRING = NULL
FAEA AE02             (      exbasic.asm):04846         L8EB7     LDX  $02,X          ; POINT X TO START OF FORMAT STRING
                      (      exbasic.asm):04847         * INTERPRET THE FORMAT STRING
FAEC 0F9A             (      exbasic.asm):04848         L8EB9     CLR  VDA            ; CLEAR THE STATUS BYTE
FAEE 0F99             (      exbasic.asm):04849         L8EBB     CLR  VD9            ; CLEAR LEFT DIGIT COUNTER
FAF0 A680             (      exbasic.asm):04850                   LDA  ,X+            ; GET A CHARACTER FROM FORMAT STRING
FAF2 8121             (      exbasic.asm):04851                   CMPA #'!            ; EXCLAMATION POINT?
FAF4 1027FF72         (      exbasic.asm):04852                   LBEQ L8E37          ; YES - STRING TYPE FORMAT
FAF8 8123             (      exbasic.asm):04853                   CMPA #'#            ; NUMBER SIGN? (DIGIT LOCATOR)
FAFA 275B             (      exbasic.asm):04854                   BEQ  L8F24          ; YES - NUMERIC TYPE FORMAT
FAFC 5A               (      exbasic.asm):04855                   DECB                ; DECREMENT FORMAT STRING LENGTH
FAFD 2616             (      exbasic.asm):04856                   BNE  L8EE2          ; BRANCH IF NOT DONE
FAFF BDFC0B           (      exbasic.asm):04857                   JSR  L8FD8          ; SEND A '+' TO CONSOLE OUT IF VDA <> 0
FB02 BDDB14           (      exbasic.asm):04858                   JSR  PUTCHR         ; SEND CHARACTER TO CONSOLE OUT
FB05 9D82             (      exbasic.asm):04859         L8ED2     JSR  GETCCH         ; GET CURRENT CHARACTER FROM BASIC
FB07 26D2             (      exbasic.asm):04860                   BNE  L8EA8          ; BRANCH IF NOT END OF LINE
FB09 9697             (      exbasic.asm):04861                   LDA  VD7            ; GET NEXT PRINT ITEM FLAG
FB0B 2603             (      exbasic.asm):04862         L8ED8     BNE  L8EDD          ; BRANCH IF MORE PRINT ITEMS
FB0D BDEB99           (      exbasic.asm):04863                   JSR  LB958          ; SEND A CARRIAGE RETURN TO CONSOLE OUT
FB10 9E95             (      exbasic.asm):04864         L8EDD     LDX  VD5            ; POINT X TO FORMAT STRING DESCRIPTOR
FB12 7EE8D1           (      exbasic.asm):04865                   JMP  LB659          ; RETURN ADDRESS AND LENGTH OF FORMAT STRING - EXIT PRINT USING
FB15 812B             (      exbasic.asm):04866         L8EE2     CMPA #'+            ; CHECK FOR '+' (PRE-SIGN FORCE)
FB17 2609             (      exbasic.asm):04867                   BNE  L8EEF          ; NO PLUS
FB19 BDFC0B           (      exbasic.asm):04868                   JSR  L8FD8          ; SEND A '+' TO CONSOLE OUT IF VDA <> 0
FB1C 8608             (      exbasic.asm):04869                   LDA  #$08           ; * LOAD THE STATUS BYTE WITH 8;
FB1E 979A             (      exbasic.asm):04870                   STA  VDA            ; * PRE-SIGN FORCE FLAG
FB20 20CC             (      exbasic.asm):04871                   BRA  L8EBB          ; INTERPRET THE REST OF THE FORMAT STRING
FB22 812E             (      exbasic.asm):04872         L8EEF     CMPA #'.            ; DECIMAL POINT?
FB24 274E             (      exbasic.asm):04873                   BEQ  L8F41          ; YES
FB26 8125             (      exbasic.asm):04874                   CMPA #'%            ; PERCENT SIGN?
FB28 1027FF70         (      exbasic.asm):04875                   LBEQ L8E69          ; YES
FB2C A184             (      exbasic.asm):04876                   CMPA ,X             ; COMPARE THE PRESENT FORMAT STRING INPUT
                      (      exbasic.asm):04877         *              ; CHARACTER TO THE NEXT ONE IN THE STRING
FB2E 268B             (      exbasic.asm):04878         L8EFB     BNE  L8E88          ; NO MATCH - ILLEGAL CHARACTER
                      (      exbasic.asm):04879         * TWO CONSECUTIVE EQUAL CHARACTERS IN FORMAT STRING
FB30 8124             (      exbasic.asm):04880                   CMPA #'$            ; DOLLAR SIGN?
FB32 2719             (      exbasic.asm):04881                   BEQ  L8F1A          ; YES - MAKE THE DOLLAR SIGN FLOAT
FB34 812A             (      exbasic.asm):04882                   CMPA #'*            ; ASTERISK?
FB36 26F6             (      exbasic.asm):04883                   BNE  L8EFB          ; NO - ILLEGAL CHARACTER
FB38 969A             (      exbasic.asm):04884                   LDA  VDA            ; * GRAB THE STATUS BYTE AND BET BIT 5
FB3A 8A20             (      exbasic.asm):04885                   ORA  #$20           ; * TO INDICATE THAT THE OUTPUT WILL
FB3C 979A             (      exbasic.asm):04886                   STA  VDA            ; * BE LEFT PADDED WITH ASTERISKS
FB3E C102             (      exbasic.asm):04887                   CMPB #2             ; * CHECK TO SEE IF THE $$ ARE THE LAST TWO
FB40 2511             (      exbasic.asm):04888                   BLO  L8F20          ; * CHARACTERS IN THE FORMAT STRING AND BRANCH IF SO
FB42 A601             (      exbasic.asm):04889                   LDA  $01,X          ; GET THE NEXT CHARACTER AFTER **
FB44 8124             (      exbasic.asm):04890                   CMPA #'$            ; CHECK FOR **$
FB46 260B             (      exbasic.asm):04891                   BNE  L8F20          ; CHECK FOR MORE CHARACTERS
FB48 5A               (      exbasic.asm):04892                   DECB                ; DECREMENT STRING LENGTH COUNTER
FB49 3001             (      exbasic.asm):04893                   LEAX $01,X          ; MOVE FORMAT STRING POINTER UP ONE
FB4B 0C99             (      exbasic.asm):04894                   INC  VD9            ; ADD ONE TO LEFT DIGIT COUNTER - FOR ASTERISK PAD AND
                      (      exbasic.asm):04895         *              ; FLOATING DOLLAR SIGN COMBINATION
FB4D 969A             (      exbasic.asm):04896         L8F1A     LDA  VDA            ; * GET THE STATUS BYTE AND SET
FB4F 8A10             (      exbasic.asm):04897                   ORA  #$10           ; * BIT 4 TO INDICATE A
FB51 979A             (      exbasic.asm):04898                   STA  VDA            ; * FLOATING DOLLAR SIGN
FB53 3001             (      exbasic.asm):04899         L8F20     LEAX $01,X          ; MOVE FORMAT STRING POINTER UP ONE
FB55 0C99             (      exbasic.asm):04900                   INC  VD9            ; ADD ONE TO LEFT DIGIT (FLOATING $ OR ASTERISK PAD)
                      (      exbasic.asm):04901         * PROCESS CHARACTERS TO THE LEFT OF THE DECIMAL POINT IN THE FORMAT STRING
FB57 0F98             (      exbasic.asm):04902         L8F24     CLR  VD8            ; CLEAR THE RIGHT DIGIT COUNTER
FB59 0C99             (      exbasic.asm):04903         L8F26     INC  VD9            ; ADD ONE TO LEFT DIGIT COUNTER
FB5B 5A               (      exbasic.asm):04904                   DECB                ; DECREMENT FORMAT STRING LENGTH COUNTER
FB5C 2749             (      exbasic.asm):04905                   BEQ  L8F74          ; BRANCH IF END OF FORMAT STRING
FB5E A680             (      exbasic.asm):04906                   LDA  ,X+            ; GET THE NEXT FORMAT CHARACTER
FB60 812E             (      exbasic.asm):04907                   CMPA #'.            ; DECIMAL POINT?
FB62 271E             (      exbasic.asm):04908                   BEQ  L8F4F          ; YES
FB64 8123             (      exbasic.asm):04909                   CMPA #'#            ; NUMBER SIGN?
FB66 27F1             (      exbasic.asm):04910                   BEQ  L8F26          ; YES
FB68 812C             (      exbasic.asm):04911                   CMPA #',            ; COMMA?
FB6A 2621             (      exbasic.asm):04912                   BNE  L8F5A          ; NO
FB6C 969A             (      exbasic.asm):04913                   LDA  VDA            ; * GET THE STATUS BYTE
FB6E 8A40             (      exbasic.asm):04914                   ORA  #$40           ; * AND SET BIT 6 WHICH IS THE
FB70 979A             (      exbasic.asm):04915                   STA  VDA            ; * COMMA SEPARATOR FLAG
FB72 20E5             (      exbasic.asm):04916                   BRA  L8F26          ; PROCESS MORE CHARACTERS TO LEFT OF DECIMAL POINT
                      (      exbasic.asm):04917         * PROCESS DECIMAL POINT IF NO DIGITS TO LEFT OF IT
FB74 A684             (      exbasic.asm):04918         L8F41     LDA  ,X             ; GET NEXT FORMAT CHARACTER
FB76 8123             (      exbasic.asm):04919                   CMPA #'#            ; IS IT A NUMBER SIGN?
FB78 1026FF3F         (      exbasic.asm):04920                   LBNE L8E88          ; NO
FB7C 8601             (      exbasic.asm):04921                   LDA  #1             ; * SET THE RIGHT DIGIT COUNTER TO 1 -
FB7E 9798             (      exbasic.asm):04922                   STA  VD8            ; * ALLOW ONE SPOT FOR DECIMAL POINT
FB80 3001             (      exbasic.asm):04923                   LEAX $01,X          ; MOVE FORMAT POINTER UP ONE
                      (      exbasic.asm):04924         * PROCESS DIGITS TO RIGHT OF DECIMAL POINT
FB82 0C98             (      exbasic.asm):04925         L8F4F     INC  VD8            ; ADD ONE TO RIGHT DIGIT COUNTER
FB84 5A               (      exbasic.asm):04926                   DECB                ; DECREMENT FORMAT LENGTH COUNTER
FB85 2720             (      exbasic.asm):04927                   BEQ  L8F74          ; BRANCH IF END OF FORMAT STRING
FB87 A680             (      exbasic.asm):04928                   LDA  ,X+            ; GET A CHARACTER FROM FORMAT STRING
FB89 8123             (      exbasic.asm):04929                   CMPA #'#            ; IS IT NUMBER SIGN?
FB8B 27F5             (      exbasic.asm):04930                   BEQ  L8F4F          ; YES - KEEP CHECKING
                      (      exbasic.asm):04931         * CHECK FOR EXPONENTIAL FORCE
FB8D 815E             (      exbasic.asm):04932         L8F5A     CMPA #$5E           ; CHECK FOR UP ARROW
FB8F 2616             (      exbasic.asm):04933                   BNE  L8F74          ; NO UP ARROW
FB91 A184             (      exbasic.asm):04934                   CMPA ,X             ; IS THE NEXT CHARACTER AN UP ARROW?
FB93 2612             (      exbasic.asm):04935                   BNE  L8F74          ; NO
FB95 A101             (      exbasic.asm):04936                   CMPA $01,X          ; AND THE NEXT CHARACTER?
FB97 260E             (      exbasic.asm):04937                   BNE  L8F74          ; NO
FB99 A102             (      exbasic.asm):04938                   CMPA $02,X          ; HOW ABOUT THE 4TH CHARACTER?
FB9B 260A             (      exbasic.asm):04939                   BNE  L8F74          ; NO, ALSO
FB9D C104             (      exbasic.asm):04940                   CMPB #4             ; * CHECK TO SEE IF THE 4 UP ARROWS ARE IN THE
FB9F 2506             (      exbasic.asm):04941                   BLO  L8F74          ; * FORMAT STRING AND BRANCH IF NOT
FBA1 C004             (      exbasic.asm):04942                   SUBB #4             ; * MOVE POINTER UP 4 AND SUBTRACT
FBA3 3004             (      exbasic.asm):04943                   LEAX $04,X          ; * FOUR FROM LENGTH
FBA5 0C9A             (      exbasic.asm):04944                   INC  VDA            ; INCREMENT STATUS BYTE - EXPONENTIAL FORM
                      (      exbasic.asm):04945         
                      (      exbasic.asm):04946         * CHECK FOR A PRE OR POST - SIGN FORCE AT END OF FORMAT STRING
FBA7 301F             (      exbasic.asm):04947         L8F74     LEAX -1,X           ; MOVE POINTER BACK ONE
FBA9 0C99             (      exbasic.asm):04948                   INC  VD9            ; ADD ONE TO LEFT DIGIT COUNTER FOR PRE-SIGN FORCE
FBAB 969A             (      exbasic.asm):04949                   LDA  VDA            ; * PRE-SIGN
FBAD 8508             (      exbasic.asm):04950                   BITA #$08           ; * FORCE AND
FBAF 2618             (      exbasic.asm):04951                   BNE  L8F96          ; * BRANCH IF SET
FBB1 0A99             (      exbasic.asm):04952                   DEC  VD9            ; DECREMENT LEFT DIGIT - NO PRE-SIGN FORCE
FBB3 5D               (      exbasic.asm):04953                   TSTB                ; * CHECK LENGTH COUNTER AND BRANCH
FBB4 2713             (      exbasic.asm):04954                   BEQ  L8F96          ; * IF END OF FORMAT STRING
FBB6 A684             (      exbasic.asm):04955                   LDA  ,X             ; GET NEXT FORMAT STRING CHARACTER
FBB8 802D             (      exbasic.asm):04956                   SUBA #'-            ; CHECK FOR MINUS SIGN
FBBA 2706             (      exbasic.asm):04957                   BEQ  L8F8F          ; BRANCH IF MINUS SIGN
FBBC 81FE             (      exbasic.asm):04958                   CMPA #$FE           ; * WAS CMPA #('+')-('-')
FBBE 2609             (      exbasic.asm):04959                   BNE  L8F96          ; BRANCH IF NO PLUS SIGN
FBC0 8608             (      exbasic.asm):04960                   LDA  #$08           ; GET THE PRE-SIGN FORCE FLAG
FBC2 8A04             (      exbasic.asm):04961         L8F8F     ORA  #$04           ; 'OR' IN POST-SIGN FORCE FLAG
FBC4 9A9A             (      exbasic.asm):04962                   ORA  VDA            ; 'OR' IN THE STATUS BYTE
FBC6 979A             (      exbasic.asm):04963                   STA  VDA            ; SAVE THE STATUS BYTE
FBC8 5A               (      exbasic.asm):04964                   DECB                ; DECREMENT FORMAT STRING LENGTH
                      (      exbasic.asm):04965         
                      (      exbasic.asm):04966         * EVALUATE NUMERIC ITEM-LIST
FBC9 9D82             (      exbasic.asm):04967         L8F96     JSR  GETCCH         ; GET CURRENT CHARACTER
FBCB 1027FF3C         (      exbasic.asm):04968                   LBEQ L8ED8          ; BRANCH IF END OF LINE
FBCF D793             (      exbasic.asm):04969                   STB  VD3            ; SAVE FORMAT STRING LENGTH WHEN FORMAT EVALUATION ENDED
FBD1 BDE3BE           (      exbasic.asm):04970                   JSR  LB141          ; EVALUATE EXPRESSION
FBD4 9699             (      exbasic.asm):04971                   LDA  VD9            ; GET THE LEFT DIGIT COUNTER
FBD6 9B98             (      exbasic.asm):04972                   ADDA VD8            ; ADD IT TO THE RIGHT DIGIT COUNTER
FBD8 8111             (      exbasic.asm):04973                   CMPA #17            ; *
FBDA 1022EAE4         (      exbasic.asm):04974                   LBHI LB44A          ; *'FC' ERROR IF MORE THAN 16 DIGITS AND DECIMAL POiNT
FBDE BDFC18           (      exbasic.asm):04975                   JSR  L8FE5          ; CONVERT ITEM-LIST TO FORMATTED ASCII STRING
FBE1 301F             (      exbasic.asm):04976                   LEAX -1,X           ; MOVE BUFFER POINTER BACK ONE
FBE3 BDEBD9           (      exbasic.asm):04977                   JSR  LB99C          ; DISPLAY THE FORMATTED STRING TO CONSOLE OUT
FBE6 0F97             (      exbasic.asm):04978         L8FB3     CLR  VD7            ; RESET NEXT PRINT ITEM FLAG
FBE8 9D82             (      exbasic.asm):04979                   JSR  GETCCH         ; GET CURRENT INPUT CHARACTER
FBEA 270D             (      exbasic.asm):04980                   BEQ  L8FC6          ; BRANCH IF END OF LINE
FBEC 9797             (      exbasic.asm):04981                   STA  VD7            ; SAVE CURRENT CHARACTER (<>0) IN NEXT PRINT ITEM FLAG
FBEE 813B             (      exbasic.asm):04982                   CMPA #';            ; * CHECK FOR ; - ITEM-LIST SEPARATOR AND
FBF0 2705             (      exbasic.asm):04983                   BEQ  L8FC4          ; * BRANCH IF SEMICOLON
FBF2 BDE4EA           (      exbasic.asm):04984                   JSR  LB26D          ; SYNTAX CHECK FOR COMMA
FBF5 2002             (      exbasic.asm):04985                   BRA  L8FC6          ; PROCESS NEXT PRINT ITEM
FBF7 9D7C             (      exbasic.asm):04986         L8FC4     JSR  GETNCH         ; GET NEXT INPUT CHARACTER
FBF9 9E95             (      exbasic.asm):04987         L8FC6     LDX  VD5            ; GET FORMAT STRING DESCRIPTOR ADDRESS
FBFB E684             (      exbasic.asm):04988                   LDB  ,X             ; GET LENGTH OF FORMAT STRING
FBFD D093             (      exbasic.asm):04989                   SUBB VD3            ; SUBTRACT AMOUNT OF FORMAT STRING LEFT AFTER LAST PRINT ITEM
FBFF AE02             (      exbasic.asm):04990                   LDX  $02,X          ; *GET FORMAT STRING START ADDRESS AND ADVANCE
FC01 3A               (      exbasic.asm):04991                   ABX                 ; *POINTER TO START OF UNUSED FORMAT STRING
FC02 D693             (      exbasic.asm):04992                   LDB  VD3            ; * GET AMOUNT OF UNUSED FORMAT STRING
FC04 1026FEE4         (      exbasic.asm):04993                   LBNE L8EB9          ; * REINTERPRET FORMAT STRING FROM THAT POINT
FC08 7EFB05           (      exbasic.asm):04994                   JMP  L8ED2          ; REINTERPRET FORMAT STRING FROM THE START IF ENTIRELY
                      (      exbasic.asm):04995         *         USED ON LAST PRINT ITEM
                      (      exbasic.asm):04996         
                      (      exbasic.asm):04997         * PRINT A '+' TO CONSOLE OUT IF THE STATUS BYTE <> 0
FC0B 3402             (      exbasic.asm):04998         L8FD8     PSHS A              ; RESTORE ACCA AND RETURN
FC0D 862B             (      exbasic.asm):04999                   LDA  #'+            ; GET ASCII PLUS SIGN
FC0F 0D9A             (      exbasic.asm):05000                   TST  VDA            ; * CHECK THE STATUS BYTE AND
FC11 2703             (      exbasic.asm):05001                   BEQ  L8FE3          ; * RETURN IF = 0
FC13 BDDB14           (      exbasic.asm):05002                   JSR  PUTCHR         ; SEND A CHARACTER TO CONSOLE OUT
FC16 3582             (      exbasic.asm):05003         L8FE3     PULS A,PC           ; RETURN ACCA AND RETURN
                      (      exbasic.asm):05004         
                      (      exbasic.asm):05005         * CONVERT ITEM-LIST TO DECIMAL ASCII STRING
FC18 CE01F2           (      exbasic.asm):05006         L8FE5     LDU  #STRBUF+4      ; POINT U TO STRING BUFFER
FC1B C620             (      exbasic.asm):05007                   LDB  #SPACE         ; BLANK
FC1D 969A             (      exbasic.asm):05008                   LDA  VDA            ; * GET THE STATUS FLAG AND
FC1F 8508             (      exbasic.asm):05009                   BITA #$08           ; * CHECK FOR A PRE-SIGN FORCE
FC21 2702             (      exbasic.asm):05010                   BEQ  L8FF2          ; * BRANCH IF NO PRE-SIGN FORCE
FC23 C62B             (      exbasic.asm):05011                   LDB  #'+            ; PLUS SIGN
FC25 0D54             (      exbasic.asm):05012         L8FF2     TST  FP0SGN         ; CHECK THE SIGN OF FPA0
FC27 2A04             (      exbasic.asm):05013                   BPL  L8FFA          ; BRANCH IF POSITIVE
FC29 0F54             (      exbasic.asm):05014                   CLR  FP0SGN         ; FORCE FPA0 SIGN TO BE POSITIVE
FC2B C62D             (      exbasic.asm):05015                   LDB  #'-            ; MINUS SIGN
FC2D E7C0             (      exbasic.asm):05016         L8FFA     STB  ,U+            ; SAVE THE SIGN IN BUFFER
FC2F C630             (      exbasic.asm):05017                   LDB  #'0            ; * PUT A ZERO INTO THE BUFFER
FC31 E7C0             (      exbasic.asm):05018                   STB  ,U+            ; *
FC33 8401             (      exbasic.asm):05019                   ANDA #$01           ; * CHECK THE EXPONENTIAL FORCE FLAG IN
FC35 10260107         (      exbasic.asm):05020                   LBNE L910D          ; * THE STATUS BYTE - BRANCH IF ACTIVE
FC39 8EEFFD           (      exbasic.asm):05021                   LDX  #LBDC0         ; POINT X TO FLOATING POINT 1E + 09
FC3C BDEEDD           (      exbasic.asm):05022                   JSR  LBCA0          ; COMPARE FPA0 TO (X)
FC3F 2B15             (      exbasic.asm):05023                   BMI  L9023          ; BRANCH IF FPA0 < 1E+09
FC41 BDF016           (      exbasic.asm):05024                   JSR  LBDD9          ; CONVERT FP NUMBER TO ASCII STRING
FC44 A680             (      exbasic.asm):05025         L9011     LDA  ,X+            ; * ADVANCE POINTER TO END OF
FC46 26FC             (      exbasic.asm):05026                   BNE  L9011          ; * ASCII STRING (ZERO BYTE)
FC48 A682             (      exbasic.asm):05027         L9015     LDA  ,-X            ; MOVE THE
FC4A A701             (      exbasic.asm):05028                   STA  $01,X          ; ENTIRE STRING
FC4C 8C01F1           (      exbasic.asm):05029                   CMPX #STRBUF+3      ; UP ONE
FC4F 26F7             (      exbasic.asm):05030                   BNE  L9015          ; BYTE
FC51 8625             (      exbasic.asm):05031                   LDA  #'%            ; * INSERT A % SIGN AT START OF
FC53 A784             (      exbasic.asm):05032                   STA  ,X             ; * STRING - OVERFLOW ERROR
FC55 39               (      exbasic.asm):05033                   RTS
                      (      exbasic.asm):05034         
FC56 964F             (      exbasic.asm):05035         L9023     LDA  FP0EXP         ; GET EXPONENT OF FPA0
FC58 9747             (      exbasic.asm):05036                   STA  V47            ; AND SAVE IT IN V74
FC5A 2703             (      exbasic.asm):05037                   BEQ  L902C          ; BRANCH IF FPA0 = 0
FC5C BDFE00           (      exbasic.asm):05038                   JSR  L91CD          ; CONVERT FPA0 TO NUMBER WITH 9 SIGNIFICANT
                      (      exbasic.asm):05039         *              ; PLACES TO LEFT OF DECIMAL POINT
FC5F 9647             (      exbasic.asm):05040         L902C     LDA  V47            ; GET BASE 10 EXPONENT OFFSET
FC61 102B0081         (      exbasic.asm):05041                   LBMI L90B3          ; BRANCH IF FPA0 < 100,000,000
FC65 40               (      exbasic.asm):05042                   NEGA                ; * CALCULATE THE NUMBER OF LEADING ZEROES TO INSERT -
FC66 9B99             (      exbasic.asm):05043                   ADDA VD9            ; * SUBTRACT BASE 10 EXPONENT OFFSET AND 9 (FPA0 HAS
FC68 8009             (      exbasic.asm):05044                   SUBA #$09           ; * 9 PLACES TO LEFT OF EXPONENT) FROM LEFT DIGIT COUNTER
FC6A BDFD1D           (      exbasic.asm):05045                   JSR  L90EA          ; PUT ACCA ZEROES IN STRING BUFFER
FC6D BDFE96           (      exbasic.asm):05046                   JSR  L9263          ; INITIALIZE DECIMAL POINT AND COMMA COUNTERS
FC70 BDFE35           (      exbasic.asm):05047                   JSR  L9202          ; CONVERT FPA0 TO DECIMAL ASCII IN THE STRING BUFFER
FC73 9647             (      exbasic.asm):05048                   LDA  V47            ; * GET BASE 10 EXPONENT AND PUT THAT MANY
FC75 BDFEB4           (      exbasic.asm):05049                   JSR  L9281          ; * ZEROES IN STRING BUFFER - STOP AT DECIMAL POINT
FC78 9647             (      exbasic.asm):05050                   LDA  V47            ; WASTED INSTRUCTION - SERVES NO PURPOSE
FC7A BDFE7C           (      exbasic.asm):05051                   JSR  L9249          ; CHECK FOR DECIMAL POINT
FC7D 9698             (      exbasic.asm):05052                   LDA  VD8            ; GET THE RIGHT DIGIT COUNTER
FC7F 2602             (      exbasic.asm):05053                   BNE  L9050          ; BRANCH IF RIGHT DIGlT COUNTER <> 0
FC81 335F             (      exbasic.asm):05054                   LEAU -1,U           ; * MOVE BUFFER POINTER BACK ONE - DELETE
                      (      exbasic.asm):05055         *                             ; * DECIMAL POINT IF NO RIGHT DIGITS SPECiFIED
FC83 4A               (      exbasic.asm):05056         L9050     DECA                ; SUBTRACT ONE (DECIMAL POINT)
FC84 BDFD1D           (      exbasic.asm):05057                   JSR  L90EA          ; PUT ACCA ZEROES INTO BUFFER (TRAILING ZEROES)
FC87 BDFDB8           (      exbasic.asm):05058         L9054     JSR  L9185          ; INSERT ASTERISK PADDING, FLOATING $, AND POST-SIGN
FC8A 4D               (      exbasic.asm):05059                   TSTA                ; WAS THERE A POST-SIGN?
FC8B 2706             (      exbasic.asm):05060                   BEQ  L9060          ; NO
FC8D C12A             (      exbasic.asm):05061                   CMPB #'*            ; IS THE FIRST CHARACTER AN $?
FC8F 2702             (      exbasic.asm):05062                   BEQ  L9060          ; YES
FC91 E7C0             (      exbasic.asm):05063                   STB  ,U+            ; STORE THE POST-SIGN
FC93 6FC4             (      exbasic.asm):05064         L9060     CLR  ,U             ; CLEAR THE LAST CHARACTER IN THE BUFFER
                      (      exbasic.asm):05065         *
                      (      exbasic.asm):05066         * REMOVE ANY EXTRA BLANKS OR ASTERISKS FROM THE
                      (      exbasic.asm):05067         * STRING BUFFER TO THE LEFT OF THE DECIMAL POINT
FC95 8E01F1           (      exbasic.asm):05068                   LDX  #STRBUF+3      ; POINT X TO THE START OF THE BUFFER
FC98 3001             (      exbasic.asm):05069         L9065     LEAX $01,X          ; MOVE BUFFER POINTER UP ONE
FC9A 9F0F             (      exbasic.asm):05070                   STX  TEMPTR         ; SAVE BUFFER POINTER IN TEMPTR
FC9C 963A             (      exbasic.asm):05071                   LDA  VARPTR+1       ; * GET ADDRESS OF DECIMAL POINT IN BUFFER, SUBTRACT
FC9E 9010             (      exbasic.asm):05072                   SUBA TEMPTR+1       ; * CURRENT POSITION AND SUBTRACT LEFT DIGIT COUNTER -
FCA0 9099             (      exbasic.asm):05073                   SUBA VD9            ; * THE RESULT WILL BE ZERO WHEN TEMPTR+1 IS POINTING
                      (      exbasic.asm):05074         *              ; * TO THE FIRST DIGIT OF THE FORMAT STRING
FCA2 2738             (      exbasic.asm):05075                   BEQ  L90A9          ; RETURN IF NO DIGITS TO LEFT OF THE DECiMAL POINT
FCA4 A684             (      exbasic.asm):05076                   LDA  ,X             ; GET THE CURRENT BUFFER CHARACTER
FCA6 8120             (      exbasic.asm):05077                   CMPA #SPACE         ; SPACE?
FCA8 27EE             (      exbasic.asm):05078                   BEQ  L9065          ; YES - ADVANCE POINTER
FCAA 812A             (      exbasic.asm):05079                   CMPA #'*            ; ASTERISK?
FCAC 27EA             (      exbasic.asm):05080                   BEQ  L9065          ; YES - ADVANCE POINTER
FCAE 4F               (      exbasic.asm):05081                   CLRA                ; A ZERO ON THE STACK IS END OF DATA POINTER
FCAF 3402             (      exbasic.asm):05082         L907C     PSHS A              ; PUSH A CHARACTER ONTO THE STACK
FCB1 A680             (      exbasic.asm):05083                   LDA  ,X+            ; GET NEXT CHARACTER FROM BUFFER
FCB3 812D             (      exbasic.asm):05084                   CMPA #'-            ; MINUS SIGN?
FCB5 27F8             (      exbasic.asm):05085                   BEQ  L907C          ; YES
FCB7 812B             (      exbasic.asm):05086                   CMPA #'+            ; PLUS SIGN?
FCB9 27F4             (      exbasic.asm):05087                   BEQ  L907C          ; YES
FCBB 8124             (      exbasic.asm):05088                   CMPA #'$            ; DOLLAR SIGN?
FCBD 27F0             (      exbasic.asm):05089                   BEQ  L907C          ; YES
FCBF 8130             (      exbasic.asm):05090                   CMPA #'0            ; ZERO?
FCC1 260E             (      exbasic.asm):05091                   BNE  L909E          ; NO - ERROR
FCC3 A601             (      exbasic.asm):05092                   LDA  $01,X          ; GET CHARACTER FOLLOWING ZERO
FCC5 8D16             (      exbasic.asm):05093                   BSR  L90AA          ; CLEAR CARRY IF NUMERIC
FCC7 2508             (      exbasic.asm):05094                   BLO  L909E          ; BRANCH IF NOT A NUMERIC CHARACTER - ERROR
FCC9 3502             (      exbasic.asm):05095         L9096     PULS A              ; * PULL A CHARACTER OFF OF THE STACK
FCCB A782             (      exbasic.asm):05096                   STA  ,-X            ; * AND PUT IT BACK IN THE STRING BUFFER
FCCD 26FA             (      exbasic.asm):05097                   BNE  L9096          ; * KEEP GOING UNTIL ZERO FLAG
FCCF 20C7             (      exbasic.asm):05098                   BRA  L9065          ; KEEP CLEANING UP THE INPUT BUFFER
FCD1 3502             (      exbasic.asm):05099         L909E     PULS A              ;
FCD3 4D               (      exbasic.asm):05100                   TSTA                ; * THE STACK AND EXIT WHEN
FCD4 26FB             (      exbasic.asm):05101                   BNE  L909E          ; * ZERO FLAG FOUND
FCD6 9E0F             (      exbasic.asm):05102                   LDX  TEMPTR         ; GET THE STRING BUFFER START POINTER
FCD8 8625             (      exbasic.asm):05103                   LDA  #'%            ; * PUT A % SIGN BEFORE THE ERROR POSITION TO
FCDA A782             (      exbasic.asm):05104                   STA  ,-X            ; * INDICATE AN ERROR
FCDC 39               (      exbasic.asm):05105         L90A9     RTS
                      (      exbasic.asm):05106         *
                      (      exbasic.asm):05107         * CLEAR CARRY IF NUMERIC
FCDD 8130             (      exbasic.asm):05108         L90AA     CMPA #'0            ; ASCII ZERO
FCDF 2504             (      exbasic.asm):05109                   BLO  L90B2          ; RETURN IF ACCA < ASCII 0
FCE1 803A             (      exbasic.asm):05110                   SUBA #$3A           ; *  #'9'+1
FCE3 80C6             (      exbasic.asm):05111                   SUBA #$C6           ; * #-('9'+1)  CARRY CLEAR IF NUMERIC
FCE5 39               (      exbasic.asm):05112         L90B2     RTS
                      (      exbasic.asm):05113         *
                      (      exbasic.asm):05114         * PROCESS AN ITEM-LIST WHICH IS < 100,000,000
FCE6 9698             (      exbasic.asm):05115         L90B3     LDA  VD8            ; GET RIGHT DIGIT COUNTER
FCE8 2701             (      exbasic.asm):05116                   BEQ  L90B8          ; BRANCH IF NO FORMATTED DIGITS TO THE RIGHT OF DECIMAL PT
FCEA 4A               (      exbasic.asm):05117                   DECA                ; SUBTRACT ONE FOR DECIMAL POINT
FCEB 9B47             (      exbasic.asm):05118         L90B8     ADDA V47            ; *ADD THE BASE 10 EXPONENT OFFSET - ACCA CONTAINS THE
                      (      exbasic.asm):05119         *         *NUMBER OF SHIFTS REQUIRED TO ADJUST FPA0 TO THE SPECIFIED
                      (      exbasic.asm):05120         *         *NUMBER OF DlGITS TO THE RIGHT OF THE DECIMAL POINT
FCED 2B01             (      exbasic.asm):05121                   BMI  L90BD          ; IF ACCA >= 0 THEN NO SHIFTS ARE REQUIRED
FCEF 4F               (      exbasic.asm):05122                   CLRA                ; FORCE SHIFT COUNTER = 0
FCF0 3402             (      exbasic.asm):05123         L90BD     PSHS A              ; SAVE INITIAL SHIFT COUNTER ON THE STACK
FCF2 2A0A             (      exbasic.asm):05124         L90BF     BPL  L90CB          ; EXIT ROUTINE IF POSITIVE
FCF4 3402             (      exbasic.asm):05125                   PSHS A              ; SAVE SHIFT COUNTER ON STACK
FCF6 BDEDBF           (      exbasic.asm):05126                   JSR  LBB82          ; DIVIDE FPA0 BY 10 - SHIFT ONE DIGIT TO RIGHT
FCF9 3502             (      exbasic.asm):05127                   PULS A              ; GET SHIFT COUNTER FROM THE STACK
FCFB 4C               (      exbasic.asm):05128                   INCA                ; BUMP SHIFT COUNTER UP BY ONE
FCFC 20F4             (      exbasic.asm):05129                   BRA  L90BF          ; CHECK FOR FURTHER DIVISION
FCFE 9647             (      exbasic.asm):05130         L90CB     LDA  V47            ; * GET BASE 10 EXPONENT OFFSET, ADD INITIAL SHIFT COUNTER
FD00 A0E0             (      exbasic.asm):05131                   SUBA ,S+            ; * AND SAVE NEW BASE 10 EXPONENT OFFSET - BECAUSE
FD02 9747             (      exbasic.asm):05132                   STA  V47            ; * FPA0 WAS SHIFTED ABOVE
FD04 8B09             (      exbasic.asm):05133                   ADDA #$09           ; * ADD NINE (SIGNIFICANT PLACES) AND BRANCH IF THERE ARE NO
FD06 2B19             (      exbasic.asm):05134                   BMI  L90EE          ; * ZEROES TO THE LEFT OF THE DECIMAL POINT IN THIS PRINT ITEM
FD08 9699             (      exbasic.asm):05135                   LDA  VD9            ; *DETERMINE HOW MANY FILLER ZEROES TO THE LEFT OF THE DECIMAL
FD0A 8009             (      exbasic.asm):05136                   SUBA #$09           ; *POINT. GET THE NUMBER OF FORMAT PLACES TO LEFT OF DECIMAL
FD0C 9047             (      exbasic.asm):05137                   SUBA V47            ; *POINT, SUBTRACT THE BASE 10 EXPONENT OFFSET AND THE CONSTANT 9
FD0E 8D0D             (      exbasic.asm):05138                   BSR  L90EA          ; *(UNNORMALIZATION)-THEN OUTPUT THAT MANY ZEROES TO THE BUFFER
FD10 BDFE96           (      exbasic.asm):05139                   JSR  L9263          ; INITIALIZE DECIMAL POINT AND COMMA COUNTERS
FD13 201D             (      exbasic.asm):05140                   BRA  L90FF          ; PROCESS THE REMAINDER OF THE PRINT ITEM
                      (      exbasic.asm):05141         *
                      (      exbasic.asm):05142         * PUT (ACCA+1) ASCII ZEROES IN BUFFER
FD15 3402             (      exbasic.asm):05143         L90E2     PSHS A              ; SAVE ZERO COUNTER
FD17 8630             (      exbasic.asm):05144                   LDA  #'0            ; * INSERT A ZERO INTO
FD19 A7C0             (      exbasic.asm):05145                   STA  ,U+            ; * THE BUFFER
FD1B 3502             (      exbasic.asm):05146                   PULS A              ; RESTORE ZERO COUNTER
                      (      exbasic.asm):05147         
                      (      exbasic.asm):05148         * PUT ACCA ASCII ZEROES INTO THE BUFFER
FD1D 4A               (      exbasic.asm):05149         L90EA     DECA                ; DECREMENT ZERO COUNTER
FD1E 2AF5             (      exbasic.asm):05150                   BPL  L90E2          ; BRANCH IF NOT DONE
FD20 39               (      exbasic.asm):05151                   RTS
                      (      exbasic.asm):05152         
FD21 9699             (      exbasic.asm):05153         L90EE     LDA  VD9            ; * GET THE LEFT DIGIT COUNTER AND PUT
FD23 8DF8             (      exbasic.asm):05154                   BSR  L90EA          ; * THAT MANY ZEROES IN THE STRiNG BUFFER
FD25 BDFE80           (      exbasic.asm):05155                   JSR  L924D          ; PUT THE DECIMAL POINT IN THE STRING BUFFER
FD28 86F7             (      exbasic.asm):05156                   LDA  #-9            ; *DETERMINE HOW MANY FILLER ZEROES BETWEEN THE DECIMAL POINT
FD2A 9047             (      exbasic.asm):05157                   SUBA V47            ; *AND SIGNIFICANT DATA. SUBTRACT BASE 10 EXPONENT FROM -9
FD2C 8DEF             (      exbasic.asm):05158                   BSR  L90EA          ; *(UNNORMALIZATION) AND OUTPUT THAT MANY ZEROES TO BUFFER
FD2E 0F45             (      exbasic.asm):05159                   CLR  V45            ; CLEAR THE DECIMAL POINT COUNTER - SUPPRESS THE DECIMAL POINT
FD30 0F97             (      exbasic.asm):05160                   CLR  VD7            ; CLEAR THE COMMA COUNTER - SUPPRESS COMMAS
FD32 BDFE35           (      exbasic.asm):05161         L90FF     JSR  L9202          ; DECODE FPA0 INTO A DECIMAL ASCII STRING
FD35 9698             (      exbasic.asm):05162                   LDA  VD8            ; GET THE RIGHT DIGIT COUNTER
FD37 2602             (      exbasic.asm):05163                   BNE  L9108          ; BRANCH IF RIGHT DIGIT COUNTER <> 0
FD39 DE39             (      exbasic.asm):05164                   LDU  VARPTR         ; RESET BUFFER PTR TO THE DECIMAL POINT IF NO DIGITS TO RIGHT
FD3B 9B47             (      exbasic.asm):05165         L9108     ADDA V47            ; *ADD BASE 10 EXPONENT - A POSITIVE ACCA WILL CAUSE THAT MANY
                      (      exbasic.asm):05166         * *FILLER ZEROES TO BE OUTPUT ; TO THE RIGHT OF LAST SIGNIFICANT DATA
                      (      exbasic.asm):05167         *         *SIGNIFICANT DATA
FD3D 16FF43           (      exbasic.asm):05168                   LBRA L9050          ; INSERT LEADING ASTERISKS, FLOATING DOLLAR SIGN, ETC
                      (      exbasic.asm):05169         *
                      (      exbasic.asm):05170         * FORCE THE NUMERIC OUTPUT FORMAT TO BE EXPONENTIAL FORMAT
FD40 964F             (      exbasic.asm):05171         L910D     LDA  FP0EXP         ; * GET EXPONENT OF FPA0 AND
FD42 3402             (      exbasic.asm):05172                   PSHS A              ; * SAVE IT ON THE STACK
FD44 2703             (      exbasic.asm):05173                   BEQ  L9116          ; BRANCH IF FPA0 = 0
FD46 BDFE00           (      exbasic.asm):05174                   JSR  L91CD          ; *CONVERT FPA0 INTO A NUMBER WITH 9 SIGNIFICANT
                      (      exbasic.asm):05175         *         *DIGITS TO THE LEFT OF THE DECIMAL POINT
FD49 9698             (      exbasic.asm):05176         L9116     LDA  VD8            ; GET THE RIGHT DIGIT COUNTER
FD4B 2701             (      exbasic.asm):05177                   BEQ  L911B          ; BRANCH IF NO FORMATTED DIGITS TO THE RIGHT
FD4D 4A               (      exbasic.asm):05178                   DECA                ; SUBTRACT ONE FOR THE DECIMAL POINT
FD4E 9B99             (      exbasic.asm):05179         L911B     ADDA VD9            ; ADD TO THE LEFT DIGIT COUNTER
FD50 7F01F1           (      exbasic.asm):05180                   CLR  STRBUF+3       ; CLEAR BUFFER BYTE AS TEMPORARY STORAGE LOCATION
FD53 D69A             (      exbasic.asm):05181                   LDB  VDA            ; * GET THE STATUS BYTE FOR A
FD55 C404             (      exbasic.asm):05182                   ANDB #$04           ; * POST-BYTE FORCE; BRANCH IF
FD57 2603             (      exbasic.asm):05183                   BNE  L9129          ; * A POST-BYTE FORCE
FD59 7301F1           (      exbasic.asm):05184                   COM  STRBUF+3       ; TOGGLE BUFFER BYTE TO -1 IF NO POST-BYTE FORCE
FD5C BB01F1           (      exbasic.asm):05185         L9129     ADDA STRBUF+3       ; SUBTRACT 1 IF NO POST BYTE FORCE
FD5F 8009             (      exbasic.asm):05186                   SUBA #$09           ; *SUBTRACT 9 (DUE TO THE CONVERSION TO 9
                      (      exbasic.asm):05187         *         *SIGNIFICANT DIGITS TO LEFT OF DECIMAL POINT)
FD61 3402             (      exbasic.asm):05188                   PSHS A              ; * SAVE SHIFT COUNTER ON THE STACK - ACCA CONTAINS THE NUMBER
                      (      exbasic.asm):05189         *         OF   SHIFTS REQUIRED TO ADJUST FPA0 FOR THE NUMBER OF
                      (      exbasic.asm):05190         *         FORMATTED PLACES TO THE RIGHT OF THE DECIMAL POINT.
FD63 2A0A             (      exbasic.asm):05191         L9130     BPL  L913C          ; NO MORE SHIFTS WHEN ACCA >= 0
FD65 3402             (      exbasic.asm):05192                   PSHS A              ; SAVE SHIFT COUNTER
FD67 BDEDBF           (      exbasic.asm):05193                   JSR  LBB82          ; DIVIDE FPA0 BY 10 - SHIFT TO RIGHT ONE
FD6A 3502             (      exbasic.asm):05194                   PULS A              ; RESTORE THE SHIFT COUNTER
FD6C 4C               (      exbasic.asm):05195                   INCA                ; ADD 1 TO SHIFT COUNTER
FD6D 20F4             (      exbasic.asm):05196                   BRA  L9130          ; CHECK FOR FURTHER SHIFTING (DIVISION)
FD6F A6E4             (      exbasic.asm):05197         L913C     LDA  ,S             ; *GET THE INITIAL VALUE OF THE SHIFT COUNTER
FD71 2B01             (      exbasic.asm):05198                   BMI  L9141          ; *AND BRANCH IF SHIFTING HAS TAKEN PLACE
FD73 4F               (      exbasic.asm):05199                   CLRA                ; RESET ACCA IF NO SHIFTING HAS TAKEN PLACE
FD74 40               (      exbasic.asm):05200         L9141     NEGA                ; *CALCULATE THE POSITION OF THE DECIMAL POINT BY
FD75 9B99             (      exbasic.asm):05201                   ADDA VD9            ; *NEGATING SHIFT COUNTER, ADDING THE LEFT DIGIT COUNTER
FD77 4C               (      exbasic.asm):05202                   INCA                ; *PLUS ONE AND THE POST-BYTE POSlTION, IF USED
FD78 BB01F1           (      exbasic.asm):05203                   ADDA STRBUF+3       ; *
FD7B 9745             (      exbasic.asm):05204                   STA  V45            ; SAVE DECIMAL POINT COUNTER
FD7D 0F97             (      exbasic.asm):05205                   CLR  VD7            ; CLEAR COMMA COUNTER - NO COMMAS INSERTED
FD7F BDFE35           (      exbasic.asm):05206                   JSR  L9202          ; CONVERT FPA0 INTO ASCII DECIMAL STRING
FD82 3502             (      exbasic.asm):05207                   PULS A              ; * GET THE INITIAL VALUE OF SHIFT COUNTER AND
FD84 BDFEB4           (      exbasic.asm):05208                   JSR  L9281          ; * INSERT THAT MANY ZEROES INTO THE BUFFER
FD87 9698             (      exbasic.asm):05209                   LDA  VD8            ; *GET THE RIGHT DIGIT COUNTER AND BRANCH
FD89 2602             (      exbasic.asm):05210                   BNE  L915A          ; *IF NOT ZERO
FD8B 335F             (      exbasic.asm):05211                   LEAU -1,U           ; MOVE BUFFER POINTER BACK ONE
                      (      exbasic.asm):05212         
                      (      exbasic.asm):05213         * CALCULATE VALUE OF EXPONENT AND PUT IN STRING BUFFER
FD8D E6E0             (      exbasic.asm):05214         L915A     LDB  ,S+            ; GET ORIGINAL EXPONENT OF FPA0
FD8F 2709             (      exbasic.asm):05215                   BEQ  L9167          ; BRANCH IF EXPONENT = 0
FD91 D647             (      exbasic.asm):05216                   LDB  V47            ; GET BASE 10 EXPONENT
FD93 CB09             (      exbasic.asm):05217                   ADDB #$09           ; ADD 9 FOR 9 SIGNIFICANT DIGIT CONVERSION
FD95 D099             (      exbasic.asm):05218                   SUBB VD9            ; SUBTRACT LEFT DIGIT COUNTER
FD97 F001F1           (      exbasic.asm):05219                   SUBB STRBUF+3       ; ADD ONE TO EXPONENT IF POST-SIGN FORCE
FD9A 862B             (      exbasic.asm):05220         L9167     LDA  #'+            ; PLUS SIGN
FD9C 5D               (      exbasic.asm):05221                   TSTB                ; TEST EXPONENT
FD9D 2A03             (      exbasic.asm):05222                   BPL  L916F          ; BRANCH IF POSITIVE EXPONENT
FD9F 862D             (      exbasic.asm):05223                   LDA  #'-            ; MINUS SIGN
FDA1 50               (      exbasic.asm):05224                   NEGB                ; CONVERT EXPONENT TO POSITIVE NUMBER
FDA2 A741             (      exbasic.asm):05225         L916F     STA  $01,U          ; PUT SIGN OF EXPONENT IN STRING BUFFER
FDA4 8645             (      exbasic.asm):05226                   LDA  #'E            ; * PUT AN 'E' (EXPONENTIATION FLAG) IN
FDA6 A7C1             (      exbasic.asm):05227                   STA  ,U++           ; * BUFFER AND SKIP OVER THE SIGN
FDA8 862F             (      exbasic.asm):05228                   LDA  #$2F           ; * WAS LDA #'0'-1
                      (      exbasic.asm):05229         *CONVERT BINARY EXPONENT IN ACCB TO ASCII VALUE IN ACCA
FDAA 4C               (      exbasic.asm):05230         L9177     INCA                ; ADD ONE TO TENS DIGIT COUNTER
FDAB C00A             (      exbasic.asm):05231                   SUBB #10            ; *SUBTRACT 10 FROM EXPONENT AND ADD ONE TO TENS
FDAD 24FB             (      exbasic.asm):05232                   BCC  L9177          ; * DIGIT IF NO CARRY. TENS DIGIT DONE IF THERE IS A CARRY
FDAF CB3A             (      exbasic.asm):05233                   ADDB #$3A           ; WAS ADDB #'9'+1
FDB1 EDC1             (      exbasic.asm):05234                   STD  ,U++           ; SAVE EXPONENT IN BUFFER
FDB3 6FC4             (      exbasic.asm):05235                   CLR  ,U             ; CLEAR FINAL BYTE IN BUFFER - PRINT TERMINATOR
FDB5 7EFC87           (      exbasic.asm):05236                   JMP  L9054          ; INSERT ASTERISK PADDING, FLOATING DOLLAR SIGN, ETC.
                      (      exbasic.asm):05237         
                      (      exbasic.asm):05238         * INSERT ASTERISK PADDING, FLOATING $ AND PRE-SIGN
FDB8 8E01F2           (      exbasic.asm):05239         L9185     LDX  #STRBUF+4      ; POINT X TO START OF PRINT ITEM BUFFER
FDBB E684             (      exbasic.asm):05240                   LDB  ,X             ; * GET SIGN BYTE OF ITEM-LIST BUFFER
FDBD 3404             (      exbasic.asm):05241                   PSHS B              ; * AND SAVE IT ON THE STACK
FDBF 8620             (      exbasic.asm):05242                   LDA  #SPACE         ; DEFAULT PAD WITH BLANKS
FDC1 D69A             (      exbasic.asm):05243                   LDB  VDA            ; * GET STATUS BYTE AND CHECK FOR
FDC3 C520             (      exbasic.asm):05244                   BITB #$20           ; * ASTERISK LEFT PADDING
FDC5 3504             (      exbasic.asm):05245                   PULS B              ; GET SIGN BYTE AGAIN
FDC7 2708             (      exbasic.asm):05246                   BEQ  L919E          ; BRANCH IF NO PADDING
FDC9 862A             (      exbasic.asm):05247                   LDA  #'*            ; PAD WITH ASTERISK
FDCB C120             (      exbasic.asm):05248                   CMPB #SPACE         ; WAS THE FIRST BYTE A BLANK (POSITIVE)?
FDCD 2602             (      exbasic.asm):05249                   BNE  L919E          ; NO
FDCF 1F89             (      exbasic.asm):05250                   TFR  A,B            ; TRANSFER PAD CHARACTER TO ACCB
FDD1 3404             (      exbasic.asm):05251         L919E     PSHS B              ; SAVE FIRST CHARACTER ON STACK
FDD3 A780             (      exbasic.asm):05252         L91A0     STA  ,X+            ; STORE PAD CHARACTER IN BUFFER
FDD5 E684             (      exbasic.asm):05253                   LDB  ,X             ; GET NEXT CHARACTER IN BUFFER
FDD7 2710             (      exbasic.asm):05254                   BEQ  L91B6          ; INSERT A ZERO IF END OF BUFFER
FDD9 C145             (      exbasic.asm):05255                   CMPB #'E            ; * CHECK FOR AN 'E' AND
FDDB 270C             (      exbasic.asm):05256                   BEQ  L91B6          ; * PUT A ZERO BEFORE IT
FDDD C130             (      exbasic.asm):05257                   CMPB #'0            ; * REPLACE LEADING ZEROES WITH
FDDF 27F2             (      exbasic.asm):05258                   BEQ  L91A0          ; * PAD CHARACTERS
FDE1 C12C             (      exbasic.asm):05259                   CMPB #',            ; * REPLACE LEADING COMMAS
FDE3 27EE             (      exbasic.asm):05260                   BEQ  L91A0          ; * WITH PAD CHARACTERS
FDE5 C12E             (      exbasic.asm):05261                   CMPB #'.            ; * CHECK FOR DECIMAL POINT
FDE7 2604             (      exbasic.asm):05262                   BNE  L91BA          ; * AND DON'T PUT A ZERO BEFORE IT
FDE9 8630             (      exbasic.asm):05263         L91B6     LDA  #'0            ; * REPLACE PREVIOUS CHARACTER
FDEB A782             (      exbasic.asm):05264                   STA  ,-X            ; * WITH A ZERO
FDED 969A             (      exbasic.asm):05265         L91BA     LDA  VDA            ; * GET STATUS BYTE, CHECK
FDEF 8510             (      exbasic.asm):05266                   BITA #$10           ; * FOR FLOATING $
FDF1 2704             (      exbasic.asm):05267                   BEQ  L91C4          ; * BRANCH IF NO FLOATING $
FDF3 C624             (      exbasic.asm):05268                   LDB  #'$            ; * STORE A $ IN
FDF5 E782             (      exbasic.asm):05269                   STB  ,-X            ; * BUFFER
FDF7 8404             (      exbasic.asm):05270         L91C4     ANDA #$04           ; CHECK PRE-SIGN FLAG
FDF9 3504             (      exbasic.asm):05271                   PULS B              ; GET SIGN CHARACTER
FDFB 2602             (      exbasic.asm):05272                   BNE  L91CC          ; RETURN IF POST-SIGN REQUIRED
FDFD E782             (      exbasic.asm):05273                   STB  ,-X            ; STORE FIRST CHARACTER
FDFF 39               (      exbasic.asm):05274         L91CC     RTS
                      (      exbasic.asm):05275         *
                      (      exbasic.asm):05276         * CONVERT FPA0 INTO A NUMBER OF THE FORM - NNN,NNN,NNN X 10**M.
                      (      exbasic.asm):05277         * THE EXPONENT M WILL BE RETURNED IN V47 (BASE 10 EXPONENT).
FE00 3440             (      exbasic.asm):05278         L91CD     PSHS U              ; SAVE BUFFER POINTER
FE02 4F               (      exbasic.asm):05279                   CLRA                ; INITIAL EXPONENT OFFSET = 0
FE03 9747             (      exbasic.asm):05280         L91D0     STA  V47            ; SAVE EXPONENT OFFSET
FE05 D64F             (      exbasic.asm):05281                   LDB  FP0EXP         ; GET EXPONENT OF FPA0
FE07 C180             (      exbasic.asm):05282                   CMPB #$80           ; * COMPARE TO EXPONENT OF .5
FE09 2211             (      exbasic.asm):05283                   BHI  L91E9          ; * AND BRANCH IF FPA0 > = 1.0
                      (      exbasic.asm):05284         
                      (      exbasic.asm):05285         * IF FPA0 < 1.0, MULTIPLY IT BY 1E+09 UNTIL IT IS >= 1
FE0B 8EEFFD           (      exbasic.asm):05286                   LDX  #LBDC0         ; POINT X TO FP NUMBER (1E+09)
FE0E BDED07           (      exbasic.asm):05287                   JSR  LBACA          ; MULTIPLY FPA0 BY 1E+09
FE11 9647             (      exbasic.asm):05288                   LDA  V47            ; GET EXPONENT OFFSET
FE13 8009             (      exbasic.asm):05289                   SUBA #$09           ; SUBTRACT 9 (BECAUSE WE MULTIPLIED BY 1E+09 ABOVE)
FE15 20EC             (      exbasic.asm):05290                   BRA  L91D0          ; CHECK TO SEE IF > 1.0
FE17 BDEDBF           (      exbasic.asm):05291         L91E4     JSR  LBB82          ; DIVIDE FPA0 BY 10
FE1A 0C47             (      exbasic.asm):05292                   INC  V47            ; INCREMENT EXPONENT OFFSET
FE1C 8EEFF8           (      exbasic.asm):05293         L91E9     LDX  #LBDBB         ; POINT X TO FP NUMBER (999,999,999)
FE1F BDEEDD           (      exbasic.asm):05294                   JSR  LBCA0          ; COMPARE FPA0 TO X
FE22 2EF3             (      exbasic.asm):05295                   BGT  L91E4          ; BRANCH IF FPA0 > 999,999,999
FE24 8EEFF3           (      exbasic.asm):05296         L91F1     LDX  #LBDB6         ; POINT X TO FP NUMBER (99,999,999.9)
FE27 BDEEDD           (      exbasic.asm):05297                   JSR  LBCA0          ; COMPARE FPA0 TO X
FE2A 2E07             (      exbasic.asm):05298                   BGT  L9200          ; RETURN IF 999,999,999 > FPA0 > 99,999,999.9
FE2C BDEDA7           (      exbasic.asm):05299                   JSR  LBB6A          ; MULTIPLY FPA0 BY 10
FE2F 0A47             (      exbasic.asm):05300                   DEC  V47            ; DECREMENT EXPONENT OFFSET
FE31 20F1             (      exbasic.asm):05301                   BRA  L91F1          ; KEEP UNNORMALIZING
FE33 35C0             (      exbasic.asm):05302         L9200     PULS U,PC           ; RESTORE BUFFER POINTER AND RETURN
                      (      exbasic.asm):05303         *
                      (      exbasic.asm):05304         * CONVERT FPA0 INTO AN INTEGER, THEN DECODE IT
                      (      exbasic.asm):05305         * INTO A DECIMAL ASCII STRING IN THE BUFFER
FE35 3440             (      exbasic.asm):05306         L9202     PSHS U              ; SAVE BUFFER POINTER
FE37 BDEBF1           (      exbasic.asm):05307                   JSR  LB9B4          ; ADD .5 TO FPA0 (ROUND OFF)
FE3A BDEF05           (      exbasic.asm):05308                   JSR  LBCC8          ; CONVERT FPA0 TO INTEGER FORMAT
FE3D 3540             (      exbasic.asm):05309                   PULS U              ; RESTORE BUFFER POINTER
                      (      exbasic.asm):05310         *
                      (      exbasic.asm):05311         * CONVERT FPA0 INTO A DECIMAL ASCII STRING
FE3F 8EF102           (      exbasic.asm):05312                   LDX  #LBEC5         ; POINT X TO UNNORMALIZED POWERS OF 10
FE42 C680             (      exbasic.asm):05313                   LDB  #$80           ; INITIALIZE DIGIT COUNTER TO 0 + $80.
                      (      exbasic.asm):05314         * BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA
                      (      exbasic.asm):05315         * IS NEGATIVE. WHEN YOU 'ADD' A NEGATIVE MANTISSA, IT IS
                      (      exbasic.asm):05316         * THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB
                      (      exbasic.asm):05317         * IS HOW THIS ROUTINE KNOWS THAT A 'SUBTRACTION' IS OCCURRING.
FE44 8D36             (      exbasic.asm):05318         L9211     BSR  L9249          ; CHECK FOR COMMA INSERTION
FE46 9653             (      exbasic.asm):05319         L9213     LDA  FPA0+3         ; * 'ADD' A POWER OF 10 MANTISSA TO FPA0.
FE48 AB03             (      exbasic.asm):05320                   ADDA $03,X          ; * IF THE MANTISSA IS NEGATIVE, A SUBTRACTION
FE4A 9753             (      exbasic.asm):05321                   STA  FPA0+3         ; * WILL BE WHAT REALLY TAKES PLACE.
FE4C 9652             (      exbasic.asm):05322                   LDA  FPA0+2         ; *
FE4E A902             (      exbasic.asm):05323                   ADCA $02,X          ; *
FE50 9752             (      exbasic.asm):05324                   STA  FPA0+2         ; *
FE52 9651             (      exbasic.asm):05325                   LDA  FPA0+1         ; *
FE54 A901             (      exbasic.asm):05326                   ADCA $01,X          ; *
FE56 9751             (      exbasic.asm):05327                   STA  FPA0+1         ; *
FE58 9650             (      exbasic.asm):05328                   LDA  FPA0           ; *
FE5A A984             (      exbasic.asm):05329                   ADCA ,X             ; *
FE5C 9750             (      exbasic.asm):05330                   STA  FPA0           ; *
FE5E 5C               (      exbasic.asm):05331                   INCB                ; ADD ONE TO DIGIT COUNTER
FE5F 56               (      exbasic.asm):05332                   RORB                ; ROTATE CARRY INTO BIT 7
FE60 59               (      exbasic.asm):05333                   ROLB                ; * SET OVERFLOW FLAG - BRANCH IF CARRY SET AND
FE61 28E3             (      exbasic.asm):05334                   BVC  L9213          ; * ADDING MANTISSA OR CARRY CLEAR AND SUBTRACTING MANTISSA
FE63 2403             (      exbasic.asm):05335                   BCC  L9235          ; BRANCH IF SUBTRACTING MANTISSA
FE65 C00B             (      exbasic.asm):05336                   SUBB #10+1          ; WAS SUBB #10+1
FE67 50               (      exbasic.asm):05337                   NEGB                ; * IF ADDING MANTISSA
FE68 CB2F             (      exbasic.asm):05338         L9235     ADDB #$2F           ; WAS ADDB #'0'-1
FE6A 3004             (      exbasic.asm):05339                   LEAX $04,X          ; MOVE TO NEXT POWER OF 10 MANTISSA
FE6C 1F98             (      exbasic.asm):05340                   TFR  B,A            ; SAVE DIGIT IN ACCA
FE6E 847F             (      exbasic.asm):05341                   ANDA #$7F           ; MASK OFF ADD/SUBTRACT FLAG (BIT 7)
FE70 A7C0             (      exbasic.asm):05342                   STA  ,U+            ; STORE DIGIT IN BUFFER
FE72 53               (      exbasic.asm):05343                   COMB                ; TOGGLE ADD/SUBTRACT FLAG
FE73 C480             (      exbasic.asm):05344                   ANDB #$80           ; MASK OFF EVERYTHING BUT ADD/SUB FLAG
FE75 8CF126           (      exbasic.asm):05345                   CMPX #LBEE9         ; COMPARE TO END OF UNNORMALIZED POWERS OF 10
FE78 26CA             (      exbasic.asm):05346                   BNE  L9211          ; BRANCH IF NOT DONE
FE7A 6FC4             (      exbasic.asm):05347                   CLR  ,U             ; PUT A ZERO AT END OF INTEGER
                      (      exbasic.asm):05348         
                      (      exbasic.asm):05349         * DECREMENT DECIMAL POINT COUNTER AND CHECK FOR COMMA INSERTION
FE7C 0A45             (      exbasic.asm):05350         L9249     DEC  V45            ; DECREMENT DECIMAL POINT COUNTER
FE7E 2609             (      exbasic.asm):05351                   BNE  L9256          ; NOT TIME FOR DECIMAL POINT
FE80 DF39             (      exbasic.asm):05352         L924D     STU  VARPTR         ; SAVE BUFFER POINTER-POSITION OF THE DECIMAL POINT
FE82 862E             (      exbasic.asm):05353                   LDA  #'.            ; * STORE A DECIMAL
FE84 A7C0             (      exbasic.asm):05354                   STA  ,U+            ; * POINT IN THE OUTPUT BUFFER
FE86 0F97             (      exbasic.asm):05355                   CLR  VD7            ; * CLEAR COMMA COUNTER - NOW IT WILL TAKE 255
                      (      exbasic.asm):05356         *                             ; * DECREMENTS BEFORE ANOTHER COMMA WILL BE INSERTED
FE88 39               (      exbasic.asm):05357                   RTS
FE89 0A97             (      exbasic.asm):05358         L9256     DEC  VD7            ; DECREMENT COMMA COUNTER
FE8B 2608             (      exbasic.asm):05359                   BNE  L9262          ; RETURN IF NOT TIME FOR COMMA
FE8D 8603             (      exbasic.asm):05360                   LDA  #$03           ; * RESET COMMA COUNTER TO 3; THREE
FE8F 9797             (      exbasic.asm):05361                   STA  VD7            ; * DIGITS BETWEEN COMMAS
FE91 862C             (      exbasic.asm):05362                   LDA  #',            ; * PUT A COMMA INTO
FE93 A7C0             (      exbasic.asm):05363                   STA  ,U+            ; * THE BUFFER
FE95 39               (      exbasic.asm):05364         L9262     RTS
                      (      exbasic.asm):05365         
                      (      exbasic.asm):05366         * INITIALIZE DECIMAL POINT AND COMMA COUNTERS
FE96 9647             (      exbasic.asm):05367         L9263     LDA  V47            ; GET THE BASE 10 EXPONENT OFFSET
FE98 8B0A             (      exbasic.asm):05368                   ADDA #10            ; * ADD 10 (FPA0 WAS 'NORMALIZED' TO 9 PLACES LEFT
FE9A 9745             (      exbasic.asm):05369                   STA  V45            ; * OF DECIMAL POINT) - SAVE IN DECIMAL POINT COUNTER
FE9C 4C               (      exbasic.asm):05370                   INCA                ; ADD ONE FOR THE DECIMAL POINT
FE9D 8003             (      exbasic.asm):05371         L926A     SUBA #$03           ; * DIVIDE DECIMAL POINT COUNTER BY 3; LEAVE
FE9F 24FC             (      exbasic.asm):05372                   BCC  L926A          ; * THE REMAINDER IN ACCA
FEA1 8B05             (      exbasic.asm):05373                   ADDA #$05           ; CONVERT REMAINDER INTO A NUMBER FROM 1-3
FEA3 9797             (      exbasic.asm):05374                   STA  VD7            ; SAVE COMMA COUNTER
FEA5 969A             (      exbasic.asm):05375                   LDA  VDA            ; GET STATUS BYTE
FEA7 8440             (      exbasic.asm):05376                   ANDA #$40           ; CHECK FOR COMMA FLAG
FEA9 2602             (      exbasic.asm):05377                   BNE  L927A          ; BRANCH IF COMMA FLAG ACTIVE
FEAB 9797             (      exbasic.asm):05378                   STA  VD7            ; CLEAR COMMA COUNTER - 255 DIGITS OUTPUT BEFORE A COMMA
FEAD 39               (      exbasic.asm):05379         L927A     RTS
                      (      exbasic.asm):05380         *
                      (      exbasic.asm):05381         * INSERT ACCA ZEROES INTO THE BUFFER
FEAE 3402             (      exbasic.asm):05382         L927B     PSHS A              ; SAVE ZEROES COUNTER
FEB0 8DCA             (      exbasic.asm):05383                   BSR  L9249          ; CHECK FOR DECIMAL POINT
FEB2 3502             (      exbasic.asm):05384                   PULS A              ; RESTORE ZEROES COUNTER
FEB4 4A               (      exbasic.asm):05385         L9281     DECA                ; * DECREMENT ZEROES COUNTER AND
FEB5 2B0A             (      exbasic.asm):05386                   BMI  L928E          ; * RETURN IF < 0
FEB7 3402             (      exbasic.asm):05387                   PSHS A              ; SAVE ZEROES COUNTER
FEB9 8630             (      exbasic.asm):05388                   LDA  #'0            ; * PUT A ZERO INTO
FEBB A7C0             (      exbasic.asm):05389                   STA  ,U+            ; * THE BUFFER
FEBD A6E0             (      exbasic.asm):05390                   LDA  ,S+            ; RESTORE THE ZEROES COUNTER
FEBF 26ED             (      exbasic.asm):05391                   BNE  L927B          ; BRANCH IF NOT DONE
FEC1 39               (      exbasic.asm):05392         L928E     RTS
                      (      exbasic.asm):05393         
                      (      exbasic.asm):05394         
                      (      exbasic.asm):05395         * LINE
FEC2 8189             (      exbasic.asm):05396         LINE      CMPA #TOK_INPUT     ; 'INPUT' TOKEN
FEC4 1027F95C         (      exbasic.asm):05397                   LBEQ L89C0          ; GO DO 'LINE INPUT' COMMAND
FEC8 7EE4F4           (      exbasic.asm):05398                   JMP  LB277          ; 'SYNTAX ERROR' IF NOT "LINE INPUT"
                      (      exbasic.asm):05399         
FECB FFFFFFFFFFFFFFFF (      exbasic.asm):05400                   FILL $FF,$FFF0-*   ; Fill ROM with FFs until vector table
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFF
                      (      exbasic.asm):05401         
                      (      exbasic.asm):05402         * END OF EXTENDED BASIC
                      (      exbasic.asm):05403         * INTERRUPT VECTORS
                      (      exbasic.asm):05404                   ORG  $FFF0
FFF0 0000             (      exbasic.asm):05405         LBFF0     FDB  $0000          ; RESERVED
FFF2 009B             (      exbasic.asm):05406         LBFF2     FDB  SW3VEC         ; SWI3
FFF4 009E             (      exbasic.asm):05407         LBFF4     FDB  SW2VEC         ; SWI2
FFF6 00AA             (      exbasic.asm):05408         LBFF6     FDB  FRQVEC         ; FIRQ
FFF8 00A7             (      exbasic.asm):05409         LBFF8     FDB  IRQVEC         ; IRQ
FFFA 00A1             (      exbasic.asm):05410         LBFFA     FDB  SWIVEC         ; SWI
FFFC 00A4             (      exbasic.asm):05411         LBFFC     FDB  NMIVEC         ; NMI
FFFE DB46             (      exbasic.asm):05412         LBFFE     FDB  RESVEC         ; RESET
                      (      exbasic.asm):05413         
                      (      exbasic.asm):05414                 END RESVEC
