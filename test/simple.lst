                      (       simple.asm):00001         * 6809 assembly generated from Clover source
                      (       simple.asm):00002         
                      (       simple.asm):00003             include BOSS9.inc
                      (        BOSS9.inc):00001         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00002         *    This source file is a part of the MC6809 Simulator
                      (        BOSS9.inc):00003         *    For the latest info, see http:www.marrin.org/
                      (        BOSS9.inc):00004         *    Copyright (c) 2018-2024, Chris Marrin
                      (        BOSS9.inc):00005         *    All rights reserved.
                      (        BOSS9.inc):00006         *    Use of this source code is governed by the MIT license that can be
                      (        BOSS9.inc):00007         *    found in the LICENSE file.
                      (        BOSS9.inc):00008         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00009         *
                      (        BOSS9.inc):00010         *  BOSS9.inc
                      (        BOSS9.inc):00011         *  Assembly language function and address includes for BOSS9
                      (        BOSS9.inc):00012         *
                      (        BOSS9.inc):00013         *  Created by Chris Marrin on 5/4/24.
                      (        BOSS9.inc):00014         *
                      (        BOSS9.inc):00015         
                      (        BOSS9.inc):00016         *
                      (        BOSS9.inc):00017         * Console functions
                      (        BOSS9.inc):00018         *
     FC00             (        BOSS9.inc):00019         putc    equ     $FC00   ; output char in A to console
     FC02             (        BOSS9.inc):00020         puts    equ     $FC02   ; output string pointed to by X (null terminated)
     FC04             (        BOSS9.inc):00021         putsn   equ     $FC04   ; Output string pointed to by X for length in Y
     FC06             (        BOSS9.inc):00022         getc    equ     $FC06   ; Get char from console, return it in A
     FC08             (        BOSS9.inc):00023         peekc   equ     $FC08   ; Return in A a 1 if a char is available and 0 otherwise
     FC0A             (        BOSS9.inc):00024         gets    equ     $FC0A   ; Get a line terminated by \n, place in buffer
                      (        BOSS9.inc):00025                                 ; pointed to by X, with max length in Y
     FC0C             (        BOSS9.inc):00026         peeks   equ     $FC0C   ; Return in A a 1 if a line is available and 0 otherwise.
                      (        BOSS9.inc):00027                                 ; If available return length of line in Y
                      (        BOSS9.inc):00028         
     FC0E             (        BOSS9.inc):00029         exit    equ     $FC0E   ; Exit program. A ccontains exit code
     FC10             (        BOSS9.inc):00030         mon     equ     $FC10   ; Enter monitor
     FC12             (        BOSS9.inc):00031         ldStart equ     $FC12   ; Start loading s-records
     FC14             (        BOSS9.inc):00032         ldLine  equ     $FC14   ; Load an s-record line
     FC16             (        BOSS9.inc):00033         ldEnd   equ     $FC16   ; End loading s-records
                      (        BOSS9.inc):00034         
                      (        BOSS9.inc):00035         *
                      (        BOSS9.inc):00036         * Core functions
                      (        BOSS9.inc):00037         *
     FC20             (        BOSS9.inc):00038         printf   equ    $FC20   ; Formatted print: TOS=fmt, (varargs)
     FC22             (        BOSS9.inc):00039         format   equ    $FC22   ; Format string
     FC24             (        BOSS9.inc):00040         memset   equ    $FC24   ; Set memory: TOS=
     FC26             (        BOSS9.inc):00041         irand    equ    $FC26   ;
     FC28             (        BOSS9.inc):00042         imin     equ    $FC28   ;
     FC2A             (        BOSS9.inc):00043         imax     equ    $FC2A   ;
     FC2C             (        BOSS9.inc):00044         initargs equ    $FC2C   ;
     FC2E             (        BOSS9.inc):00045         argint8  equ    $FC2E   ;
     FC30             (        BOSS9.inc):00046         argint16 equ    $FC30   ;
                      (        BOSS9.inc):00047         
                      (        BOSS9.inc):00048         *
                      (        BOSS9.inc):00049         * Helper functions
                      (        BOSS9.inc):00050         *
     FC40             (        BOSS9.inc):00051         switch1  equ    $FC40   ; TOS -> N, Table, Value
     FC42             (        BOSS9.inc):00052         switch2  equ    $FC42   ; Table is a list of N value/addr pairs
                      (        BOSS9.inc):00053                                 ; Binary search table looking for value
                      (        BOSS9.inc):00054                                 ; when found return addr in X. if not
                      (        BOSS9.inc):00055                                 ; found return Table + N * (<1/2> + 2)
                      (        BOSS9.inc):00056         
                      (        BOSS9.inc):00057         
                      (        BOSS9.inc):00058         * Misc equates
                      (        BOSS9.inc):00059         
     000A             (        BOSS9.inc):00060         newline equ     $0a
                      (        BOSS9.inc):00061                                 
                      (        BOSS9.inc):00062         
                      (       simple.asm):00004             org $200
                      (       simple.asm):00005         
0200 32E4             (       simple.asm):00006             LEAS -0,S
0202 1F42             (       simple.asm):00007             TFR S,Y
0204 327E             (       simple.asm):00008             LEAS -2,S
0206 BD020E           (       simple.asm):00009             JSR Simple_main
0209 3262             (       simple.asm):00010             LEAS 2,S
020B 7EFC0E           (       simple.asm):00011             JMP exit
                      (       simple.asm):00012         
020E                  (       simple.asm):00013         Simple_main
020E 3440             (       simple.asm):00014             PSHS U
0210 1F43             (       simple.asm):00015             TFR S,U
0212 327E             (       simple.asm):00016             LEAS -2,S
                      (       simple.asm):00017             ; //
                      (       simple.asm):00018             ; //  simple.Clover
                      (       simple.asm):00019             ; //  Clover
                      (       simple.asm):00020             ; //
                      (       simple.asm):00021             ; //  Created by Chris Marrin on 5/25/24.
                      (       simple.asm):00022             ; //
                      (       simple.asm):00023             ; 
                      (       simple.asm):00024             ; struct Simple
                      (       simple.asm):00025             ; {
                      (       simple.asm):00026             ; 
                      (       simple.asm):00027             ; function int16 main()
                      (       simple.asm):00028             ; {
                      (       simple.asm):00029             ;     int8 a = 5;
                      (       simple.asm):00030             ;     int8 b = a + 1;
0214 8605             (       simple.asm):00031             LDA #$05
0216 A75F             (       simple.asm):00032             STA -1,U
                      (       simple.asm):00033             ;     
0218 A65F             (       simple.asm):00034             LDA -1,U
021A 3402             (       simple.asm):00035             PSHS A
021C 8601             (       simple.asm):00036             LDA #$01
021E AB60             (       simple.asm):00037             ADDA 0,S
0220 3261             (       simple.asm):00038             LEAS 1,S
0222 A75E             (       simple.asm):00039             STA -2,U
                      (       simple.asm):00040             ;     switch (b) {
                      (       simple.asm):00041             ;         case 4: core.printf("Failed\n");
0224 A65E             (       simple.asm):00042             LDA -2,U
0226 3402             (       simple.asm):00043             PSHS A
0228 CC0239           (       simple.asm):00044             LDD #L3
022B 3406             (       simple.asm):00045             PSHS D
022D CC0002           (       simple.asm):00046             LDD #2
0230 3406             (       simple.asm):00047             PSHS D
0232 BDFC40           (       simple.asm):00048             JSR switch1
0235 3265             (       simple.asm):00049             LEAS 5,S
0237 6E00             (       simple.asm):00050             JMP 0,X
0239                  (       simple.asm):00051         L3
0239 04               (       simple.asm):00052             FCB 4
023A 024A             (       simple.asm):00053             FDB L4
023C 06               (       simple.asm):00054             FCB 6
023D 0255             (       simple.asm):00055             FDB L5
                      (       simple.asm):00056             ;         case 6: core.printf("Passed\n");
                      (       simple.asm):00057             ;         default: core.printf("Huh?\n");
                      (       simple.asm):00058             ;     }
023F CC0265           (       simple.asm):00059             LDD #String+$0
0242 3406             (       simple.asm):00060             PSHS D
0244 BDFC20           (       simple.asm):00061             JSR printf
0247 160013           (       simple.asm):00062             LBRA L6
024A                  (       simple.asm):00063         L4
024A CC026B           (       simple.asm):00064             LDD #String+$6
024D 3406             (       simple.asm):00065             PSHS D
024F BDFC20           (       simple.asm):00066             JSR printf
0252 160008           (       simple.asm):00067             LBRA L6
0255                  (       simple.asm):00068         L5
0255 CC0273           (       simple.asm):00069             LDD #String+$e
0258 3406             (       simple.asm):00070             PSHS D
025A BDFC20           (       simple.asm):00071             JSR printf
025D                  (       simple.asm):00072         L6
                      (       simple.asm):00073             ;     
                      (       simple.asm):00074             ;     return 0;
                      (       simple.asm):00075             ; }
025D CC0000           (       simple.asm):00076             LDD #$0000
0260 1F34             (       simple.asm):00077             TFR U,S
0262 3540             (       simple.asm):00078             PULS U
0264 39               (       simple.asm):00079             RTS
                      (       simple.asm):00080         
0265                  (       simple.asm):00081         Constants
                      (       simple.asm):00082         
0265                  (       simple.asm):00083         String
0265 4875683F         (       simple.asm):00084             FCC "Huh?"
0269 0A               (       simple.asm):00085             FCB $0a
026A 00               (       simple.asm):00086             FCB $00
026B 4661696C6564     (       simple.asm):00087             FCC "Failed"
0271 0A               (       simple.asm):00088             FCB $0a
0272 00               (       simple.asm):00089             FCB $00
0273 506173736564     (       simple.asm):00090             FCC "Passed"
0279 0A               (       simple.asm):00091             FCB $0a
027A 00               (       simple.asm):00092             FCB $00
                      (       simple.asm):00093         
                      (       simple.asm):00094             end $200
