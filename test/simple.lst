                      (       simple.asm):00001         * 6809 assembly generated from Clover source
                      (       simple.asm):00002         
                      (       simple.asm):00003             include BOSS9.inc
                      (        BOSS9.inc):00001         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00002         *    This source file is a part of the MC6809 Simulator
                      (        BOSS9.inc):00003         *    For the latest info, see http:www.marrin.org/
                      (        BOSS9.inc):00004         *    Copyright (c) 2018-2024, Chris Marrin
                      (        BOSS9.inc):00005         *    All rights reserved.
                      (        BOSS9.inc):00006         *    Use of this source code is governed by the MIT license that can be
                      (        BOSS9.inc):00007         *    found in the LICENSE file.
                      (        BOSS9.inc):00008         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00009         *
                      (        BOSS9.inc):00010         *  BOSS9.inc
                      (        BOSS9.inc):00011         *  Assembly language function and address includes for BOSS9
                      (        BOSS9.inc):00012         *
                      (        BOSS9.inc):00013         *  Created by Chris Marrin on 5/4/24.
                      (        BOSS9.inc):00014         *
                      (        BOSS9.inc):00015         
                      (        BOSS9.inc):00016         *
                      (        BOSS9.inc):00017         * Console functions
                      (        BOSS9.inc):00018         *
     FC00             (        BOSS9.inc):00019         putc    equ     $FC00   ; output char in A to console
     FC02             (        BOSS9.inc):00020         puts    equ     $FC02   ; output string pointed to by X (null terminated)
     FC04             (        BOSS9.inc):00021         putsn   equ     $FC04   ; Output string pointed to by X for length in Y
     FC06             (        BOSS9.inc):00022         getc    equ     $FC06   ; Get char from console, return it in A
     FC08             (        BOSS9.inc):00023         peekc   equ     $FC08   ; Return in A a 1 if a char is available and 0 otherwise
     FC0A             (        BOSS9.inc):00024         gets    equ     $FC0A   ; Get a line terminated by \n, place in buffer
                      (        BOSS9.inc):00025                                 ; pointed to by X, with max length in Y
     FC0C             (        BOSS9.inc):00026         peeks   equ     $FC0C   ; Return in A a 1 if a line is available and 0 otherwise.
                      (        BOSS9.inc):00027                                 ; If available return length of line in Y
                      (        BOSS9.inc):00028         
     FC0E             (        BOSS9.inc):00029         exit    equ     $FC0E   ; Exit program. A ccontains exit code
     FC10             (        BOSS9.inc):00030         mon     equ     $FC10   ; Enter monitor
     FC12             (        BOSS9.inc):00031         ldStart equ     $FC12   ; Start loading s-records
     FC14             (        BOSS9.inc):00032         ldLine  equ     $FC14   ; Load an s-record line
     FC16             (        BOSS9.inc):00033         ldEnd   equ     $FC16   ; End loading s-records
                      (        BOSS9.inc):00034         
                      (        BOSS9.inc):00035         *
                      (        BOSS9.inc):00036         * Core functions
                      (        BOSS9.inc):00037         *
     FC18             (        BOSS9.inc):00038         printf   equ    $FC18   ; Formatted print: TOS=fmt, (varargs)
     FC1A             (        BOSS9.inc):00039         format   equ    $FC1a   ; Format string
     FC1C             (        BOSS9.inc):00040         memset   equ    $FC1c   ; Set memory: TOS=
     FC1E             (        BOSS9.inc):00041         irand    equ    $FC1e   ;
     FC20             (        BOSS9.inc):00042         imin     equ    $FC20   ;
     FC22             (        BOSS9.inc):00043         imax     equ    $FC22   ;
     FC24             (        BOSS9.inc):00044         initargs equ    $FC24   ;
     FC26             (        BOSS9.inc):00045         argint8  equ    $FC26   ;
     FC28             (        BOSS9.inc):00046         argint16 equ    $FC28   ;
                      (        BOSS9.inc):00047         
                      (        BOSS9.inc):00048         
                      (        BOSS9.inc):00049         * Misc equates
                      (        BOSS9.inc):00050         
     000A             (        BOSS9.inc):00051         newline equ     $0a
                      (        BOSS9.inc):00052                                 
                      (        BOSS9.inc):00053         
                      (       simple.asm):00004             org $200
                      (       simple.asm):00005         
0200 327F             (       simple.asm):00006             LEAS -1,S
0202 1F42             (       simple.asm):00007             TFR S,Y
0204 327E             (       simple.asm):00008             LEAS -2,S
0206 BD0285           (       simple.asm):00009             JSR Simple_ctor
0209 3262             (       simple.asm):00010             LEAS 2,S
020B 327E             (       simple.asm):00011             LEAS -2,S
020D BD0215           (       simple.asm):00012             JSR Simple_main
0210 3262             (       simple.asm):00013             LEAS 2,S
0212 7EFC0E           (       simple.asm):00014             JMP exit
                      (       simple.asm):00015         
0215                  (       simple.asm):00016         Simple_main
0215 3440             (       simple.asm):00017             PSHS U
0217 1F43             (       simple.asm):00018             TFR S,U
0219 327A             (       simple.asm):00019             LEAS -6,S
                      (       simple.asm):00020             ; //
                      (       simple.asm):00021             ; //  simple.Clover
                      (       simple.asm):00022             ; //  Clover
                      (       simple.asm):00023             ; //
                      (       simple.asm):00024             ; //  Created by Chris Marrin on 5/25/24.
                      (       simple.asm):00025             ; //
                      (       simple.asm):00026             ; 
                      (       simple.asm):00027             ; struct Simple
                      (       simple.asm):00028             ; {
                      (       simple.asm):00029             ; 
                      (       simple.asm):00030             ; //struct A
                      (       simple.asm):00031             ; //{
                      (       simple.asm):00032             ; //    int8 b = 12;
                      (       simple.asm):00033             ; //    int16 c = 24;
                      (       simple.asm):00034             ; //};
                      (       simple.asm):00035             ; //
                      (       simple.asm):00036             ; //const A arr[ ] = { 8, 9, 10, 11, 12, 13 };
                      (       simple.asm):00037             ; //
                      (       simple.asm):00038             ; int8 xxx = 9;
                      (       simple.asm):00039             ; //
                      (       simple.asm):00040             ; 
                      (       simple.asm):00041             ; const uint16 array[4] = { 2, 4, 6, 8 };
                      (       simple.asm):00042             ; 
                      (       simple.asm):00043             ; function int16 main()
                      (       simple.asm):00044             ; {
                      (       simple.asm):00045             ; //    uint16* p = &array[0];
                      (       simple.asm):00046             ; //    for (uint8 i = 0; i < 4; i++) {
                      (       simple.asm):00047             ; //        core.printf("array[%d] = %d\n", i, *p);
                      (       simple.asm):00048             ; //        p++;
                      (       simple.asm):00049             ; //    }
                      (       simple.asm):00050             ; //
                      (       simple.asm):00051             ;     int16 a = 5;
                      (       simple.asm):00052             ;     uint16 b = 6;
021B CC0005           (       simple.asm):00053             LDD #$0005
021E 3406             (       simple.asm):00054             PSHS D
0220 3506             (       simple.asm):00055             PULS D
0222 ED5E             (       simple.asm):00056             STD -2,U
                      (       simple.asm):00057             ;     int8 c = 8;
0224 CC0006           (       simple.asm):00058             LDD #$0006
0227 3406             (       simple.asm):00059             PSHS D
0229 3506             (       simple.asm):00060             PULS D
022B ED5C             (       simple.asm):00061             STD -4,U
                      (       simple.asm):00062             ;     int8 d = 7;
022D 8608             (       simple.asm):00063             LDA #$08
022F 3402             (       simple.asm):00064             PSHS A
0231 3502             (       simple.asm):00065             PULS A
0233 A75B             (       simple.asm):00066             STA -5,U
                      (       simple.asm):00067             ;  
0235 8607             (       simple.asm):00068             LDA #$07
0237 3402             (       simple.asm):00069             PSHS A
0239 3502             (       simple.asm):00070             PULS A
023B A75A             (       simple.asm):00071             STA -6,U
                      (       simple.asm):00072             ; //    bool x = a < b;
                      (       simple.asm):00073             ;     
                      (       simple.asm):00074             ;     if (a < b && c > d) {
023D 6FE2             (       simple.asm):00075             CLR ,-S
023F EC5E             (       simple.asm):00076             LDD -2,U
0241 3406             (       simple.asm):00077             PSHS D
0243 EC5C             (       simple.asm):00078             LDD -4,U
0245 3406             (       simple.asm):00079             PSHS D
0247 A661             (       simple.asm):00080             LDA 1,S
0249 A160             (       simple.asm):00081             CMPA 0,S
024B 3262             (       simple.asm):00082             LEAS 2,S
024D 2C02             (       simple.asm):00083             BGE L1
024F 6C60             (       simple.asm):00084             INC 0,S
0251                  (       simple.asm):00085         L1
0251 3502             (       simple.asm):00086             PULS A
0253 2716             (       simple.asm):00087             BEQ L2
0255 6FE2             (       simple.asm):00088             CLR ,-S
0257 A65B             (       simple.asm):00089             LDA -5,U
0259 3402             (       simple.asm):00090             PSHS A
025B A65A             (       simple.asm):00091             LDA -6,U
025D 3402             (       simple.asm):00092             PSHS A
025F A661             (       simple.asm):00093             LDA 1,S
0261 A160             (       simple.asm):00094             CMPA 0,S
0263 3262             (       simple.asm):00095             LEAS 2,S
0265 2F02             (       simple.asm):00096             BLE L4
0267 6C60             (       simple.asm):00097             INC 0,S
0269                  (       simple.asm):00098         L4
0269 2004             (       simple.asm):00099             BRA L3
026B                  (       simple.asm):00100         L2
026B 8600             (       simple.asm):00101             LDA #0
026D 3402             (       simple.asm):00102             PSHS A
026F                  (       simple.asm):00103         L3
026F 3502             (       simple.asm):00104             PULS A
0271 2708             (       simple.asm):00105             BEQ L5
                      (       simple.asm):00106             ;         core.printf("Hello\n\n");
                      (       simple.asm):00107             ;     }
0273 8E029E           (       simple.asm):00108             LDX #String+$0
0276 3410             (       simple.asm):00109             PSHS X
0278 BDFC18           (       simple.asm):00110             JSR printf
027B                  (       simple.asm):00111         L5
                      (       simple.asm):00112             ;     
                      (       simple.asm):00113             ; //    A a;
                      (       simple.asm):00114             ; //    
                      (       simple.asm):00115             ; //    core.printf(" v1=%d, v2=%d\n", arr[1].b, arr[2].c);
                      (       simple.asm):00116             ; //    core.printf(" a.b=%d, a.c=%d\n", a.b, a.c);
                      (       simple.asm):00117             ; //    core.printf(" xxx=%d\n", xxx);
                      (       simple.asm):00118             ;     return 0;
                      (       simple.asm):00119             ; }
027B CC0000           (       simple.asm):00120             LDD #$0000
027E 3406             (       simple.asm):00121             PSHS D
0280 1F34             (       simple.asm):00122             TFR U,S
0282 3540             (       simple.asm):00123             PULS U
0284 39               (       simple.asm):00124             RTS
                      (       simple.asm):00125         
0285                  (       simple.asm):00126         Simple_ctor
0285 3440             (       simple.asm):00127             PSHS U
0287 1F43             (       simple.asm):00128             TFR S,U
0289 8609             (       simple.asm):00129             LDA #$09
028B 3402             (       simple.asm):00130             PSHS A
028D 3502             (       simple.asm):00131             PULS A
028F A720             (       simple.asm):00132             STA 0,Y
0291 1F34             (       simple.asm):00133             TFR U,S
0293 3540             (       simple.asm):00134             PULS U
0295 39               (       simple.asm):00135             RTS
                      (       simple.asm):00136         
0296                  (       simple.asm):00137         Constants
0296 0002000400060008 (       simple.asm):00138             FCB $00,$02,$00,$04,$00,$06,$00,$08
                      (       simple.asm):00139         
029E                  (       simple.asm):00140         String
029E 48656C6C6F       (       simple.asm):00141             FCC "Hello"
02A3 0A               (       simple.asm):00142             FCB $0a
02A4 0A               (       simple.asm):00143             FCB $0a
02A5 00               (       simple.asm):00144             FCB $00
                      (       simple.asm):00145         
                      (       simple.asm):00146             end $200
