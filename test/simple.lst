                      (       simple.asm):00001         * 6809 assembly generated from Clover source
                      (       simple.asm):00002         
                      (       simple.asm):00003             include BOSS9.inc
                      (        BOSS9.inc):00001         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00002         *    This source file is a part of the MC6809 Simulator
                      (        BOSS9.inc):00003         *    For the latest info, see http:www.marrin.org/
                      (        BOSS9.inc):00004         *    Copyright (c) 2018-2024, Chris Marrin
                      (        BOSS9.inc):00005         *    All rights reserved.
                      (        BOSS9.inc):00006         *    Use of this source code is governed by the MIT license that can be
                      (        BOSS9.inc):00007         *    found in the LICENSE file.
                      (        BOSS9.inc):00008         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00009         *
                      (        BOSS9.inc):00010         *  BOSS9.inc
                      (        BOSS9.inc):00011         *  Assembly language function and address includes for BOSS9
                      (        BOSS9.inc):00012         *
                      (        BOSS9.inc):00013         *  Created by Chris Marrin on 5/4/24.
                      (        BOSS9.inc):00014         *
                      (        BOSS9.inc):00015         
                      (        BOSS9.inc):00016         *
                      (        BOSS9.inc):00017         * Console functions
                      (        BOSS9.inc):00018         *
     FC00             (        BOSS9.inc):00019         putc    equ     $FC00   ; output char in A to console
     FC02             (        BOSS9.inc):00020         puts    equ     $FC02   ; output string pointed to by X (null terminated)
     FC04             (        BOSS9.inc):00021         putsn   equ     $FC04   ; Output string pointed to by X for length in Y
     FC06             (        BOSS9.inc):00022         getc    equ     $FC06   ; Get char from console, return it in A
     FC08             (        BOSS9.inc):00023         peekc   equ     $FC08   ; Return in A a 1 if a char is available and 0 otherwise
     FC0A             (        BOSS9.inc):00024         gets    equ     $FC0A   ; Get a line terminated by \n, place in buffer
                      (        BOSS9.inc):00025                                 ; pointed to by X, with max length in Y
     FC0C             (        BOSS9.inc):00026         peeks   equ     $FC0C   ; Return in A a 1 if a line is available and 0 otherwise.
                      (        BOSS9.inc):00027                                 ; If available return length of line in Y
                      (        BOSS9.inc):00028         
     FC0E             (        BOSS9.inc):00029         exit    equ     $FC0E   ; Exit program. A ccontains exit code
     FC10             (        BOSS9.inc):00030         mon     equ     $FC10   ; Enter monitor
     FC12             (        BOSS9.inc):00031         ldStart equ     $FC12   ; Start loading s-records
     FC14             (        BOSS9.inc):00032         ldLine  equ     $FC14   ; Load an s-record line
     FC16             (        BOSS9.inc):00033         ldEnd   equ     $FC16   ; End loading s-records
                      (        BOSS9.inc):00034         
                      (        BOSS9.inc):00035         *
                      (        BOSS9.inc):00036         * Core functions
                      (        BOSS9.inc):00037         *
     FC18             (        BOSS9.inc):00038         printf   equ    $FC18   ; Formatted print: TOS=fmt, (varargs)
     FC1A             (        BOSS9.inc):00039         format   equ    $FC1a   ; Format string
     FC1C             (        BOSS9.inc):00040         memset   equ    $FC1c   ; Set memory: TOS=
     FC1E             (        BOSS9.inc):00041         irand    equ    $FC1e   ;
     FC20             (        BOSS9.inc):00042         imin     equ    $FC20   ;
     FC22             (        BOSS9.inc):00043         imax     equ    $FC22   ;
     FC24             (        BOSS9.inc):00044         initargs equ    $FC24   ;
     FC26             (        BOSS9.inc):00045         argint8  equ    $FC26   ;
     FC28             (        BOSS9.inc):00046         argint16 equ    $FC28   ;
                      (        BOSS9.inc):00047         
                      (        BOSS9.inc):00048         
                      (        BOSS9.inc):00049         * Misc equates
                      (        BOSS9.inc):00050         
     000A             (        BOSS9.inc):00051         newline equ     $0a
                      (        BOSS9.inc):00052                                 
                      (        BOSS9.inc):00053         
                      (       simple.asm):00004             org $200
0200 3440             (       simple.asm):00005             PSHS U
0202 1F43             (       simple.asm):00006             TFR S,U
0204 327A             (       simple.asm):00007             LEAS -6,S
                      (       simple.asm):00008             ; //
                      (       simple.asm):00009             ; //  simple.Clover
                      (       simple.asm):00010             ; //  Clover
                      (       simple.asm):00011             ; //
                      (       simple.asm):00012             ; //  Created by Chris Marrin on 5/25/24.
                      (       simple.asm):00013             ; //
                      (       simple.asm):00014             ; 
                      (       simple.asm):00015             ; struct Simple
                      (       simple.asm):00016             ; {
                      (       simple.asm):00017             ; 
                      (       simple.asm):00018             ; //struct A
                      (       simple.asm):00019             ; //{
                      (       simple.asm):00020             ; //    int8 b = 12;
                      (       simple.asm):00021             ; //    int16 c = 24;
                      (       simple.asm):00022             ; //};
                      (       simple.asm):00023             ; //
                      (       simple.asm):00024             ; //const A arr[ ] = { 8, 9, 10, 11, 12, 13 };
                      (       simple.asm):00025             ; //
                      (       simple.asm):00026             ; //int8 xxx = 9;
                      (       simple.asm):00027             ; //
                      (       simple.asm):00028             ; 
                      (       simple.asm):00029             ; const uint16 array[4] = { 2, 4, 6, 8 };
                      (       simple.asm):00030             ; 
                      (       simple.asm):00031             ; function int16 main()
                      (       simple.asm):00032             ; {
                      (       simple.asm):00033             ; //    uint16* p = &array[0];
                      (       simple.asm):00034             ; //    for (uint8 i = 0; i < 4; i++) {
                      (       simple.asm):00035             ; //        core.printf("array[%d] = %d\n", i, *p);
                      (       simple.asm):00036             ; //        p++;
                      (       simple.asm):00037             ; //    }
                      (       simple.asm):00038             ; //
                      (       simple.asm):00039             ;     int16 a = 5;
                      (       simple.asm):00040             ;     uint16 b = 6;
0206 CC0005           (       simple.asm):00041             LDD #$0005
0209 3406             (       simple.asm):00042             PSHS D
020B 3506             (       simple.asm):00043             PULS D
020D ED41             (       simple.asm):00044             STD 1,U
                      (       simple.asm):00045             ;     int8 c = 8;
020F CC0006           (       simple.asm):00046             LDD #$0006
0212 3406             (       simple.asm):00047             PSHS D
0214 3506             (       simple.asm):00048             PULS D
0216 ED43             (       simple.asm):00049             STD 3,U
                      (       simple.asm):00050             ;     int8 d = 7;
0218 8608             (       simple.asm):00051             LDA #$08
021A 3402             (       simple.asm):00052             PSHS A
021C 3502             (       simple.asm):00053             PULS A
021E A744             (       simple.asm):00054             STA 4,U
                      (       simple.asm):00055             ;  
0220 8607             (       simple.asm):00056             LDA #$07
0222 3402             (       simple.asm):00057             PSHS A
0224 3502             (       simple.asm):00058             PULS A
0226 A745             (       simple.asm):00059             STA 5,U
                      (       simple.asm):00060             ; //    bool x = a < b;
                      (       simple.asm):00061             ;     
                      (       simple.asm):00062             ;     if (a < b && c > d) {
0228 6FE2             (       simple.asm):00063             CLR ,-S
022A EC41             (       simple.asm):00064             LDD 1,U
022C 3406             (       simple.asm):00065             PSHS D
022E EC43             (       simple.asm):00066             LDD 3,U
0230 3406             (       simple.asm):00067             PSHS D
0232 A661             (       simple.asm):00068             LDA 1,S
0234 A160             (       simple.asm):00069             CMPA 0,S
0236 3262             (       simple.asm):00070             LEAS 2,S
0238 2C02             (       simple.asm):00071             BGE L1
023A 6C60             (       simple.asm):00072             INC 0,S
023C                  (       simple.asm):00073         L1
023C 3502             (       simple.asm):00074             PULS A
023E 2716             (       simple.asm):00075             BEQ L2
0240 6FE2             (       simple.asm):00076             CLR ,-S
0242 A644             (       simple.asm):00077             LDA 4,U
0244 3402             (       simple.asm):00078             PSHS A
0246 A645             (       simple.asm):00079             LDA 5,U
0248 3402             (       simple.asm):00080             PSHS A
024A A661             (       simple.asm):00081             LDA 1,S
024C A160             (       simple.asm):00082             CMPA 0,S
024E 3262             (       simple.asm):00083             LEAS 2,S
0250 2F02             (       simple.asm):00084             BLE L4
0252 6C60             (       simple.asm):00085             INC 0,S
0254                  (       simple.asm):00086         L4
0254 2004             (       simple.asm):00087             BRA L3
0256                  (       simple.asm):00088         L2
0256 8600             (       simple.asm):00089             LDA #0
0258 3402             (       simple.asm):00090             PSHS A
025A                  (       simple.asm):00091         L3
025A 3502             (       simple.asm):00092             PULS A
025C 2708             (       simple.asm):00093             BEQ L5
                      (       simple.asm):00094             ;         core.printf("Hello\n\n");
                      (       simple.asm):00095             ;     }
025E 8E0274           (       simple.asm):00096             LDX #String+$0
0261 3410             (       simple.asm):00097             PSHS X
0263 BDFC18           (       simple.asm):00098             JSR printf
0266                  (       simple.asm):00099         L5
                      (       simple.asm):00100             ;     
                      (       simple.asm):00101             ; //    A a;
                      (       simple.asm):00102             ; //    
                      (       simple.asm):00103             ; //    core.printf(" v1=%d, v2=%d\n", arr[1].b, arr[2].c);
                      (       simple.asm):00104             ; //    core.printf(" a.b=%d, a.c=%d\n", a.b, a.c);
                      (       simple.asm):00105             ; //    core.printf(" xxx=%d\n", xxx);
                      (       simple.asm):00106             ;     return 0;
                      (       simple.asm):00107             ; }
0266 CC0000           (       simple.asm):00108             LDD #$0000
0269 3406             (       simple.asm):00109             PSHS D
026B 39               (       simple.asm):00110             RTS
                      (       simple.asm):00111         
026C                  (       simple.asm):00112         Constants
026C 0002000400060008 (       simple.asm):00113             FCB $00,$02,$00,$04,$00,$06,$00,$08
                      (       simple.asm):00114         
0274                  (       simple.asm):00115         String
0274 48656C6C6F       (       simple.asm):00116             FCC "Hello"
0279 0A               (       simple.asm):00117             FCB $0a
027A 0A               (       simple.asm):00118             FCB $0a
027B 00               (       simple.asm):00119             FCB $00
                      (       simple.asm):00120         
                      (       simple.asm):00121             end $200
