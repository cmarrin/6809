                      (       simple.asm):00001         * 6809 assembly generated from Clover source
                      (       simple.asm):00002         
                      (       simple.asm):00003             include BOSS9.inc
                      (        BOSS9.inc):00001         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00002         *    This source file is a part of the MC6809 Simulator
                      (        BOSS9.inc):00003         *    For the latest info, see http:www.marrin.org/
                      (        BOSS9.inc):00004         *    Copyright (c) 2018-2024, Chris Marrin
                      (        BOSS9.inc):00005         *    All rights reserved.
                      (        BOSS9.inc):00006         *    Use of this source code is governed by the MIT license that can be
                      (        BOSS9.inc):00007         *    found in the LICENSE file.
                      (        BOSS9.inc):00008         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00009         *
                      (        BOSS9.inc):00010         *  BOSS9.inc
                      (        BOSS9.inc):00011         *  Assembly language function and address includes for BOSS9
                      (        BOSS9.inc):00012         *
                      (        BOSS9.inc):00013         *  Created by Chris Marrin on 5/4/24.
                      (        BOSS9.inc):00014         *
                      (        BOSS9.inc):00015         
                      (        BOSS9.inc):00016         *
                      (        BOSS9.inc):00017         * Console functions
                      (        BOSS9.inc):00018         *
     FC00             (        BOSS9.inc):00019         putc    equ     $FC00   ; output char in A to console
     FC02             (        BOSS9.inc):00020         puts    equ     $FC02   ; output string pointed to by X (null terminated)
     FC04             (        BOSS9.inc):00021         putsn   equ     $FC04   ; Output string pointed to by X for length in Y
     FC06             (        BOSS9.inc):00022         getc    equ     $FC06   ; Get char from console, return it in A
     FC08             (        BOSS9.inc):00023         peekc   equ     $FC08   ; Return in A a 1 if a char is available and 0 otherwise
     FC0A             (        BOSS9.inc):00024         gets    equ     $FC0A   ; Get a line terminated by \n, place in buffer
                      (        BOSS9.inc):00025                                 ; pointed to by X, with max length in Y
     FC0C             (        BOSS9.inc):00026         peeks   equ     $FC0C   ; Return in A a 1 if a line is available and 0 otherwise.
                      (        BOSS9.inc):00027                                 ; If available return length of line in Y
                      (        BOSS9.inc):00028         
     FC0E             (        BOSS9.inc):00029         exit    equ     $FC0E   ; Exit program. A ccontains exit code
     FC10             (        BOSS9.inc):00030         mon     equ     $FC10   ; Enter monitor
     FC12             (        BOSS9.inc):00031         ldStart equ     $FC12   ; Start loading s-records
     FC14             (        BOSS9.inc):00032         ldLine  equ     $FC14   ; Load an s-record line
     FC16             (        BOSS9.inc):00033         ldEnd   equ     $FC16   ; End loading s-records
                      (        BOSS9.inc):00034         
                      (        BOSS9.inc):00035         *
                      (        BOSS9.inc):00036         * Core functions
                      (        BOSS9.inc):00037         *
     FC20             (        BOSS9.inc):00038         printf   equ    $FC20   ; Formatted print: TOS=fmt, (varargs)
     FC22             (        BOSS9.inc):00039         format   equ    $FC22   ; Format string
     FC24             (        BOSS9.inc):00040         memset   equ    $FC24   ; Set memory: TOS=
     FC26             (        BOSS9.inc):00041         irand    equ    $FC26   ;
     FC28             (        BOSS9.inc):00042         imin     equ    $FC28   ;
     FC2A             (        BOSS9.inc):00043         imax     equ    $FC2A   ;
     FC2C             (        BOSS9.inc):00044         initargs equ    $FC2C   ;
     FC2E             (        BOSS9.inc):00045         argint8  equ    $FC2E   ;
     FC30             (        BOSS9.inc):00046         argint16 equ    $FC30   ;
                      (        BOSS9.inc):00047         
                      (        BOSS9.inc):00048         *
                      (        BOSS9.inc):00049         * Helper functions
                      (        BOSS9.inc):00050         *
     FC40             (        BOSS9.inc):00051         switch1  equ    $FC40   ; TOS -> N, Table, Value
     FC42             (        BOSS9.inc):00052         switch2  equ    $FC42   ; Table is a list of N value/addr pairs
                      (        BOSS9.inc):00053                                 ; Binary search table looking for value
                      (        BOSS9.inc):00054                                 ; when found return addr in X. if not
                      (        BOSS9.inc):00055                                 ; found return Table + N * (<1/2> + 2)
                      (        BOSS9.inc):00056         
                      (        BOSS9.inc):00057         
                      (        BOSS9.inc):00058         * Misc equates
                      (        BOSS9.inc):00059         
     000A             (        BOSS9.inc):00060         newline equ     $0a
                      (        BOSS9.inc):00061                                 
                      (        BOSS9.inc):00062         
                      (       simple.asm):00004             org $200
                      (       simple.asm):00005         
0200 1F42             (       simple.asm):00006             TFR S,Y
0202 327E             (       simple.asm):00007             LEAS -2,S
0204 BD020C           (       simple.asm):00008             JSR Simple_main
0207 3262             (       simple.asm):00009             LEAS 2,S
0209 7EFC0E           (       simple.asm):00010             JMP exit
                      (       simple.asm):00011         
020C                  (       simple.asm):00012         Simple_main
020C 3440             (       simple.asm):00013             PSHS U
020E 1F43             (       simple.asm):00014             TFR S,U
0210 327E             (       simple.asm):00015             LEAS -2,S
                      (       simple.asm):00016             ; //
                      (       simple.asm):00017             ; //  simple.Clover
                      (       simple.asm):00018             ; //  Clover
                      (       simple.asm):00019             ; //
                      (       simple.asm):00020             ; //  Created by Chris Marrin on 5/25/24.
                      (       simple.asm):00021             ; //
                      (       simple.asm):00022             ; 
                      (       simple.asm):00023             ; struct Simple
                      (       simple.asm):00024             ; {
                      (       simple.asm):00025             ; 
                      (       simple.asm):00026             ; function int16 main()
                      (       simple.asm):00027             ; {
                      (       simple.asm):00028             ;     int8 a = 5;
                      (       simple.asm):00029             ;     int8 b = 6;
0212 8605             (       simple.asm):00030             LDA #$05
0214 A75F             (       simple.asm):00031             STA -1,U
                      (       simple.asm):00032             ;     
0216 8606             (       simple.asm):00033             LDA #$06
0218 A75E             (       simple.asm):00034             STA -2,U
                      (       simple.asm):00035             ;     if (!(a == 5) || !(b == 5))
                      (       simple.asm):00036             ;         core.printf("Passed\n");
021A 8605             (       simple.asm):00037             LDA #$05
021C 3402             (       simple.asm):00038             PSHS A
021E A65F             (       simple.asm):00039             LDA -1,U
0220 A160             (       simple.asm):00040             CMPA 0,S
0222 3261             (       simple.asm):00041             LEAS 1,S
0224 260C             (       simple.asm):00042             BNE L4
0226 8605             (       simple.asm):00043             LDA #$05
0228 3402             (       simple.asm):00044             PSHS A
022A A65E             (       simple.asm):00045             LDA -2,U
022C A160             (       simple.asm):00046             CMPA 0,S
022E 3261             (       simple.asm):00047             LEAS 1,S
0230 270A             (       simple.asm):00048             BEQ L1
0232                  (       simple.asm):00049         L4
                      (       simple.asm):00050             ;     else
0232 CC024C           (       simple.asm):00051             LDD #String+$0
0235 3406             (       simple.asm):00052             PSHS D
0237 BDFC20           (       simple.asm):00053             JSR printf
023A 2008             (       simple.asm):00054             BRA L5
023C                  (       simple.asm):00055         L1
                      (       simple.asm):00056             ;         core.printf("Failed\n");
                      (       simple.asm):00057             ;     
023C CC0254           (       simple.asm):00058             LDD #String+$8
023F 3406             (       simple.asm):00059             PSHS D
0241 BDFC20           (       simple.asm):00060             JSR printf
0244                  (       simple.asm):00061         L5
                      (       simple.asm):00062             ;     return 0;
                      (       simple.asm):00063             ; }
0244 CC0000           (       simple.asm):00064             LDD #$0000
0247 1F34             (       simple.asm):00065             TFR U,S
0249 3540             (       simple.asm):00066             PULS U
024B 39               (       simple.asm):00067             RTS
                      (       simple.asm):00068         
024C                  (       simple.asm):00069         Constants
                      (       simple.asm):00070         
024C                  (       simple.asm):00071         String
024C 506173736564     (       simple.asm):00072             FCC "Passed"
0252 0A               (       simple.asm):00073             FCB $0a
0253 00               (       simple.asm):00074             FCB $00
0254 4661696C6564     (       simple.asm):00075             FCC "Failed"
025A 0A               (       simple.asm):00076             FCB $0a
025B 00               (       simple.asm):00077             FCB $00
                      (       simple.asm):00078         
                      (       simple.asm):00079             end $200
