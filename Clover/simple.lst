                      (Clover/simple.asm):00001         * 6809 assembly generated from Clover source
                      (Clover/simple.asm):00002         
                      (Clover/simple.asm):00003             include BOSS9.inc
                      (        BOSS9.inc):00001         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00002         *    This source file is a part of the MC6809 Simulator
                      (        BOSS9.inc):00003         *    For the latest info, see http:www.marrin.org/
                      (        BOSS9.inc):00004         *    Copyright (c) 2018-2024, Chris Marrin
                      (        BOSS9.inc):00005         *    All rights reserved.
                      (        BOSS9.inc):00006         *    Use of this source code is governed by the MIT license that can be
                      (        BOSS9.inc):00007         *    found in the LICENSE file.
                      (        BOSS9.inc):00008         *-------------------------------------------------------------------------
                      (        BOSS9.inc):00009         *
                      (        BOSS9.inc):00010         *  BOSS9.inc
                      (        BOSS9.inc):00011         *  Assembly language function and address includes for BOSS9
                      (        BOSS9.inc):00012         *
                      (        BOSS9.inc):00013         *  Created by Chris Marrin on 5/4/24.
                      (        BOSS9.inc):00014         *
                      (        BOSS9.inc):00015         
                      (        BOSS9.inc):00016         *
                      (        BOSS9.inc):00017         * Console functions
                      (        BOSS9.inc):00018         *
     FC00             (        BOSS9.inc):00019         putc    equ     $FC00   ; output char in A to console
     FC02             (        BOSS9.inc):00020         puts    equ     $FC02   ; output string pointed to by X (null terminated)
     FC04             (        BOSS9.inc):00021         putsn   equ     $FC04   ; Output string pointed to by X for length in Y
     FC06             (        BOSS9.inc):00022         getc    equ     $FC06   ; Get char from console, return it in A
     FC08             (        BOSS9.inc):00023         peekc   equ     $FC08   ; Return in A a 1 if a char is available and 0 otherwise
     FC0A             (        BOSS9.inc):00024         gets    equ     $FC0A   ; Get a line terminated by \n, place in buffer
                      (        BOSS9.inc):00025                                 ; pointed to by X, with max length in Y
     FC0C             (        BOSS9.inc):00026         peeks   equ     $FC0C   ; Return in A a 1 if a line is available and 0 otherwise.
                      (        BOSS9.inc):00027                                 ; If available return length of line in Y
                      (        BOSS9.inc):00028         
     FC0E             (        BOSS9.inc):00029         exit    equ     $FC0E   ; Exit program. A ccontains exit code
     FC10             (        BOSS9.inc):00030         mon     equ     $FC10   ; Enter monitor
     FC12             (        BOSS9.inc):00031         ldStart equ     $FC12   ; Start loading s-records
     FC14             (        BOSS9.inc):00032         ldLine  equ     $FC14   ; Load an s-record line
     FC16             (        BOSS9.inc):00033         ldEnd   equ     $FC16   ; End loading s-records
                      (        BOSS9.inc):00034         
                      (        BOSS9.inc):00035         *
                      (        BOSS9.inc):00036         * Core functions
                      (        BOSS9.inc):00037         *
     FC20             (        BOSS9.inc):00038         printf   equ    $FC20   ; Formatted print: TOS=fmt, (varargs)
     FC22             (        BOSS9.inc):00039         format   equ    $FC22   ; Format string
     FC24             (        BOSS9.inc):00040         memset   equ    $FC24   ; Set memory: TOS=
     FC26             (        BOSS9.inc):00041         irand    equ    $FC26   ;
     FC28             (        BOSS9.inc):00042         imin     equ    $FC28   ;
     FC2A             (        BOSS9.inc):00043         imax     equ    $FC2A   ;
     FC2C             (        BOSS9.inc):00044         initargs equ    $FC2C   ;
     FC2E             (        BOSS9.inc):00045         argint8  equ    $FC2E   ;
     FC30             (        BOSS9.inc):00046         argint16 equ    $FC30   ;
                      (        BOSS9.inc):00047         
                      (        BOSS9.inc):00048         *
                      (        BOSS9.inc):00049         * Helper functions
                      (        BOSS9.inc):00050         *
     FC40             (        BOSS9.inc):00051         switch1  equ    $FC40   ; TOS -> N, Table, Value
     FC42             (        BOSS9.inc):00052         switch2  equ    $FC42   ; Table is a list of N value/addr pairs
                      (        BOSS9.inc):00053                                 ; Binary search table looking for value
                      (        BOSS9.inc):00054                                 ; when found return addr in X. if not
                      (        BOSS9.inc):00055                                 ; found return Table + N * (<1/2> + 2)
     FC44             (        BOSS9.inc):00056         idiv8   equ     $FC44
     FC46             (        BOSS9.inc):00057         idiv16  equ     $FC46
     FC48             (        BOSS9.inc):00058         udiv8   equ     $FC48
     FC4A             (        BOSS9.inc):00059         udiv16  equ     $FC4a
                      (        BOSS9.inc):00060         
                      (        BOSS9.inc):00061         * Misc equates
                      (        BOSS9.inc):00062         
     000A             (        BOSS9.inc):00063         newline equ     $0a
                      (        BOSS9.inc):00064                                 
                      (        BOSS9.inc):00065         
                      (Clover/simple.asm):00004             org $200
                      (Clover/simple.asm):00005         
0200 1F42             (Clover/simple.asm):00006             TFR S,Y
0202 327E             (Clover/simple.asm):00007             LEAS -2,S
0204 BD020C           (Clover/simple.asm):00008             JSR Simple_main
0207 3262             (Clover/simple.asm):00009             LEAS 2,S
0209 7EFC0E           (Clover/simple.asm):00010             JMP exit
                      (Clover/simple.asm):00011         
020C                  (Clover/simple.asm):00012         Simple_main
020C 3440             (Clover/simple.asm):00013             PSHS U
020E 1F43             (Clover/simple.asm):00014             TFR S,U
0210 327F             (Clover/simple.asm):00015             LEAS -1,S
                      (Clover/simple.asm):00016             ; //
                      (Clover/simple.asm):00017             ; //  simple.Clover
                      (Clover/simple.asm):00018             ; //  Clover
                      (Clover/simple.asm):00019             ; //
                      (Clover/simple.asm):00020             ; //  Created by Chris Marrin on 5/25/24.
                      (Clover/simple.asm):00021             ; //
                      (Clover/simple.asm):00022             ; 
                      (Clover/simple.asm):00023             ; struct Simple
                      (Clover/simple.asm):00024             ; {
                      (Clover/simple.asm):00025             ; 
                      (Clover/simple.asm):00026             ; const int8_t testIntTable[ ] = { 1, 2, 3, 7 };
                      (Clover/simple.asm):00027             ; 
                      (Clover/simple.asm):00028             ; function int16_t main()
                      (Clover/simple.asm):00029             ; {
                      (Clover/simple.asm):00030             ;     int8_t a = testIntTable[3];
                      (Clover/simple.asm):00031             ;     core.printf("a=%d\n", a);
0212 8E023A           (Clover/simple.asm):00032             LDX #Constants+0
0215 8603             (Clover/simple.asm):00033             LDA #3
0217 C601             (Clover/simple.asm):00034             LDB #1
0219 3D               (Clover/simple.asm):00035             MUL
021A 308B             (Clover/simple.asm):00036             LEAX D,X
021C A600             (Clover/simple.asm):00037             LDA 0,X
021E A75F             (Clover/simple.asm):00038             STA -1,U
                      (Clover/simple.asm):00039             ;     return 0;
0220 A65F             (Clover/simple.asm):00040             LDA -1,U
0222 1F89             (Clover/simple.asm):00041             TFR A,B
0224 4F               (Clover/simple.asm):00042             CLRA
0225 C30000           (Clover/simple.asm):00043             ADDD #0
0228 3406             (Clover/simple.asm):00044             PSHS D
022A CC023E           (Clover/simple.asm):00045             LDD #String+$0
022D 3406             (Clover/simple.asm):00046             PSHS D
022F BDFC20           (Clover/simple.asm):00047             JSR printf
                      (Clover/simple.asm):00048             ; }
0232 CC0000           (Clover/simple.asm):00049             LDD #0
0235 1F34             (Clover/simple.asm):00050             TFR U,S
0237 3540             (Clover/simple.asm):00051             PULS U
0239 39               (Clover/simple.asm):00052             RTS
                      (Clover/simple.asm):00053         
023A                  (Clover/simple.asm):00054         Constants
023A 01020307         (Clover/simple.asm):00055             FCB $01,$02,$03,$07
                      (Clover/simple.asm):00056         
023E                  (Clover/simple.asm):00057         String
023E 613D2564         (Clover/simple.asm):00058             FCC "a=%d"
0242 0A               (Clover/simple.asm):00059             FCB $0a
0243 00               (Clover/simple.asm):00060             FCB $00
                      (Clover/simple.asm):00061         
                      (Clover/simple.asm):00062         
                      (Clover/simple.asm):00063             end $200
